var zv = Object.defineProperty,
  jv = Object.defineProperties;
var $v = Object.getOwnPropertyDescriptors;
var wg = Object.getOwnPropertySymbols;
var Uv = Object.prototype.hasOwnProperty,
  qv = Object.prototype.propertyIsEnumerable;
var Sg = (e, n, o) =>
    n in e
      ? zv(e, n, { enumerable: !0, configurable: !0, writable: !0, value: o })
      : (e[n] = o),
  bg = (e, n) => {
    for (var o in n || (n = {})) Uv.call(n, o) && Sg(e, o, n[o]);
    if (wg) for (var o of wg(n)) qv.call(n, o) && Sg(e, o, n[o]);
    return e;
  },
  Mg = (e, n) => jv(e, $v(n));
var gn = (e, n, o) =>
  new Promise((t, l) => {
    var s = (m) => {
        try {
          g(o.next(m));
        } catch (y) {
          l(y);
        }
      },
      d = (m) => {
        try {
          g(o.throw(m));
        } catch (y) {
          l(y);
        }
      },
      g = (m) => (m.done ? t(m.value) : Promise.resolve(m.value).then(s, d));
    g((o = o.apply(e, n)).next());
  });
function Bt(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default")
    ? e.default
    : e;
}
var hu = { exports: {} },
  oe = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var Bg;
function Yv() {
  if (Bg) return oe;
  Bg = 1;
  var e = Symbol.for("react.element"),
    n = Symbol.for("react.portal"),
    o = Symbol.for("react.fragment"),
    t = Symbol.for("react.strict_mode"),
    l = Symbol.for("react.profiler"),
    s = Symbol.for("react.provider"),
    d = Symbol.for("react.context"),
    g = Symbol.for("react.forward_ref"),
    m = Symbol.for("react.suspense"),
    y = Symbol.for("react.memo"),
    f = Symbol.for("react.lazy"),
    v = Symbol.iterator;
  function M(S) {
    return S === null || typeof S != "object"
      ? null
      : ((S = (v && S[v]) || S["@@iterator"]),
        typeof S == "function" ? S : null);
  }
  var G = {
      isMounted: function () {
        return !1;
      },
      enqueueForceUpdate: function () {},
      enqueueReplaceState: function () {},
      enqueueSetState: function () {},
    },
    ae = Object.assign,
    Y = {};
  function U(S, W, ne) {
    (this.props = S),
      (this.context = W),
      (this.refs = Y),
      (this.updater = ne || G);
  }
  (U.prototype.isReactComponent = {}),
    (U.prototype.setState = function (S, W) {
      if (typeof S != "object" && typeof S != "function" && S != null)
        throw Error(
          "setState(...): takes an object of state variables to update or a function which returns an object of state variables."
        );
      this.updater.enqueueSetState(this, S, W, "setState");
    }),
    (U.prototype.forceUpdate = function (S) {
      this.updater.enqueueForceUpdate(this, S, "forceUpdate");
    });
  function We() {}
  We.prototype = U.prototype;
  function X(S, W, ne) {
    (this.props = S),
      (this.context = W),
      (this.refs = Y),
      (this.updater = ne || G);
  }
  var Sn = (X.prototype = new We());
  (Sn.constructor = X), ae(Sn, U.prototype), (Sn.isPureReactComponent = !0);
  var Oe = Array.isArray,
    Gn = Object.prototype.hasOwnProperty,
    Ke = { current: null },
    je = { key: !0, ref: !0, __self: !0, __source: !0 };
  function ln(S, W, ne) {
    var re,
      se = {},
      ue = null,
      ve = null;
    if (W != null)
      for (re in (W.ref !== void 0 && (ve = W.ref),
      W.key !== void 0 && (ue = "" + W.key),
      W))
        Gn.call(W, re) && !je.hasOwnProperty(re) && (se[re] = W[re]);
    var me = arguments.length - 2;
    if (me === 1) se.children = ne;
    else if (1 < me) {
      for (var Be = Array(me), Rn = 0; Rn < me; Rn++)
        Be[Rn] = arguments[Rn + 2];
      se.children = Be;
    }
    if (S && S.defaultProps)
      for (re in ((me = S.defaultProps), me))
        se[re] === void 0 && (se[re] = me[re]);
    return {
      $$typeof: e,
      type: S,
      key: ue,
      ref: ve,
      props: se,
      _owner: Ke.current,
    };
  }
  function zn(S, W) {
    return {
      $$typeof: e,
      type: S.type,
      key: W,
      ref: S.ref,
      props: S.props,
      _owner: S._owner,
    };
  }
  function te(S) {
    return typeof S == "object" && S !== null && S.$$typeof === e;
  }
  function fn(S) {
    var W = { "=": "=0", ":": "=2" };
    return (
      "$" +
      S.replace(/[=:]/g, function (ne) {
        return W[ne];
      })
    );
  }
  var bn = /\/+/g;
  function en(S, W) {
    return typeof S == "object" && S !== null && S.key != null
      ? fn("" + S.key)
      : W.toString(36);
  }
  function Mn(S, W, ne, re, se) {
    var ue = typeof S;
    (ue === "undefined" || ue === "boolean") && (S = null);
    var ve = !1;
    if (S === null) ve = !0;
    else
      switch (ue) {
        case "string":
        case "number":
          ve = !0;
          break;
        case "object":
          switch (S.$$typeof) {
            case e:
            case n:
              ve = !0;
          }
      }
    if (ve)
      return (
        (ve = S),
        (se = se(ve)),
        (S = re === "" ? "." + en(ve, 0) : re),
        Oe(se)
          ? ((ne = ""),
            S != null && (ne = S.replace(bn, "$&/") + "/"),
            Mn(se, W, ne, "", function (Rn) {
              return Rn;
            }))
          : se != null &&
            (te(se) &&
              (se = zn(
                se,
                ne +
                  (!se.key || (ve && ve.key === se.key)
                    ? ""
                    : ("" + se.key).replace(bn, "$&/") + "/") +
                  S
              )),
            W.push(se)),
        1
      );
    if (((ve = 0), (re = re === "" ? "." : re + ":"), Oe(S)))
      for (var me = 0; me < S.length; me++) {
        ue = S[me];
        var Be = re + en(ue, me);
        ve += Mn(ue, W, ne, Be, se);
      }
    else if (((Be = M(S)), typeof Be == "function"))
      for (S = Be.call(S), me = 0; !(ue = S.next()).done; )
        (ue = ue.value),
          (Be = re + en(ue, me++)),
          (ve += Mn(ue, W, ne, Be, se));
    else if (ue === "object")
      throw (
        ((W = String(S)),
        Error(
          "Objects are not valid as a React child (found: " +
            (W === "[object Object]"
              ? "object with keys {" + Object.keys(S).join(", ") + "}"
              : W) +
            "). If you meant to render a collection of children, use an array instead."
        ))
      );
    return ve;
  }
  function sn(S, W, ne) {
    if (S == null) return S;
    var re = [],
      se = 0;
    return (
      Mn(S, re, "", "", function (ue) {
        return W.call(ne, ue, se++);
      }),
      re
    );
  }
  function nn(S) {
    if (S._status === -1) {
      var W = S._result;
      (W = W()),
        W.then(
          function (ne) {
            (S._status === 0 || S._status === -1) &&
              ((S._status = 1), (S._result = ne));
          },
          function (ne) {
            (S._status === 0 || S._status === -1) &&
              ((S._status = 2), (S._result = ne));
          }
        ),
        S._status === -1 && ((S._status = 0), (S._result = W));
    }
    if (S._status === 1) return S._result.default;
    throw S._result;
  }
  var Ne = { current: null },
    D = { transition: null },
    $ = {
      ReactCurrentDispatcher: Ne,
      ReactCurrentBatchConfig: D,
      ReactCurrentOwner: Ke,
    };
  function V() {
    throw Error("act(...) is not supported in production builds of React.");
  }
  return (
    (oe.Children = {
      map: sn,
      forEach: function (S, W, ne) {
        sn(
          S,
          function () {
            W.apply(this, arguments);
          },
          ne
        );
      },
      count: function (S) {
        var W = 0;
        return (
          sn(S, function () {
            W++;
          }),
          W
        );
      },
      toArray: function (S) {
        return (
          sn(S, function (W) {
            return W;
          }) || []
        );
      },
      only: function (S) {
        if (!te(S))
          throw Error(
            "React.Children.only expected to receive a single React element child."
          );
        return S;
      },
    }),
    (oe.Component = U),
    (oe.Fragment = o),
    (oe.Profiler = l),
    (oe.PureComponent = X),
    (oe.StrictMode = t),
    (oe.Suspense = m),
    (oe.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = $),
    (oe.act = V),
    (oe.cloneElement = function (S, W, ne) {
      if (S == null)
        throw Error(
          "React.cloneElement(...): The argument must be a React element, but you passed " +
            S +
            "."
        );
      var re = ae({}, S.props),
        se = S.key,
        ue = S.ref,
        ve = S._owner;
      if (W != null) {
        if (
          (W.ref !== void 0 && ((ue = W.ref), (ve = Ke.current)),
          W.key !== void 0 && (se = "" + W.key),
          S.type && S.type.defaultProps)
        )
          var me = S.type.defaultProps;
        for (Be in W)
          Gn.call(W, Be) &&
            !je.hasOwnProperty(Be) &&
            (re[Be] = W[Be] === void 0 && me !== void 0 ? me[Be] : W[Be]);
      }
      var Be = arguments.length - 2;
      if (Be === 1) re.children = ne;
      else if (1 < Be) {
        me = Array(Be);
        for (var Rn = 0; Rn < Be; Rn++) me[Rn] = arguments[Rn + 2];
        re.children = me;
      }
      return {
        $$typeof: e,
        type: S.type,
        key: se,
        ref: ue,
        props: re,
        _owner: ve,
      };
    }),
    (oe.createContext = function (S) {
      return (
        (S = {
          $$typeof: d,
          _currentValue: S,
          _currentValue2: S,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null,
        }),
        (S.Provider = { $$typeof: s, _context: S }),
        (S.Consumer = S)
      );
    }),
    (oe.createElement = ln),
    (oe.createFactory = function (S) {
      var W = ln.bind(null, S);
      return (W.type = S), W;
    }),
    (oe.createRef = function () {
      return { current: null };
    }),
    (oe.forwardRef = function (S) {
      return { $$typeof: g, render: S };
    }),
    (oe.isValidElement = te),
    (oe.lazy = function (S) {
      return { $$typeof: f, _payload: { _status: -1, _result: S }, _init: nn };
    }),
    (oe.memo = function (S, W) {
      return { $$typeof: y, type: S, compare: W === void 0 ? null : W };
    }),
    (oe.startTransition = function (S) {
      var W = D.transition;
      D.transition = {};
      try {
        S();
      } finally {
        D.transition = W;
      }
    }),
    (oe.unstable_act = V),
    (oe.useCallback = function (S, W) {
      return Ne.current.useCallback(S, W);
    }),
    (oe.useContext = function (S) {
      return Ne.current.useContext(S);
    }),
    (oe.useDebugValue = function () {}),
    (oe.useDeferredValue = function (S) {
      return Ne.current.useDeferredValue(S);
    }),
    (oe.useEffect = function (S, W) {
      return Ne.current.useEffect(S, W);
    }),
    (oe.useId = function () {
      return Ne.current.useId();
    }),
    (oe.useImperativeHandle = function (S, W, ne) {
      return Ne.current.useImperativeHandle(S, W, ne);
    }),
    (oe.useInsertionEffect = function (S, W) {
      return Ne.current.useInsertionEffect(S, W);
    }),
    (oe.useLayoutEffect = function (S, W) {
      return Ne.current.useLayoutEffect(S, W);
    }),
    (oe.useMemo = function (S, W) {
      return Ne.current.useMemo(S, W);
    }),
    (oe.useReducer = function (S, W, ne) {
      return Ne.current.useReducer(S, W, ne);
    }),
    (oe.useRef = function (S) {
      return Ne.current.useRef(S);
    }),
    (oe.useState = function (S) {
      return Ne.current.useState(S);
    }),
    (oe.useSyncExternalStore = function (S, W, ne) {
      return Ne.current.useSyncExternalStore(S, W, ne);
    }),
    (oe.useTransition = function () {
      return Ne.current.useTransition();
    }),
    (oe.version = "18.3.1"),
    oe
  );
}
var Pg;
function jp() {
  return Pg || ((Pg = 1), (hu.exports = Yv())), hu.exports;
}
var To = jp();
const x = Bt(To),
  Qv = 16,
  Hg = 8,
  Zv = `(?=((\\d[-\\s]*[^\\s\\d-]{0,1}[-\\s]*){${Qv}}))\\d`,
  Xv = 4,
  eC = new RegExp(
    "(?<![\\w-])((?!666|000|9\\d{2})\\d{3}[- ]*(?!00)\\d{2}[- ]*(?!0{4})\\d{4})(?![\\w-])"
  ),
  nC = 20,
  aC = `^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{${nC},}$`,
  oC = new RegExp(aC),
  rC = 200,
  $p = 500;
var gu, Lg;
function tC() {
  return (
    Lg ||
      ((Lg = 1),
      (gu = {
        validate: function (e) {
          var n,
            o,
            t = String(e).replace(/[\s]/g, ""),
            l = t.length,
            s = !1,
            d = 0;
          if (l === 0) return !0;
          if (!/^[0-9]+$/.test(t)) return !1;
          for (var g = l; 0 < g; g--) {
            if (((n = parseInt(t.charAt(g - 1))), s)) {
              switch ((o = 2 * n)) {
                case 10:
                  o = 1;
                  break;
                case 12:
                  o = 3;
                  break;
                case 14:
                  o = 5;
                  break;
                case 16:
                  o = 7;
                  break;
                case 18:
                  o = 9;
                  break;
                default:
                  o = o;
              }
              d += o;
            } else d += n;
            s = !s;
          }
          return d !== 0 && d % 10 == 0;
        },
      })),
    gu
  );
}
var lC = tC();
const iC = Bt(lC);
let sC = { one: {}, two: {}, three: {}, four: {} },
  uC = { one: {}, two: {}, three: {} },
  dC = {},
  cC = [];
const Vu = { methods: sC, model: uC, compute: dC, hooks: cC },
  hC = (e) => Object.prototype.toString.call(e) === "[object Array]",
  gC = {
    compute: function (e) {
      const { world: n } = this,
        o = n.compute;
      return (
        typeof e == "string" && o.hasOwnProperty(e)
          ? o[e](this)
          : hC(e)
          ? e.forEach((t) => {
              n.compute.hasOwnProperty(t)
                ? o[t](this)
                : console.warn("no compute:", e);
            })
          : typeof e == "function"
          ? e(this)
          : console.warn("no compute:", e),
        this
      );
    },
  },
  mC = function (e) {
    return (
      this.fullPointer.forEach((o, t) => {
        let l = this.update([o]);
        e(l, t);
      }),
      this
    );
  },
  pC = function (e, n) {
    let t = this.fullPointer.map((s, d) => {
      let g = this.update([s]),
        m = e(g, d);
      return m === void 0 ? this.none() : m;
    });
    if (t.length === 0) return n || this.update([]);
    if (
      t[0] !== void 0 &&
      (typeof t[0] == "string" ||
        (typeof t[0] == "object" && (t[0] === null || !t[0].isView)))
    )
      return t;
    let l = [];
    return (
      t.forEach((s) => {
        l = l.concat(s.fullPointer);
      }),
      this.toView(l)
    );
  },
  yC = function (e) {
    let n = this.fullPointer;
    return (
      (n = n.filter((t, l) => {
        let s = this.update([t]);
        return e(s, l);
      })),
      this.update(n)
    );
  },
  fC = function (e) {
    let o = this.fullPointer.find((t, l) => {
      let s = this.update([t]);
      return e(s, l);
    });
    return this.update([o]);
  },
  vC = function (e) {
    return this.fullPointer.some((o, t) => {
      let l = this.update([o]);
      return e(l, t);
    });
  },
  CC = function (e = 1) {
    let n = this.fullPointer,
      o = Math.floor(Math.random() * n.length);
    return (
      o + e > this.length && ((o = this.length - e), (o = o < 0 ? 0 : o)),
      (n = n.slice(o, o + e)),
      this.update(n)
    );
  },
  kC = { forEach: mC, map: pC, filter: yC, find: fC, some: vC, random: CC },
  ma = {
    termList: function () {
      return this.methods.one.termList(this.docs);
    },
    terms: function (e) {
      let n = this.match(".");
      return typeof e == "number" ? n.eq(e) : n;
    },
    groups: function (e) {
      if (e || e === 0) return this.update(this._groups[e] || []);
      let n = {};
      return (
        Object.keys(this._groups).forEach((o) => {
          n[o] = this.update(this._groups[o]);
        }),
        n
      );
    },
    eq: function (e) {
      let n = this.pointer;
      return (
        n || (n = this.docs.map((o, t) => [t])),
        n[e] ? this.update([n[e]]) : this.none()
      );
    },
    first: function () {
      return this.eq(0);
    },
    last: function () {
      let e = this.fullPointer.length - 1;
      return this.eq(e);
    },
    firstTerms: function () {
      return this.match("^.");
    },
    lastTerms: function () {
      return this.match(".$");
    },
    slice: function (e, n) {
      let o = this.pointer || this.docs.map((t, l) => [l]);
      return (o = o.slice(e, n)), this.update(o);
    },
    all: function () {
      return this.update().toView();
    },
    fullSentences: function () {
      let e = this.fullPointer.map((n) => [n[0]]);
      return this.update(e).toView();
    },
    none: function () {
      return this.update([]);
    },
    isDoc: function (e) {
      if (!e || !e.isView) return !1;
      let n = this.fullPointer,
        o = e.fullPointer;
      return !n.length === o.length
        ? !1
        : n.every((t, l) =>
            o[l] ? t[0] === o[l][0] && t[1] === o[l][1] && t[2] === o[l][2] : !1
          );
    },
    wordCount: function () {
      return this.docs.reduce(
        (e, n) => ((e += n.filter((o) => o.text !== "").length), e),
        0
      );
    },
    isFull: function () {
      let e = this.pointer;
      if (!e) return !0;
      if (e.length === 0 || e[0][0] !== 0) return !1;
      let n = 0,
        o = 0;
      return (
        this.document.forEach((t) => (n += t.length)),
        this.docs.forEach((t) => (o += t.length)),
        n === o
      );
    },
    getNth: function (e) {
      return typeof e == "number"
        ? this.eq(e)
        : typeof e == "string"
        ? this.if(e)
        : this;
    },
  };
ma.group = ma.groups;
ma.fullSentence = ma.fullSentences;
ma.sentence = ma.fullSentences;
ma.lastTerm = ma.lastTerms;
ma.firstTerm = ma.firstTerms;
const Iu = Object.assign({}, ma, gC, kC);
Iu.get = Iu.eq;
class fo {
  constructor(n, o, t = {}) {
    [
      ["document", n],
      ["world", Vu],
      ["_groups", t],
      ["_cache", null],
      ["viewType", "View"],
    ].forEach((s) => {
      Object.defineProperty(this, s[0], { value: s[1], writable: !0 });
    }),
      (this.ptrs = o);
  }
  get docs() {
    let n = this.document;
    return (
      this.ptrs && (n = Vu.methods.one.getDoc(this.ptrs, this.document)), n
    );
  }
  get pointer() {
    return this.ptrs;
  }
  get methods() {
    return this.world.methods;
  }
  get model() {
    return this.world.model;
  }
  get hooks() {
    return this.world.hooks;
  }
  get isView() {
    return !0;
  }
  get found() {
    return this.docs.length > 0;
  }
  get length() {
    return this.docs.length;
  }
  get fullPointer() {
    let { docs: n, ptrs: o, document: t } = this;
    return (o || n.map((s, d) => [d])).map((s) => {
      let [d, g, m, y, f] = s;
      return (
        (g = g || 0),
        (m = m || (t[d] || []).length),
        t[d] &&
          t[d][g] &&
          ((y = y || t[d][g].id), t[d][m - 1] && (f = f || t[d][m - 1].id)),
        [d, g, m, y, f]
      );
    });
  }
  update(n) {
    let o = new fo(this.document, n);
    if (this._cache && n && n.length > 0) {
      let t = [];
      n.forEach((l, s) => {
        let [d, g, m] = l;
        l.length === 1
          ? (t[s] = this._cache[d])
          : g === 0 && this.document[d].length === m && (t[s] = this._cache[d]);
      }),
        t.length > 0 && (o._cache = t);
    }
    return (o.world = this.world), o;
  }
  toView(n) {
    return new fo(this.document, n || this.pointer);
  }
  fromText(n) {
    const { methods: o } = this;
    let t = o.one.tokenize.fromString(n, this.world),
      l = new fo(t);
    return (
      (l.world = this.world),
      l.compute(["normal", "freeze", "lexicon"]),
      this.world.compute.preTagger && l.compute("preTagger"),
      l.compute("unfreeze"),
      l
    );
  }
  clone() {
    let n = this.document.slice(0);
    n = n.map((t) =>
      t.map((l) => ((l = Object.assign({}, l)), (l.tags = new Set(l.tags)), l))
    );
    let o = this.update(this.pointer);
    return (o.document = n), (o._cache = this._cache), o;
  }
}
Object.assign(fo.prototype, Iu);
const wC = "14.14.3",
  Wg = function (e) {
    return e && typeof e == "object" && !Array.isArray(e);
  };
function Up(e, n) {
  if (Wg(n))
    for (const o in n)
      Wg(n[o])
        ? (e[o] || Object.assign(e, { [o]: {} }), Up(e[o], n[o]))
        : Object.assign(e, { [o]: n[o] });
  return e;
}
function SC(e, n) {
  for (const o in n) (e[o] = e[o] || {}), Object.assign(e[o], n[o]);
  return e;
}
const bC = function (e, n) {
    let o = e.two.models || {};
    Object.keys(n).forEach((t) => {
      n[t].pastTense &&
        (o.toPast && (o.toPast.ex[t] = n[t].pastTense),
        o.fromPast && (o.fromPast.ex[n[t].pastTense] = t)),
        n[t].presentTense &&
          (o.toPresent && (o.toPresent.ex[t] = n[t].presentTense),
          o.fromPresent && (o.fromPresent.ex[n[t].presentTense] = t)),
        n[t].gerund &&
          (o.toGerund && (o.toGerund.ex[t] = n[t].gerund),
          o.fromGerund && (o.fromGerund.ex[n[t].gerund] = t)),
        n[t].comparative &&
          (o.toComparative && (o.toComparative.ex[t] = n[t].comparative),
          o.fromComparative && (o.fromComparative.ex[n[t].comparative] = t)),
        n[t].superlative &&
          (o.toSuperlative && (o.toSuperlative.ex[t] = n[t].superlative),
          o.fromSuperlative && (o.fromSuperlative.ex[n[t].superlative] = t));
    });
  },
  MC = function (e, n, o, t) {
    const { methods: l, model: s, compute: d, hooks: g } = n;
    e.methods && SC(l, e.methods),
      e.model && Up(s, e.model),
      e.irregulars && bC(s, e.irregulars),
      e.compute && Object.assign(d, e.compute),
      g && (n.hooks = g.concat(e.hooks || [])),
      e.api && e.api(o),
      e.lib && Object.keys(e.lib).forEach((m) => (t[m] = e.lib[m])),
      e.tags && t.addTags(e.tags),
      e.words && t.addWords(e.words),
      e.frozen && t.addWords(e.frozen, !0),
      e.mutate && e.mutate(n, t);
  };
var Ag = {};
const BC = function (e) {
    const n = typeof process == "undefined" || !Ag ? self.env || {} : Ag;
    return (
      (n.DEBUG_TAGS = e === "tagger" || e === !0 ? !0 : ""),
      (n.DEBUG_MATCH = e === "match" || e === !0 ? !0 : ""),
      (n.DEBUG_CHUNKS = e === "chunker" || e === !0 ? !0 : ""),
      this
    );
  },
  PC = (e) => Object.prototype.toString.call(e) === "[object Object]",
  _u = function (e) {
    return Object.prototype.toString.call(e) === "[object Array]";
  },
  HC = function (e) {
    return e.map((n) =>
      n.terms.map((o) => (_u(o.tags) && (o.tags = new Set(o.tags)), o))
    );
  },
  LC = function (e) {
    return e.map((n) =>
      n.map((o) => ({
        text: o,
        normal: o,
        pre: "",
        post: " ",
        tags: new Set(),
      }))
    );
  },
  qp = function (e, n, o) {
    const { methods: t } = o;
    let l = new n([]);
    if (((l.world = o), typeof e == "number" && (e = String(e)), !e)) return l;
    if (typeof e == "string") {
      let s = t.one.tokenize.fromString(e, o);
      return new n(s);
    }
    if (PC(e) && e.isView) return new n(e.document, e.ptrs);
    if (_u(e)) {
      if (_u(e[0])) {
        let d = LC(e);
        return new n(d);
      }
      let s = HC(e);
      return new n(s);
    }
    return l;
  };
let hi = Object.assign({}, Vu);
const Q = function (e, n) {
  n && Q.addWords(n);
  let o = qp(e, fo, hi);
  return e && o.compute(hi.hooks), o;
};
Object.defineProperty(Q, "_world", { value: hi, writable: !0 });
Q.tokenize = function (e, n) {
  const { compute: o } = this._world;
  n && Q.addWords(n);
  let t = qp(e, fo, hi);
  return (
    o.contractions && t.compute(["alias", "normal", "machine", "contractions"]),
    t
  );
};
Q.plugin = function (e) {
  return MC(e, this._world, fo, this), this;
};
Q.extend = Q.plugin;
Q.world = function () {
  return this._world;
};
Q.model = function () {
  return this._world.model;
};
Q.methods = function () {
  return this._world.methods;
};
Q.hooks = function () {
  return this._world.hooks;
};
Q.verbose = BC;
Q.version = wC;
const WC = function (e) {
    return e.map((o) => {
      let t = new Set();
      return (
        o.forEach((l) => {
          l.normal !== "" && t.add(l.normal),
            l.switch && t.add(`%${l.switch}%`),
            l.implicit && t.add(l.implicit),
            l.machine && t.add(l.machine),
            l.root && t.add(l.root),
            l.alias && l.alias.forEach((d) => t.add(d));
          let s = Array.from(l.tags);
          for (let d = 0; d < s.length; d += 1) t.add("#" + s[d]);
        }),
        t
      );
    });
  },
  AC = { one: { cacheDoc: WC } },
  GC = {
    cache: function () {
      return (this._cache = this.methods.one.cacheDoc(this.document)), this;
    },
    uncache: function () {
      return (this._cache = null), this;
    },
  },
  RC = function (e) {
    Object.assign(e.prototype, GC);
  },
  NC = {
    cache: function (e) {
      e._cache = e.methods.one.cacheDoc(e.document);
    },
  },
  EC = { api: RC, compute: NC, methods: AC },
  FC = {
    toLowerCase: function () {
      return (
        this.termList().forEach((e) => {
          e.text = e.text.toLowerCase();
        }),
        this
      );
    },
    toUpperCase: function () {
      return (
        this.termList().forEach((e) => {
          e.text = e.text.toUpperCase();
        }),
        this
      );
    },
    toTitleCase: function () {
      return (
        this.termList().forEach((e) => {
          e.text = e.text.replace(/^ *[a-z\u00C0-\u00FF]/, (n) =>
            n.toUpperCase()
          );
        }),
        this
      );
    },
    toCamelCase: function () {
      return (
        this.docs.forEach((e) => {
          e.forEach((n, o) => {
            o !== 0 &&
              (n.text = n.text.replace(/^ *[a-z\u00C0-\u00FF]/, (t) =>
                t.toUpperCase()
              )),
              o !== e.length - 1 && (n.post = "");
          });
        }),
        this
      );
    },
  },
  Gg = (e) =>
    new RegExp("^\\p{Lu}[\\p{Ll}'’]", "u").test(e) ||
    new RegExp("^\\p{Lu}$", "u").test(e),
  DC = (e) => e.replace(new RegExp("^\\p{Ll}", "u"), (n) => n.toUpperCase()),
  TC = (e) => e.replace(new RegExp("^\\p{Lu}", "u"), (n) => n.toLowerCase()),
  Yp = (e, n, o) => {
    if ((o.forEach((t) => (t.dirty = !0)), e)) {
      let t = [n, 0].concat(o);
      Array.prototype.splice.apply(e, t);
    }
    return e;
  },
  Br = function (e) {
    const n = / $/,
      o = /[-–—]/;
    let t = e[e.length - 1];
    t && !n.test(t.post) && !o.test(t.post) && (t.post += " ");
  },
  Rg = (e, n, o) => {
    const t = /[-.?!,;:)–—'"]/g;
    let l = e[n - 1];
    if (!l) return;
    let s = l.post;
    if (t.test(s)) {
      let d = s.match(t).join(""),
        g = o[o.length - 1];
      (g.post = d + g.post), (l.post = l.post.replace(t, ""));
    }
  },
  OC = function (e, n, o) {
    let t = e[n];
    if (n !== 0 || !Gg(t.text)) return;
    o[0].text = DC(o[0].text);
    let l = e[n];
    l.tags.has("ProperNoun") ||
      l.tags.has("Acronym") ||
      (Gg(l.text) && l.text.length > 1 && (l.text = TC(l.text)));
  },
  xC = function (e, n, o, t) {
    let [l, s, d] = n;
    s === 0 || d === t[l].length ? Br(o) : (Br(o), Br([e[n[1]]])),
      OC(e, s, o),
      Yp(e, s, o);
  },
  VC = function (e, n, o, t) {
    let [l, , s] = n,
      d = (t[l] || []).length;
    s < d
      ? (Rg(e, s, o), Br(o))
      : d === s &&
        (Br(e), Rg(e, s, o), t[l + 1] && (o[o.length - 1].post += " ")),
      Yp(e, n[2], o),
      (n[4] = o[o.length - 1].id);
  };
let mt = 0;
const Ng = (e) => (
    (e = e.length < 3 ? "0" + e : e), e.length < 3 ? "0" + e : e
  ),
  Qp = function (e) {
    let [n, o] = e.index || [0, 0];
    (mt += 1),
      (mt = mt > 46655 ? 0 : mt),
      (n = n > 46655 ? 0 : n),
      (o = o > 1294 ? 0 : o);
    let t = Ng(mt.toString(36));
    t += Ng(n.toString(36));
    let l = o.toString(36);
    (l = l.length < 2 ? "0" + l : l), (t += l);
    let s = parseInt(Math.random() * 36, 10);
    return (t += s.toString(36)), e.normal + "|" + t.toUpperCase();
  },
  Eg = function (e) {
    e.has("@hasContraction") &&
      typeof e.contractions == "function" &&
      e.grow("@hasContraction").contractions().expand();
  },
  Fg = (e) => Object.prototype.toString.call(e) === "[object Array]",
  IC = function (e) {
    return (e = e.map((n) => ((n.id = Qp(n)), n))), e;
  },
  _C = function (e, n) {
    const { methods: o } = n;
    return typeof e == "string"
      ? o.one.tokenize.fromString(e, n)[0]
      : typeof e == "object" && e.isView
      ? e.clone().docs[0] || []
      : Fg(e)
      ? Fg(e[0])
        ? e[0]
        : e
      : [];
  },
  Dg = function (e, n, o) {
    const { document: t, world: l } = n;
    n.uncache();
    let s = n.fullPointer,
      d = n.fullPointer;
    n.forEach((m, y) => {
      let f = m.fullPointer[0],
        [v] = f,
        M = t[v],
        G = _C(e, l);
      G.length !== 0 &&
        ((G = IC(G)),
        o
          ? (Eg(n.update([f]).firstTerm()), xC(M, f, G, t))
          : (Eg(n.update([f]).lastTerm()), VC(M, f, G, t)),
        t[v] && t[v][f[1]] && (f[3] = t[v][f[1]].id),
        (d[y] = f),
        (f[2] += G.length),
        (s[y] = f));
    });
    let g = n.toView(s);
    return (
      (n.ptrs = d),
      g.compute(["id", "index", "freeze", "lexicon"]),
      g.world.compute.preTagger && g.compute("preTagger"),
      g.compute("unfreeze"),
      g
    );
  },
  Io = {
    insertAfter: function (e) {
      return Dg(e, this, !1);
    },
    insertBefore: function (e) {
      return Dg(e, this, !0);
    },
  };
Io.append = Io.insertAfter;
Io.prepend = Io.insertBefore;
Io.insert = Io.insertAfter;
const KC = /\$[0-9a-z]+/g,
  dd = {},
  JC = (e) =>
    new RegExp("^\\p{Lu}[\\p{Ll}'’]", "u").test(e) ||
    new RegExp("^\\p{Lu}$", "u").test(e),
  zC = (e) => e.replace(new RegExp("^\\p{Ll}", "u"), (n) => n.toUpperCase()),
  jC = (e) => e.replace(new RegExp("^\\p{Lu}", "u"), (n) => n.toLowerCase()),
  $C = function (e, n, o) {
    return (
      e.forEach((t) => {
        let l = n(t);
        t.replaceWith(l, o);
      }),
      e
    );
  },
  UC = function (e, n) {
    if (typeof e != "string") return e;
    let o = n.groups();
    return (
      (e = e.replace(KC, (t) => {
        let l = t.replace(/\$/, "");
        return o.hasOwnProperty(l) ? o[l].text() : t;
      })),
      e
    );
  };
dd.replaceWith = function (e, n = {}) {
  let o = this.fullPointer,
    t = this;
  if ((this.uncache(), typeof e == "function")) return $C(t, e, n);
  let l = t.docs[0];
  if (!l) return t;
  let s = n.possessives && l[l.length - 1].tags.has("Possessive"),
    d = n.case && JC(l[0].text);
  e = UC(e, t);
  let g = this.update(o);
  o = o.map((M) => M.slice(0, 3));
  let m = (g.docs[0] || []).map((M) => Array.from(M.tags)),
    y = g.docs[0][0].pre,
    f = g.docs[0][g.docs[0].length - 1].post;
  if (
    (typeof e == "string" && (e = this.fromText(e).compute("id")),
    t.insertAfter(e),
    g.has("@hasContraction") &&
      t.contractions &&
      t.grow("@hasContraction+").contractions().expand(),
    t.delete(g),
    s)
  ) {
    let M = t.docs[0],
      G = M[M.length - 1];
    G.tags.has("Possessive") ||
      ((G.text += "'s"), (G.normal += "'s"), G.tags.add("Possessive"));
  }
  if ((y && t.docs[0] && (t.docs[0][0].pre = y), f && t.docs[0])) {
    let M = t.docs[0][t.docs[0].length - 1];
    M.post.trim() || (M.post = f);
  }
  let v = t.toView(o).compute(["index", "freeze", "lexicon"]);
  if (
    (v.world.compute.preTagger && v.compute("preTagger"),
    v.compute("unfreeze"),
    n.tags &&
      v.terms().forEach((M, G) => {
        M.tagSafe(m[G]);
      }),
    !v.docs[0] || !v.docs[0][0])
  )
    return v;
  if (n.case) {
    let M = d ? zC : jC;
    v.docs[0][0].text = M(v.docs[0][0].text);
  }
  return v;
};
dd.replace = function (e, n, o) {
  if (e && !n) return this.replaceWith(e, o);
  let t = this.match(e);
  return t.found ? (this.soften(), t.replaceWith(n, o)) : this;
};
const qC = function (e, n) {
    let o = e.length - 1,
      t = e[o],
      l = e[o - n];
    l &&
      t &&
      ((l.post += t.post),
      (l.post = l.post.replace(/ +([.?!,;:])/, "$1")),
      (l.post = l.post.replace(/[,;:]+([.?!])/, "$1")));
  },
  YC = function (e, n) {
    n.forEach((o) => {
      let [t, l, s] = o,
        d = s - l;
      e[t] && (s === e[t].length && s > 1 && qC(e[t], d), e[t].splice(l, d));
    });
    for (let o = e.length - 1; o >= 0; o -= 1)
      if (e[o].length === 0 && (e.splice(o, 1), o === e.length && e[o - 1])) {
        let t = e[o - 1],
          l = t[t.length - 1];
        l && (l.post = l.post.trimEnd());
      }
    return e;
  },
  QC = function (e, n) {
    return (
      (e = e.map((o) => {
        let [t] = o;
        return (
          n[t] &&
            n[t].forEach((l) => {
              let s = l[2] - l[1];
              o[1] <= l[1] && o[2] >= l[2] && (o[2] -= s);
            }),
          o
        );
      })),
      e.forEach((o, t) => {
        if (o[1] === 0 && o[2] == 0)
          for (let l = t + 1; l < e.length; l += 1)
            (e[l][0] -= 1), e[l][0] < 0 && (e[l][0] = 0);
      }),
      (e = e.filter((o) => o[2] - o[1] > 0)),
      (e = e.map((o) => ((o[3] = null), (o[4] = null), o))),
      e
    );
  },
  Ku = {
    remove: function (e) {
      const { indexN: n } = this.methods.one.pointer;
      this.uncache();
      let o = this.all(),
        t = this;
      e && ((o = this), (t = this.match(e)));
      let l = !o.ptrs;
      t.has("@hasContraction") &&
        t.contractions &&
        t.grow("@hasContraction").contractions().expand();
      let s = o.fullPointer,
        d = t.fullPointer.reverse(),
        g = YC(this.document, d),
        m = n(d);
      return (
        (s = QC(s, m)),
        (o.ptrs = s),
        (o.document = g),
        o.compute("index"),
        l && (o.ptrs = void 0),
        e ? o.toView(s) : ((this.ptrs = []), o.none())
      );
    },
  };
Ku.delete = Ku.remove;
const wt = {
  pre: function (e, n) {
    return e === void 0 && this.found
      ? this.docs[0][0].pre
      : (this.docs.forEach((o) => {
          let t = o[0];
          n === !0 ? (t.pre += e) : (t.pre = e);
        }),
        this);
  },
  post: function (e, n) {
    if (e === void 0) {
      let o = this.docs[this.docs.length - 1];
      return o[o.length - 1].post;
    }
    return (
      this.docs.forEach((o) => {
        let t = o[o.length - 1];
        n === !0 ? (t.post += e) : (t.post = e);
      }),
      this
    );
  },
  trim: function () {
    if (!this.found) return this;
    let e = this.docs,
      n = e[0][0];
    n.pre = n.pre.trimStart();
    let o = e[e.length - 1],
      t = o[o.length - 1];
    return (t.post = t.post.trimEnd()), this;
  },
  hyphenate: function () {
    return (
      this.docs.forEach((e) => {
        e.forEach((n, o) => {
          o !== 0 && (n.pre = ""), e[o + 1] && (n.post = "-");
        });
      }),
      this
    );
  },
  dehyphenate: function () {
    const e = /[-–—]/;
    return (
      this.docs.forEach((n) => {
        n.forEach((o) => {
          e.test(o.post) && (o.post = " ");
        });
      }),
      this
    );
  },
  toQuotations: function (e, n) {
    return (
      (e = e || '"'),
      (n = n || '"'),
      this.docs.forEach((o) => {
        o[0].pre = e + o[0].pre;
        let t = o[o.length - 1];
        t.post = n + t.post;
      }),
      this
    );
  },
  toParentheses: function (e, n) {
    return (
      (e = e || "("),
      (n = n || ")"),
      this.docs.forEach((o) => {
        o[0].pre = e + o[0].pre;
        let t = o[o.length - 1];
        t.post = n + t.post;
      }),
      this
    );
  },
};
wt.deHyphenate = wt.dehyphenate;
wt.toQuotation = wt.toQuotations;
const ZC = (e, n) => (e.normal < n.normal ? -1 : e.normal > n.normal ? 1 : 0),
  XC = (e, n) => {
    let o = e.normal.trim().length,
      t = n.normal.trim().length;
    return o < t ? 1 : o > t ? -1 : 0;
  },
  ek = (e, n) => (e.words < n.words ? 1 : e.words > n.words ? -1 : 0),
  nk = (e, n) => (e[0] < n[0] ? 1 : e[0] > n[0] ? -1 : e[1] > n[1] ? 1 : -1),
  ak = function (e) {
    let n = {};
    return (
      e.forEach((o) => {
        (n[o.normal] = n[o.normal] || 0), (n[o.normal] += 1);
      }),
      e.sort((o, t) => {
        let l = n[o.normal],
          s = n[t.normal];
        return l < s ? 1 : l > s ? -1 : 0;
      }),
      e
    );
  },
  mu = { alpha: ZC, length: XC, wordCount: ek, sequential: nk, byFreq: ak },
  ok = new Set([
    "index",
    "sequence",
    "seq",
    "sequential",
    "chron",
    "chronological",
  ]),
  rk = new Set(["freq", "frequency", "topk", "repeats"]),
  tk = new Set(["alpha", "alphabetical"]),
  lk = function (e, n) {
    let o = e.fullPointer;
    return (
      (o = o.sort(
        (t, l) => ((t = e.update([t])), (l = e.update([l])), n(t, l))
      )),
      (e.ptrs = o),
      e
    );
  },
  ik = function (e) {
    let { docs: n, pointer: o } = this;
    if ((this.uncache(), typeof e == "function")) return lk(this, e);
    e = e || "alpha";
    let t = o || n.map((s, d) => [d]),
      l = n.map((s, d) => ({
        index: d,
        words: s.length,
        normal: s.map((g) => g.machine || g.normal || "").join(" "),
        pointer: t[d],
      }));
    return (
      ok.has(e) && (e = "sequential"),
      tk.has(e) && (e = "alpha"),
      rk.has(e)
        ? ((l = mu.byFreq(l)), this.update(l.map((s) => s.pointer)))
        : typeof mu[e] == "function"
        ? ((l = l.sort(mu[e])), this.update(l.map((s) => s.pointer)))
        : this
    );
  },
  sk = function () {
    let e = this.pointer || this.docs.map((n, o) => [o]);
    return (
      (e = [].concat(e)),
      (e = e.reverse()),
      this._cache && (this._cache = this._cache.reverse()),
      this.update(e)
    );
  },
  uk = function () {
    let e = new Set();
    return this.filter((o) => {
      let t = o.text("machine");
      return e.has(t) ? !1 : (e.add(t), !0);
    });
  },
  dk = { unique: uk, reverse: sk, sort: ik },
  ck = (e) => Object.prototype.toString.call(e) === "[object Array]",
  Zp = function (e, n) {
    if (e.length > 0) {
      let o = e[e.length - 1],
        t = o[o.length - 1];
      / /.test(t.post) === !1 && (t.post += " ");
    }
    return (e = e.concat(n)), e;
  },
  hk = function (e, n) {
    if (e.document === n.document) {
      let t = e.fullPointer.concat(n.fullPointer);
      return e.toView(t).compute("index");
    }
    return (
      n.fullPointer.forEach((t) => {
        t[0] += e.document.length;
      }),
      (e.document = Zp(e.document, n.docs)),
      e.all()
    );
  },
  gk = {
    concat: function (e) {
      if (typeof e == "string") {
        let n = this.fromText(e);
        if (!this.found || !this.ptrs)
          this.document = this.document.concat(n.document);
        else {
          let o = this.fullPointer,
            t = o[o.length - 1][0];
          this.document.splice(t, 0, ...n.document);
        }
        return this.all().compute("index");
      }
      if (typeof e == "object" && e.isView) return hk(this, e);
      if (ck(e)) {
        let n = Zp(this.document, e);
        return (this.document = n), this.all();
      }
      return this;
    },
  },
  mk = function () {
    return (this.ptrs = this.fullPointer), this;
  },
  pk = function () {
    let e = this.ptrs;
    return !e || e.length < 1
      ? this
      : ((e = e.map((n) => n.slice(0, 3))), (this.ptrs = e), this);
  },
  yk = { harden: mk, soften: pk },
  fk = Object.assign({}, FC, Io, dd, Ku, wt, dk, gk, yk),
  vk = function (e) {
    Object.assign(e.prototype, fk);
  },
  Ck = {
    id: function (e) {
      let n = e.docs;
      for (let o = 0; o < n.length; o += 1)
        for (let t = 0; t < n[o].length; t += 1) {
          let l = n[o][t];
          l.id = l.id || Qp(l);
        }
    },
  },
  kk = { api: vk, compute: Ck },
  wk = [
    { word: "@", out: ["at"] },
    { word: "arent", out: ["are", "not"] },
    { word: "alot", out: ["a", "lot"] },
    { word: "brb", out: ["be", "right", "back"] },
    { word: "cannot", out: ["can", "not"] },
    { word: "dun", out: ["do", "not"] },
    { word: "can't", out: ["can", "not"] },
    { word: "shan't", out: ["should", "not"] },
    { word: "won't", out: ["will", "not"] },
    { word: "that's", out: ["that", "is"] },
    { word: "what's", out: ["what", "is"] },
    { word: "let's", out: ["let", "us"] },
    { word: "dunno", out: ["do", "not", "know"] },
    { word: "gonna", out: ["going", "to"] },
    { word: "gotta", out: ["have", "got", "to"] },
    { word: "gimme", out: ["give", "me"] },
    { word: "outta", out: ["out", "of"] },
    { word: "tryna", out: ["trying", "to"] },
    { word: "gtg", out: ["got", "to", "go"] },
    { word: "im", out: ["i", "am"] },
    { word: "imma", out: ["I", "will"] },
    { word: "imo", out: ["in", "my", "opinion"] },
    { word: "irl", out: ["in", "real", "life"] },
    { word: "ive", out: ["i", "have"] },
    { word: "rn", out: ["right", "now"] },
    { word: "tbh", out: ["to", "be", "honest"] },
    { word: "wanna", out: ["want", "to"] },
    { word: "c'mere", out: ["come", "here"] },
    { word: "c'mon", out: ["come", "on"] },
    { word: "shoulda", out: ["should", "have"] },
    { word: "coulda", out: ["coulda", "have"] },
    { word: "woulda", out: ["woulda", "have"] },
    { word: "musta", out: ["must", "have"] },
    { word: "tis", out: ["it", "is"] },
    { word: "twas", out: ["it", "was"] },
    { word: "y'know", out: ["you", "know"] },
    { word: "ne'er", out: ["never"] },
    { word: "o'er", out: ["over"] },
    { after: "ll", out: ["will"] },
    { after: "ve", out: ["have"] },
    { after: "re", out: ["are"] },
    { after: "m", out: ["am"] },
    { before: "c", out: ["ce"] },
    { before: "m", out: ["me"] },
    { before: "n", out: ["ne"] },
    { before: "qu", out: ["que"] },
    { before: "s", out: ["se"] },
    { before: "t", out: ["tu"] },
    { word: "shouldnt", out: ["should", "not"] },
    { word: "couldnt", out: ["could", "not"] },
    { word: "wouldnt", out: ["would", "not"] },
    { word: "hasnt", out: ["has", "not"] },
    { word: "wasnt", out: ["was", "not"] },
    { word: "isnt", out: ["is", "not"] },
    { word: "cant", out: ["can", "not"] },
    { word: "dont", out: ["do", "not"] },
    { word: "wont", out: ["will", "not"] },
    { word: "howd", out: ["how", "did"] },
    { word: "whatd", out: ["what", "did"] },
    { word: "whend", out: ["when", "did"] },
    { word: "whered", out: ["where", "did"] },
  ],
  Tn = !0,
  Sk = {
    st: Tn,
    nd: Tn,
    rd: Tn,
    th: Tn,
    am: Tn,
    pm: Tn,
    max: Tn,
    "°": Tn,
    s: Tn,
    e: Tn,
    er: Tn,
    ère: Tn,
    ème: Tn,
  },
  bk = { one: { contractions: wk, numberSuffixes: Sk } },
  pu = function (e, n, o) {
    let [t, l] = n;
    !o ||
      o.length === 0 ||
      ((o = o.map(
        (s, d) => (
          (s.implicit = s.text),
          (s.machine = s.text),
          (s.pre = ""),
          (s.post = ""),
          (s.text = ""),
          (s.normal = ""),
          (s.index = [t, l + d]),
          s
        )
      )),
      o[0] &&
        ((o[0].pre = e[t][l].pre),
        (o[o.length - 1].post = e[t][l].post),
        (o[0].text = e[t][l].text),
        (o[0].normal = e[t][l].normal)),
      e[t].splice(l, 1, ...o));
  },
  Mk = /'/,
  Bk = new Set(["what", "how", "when", "where", "why"]),
  Pk = new Set(["be", "go", "start", "think", "need"]),
  Hk = new Set(["been", "gone"]),
  Lk = function (e, n) {
    let o = e[n].normal.split(Mk)[0];
    if (Bk.has(o)) return [o, "did"];
    if (e[n + 1]) {
      if (Hk.has(e[n + 1].normal)) return [o, "had"];
      if (Pk.has(e[n + 1].normal)) return [o, "would"];
    }
    return null;
  },
  Wk = function (e, n) {
    return e[n].normal === "ain't" || e[n].normal === "aint"
      ? null
      : [e[n].normal.replace(/n't/, ""), "not"];
  },
  cd = /'/,
  Ak = /(e|é|aison|sion|tion)$/,
  Gk = /(age|isme|acle|ege|oire)$/,
  Rk = (e, n) => {
    let o = e[n].normal.split(cd)[1];
    return o && o.endsWith("e") ? ["la", o] : ["le", o];
  },
  Nk = (e, n) => {
    let o = e[n].normal.split(cd)[1];
    return o && Ak.test(o) && !Gk.test(o)
      ? ["du", o]
      : o && o.endsWith("s")
      ? ["des", o]
      : ["de", o];
  },
  Ek = (e, n) => ["je", e[n].normal.split(cd)[1]],
  yu = { preJ: Ek, preL: Rk, preD: Nk },
  Fk = /^([0-9.]{1,4}[a-z]{0,2}) ?[-–—] ?([0-9]{1,4}[a-z]{0,2})$/i,
  Dk =
    /^([0-9]{1,2}(:[0-9][0-9])?(am|pm)?) ?[-–—] ?([0-9]{1,2}(:[0-9][0-9])?(am|pm)?)$/i,
  Tk = /^[0-9]{3}-[0-9]{4}$/,
  Ok = function (e, n) {
    let o = e[n],
      t = o.text.match(Fk);
    return t !== null
      ? o.tags.has("PhoneNumber") === !0 || Tk.test(o.text)
        ? null
        : [t[1], "to", t[2]]
      : ((t = o.text.match(Dk)), t !== null ? [t[1], "to", t[4]] : null);
  },
  xk = /^([+-]?[0-9][.,0-9]*)([a-z°²³µ/]+)$/,
  Vk = function (e, n, o) {
    const t = o.model.one.numberSuffixes || {};
    let s = e[n].text.match(xk);
    if (s !== null) {
      let d = s[2].toLowerCase().trim();
      return t.hasOwnProperty(d) ? null : [s[1], d];
    }
    return null;
  },
  Tg = /'/,
  Ik = /^[0-9][^-–—]*[-–—].*?[0-9]/,
  Og = function (e, n, o, t) {
    let l = n.update();
    l.document = [e];
    let s = o + t;
    o > 0 && (o -= 1), e[s] && (s += 1), (l.ptrs = [[0, o, s]]);
  },
  xg = { t: (e, n) => Wk(e, n), d: (e, n) => Lk(e, n) },
  Vg = {
    j: (e, n) => yu.preJ(e, n),
    l: (e, n) => yu.preL(e, n),
    d: (e, n) => yu.preD(e, n),
  },
  _k = function (e, n, o, t) {
    for (let l = 0; l < e.length; l += 1) {
      let s = e[l];
      if (s.word === n.normal) return s.out;
      if (t !== null && t === s.after) return [o].concat(s.out);
      if (o !== null && o === s.before && t && t.length > 2)
        return s.out.concat(t);
    }
    return null;
  },
  fu = function (e, n) {
    let o = n.fromText(e.join(" "));
    return o.compute(["id", "alias"]), o.docs[0];
  },
  Kk = function (e, n) {
    for (let o = n + 1; o < 5 && e[o]; o += 1)
      if (e[o].normal === "been") return ["there", "has"];
    return ["there", "is"];
  },
  Jk = (e) => {
    let { world: n, document: o } = e;
    const { model: t, methods: l } = n;
    let s = t.one.contractions || [];
    o.forEach((d, g) => {
      for (let m = d.length - 1; m >= 0; m -= 1) {
        let y = null,
          f = null;
        if (Tg.test(d[m].normal) === !0) {
          let M = d[m].normal.split(Tg);
          (y = M[0]), (f = M[1]);
        }
        let v = _k(s, d[m], y, f);
        if (
          (!v && xg.hasOwnProperty(f) && (v = xg[f](d, m, n)),
          !v && Vg.hasOwnProperty(y) && (v = Vg[y](d, m)),
          y === "there" && f === "s" && (v = Kk(d, m)),
          v)
        ) {
          (v = fu(v, e)), pu(o, [g, m], v), Og(o[g], e, m, v.length);
          continue;
        }
        if (Ik.test(d[m].normal)) {
          (v = Ok(d, m)),
            v &&
              ((v = fu(v, e)),
              pu(o, [g, m], v),
              l.one.setTag(v, "NumberRange", n),
              v[2] &&
                v[2].tags.has("Time") &&
                l.one.setTag([v[0]], "Time", n, null, "time-range"),
              Og(o[g], e, m, v.length));
          continue;
        }
        (v = Vk(d, m, n)),
          v &&
            ((v = fu(v, e)),
            pu(o, [g, m], v),
            l.one.setTag([v[1]], "Unit", n, null, "contraction-unit"));
      }
    });
  },
  zk = { contractions: Jk },
  jk = { model: bk, compute: zk, hooks: ["contractions"] },
  Ig = function (e) {
    const n = e.world,
      { model: o, methods: t } = e.world,
      l = t.one.setTag,
      { frozenLex: s } = o.one,
      d = o.one._multiCache || {};
    e.docs.forEach((g) => {
      for (let m = 0; m < g.length; m += 1) {
        let y = g[m],
          f = y.machine || y.normal;
        if (d[f] !== void 0 && g[m + 1]) {
          let v = m + d[f] - 1;
          for (let M = v; M > m; M -= 1) {
            let G = g.slice(m, M + 1),
              ae = G.map((Y) => Y.machine || Y.normal).join(" ");
            if (s.hasOwnProperty(ae) === !0) {
              l(G, s[ae], n, !1, "1-frozen-multi-lexicon"),
                G.forEach((Y) => (Y.frozen = !0));
              continue;
            }
          }
        }
        if (s[f] !== void 0 && s.hasOwnProperty(f)) {
          l([y], s[f], n, !1, "1-freeze-lexicon"), (y.frozen = !0);
          continue;
        }
      }
    });
  },
  $k = function (e) {
    return (
      e.docs.forEach((n) => {
        n.forEach((o) => {
          delete o.frozen;
        });
      }),
      e
    );
  },
  Uk = { frozen: Ig, freeze: Ig, unfreeze: $k },
  _g = (e) => "\x1B[34m" + e + "\x1B[0m",
  Kg = (e) => "\x1B[3m\x1B[2m" + e + "\x1B[0m",
  Jg = function (e) {
    e.docs.forEach((n) => {
      console.log(
        _g(`
  ┌─────────`)
      ),
        n.forEach((o) => {
          let t = `  ${Kg("│")}  `,
            l = o.implicit || o.text || "-";
          o.frozen === !0 ? (t += `${_g(l)} ❄️`) : (t += Kg(l)), console.log(t);
        });
    });
  },
  qk = {
    compute: Uk,
    mutate: (e) => {
      const n = e.methods.one;
      (n.termMethods.isFrozen = (o) => o.frozen === !0),
        (n.debug.freeze = Jg),
        (n.debug.frozen = Jg);
    },
    api: function (e) {
      (e.prototype.freeze = function () {
        return (
          this.docs.forEach((n) => {
            n.forEach((o) => {
              o.frozen = !0;
            });
          }),
          this
        );
      }),
        (e.prototype.unfreeze = function () {
          this.compute("unfreeze");
        }),
        (e.prototype.isFrozen = function () {
          return this.match("@isFrozen+");
        });
    },
    hooks: ["freeze"],
  },
  Yk = function (e, n, o) {
    const { model: t, methods: l } = o,
      s = l.one.setTag,
      d = t.one._multiCache || {},
      { lexicon: g } = t.one || {};
    let m = e[n],
      y = m.machine || m.normal;
    if (d[y] !== void 0 && e[n + 1]) {
      let f = n + d[y] - 1;
      for (let v = f; v > n; v -= 1) {
        let M = e.slice(n, v + 1);
        if (M.length <= 1) return !1;
        let G = M.map((ae) => ae.machine || ae.normal).join(" ");
        if (g.hasOwnProperty(G) === !0) {
          let ae = g[G];
          return (
            s(M, ae, o, !1, "1-multi-lexicon"),
            ae &&
              ae.length === 2 &&
              (ae[0] === "PhrasalVerb" || ae[1] === "PhrasalVerb") &&
              s([M[1]], "Particle", o, !1, "1-phrasal-particle"),
            !0
          );
        }
      }
      return !1;
    }
    return null;
  },
  zg = /^(under|over|mis|re|un|dis|semi|pre|post)-?/,
  Qk = new Set([
    "Verb",
    "Infinitive",
    "PastTense",
    "Gerund",
    "PresentTense",
    "Adjective",
    "Participle",
  ]),
  Zk = function (e, n, o) {
    const { model: t, methods: l } = o,
      s = l.one.setTag,
      { lexicon: d } = t.one;
    let g = e[n],
      m = g.machine || g.normal;
    if (d[m] !== void 0 && d.hasOwnProperty(m))
      return s([g], d[m], o, !1, "1-lexicon"), !0;
    if (g.alias) {
      let y = g.alias.find((f) => d.hasOwnProperty(f));
      if (y) return s([g], d[y], o, !1, "1-lexicon-alias"), !0;
    }
    if (zg.test(m) === !0) {
      let y = m.replace(zg, "");
      if (d.hasOwnProperty(y) && y.length > 3 && Qk.has(d[y]))
        return s([g], d[y], o, !1, "1-lexicon-prefix"), !0;
    }
    return null;
  },
  Xk = function (e) {
    const n = e.world;
    e.docs.forEach((o) => {
      for (let t = 0; t < o.length; t += 1)
        if (o[t].tags.size === 0) {
          let l = null;
          (l = l || Yk(o, t, n)), (l = l || Zk(o, t, n));
        }
    });
  },
  ew = { lexicon: Xk },
  nw = function (e) {
    let n = {},
      o = {};
    return (
      Object.keys(e).forEach((t) => {
        let l = e[t];
        (t = t.toLowerCase().trim()), (t = t.replace(/'s\b/, ""));
        let s = t.split(/ /);
        s.length > 1 &&
          (o[s[0]] === void 0 || s.length > o[s[0]]) &&
          (o[s[0]] = s.length),
          (n[t] = n[t] || l);
      }),
      delete n[""],
      delete n[null],
      delete n[" "],
      { lex: n, _multi: o }
    );
  },
  aw = { one: { expandLexicon: nw } },
  ow = function (e, n = !1) {
    const o = this.world(),
      { methods: t, model: l } = o;
    if (!e) return;
    if (
      (Object.keys(e).forEach((g) => {
        typeof e[g] == "string" &&
          e[g].startsWith("#") &&
          (e[g] = e[g].replace(/^#/, ""));
      }),
      n === !0)
    ) {
      let { lex: g, _multi: m } = t.one.expandLexicon(e, o);
      Object.assign(l.one._multiCache, m), Object.assign(l.one.frozenLex, g);
      return;
    }
    if (t.two.expandLexicon) {
      let { lex: g, _multi: m } = t.two.expandLexicon(e, o);
      Object.assign(l.one.lexicon, g), Object.assign(l.one._multiCache, m);
    }
    let { lex: s, _multi: d } = t.one.expandLexicon(e, o);
    Object.assign(l.one.lexicon, s), Object.assign(l.one._multiCache, d);
  },
  rw = { addWords: ow },
  tw = { one: { lexicon: {}, _multiCache: {}, frozenLex: {} } },
  lw = { model: tw, methods: aw, compute: ew, lib: rw, hooks: ["lexicon"] },
  iw = function (e, n) {
    const { methods: o, model: t } = n;
    return o.one.tokenize
      .splitTerms(e, t)
      .map((s) => o.one.tokenize.splitWhitespace(s, t))
      .map((s) => s.text.toLowerCase());
  },
  Xp = function (e, n) {
    let o = [{}],
      t = [null],
      l = [0],
      s = [],
      d = 0;
    e.forEach(function (g) {
      let m = 0,
        y = iw(g, n);
      for (let f = 0; f < y.length; f++) {
        let v = y[f];
        o[m] && o[m].hasOwnProperty(v)
          ? (m = o[m][v])
          : (d++, (o[m][v] = d), (o[d] = {}), (m = d), (t[d] = null));
      }
      t[m] = [y.length];
    });
    for (let g in o[0]) (d = o[0][g]), (l[d] = 0), s.push(d);
    for (; s.length; ) {
      let g = s.shift(),
        m = Object.keys(o[g]);
      for (let y = 0; y < m.length; y += 1) {
        let f = m[y],
          v = o[g][f];
        for (s.push(v), d = l[g]; d > 0 && !o[d].hasOwnProperty(f); ) d = l[d];
        if (o.hasOwnProperty(d)) {
          let M = o[d][f];
          (l[v] = M), t[M] && ((t[v] = t[v] || []), (t[v] = t[v].concat(t[M])));
        } else l[v] = 0;
      }
    }
    return { goNext: o, endAs: t, failTo: l };
  },
  sw = function (e, n, o) {
    let t = 0,
      l = [];
    for (let s = 0; s < e.length; s++) {
      let d = e[s][o.form] || e[s].normal;
      for (
        ;
        t > 0 && (n.goNext[t] === void 0 || !n.goNext[t].hasOwnProperty(d));

      )
        t = n.failTo[t] || 0;
      if (n.goNext[t].hasOwnProperty(d) && ((t = n.goNext[t][d]), n.endAs[t])) {
        let g = n.endAs[t];
        for (let m = 0; m < g.length; m++) {
          let y = g[m],
            f = e[s - y + 1],
            [v, M] = f.index;
          l.push([v, M, M + y, f.id]);
        }
      }
    }
    return l;
  },
  uw = function (e, n) {
    for (let o = 0; o < e.length; o += 1) if (n.has(e[o]) === !0) return !1;
    return !0;
  },
  dw = function (e, n, o) {
    let t = [];
    o.form = o.form || "normal";
    let l = e.docs;
    if (!n.goNext || !n.goNext[0])
      return console.error("Compromise invalid lookup trie"), e.none();
    let s = Object.keys(n.goNext[0]);
    for (let d = 0; d < l.length; d++) {
      if (e._cache && e._cache[d] && uw(s, e._cache[d]) === !0) continue;
      let g = l[d],
        m = sw(g, n, o);
      m.length > 0 && (t = t.concat(m));
    }
    return e.update(t);
  },
  cw = (e) => Object.prototype.toString.call(e) === "[object Object]";
function hw(e) {
  e.prototype.lookup = function (n, o = {}) {
    if (!n) return this.none();
    typeof n == "string" && (n = [n]);
    let t = cw(n) ? n : Xp(n, this.world),
      l = dw(this, t, o);
    return (l = l.settle()), l;
  };
}
const vu = (e, n) => {
    for (let o = e.length - 1; o >= 0; o -= 1)
      if (e[o] !== n) return (e = e.slice(0, o + 1)), e;
    return e;
  },
  gw = function (e) {
    return (
      (e.goNext = e.goNext.map((n) => {
        if (Object.keys(n).length !== 0) return n;
      })),
      (e.goNext = vu(e.goNext, void 0)),
      (e.failTo = vu(e.failTo, 0)),
      (e.endAs = vu(e.endAs, null)),
      e
    );
  },
  Ju = {
    buildTrie: function (e) {
      const n = Xp(e, this.world());
      return gw(n);
    },
  };
Ju.compile = Ju.buildTrie;
const mw = { api: hw, lib: Ju },
  jg = function (e, n) {
    return (
      n &&
        e.forEach((o) => {
          let t = o[0];
          n[t] && ((o[0] = n[t][0]), (o[1] += n[t][1]), (o[2] += n[t][1]));
        }),
      e
    );
  },
  ey = function (e, n) {
    let { ptrs: o, byGroup: t } = e;
    return (
      (o = jg(o, n)),
      Object.keys(t).forEach((l) => {
        t[l] = jg(t[l], n);
      }),
      { ptrs: o, byGroup: t }
    );
  },
  Pt = function (e, n, o) {
    const t = o.methods.one;
    return (
      typeof e == "number" && (e = String(e)),
      typeof e == "string" &&
        ((e = t.killUnicode(e, o)), (e = t.parseMatch(e, n, o))),
      e
    );
  },
  ny = (e) => Object.prototype.toString.call(e) === "[object Object]",
  Ht = (e) => e && ny(e) && e.isView === !0,
  Lt = (e) => e && ny(e) && e.isNet === !0,
  pw = function (e, n, o) {
    const t = this.methods.one;
    if (Ht(e)) return this.intersection(e);
    if (Lt(e)) return this.sweep(e, { tagger: !1 }).view.settle();
    e = Pt(e, o, this.world);
    let l = { regs: e, group: n },
      s = t.match(this.docs, l, this._cache),
      { ptrs: d, byGroup: g } = ey(s, this.fullPointer),
      m = this.toView(d);
    return (m._groups = g), m;
  },
  yw = function (e, n, o) {
    const t = this.methods.one;
    if (Ht(e)) return this.intersection(e).eq(0);
    if (Lt(e)) return this.sweep(e, { tagger: !1, matchOne: !0 }).view;
    e = Pt(e, o, this.world);
    let l = { regs: e, group: n, justOne: !0 },
      s = t.match(this.docs, l, this._cache),
      { ptrs: d, byGroup: g } = ey(s, this.fullPointer),
      m = this.toView(d);
    return (m._groups = g), m;
  },
  fw = function (e, n, o) {
    const t = this.methods.one;
    if (Ht(e)) return this.intersection(e).fullPointer.length > 0;
    if (Lt(e)) return this.sweep(e, { tagger: !1 }).view.found;
    e = Pt(e, o, this.world);
    let l = { regs: e, group: n, justOne: !0 };
    return t.match(this.docs, l, this._cache).ptrs.length > 0;
  },
  vw = function (e, n, o) {
    const t = this.methods.one;
    if (Ht(e)) return this.filter((m) => m.intersection(e).found);
    if (Lt(e)) {
      let m = this.sweep(e, { tagger: !1 }).view.settle();
      return this.if(m);
    }
    e = Pt(e, o, this.world);
    let l = { regs: e, group: n, justOne: !0 },
      s = this.fullPointer,
      d = this._cache || [];
    s = s.filter((m, y) => {
      let f = this.update([m]);
      return t.match(f.docs, l, d[y]).ptrs.length > 0;
    });
    let g = this.update(s);
    return this._cache && (g._cache = s.map((m) => d[m[0]])), g;
  },
  Cw = function (e, n, o) {
    const { methods: t } = this,
      l = t.one;
    if (Ht(e)) return this.filter((g) => !g.intersection(e).found);
    if (Lt(e)) {
      let g = this.sweep(e, { tagger: !1 }).view.settle();
      return this.ifNo(g);
    }
    e = Pt(e, o, this.world);
    let s = this._cache || [],
      d = this.filter((g, m) => {
        let y = { regs: e, group: n, justOne: !0 };
        return l.match(g.docs, y, s[m]).ptrs.length === 0;
      });
    return this._cache && (d._cache = d.ptrs.map((g) => s[g[0]])), d;
  },
  kw = { matchOne: yw, match: pw, has: fw, if: vw, ifNo: Cw },
  ww = function (e, n, o) {
    const { indexN: t } = this.methods.one.pointer;
    let l = [],
      s = t(this.fullPointer);
    Object.keys(s).forEach((g) => {
      let m = s[g].sort((y, f) => (y[1] > f[1] ? 1 : -1))[0];
      m[1] > 0 && l.push([m[0], 0, m[1]]);
    });
    let d = this.toView(l);
    return e ? d.match(e, n, o) : d;
  },
  Sw = function (e, n, o) {
    const { indexN: t } = this.methods.one.pointer;
    let l = [],
      s = t(this.fullPointer),
      d = this.document;
    Object.keys(s).forEach((m) => {
      let y = s[m].sort((M, G) => (M[1] > G[1] ? -1 : 1))[0],
        [f, , v] = y;
      v < d[f].length && l.push([f, v, d[f].length]);
    });
    let g = this.toView(l);
    return e ? g.match(e, n, o) : g;
  },
  bw = function (e, n, o) {
    typeof e == "string" &&
      (e = this.world.methods.one.parseMatch(e, o, this.world)),
      (e[e.length - 1].end = !0);
    let t = this.fullPointer;
    return (
      this.forEach((l, s) => {
        let d = l.before(e, n);
        if (d.found) {
          let g = d.terms();
          (t[s][1] -= g.length), (t[s][3] = g.docs[0][0].id);
        }
      }),
      this.update(t)
    );
  },
  Mw = function (e, n, o) {
    typeof e == "string" &&
      (e = this.world.methods.one.parseMatch(e, o, this.world)),
      (e[0].start = !0);
    let t = this.fullPointer;
    return (
      this.forEach((l, s) => {
        let d = l.after(e, n);
        if (d.found) {
          let g = d.terms();
          (t[s][2] += g.length), (t[s][4] = null);
        }
      }),
      this.update(t)
    );
  },
  Bw = function (e, n, o) {
    return this.growRight(e, n, o).growLeft(e, n, o);
  },
  Pw = { before: ww, after: Sw, growLeft: bw, growRight: Mw, grow: Bw },
  ay = function (e, n) {
    return [e[0], e[1], n[2]];
  },
  Hw = function (e) {
    return Object.prototype.toString.call(e) === "[object Array]";
  },
  hd = (e, n, o) =>
    typeof e == "string" || Hw(e) ? n.match(e, o) : e || n.none(),
  gd = function (e, n) {
    let [o, t, l] = e;
    return (
      n.document[o] &&
        n.document[o][t] &&
        ((e[3] = e[3] || n.document[o][t].id),
        n.document[o][l - 1] && (e[4] = e[4] || n.document[o][l - 1].id)),
      e
    );
  },
  Pr = {};
Pr.splitOn = function (e, n) {
  const { splitAll: o } = this.methods.one.pointer;
  let t = hd(e, this, n).fullPointer,
    l = o(this.fullPointer, t),
    s = [];
  return (
    l.forEach((d) => {
      s.push(d.passthrough), s.push(d.before), s.push(d.match), s.push(d.after);
    }),
    (s = s.filter((d) => d)),
    (s = s.map((d) => gd(d, this))),
    this.update(s)
  );
};
Pr.splitBefore = function (e, n) {
  const { splitAll: o } = this.methods.one.pointer;
  let t = hd(e, this, n).fullPointer,
    l = o(this.fullPointer, t);
  for (let d = 0; d < l.length; d += 1)
    !l[d].after &&
      l[d + 1] &&
      l[d + 1].before &&
      l[d].match &&
      l[d].match[0] === l[d + 1].before[0] &&
      ((l[d].after = l[d + 1].before), delete l[d + 1].before);
  let s = [];
  return (
    l.forEach((d) => {
      s.push(d.passthrough),
        s.push(d.before),
        d.match && d.after ? s.push(ay(d.match, d.after)) : s.push(d.match);
    }),
    (s = s.filter((d) => d)),
    (s = s.map((d) => gd(d, this))),
    this.update(s)
  );
};
Pr.splitAfter = function (e, n) {
  const { splitAll: o } = this.methods.one.pointer;
  let t = hd(e, this, n).fullPointer,
    l = o(this.fullPointer, t),
    s = [];
  return (
    l.forEach((d) => {
      s.push(d.passthrough),
        d.before && d.match
          ? s.push(ay(d.before, d.match))
          : (s.push(d.before), s.push(d.match)),
        s.push(d.after);
    }),
    (s = s.filter((d) => d)),
    (s = s.map((d) => gd(d, this))),
    this.update(s)
  );
};
Pr.split = Pr.splitAfter;
const Lw = function (e, n) {
    return !e || !n || e[0] !== n[0] ? !1 : e[2] === n[1];
  },
  $g = function (e, n, o) {
    const t = e.world,
      l = t.methods.one.parseMatch;
    (n = n || ".$"), (o = o || "^.");
    let s = l(n, {}, t),
      d = l(o, {}, t);
    (s[s.length - 1].end = !0), (d[0].start = !0);
    let g = e.fullPointer,
      m = [g[0]];
    for (let y = 1; y < g.length; y += 1) {
      let f = m[m.length - 1],
        v = g[y],
        M = e.update([f]),
        G = e.update([v]);
      Lw(f, v) && M.has(s) && G.has(d)
        ? (m[m.length - 1] = [f[0], f[1], v[2], f[3], v[4]])
        : m.push(v);
    }
    return e.update(m);
  },
  Ww = {
    joinIf: function (e, n) {
      return $g(this, e, n);
    },
    join: function () {
      return $g(this);
    },
  },
  pa = Object.assign({}, kw, Pw, Pr, Ww);
pa.lookBehind = pa.before;
pa.lookBefore = pa.before;
pa.lookAhead = pa.after;
pa.lookAfter = pa.after;
pa.notIf = pa.ifNo;
const Aw = function (e) {
    Object.assign(e.prototype, pa);
  },
  Gw = /(?:^|\s)([![^]*(?:<[^<]*>)?\/.*?[^\\/]\/[?\]+*$~]*)(?:\s|$)/,
  Rw = /([!~[^]*(?:<[^<]*>)?\([^)]+[^\\)]\)[?\]+*$~]*)(?:\s|$)/,
  Nw = / /g,
  Ew = (e) => /^[![^]*(<[^<]*>)?\(/.test(e) && /\)[?\]+*$~]*$/.test(e),
  Ug = (e) => /^[![^]*(<[^<]*>)?\//.test(e) && /\/[?\]+*$~]*$/.test(e),
  qg = function (e) {
    return (e = e.map((n) => n.trim())), (e = e.filter((n) => n)), e;
  },
  Fw = function (e) {
    let n = e.split(Gw),
      o = [];
    n.forEach((l) => {
      if (Ug(l)) {
        o.push(l);
        return;
      }
      o = o.concat(l.split(Rw));
    }),
      (o = qg(o));
    let t = [];
    return (
      o.forEach((l) => {
        Ew(l) || Ug(l) ? t.push(l) : (t = t.concat(l.split(Nw)));
      }),
      (t = qg(t)),
      t
    );
  },
  Yg = /\{([0-9]+)?(, *[0-9]*)?\}/,
  Qg = /&&/,
  Dw = new RegExp(/^<\s*(\S+)\s*>/),
  Zg = (e) => e.charAt(0).toUpperCase() + e.substring(1),
  Zn = (e) => e.charAt(e.length - 1),
  On = (e) => e.charAt(0),
  Sr = (e) => e.substring(1),
  br = (e) => e.substring(0, e.length - 1),
  pt = function (e) {
    return (e = Sr(e)), (e = br(e)), e;
  },
  oy = function (e, n) {
    let o = {};
    for (let t = 0; t < 2; t += 1) {
      if (
        (Zn(e) === "$" && ((o.end = !0), (e = br(e))),
        On(e) === "^" && ((o.start = !0), (e = Sr(e))),
        Zn(e) === "?" && ((o.optional = !0), (e = br(e))),
        (On(e) === "[" || Zn(e) === "]") &&
          ((o.group = null),
          On(e) === "[" && (o.groupStart = !0),
          Zn(e) === "]" && (o.groupEnd = !0),
          (e = e.replace(/^\[/, "")),
          (e = e.replace(/\]$/, "")),
          On(e) === "<"))
      ) {
        const l = Dw.exec(e);
        l.length >= 2 && ((o.group = l[1]), (e = e.replace(l[0], "")));
      }
      if (
        (Zn(e) === "+" && ((o.greedy = !0), (e = br(e))),
        e !== "*" &&
          Zn(e) === "*" &&
          e !== "\\*" &&
          ((o.greedy = !0), (e = br(e))),
        On(e) === "!" && ((o.negative = !0), (e = Sr(e))),
        On(e) === "~" &&
          Zn(e) === "~" &&
          e.length > 2 &&
          ((e = pt(e)),
          (o.fuzzy = !0),
          (o.min = n.fuzzy || 0.85),
          /\(/.test(e) === !1))
      )
        return (o.word = e), o;
      if (On(e) === "/" && Zn(e) === "/")
        return (
          (e = pt(e)),
          n.caseSensitive && (o.use = "text"),
          (o.regex = new RegExp(e)),
          o
        );
      if (
        (Yg.test(e) === !0 &&
          (e = e.replace(
            Yg,
            (l, s, d) => (
              d === void 0
                ? ((o.min = Number(s)), (o.max = Number(s)))
                : ((d = d.replace(/, */, "")),
                  s === void 0
                    ? ((o.min = 0), (o.max = Number(d)))
                    : ((o.min = Number(s)), (o.max = Number(d || 999)))),
              (o.greedy = !0),
              o.min || (o.optional = !0),
              ""
            )
          )),
        On(e) === "(" && Zn(e) === ")")
      ) {
        Qg.test(e)
          ? ((o.choices = e.split(Qg)), (o.operator = "and"))
          : ((o.choices = e.split("|")), (o.operator = "or")),
          (o.choices[0] = Sr(o.choices[0]));
        let l = o.choices.length - 1;
        (o.choices[l] = br(o.choices[l])),
          (o.choices = o.choices.map((s) => s.trim())),
          (o.choices = o.choices.filter((s) => s)),
          (o.choices = o.choices.map((s) =>
            s.split(/ /g).map((d) => oy(d, n))
          )),
          (e = "");
      }
      if (On(e) === "{" && Zn(e) === "}") {
        if (((e = pt(e)), (o.root = e), /\//.test(e))) {
          let l = o.root.split(/\//);
          (o.root = l[0]),
            (o.pos = l[1]),
            o.pos === "adj" && (o.pos = "Adjective"),
            (o.pos =
              o.pos.charAt(0).toUpperCase() + o.pos.substr(1).toLowerCase()),
            l[2] !== void 0 && (o.sense = l[2]);
        }
        return o;
      }
      if (On(e) === "<" && Zn(e) === ">")
        return (e = pt(e)), (o.chunk = Zg(e)), (o.greedy = !0), o;
      if (On(e) === "%" && Zn(e) === "%") return (e = pt(e)), (o.switch = e), o;
    }
    return On(e) === "#"
      ? ((o.tag = Sr(e)), (o.tag = Zg(o.tag)), o)
      : On(e) === "@"
      ? ((o.method = Sr(e)), o)
      : e === "."
      ? ((o.anything = !0), o)
      : e === "*"
      ? ((o.anything = !0), (o.greedy = !0), (o.optional = !0), o)
      : (e &&
          ((e = e.replace("\\*", "*")),
          (e = e.replace("\\.", ".")),
          n.caseSensitive ? (o.use = "text") : (e = e.toLowerCase()),
          (o.word = e)),
        o);
  },
  Tw = /[a-z0-9][-–—][a-z]/i,
  Ow = function (e, n) {
    let o = n.model.one.prefixes;
    for (let t = e.length - 1; t >= 0; t -= 1) {
      let l = e[t];
      if (l.word && Tw.test(l.word)) {
        let s = l.word.split(/[-–—]/g);
        if (o.hasOwnProperty(s[0])) continue;
        (s = s.filter((d) => d).reverse()),
          e.splice(t, 1),
          s.forEach((d) => {
            let g = Object.assign({}, l);
            (g.word = d), e.splice(t, 0, g);
          });
      }
    }
    return e;
  },
  Xg = function (e, n) {
    let { all: o } = n.methods.two.transform.verb || {},
      t = e.root;
    return o ? o(t, n.model) : [];
  },
  em = function (e, n) {
    let { all: o } = n.methods.two.transform.noun || {};
    return o ? o(e.root, n.model) : [e.root];
  },
  nm = function (e, n) {
    let { all: o } = n.methods.two.transform.adjective || {};
    return o ? o(e.root, n.model) : [e.root];
  },
  xw = function (e, n) {
    return (
      (e = e.map((o) => {
        if (o.root)
          if (n.methods.two && n.methods.two.transform) {
            let t = [];
            o.pos
              ? o.pos === "Verb"
                ? (t = t.concat(Xg(o, n)))
                : o.pos === "Noun"
                ? (t = t.concat(em(o, n)))
                : o.pos === "Adjective" && (t = t.concat(nm(o, n)))
              : ((t = t.concat(Xg(o, n))),
                (t = t.concat(em(o, n))),
                (t = t.concat(nm(o, n)))),
              (t = t.filter((l) => l)),
              t.length > 0 && ((o.operator = "or"), (o.fastOr = new Set(t)));
          } else (o.machine = o.root), delete o.id, delete o.root;
        return o;
      })),
      e
    );
  },
  Vw = function (e) {
    let n = 0,
      o = null;
    for (let t = 0; t < e.length; t++) {
      const l = e[t];
      l.groupStart === !0 &&
        ((o = l.group), o === null && ((o = String(n)), (n += 1))),
        o !== null && (l.group = o),
        l.groupEnd === !0 && (o = null);
    }
    return e;
  },
  Iw = function (e) {
    return e.map((n) => {
      if (n.choices !== void 0) {
        if (n.operator !== "or" || n.fuzzy === !0) return n;
        n.choices.every((t) => {
          if (t.length !== 1) return !1;
          let l = t[0];
          return l.fuzzy === !0 || l.start || l.end
            ? !1
            : l.word !== void 0 &&
                l.negative !== !0 &&
                l.optional !== !0 &&
                l.method !== !0;
        }) === !0 &&
          ((n.fastOr = new Set()),
          n.choices.forEach((t) => {
            n.fastOr.add(t[0].word);
          }),
          delete n.choices);
      }
      return n;
    });
  },
  _w = function (e) {
    return e.map(
      (n) => (
        n.fuzzy &&
          n.choices &&
          n.choices.forEach((o) => {
            o.length === 1 &&
              o[0].word &&
              ((o[0].fuzzy = !0), (o[0].min = n.min));
          }),
        n
      )
    );
  },
  Kw = function (e) {
    return (e = Vw(e)), (e = Iw(e)), (e = _w(e)), e;
  },
  Jw = function (e, n, o) {
    if (e == null || e === "") return [];
    (n = n || {}), typeof e == "number" && (e = String(e));
    let t = Fw(e);
    return (
      (t = t.map((l) => oy(l, n))),
      (t = Ow(t, o)),
      (t = xw(t, o)),
      (t = Kw(t)),
      t
    );
  },
  zw = function (e, n) {
    for (let o of n) if (e.has(o)) return !0;
    return !1;
  },
  jw = function (e, n) {
    for (let o = 0; o < e.length; o += 1) {
      let t = e[o];
      if (!(t.optional === !0 || t.negative === !0 || t.fuzzy === !0)) {
        if (
          (t.word !== void 0 && n.has(t.word) === !1) ||
          (t.tag !== void 0 && n.has("#" + t.tag) === !1)
        )
          return !0;
        if (t.fastOr && zw(t.fastOr, n) === !1) return !1;
      }
    }
    return !1;
  },
  $w = function (e, n) {
    let o = e.length,
      t = n.length;
    if (o === 0) return t;
    if (t === 0) return o;
    let l = (t > o ? t : o) + 1;
    if (Math.abs(o - t) > (l || 100)) return l || 100;
    let s = [];
    for (let M = 0; M < l; M++) (s[M] = [M]), (s[M].length = l);
    for (let M = 0; M < l; M++) s[0][M] = M;
    let d, g, m, y, f, v;
    for (let M = 1; M <= o; ++M)
      for (g = e[M - 1], d = 1; d <= t; ++d) {
        if (M === d && s[M][d] > 4) return o;
        (m = n[d - 1]),
          (y = g === m ? 0 : 1),
          (f = s[M - 1][d] + 1),
          (v = s[M][d - 1] + 1) < f && (f = v),
          (v = s[M - 1][d - 1] + y) < f && (f = v),
          M > 1 &&
          d > 1 &&
          g === n[d - 2] &&
          e[M - 2] === m &&
          (v = s[M - 2][d - 2] + y) < f
            ? (s[M][d] = v)
            : (s[M][d] = f);
      }
    return s[o][t];
  },
  Uw = function (e, n, o = 3) {
    if (e === n) return 1;
    if (e.length < o || n.length < o) return 0;
    const t = $w(e, n);
    let l = Math.max(e.length, n.length);
    return 1 - (l === 0 ? 0 : t / l);
  },
  qw =
    /([\u0022\uFF02\u0027\u201C\u2018\u201F\u201B\u201E\u2E42\u201A\u00AB\u2039\u2035\u2036\u2037\u301D\u0060\u301F])/,
  Yw =
    /([\u0022\uFF02\u0027\u201D\u2019\u00BB\u203A\u2032\u2033\u2034\u301E\u00B4])/,
  am = /^[-–—]$/,
  om = / [-–—]{1,3} /,
  wa = (e, n) => e.post.indexOf(n) !== -1,
  St = {
    hasQuote: (e) => qw.test(e.pre) || Yw.test(e.post),
    hasComma: (e) => wa(e, ","),
    hasPeriod: (e) => wa(e, ".") === !0 && wa(e, "...") === !1,
    hasExclamation: (e) => wa(e, "!"),
    hasQuestionMark: (e) => wa(e, "?") || wa(e, "¿"),
    hasEllipses: (e) => wa(e, "..") || wa(e, "…"),
    hasSemicolon: (e) => wa(e, ";"),
    hasColon: (e) => wa(e, ":"),
    hasSlash: (e) => /\//.test(e.text),
    hasHyphen: (e) => am.test(e.post) || am.test(e.pre),
    hasDash: (e) => om.test(e.post) || om.test(e.pre),
    hasContraction: (e) => !!e.implicit,
    isAcronym: (e) => e.tags.has("Acronym"),
    isKnown: (e) => e.tags.size > 0,
    isTitleCase: (e) =>
      new RegExp("^\\p{Lu}[a-z'\\u00C0-\\u00FF]", "u").test(e.text),
    isUpperCase: (e) => new RegExp("^\\p{Lu}+$", "u").test(e.text),
  };
St.hasQuotation = St.hasQuote;
let Xe = function () {};
const Qw = function (e, n, o, t) {
  if (n.anything === !0) return !0;
  if ((n.start === !0 && o !== 0) || (n.end === !0 && o !== t - 1)) return !1;
  if (n.id !== void 0 && n.id === e.id) return !0;
  if (n.word !== void 0)
    return n.use
      ? n.word === e[n.use]
      : (e.machine !== null && e.machine === n.word) ||
        (e.alias !== void 0 && e.alias.hasOwnProperty(n.word)) ||
        (n.fuzzy === !0 &&
          (n.word === e.root || Uw(n.word, e.normal) >= n.min)) ||
        (e.alias && e.alias.some((l) => l === n.word))
      ? !0
      : n.word === e.text || n.word === e.normal;
  if (n.tag !== void 0) return e.tags.has(n.tag) === !0;
  if (n.method !== void 0)
    return typeof St[n.method] == "function" && St[n.method](e) === !0;
  if (n.pre !== void 0) return e.pre && e.pre.includes(n.pre);
  if (n.post !== void 0) return e.post && e.post.includes(n.post);
  if (n.regex !== void 0) {
    let l = e.normal;
    return n.use && (l = e[n.use]), n.regex.test(l);
  }
  if (n.chunk !== void 0) return e.chunk === n.chunk;
  if (n.switch !== void 0) return e.switch === n.switch;
  if (n.machine !== void 0)
    return (
      e.normal === n.machine || e.machine === n.machine || e.root === n.machine
    );
  if (n.sense !== void 0) return e.sense === n.sense;
  if (n.fastOr !== void 0) {
    if (n.pos && !e.tags.has(n.pos)) return null;
    let l = e.root || e.implicit || e.machine || e.normal;
    return n.fastOr.has(l) || n.fastOr.has(e.text);
  }
  return n.choices !== void 0
    ? n.operator === "and"
      ? n.choices.every((l) => Xe(e, l, o, t))
      : n.choices.some((l) => Xe(e, l, o, t))
    : !1;
};
Xe = function (e, n, o, t) {
  let l = Qw(e, n, o, t);
  return n.negative === !0 ? !l : l;
};
const Zw = function (e, n) {
    let o = Object.assign({}, e.regs[e.r], { start: !1, end: !1 }),
      t = e.t;
    for (; e.t < e.terms.length; e.t += 1) {
      if (n && Xe(e.terms[e.t], n, e.start_i + e.t, e.phrase_length))
        return e.t;
      let l = e.t - t + 1;
      if (o.max !== void 0 && l === o.max) return e.t;
      if (Xe(e.terms[e.t], o, e.start_i + e.t, e.phrase_length) === !1)
        return o.min !== void 0 && l < o.min ? null : e.t;
    }
    return e.t;
  },
  Xw = function (e, n) {
    let o = e.t;
    if (!n) return e.terms.length;
    for (; o < e.terms.length; o += 1)
      if (Xe(e.terms[o], n, e.start_i + o, e.phrase_length) === !0) return o;
    return null;
  },
  eS = function (e, n) {
    if (
      e.end === !0 &&
      e.greedy === !0 &&
      n.start_i + n.t < n.phrase_length - 1
    ) {
      let o = Object.assign({}, e, { end: !1 });
      if (Xe(n.terms[n.t], o, n.start_i + n.t, n.phrase_length) === !0)
        return !0;
    }
    return !1;
  },
  pi = function (e, n) {
    return (
      e.groups[e.inGroup] || (e.groups[e.inGroup] = { start: n, length: 0 }),
      e.groups[e.inGroup]
    );
  },
  nS = function (e) {
    let { regs: n } = e,
      o = n[e.r],
      t = Xw(e, n[e.r + 1]);
    if (t === null || t === 0 || (o.min !== void 0 && t - e.t < o.min))
      return null;
    if (o.max !== void 0 && t - e.t > o.max) return (e.t = e.t + o.max), !0;
    if (e.hasGroup === !0) {
      const l = pi(e, e.t);
      l.length = t - e.t;
    }
    return (e.t = t), !0;
  },
  aS = function (e) {
    return Object.prototype.toString.call(e) === "[object Array]";
  },
  ry = function (e, n = 0) {
    let o = e.regs[e.r],
      t = !1;
    for (let l = 0; l < o.choices.length; l += 1) {
      let s = o.choices[l];
      if (!aS(s)) return !1;
      if (
        ((t = s.every((d, g) => {
          let m = 0,
            y = e.t + g + n + m;
          if (e.terms[y] === void 0) return !1;
          let f = Xe(e.terms[y], d, y + e.start_i, e.phrase_length);
          if (f === !0 && d.greedy === !0)
            for (let v = 1; v < e.terms.length; v += 1) {
              let M = e.terms[y + v];
              if (M)
                if (Xe(M, d, e.start_i + v, e.phrase_length) === !0) m += 1;
                else break;
            }
          return (n += m), f;
        })),
        t)
      ) {
        n += s.length;
        break;
      }
    }
    return t && o.greedy === !0 ? ry(e, n) : n;
  },
  oS = function (e) {
    let n = 0;
    return e.regs[e.r].choices.every((l) => {
      let s = l.every((d, g) => {
        let m = e.t + g;
        return e.terms[m] === void 0
          ? !1
          : Xe(e.terms[m], d, m, e.phrase_length);
      });
      return s === !0 && l.length > n && (n = l.length), s;
    }) === !0
      ? n
      : !1;
  },
  rS = function (e) {
    const { regs: n } = e;
    let o = n[e.r],
      t = ry(e);
    if (t) {
      if (o.negative === !0) return null;
      if (e.hasGroup === !0) {
        const l = pi(e, e.t);
        l.length += t;
      }
      if (o.end === !0) {
        let l = e.phrase_length;
        if (e.t + e.start_i + t !== l) return null;
      }
      return (e.t += t), !0;
    } else if (!o.optional) return null;
    return !0;
  },
  tS = function (e) {
    const { regs: n } = e;
    let o = n[e.r],
      t = oS(e);
    if (t) {
      if (o.negative === !0) return null;
      if (e.hasGroup === !0) {
        const l = pi(e, e.t);
        l.length += t;
      }
      if (o.end === !0) {
        let l = e.phrase_length - 1;
        if (e.t + e.start_i !== l) return null;
      }
      return (e.t += t), !0;
    } else if (!o.optional) return null;
    return !0;
  },
  lS = function (e, n, o) {
    let t = 0;
    for (let l = e.t; l < e.terms.length; l += 1) {
      let s = Xe(e.terms[l], n, e.start_i + e.t, e.phrase_length);
      if (
        s ||
        (o && ((s = Xe(e.terms[l], o, e.start_i + e.t, e.phrase_length)), s)) ||
        ((t += 1), n.max !== void 0 && t === n.max)
      )
        break;
    }
    return t === 0 || (n.min && n.min > t) ? !1 : ((e.t += t), !0);
  },
  iS = function (e) {
    const { regs: n } = e;
    let o = n[e.r],
      t = Object.assign({}, o);
    if (
      ((t.negative = !1), Xe(e.terms[e.t], t, e.start_i + e.t, e.phrase_length))
    )
      return !1;
    if (o.optional) {
      let s = n[e.r + 1];
      s &&
        (Xe(e.terms[e.t], s, e.start_i + e.t, e.phrase_length)
          ? (e.r += 1)
          : s.optional &&
            n[e.r + 2] &&
            Xe(e.terms[e.t], n[e.r + 2], e.start_i + e.t, e.phrase_length) &&
            (e.r += 2));
    }
    return o.greedy ? lS(e, t, n[e.r + 1]) : ((e.t += 1), !0);
  },
  sS = function (e) {
    const { regs: n } = e;
    let o = n[e.r],
      t = e.terms[e.t],
      l = Xe(t, n[e.r + 1], e.start_i + e.t, e.phrase_length);
    if (o.negative || l) {
      let s = e.terms[e.t + 1];
      (!s || !Xe(s, n[e.r + 1], e.start_i + e.t, e.phrase_length)) &&
        (e.r += 1);
    }
  },
  uS = function (e) {
    const { regs: n, phrase_length: o } = e;
    let t = n[e.r];
    return (
      (e.t = Zw(e, n[e.r + 1])),
      e.t === null ||
      (t.min && t.min > e.t) ||
      (t.end === !0 && e.start_i + e.t !== o)
        ? null
        : !0
    );
  },
  dS = function (e) {
    let n = e.terms[e.t],
      o = e.regs[e.r];
    if (n.implicit && e.terms[e.t + 1]) {
      if (!e.terms[e.t + 1].implicit) return;
      o.word === n.normal && (e.t += 1),
        o.method === "hasContraction" && (e.t += 1);
    }
  },
  cS = function (e, n) {
    let o = e.regs[e.r];
    const t = pi(e, n);
    e.t > 1 && o.greedy ? (t.length += e.t - n) : t.length++;
  },
  Cu = function (e) {
    const { regs: n } = e;
    let o = n[e.r],
      t = e.terms[e.t],
      l = e.t;
    return o.optional && n[e.r + 1] && o.negative
      ? !0
      : (o.optional && n[e.r + 1] && sS(e),
        t.implicit && e.terms[e.t + 1] && dS(e),
        (e.t += 1),
        (o.end === !0 && e.t !== e.terms.length && o.greedy !== !0) ||
        (o.greedy === !0 && !uS(e))
          ? null
          : (e.hasGroup === !0 && cS(e, l), !0));
  },
  md = function (e, n, o, t) {
    if (e.length === 0 || n.length === 0) return null;
    let l = {
      t: 0,
      terms: e,
      r: 0,
      regs: n,
      groups: {},
      start_i: o,
      phrase_length: t,
      inGroup: null,
    };
    for (; l.r < n.length; l.r += 1) {
      let g = n[l.r];
      if (
        ((l.hasGroup = !!g.group),
        l.hasGroup === !0 ? (l.inGroup = g.group) : (l.inGroup = null),
        !l.terms[l.t])
      ) {
        if (n.slice(l.r).some((f) => !f.optional) === !1) break;
        return null;
      }
      if (g.anything === !0 && g.greedy === !0) {
        if (!nS(l)) return null;
        continue;
      }
      if (g.choices !== void 0 && g.operator === "or") {
        if (!rS(l)) return null;
        continue;
      }
      if (g.choices !== void 0 && g.operator === "and") {
        if (!tS(l)) return null;
        continue;
      }
      if (g.anything === !0) {
        if ((g.negative && g.anything) || !Cu(l)) return null;
        continue;
      }
      if (eS(g, l) === !0) {
        if (!Cu(l)) return null;
        continue;
      }
      if (g.negative) {
        if (!iS(l)) return null;
        continue;
      }
      if (Xe(l.terms[l.t], g, l.start_i + l.t, l.phrase_length) === !0) {
        if (!Cu(l)) return null;
        continue;
      }
      if (g.optional !== !0) return null;
    }
    let s = [null, o, l.t + o];
    if (s[1] === s[2]) return null;
    let d = {};
    return (
      Object.keys(l.groups).forEach((g) => {
        let m = l.groups[g],
          y = o + m.start;
        d[g] = [null, y, y + m.length];
      }),
      { pointer: s, groups: d }
    );
  },
  hS = function (e, n) {
    let o = [],
      t = {};
    return e.length === 0
      ? { ptrs: o, byGroup: t }
      : (typeof n == "number" && (n = String(n)),
        n
          ? e.forEach((l) => {
              l.groups[n] && o.push(l.groups[n]);
            })
          : e.forEach((l) => {
              o.push(l.pointer),
                Object.keys(l.groups).forEach((s) => {
                  (t[s] = t[s] || []), t[s].push(l.groups[s]);
                });
            }),
        { ptrs: o, byGroup: t });
  },
  gS = function (e, n, o) {
    return (
      (e = e.filter((t) => {
        let [l, s, d] = t.pointer,
          g = o[l].slice(s, d);
        for (let m = 0; m < g.length; m += 1) {
          let y = g.slice(m);
          if (md(y, n, m, g.length) !== null) return !1;
        }
        return !0;
      })),
      e
    );
  },
  ty = function (e, n) {
    return (
      (e.pointer[0] = n),
      Object.keys(e.groups).forEach((o) => {
        e.groups[o][0] = n;
      }),
      e
    );
  },
  mS = function (e, n, o) {
    let t = md(e, n, 0, e.length);
    return t ? ((t = ty(t, o)), t) : null;
  },
  pS = function (e, n, o) {
    o = o || [];
    let { regs: t, group: l, justOne: s } = n,
      d = [];
    if (!t || t.length === 0) return { ptrs: [], byGroup: {} };
    const g = t.filter((m) => m.optional !== !0 && m.negative !== !0).length;
    e: for (let m = 0; m < e.length; m += 1) {
      let y = e[m];
      if (!(o[m] && jw(t, o[m]))) {
        if (t[0].start === !0) {
          let f = mS(y, t, m);
          f && d.push(f);
          continue;
        }
        for (let f = 0; f < y.length; f += 1) {
          let v = y.slice(f);
          if (v.length < g) break;
          let M = md(v, t, f, y.length);
          if (M) {
            if (((M = ty(M, m)), d.push(M), s === !0)) break e;
            let G = M.pointer[2];
            Math.abs(G - 1) > f && (f = Math.abs(G - 1));
          }
        }
      }
    }
    return (
      t[t.length - 1].end === !0 &&
        (d = d.filter((m) => {
          let y = m.pointer[0];
          return e[y].length === m.pointer[2];
        })),
      n.notIf && (d = gS(d, n.notIf, e)),
      (d = hS(d, l)),
      d.ptrs.forEach((m) => {
        let [y, f, v] = m;
        (m[3] = e[y][f].id), (m[4] = e[y][v - 1].id);
      }),
      d
    );
  },
  yS = { one: { termMethods: St, parseMatch: Jw, match: pS } },
  fS = {
    parseMatch: function (e, n) {
      const o = this.world();
      let t = o.methods.one.killUnicode;
      return t && (e = t(e, o)), o.methods.one.parseMatch(e, n, o);
    },
  },
  vS = { api: Aw, methods: yS, lib: fS },
  CS = /^\../,
  kS = /^#./,
  wS = (e) => (
    (e = e.replace(/&/g, "&amp;")),
    (e = e.replace(/</g, "&lt;")),
    (e = e.replace(/>/g, "&gt;")),
    (e = e.replace(/"/g, "&quot;")),
    (e = e.replace(/'/g, "&apos;")),
    e
  ),
  SS = function (e) {
    let n = "",
      o = "</span>";
    return (
      (e = wS(e)),
      CS.test(e)
        ? (n = `<span class="${e.replace(/^\./, "")}"`)
        : kS.test(e)
        ? (n = `<span id="${e.replace(/^#/, "")}"`)
        : ((n = `<${e}`), (o = `</${e}>`)),
      (n += ">"),
      { start: n, end: o }
    );
  },
  bS = function (e, n) {
    let o = {},
      t = {};
    return (
      Object.keys(n).forEach((l) => {
        let s = n[l],
          d = SS(l);
        typeof s == "string" && (s = e.match(s)),
          s.docs.forEach((g) => {
            if (g.every((f) => f.implicit)) return;
            let m = g[0].id;
            (o[m] = o[m] || []), o[m].push(d.start);
            let y = g[g.length - 1].id;
            (t[y] = t[y] || []), t[y].push(d.end);
          });
      }),
      { starts: o, ends: t }
    );
  },
  MS = function (e) {
    let { starts: n, ends: o } = bS(this, e),
      t = "";
    return (
      this.docs.forEach((l) => {
        for (let s = 0; s < l.length; s += 1) {
          let d = l[s];
          n.hasOwnProperty(d.id) && (t += n[d.id].join("")),
            (t += d.pre || ""),
            (t += d.text || ""),
            o.hasOwnProperty(d.id) && (t += o[d.id].join("")),
            (t += d.post || "");
        }
      }),
      t
    );
  },
  BS = { html: MS },
  ly =
    /[,:;)\]*.?~!\u0022\uFF02\u201D\u2019\u00BB\u203A\u2032\u2033\u2034\u301E\u00B4—-]+$/,
  zu =
    /^[(['"*~\uFF02\u201C\u2018\u201F\u201B\u201E\u2E42\u201A\u00AB\u2039\u2035\u2036\u2037\u301D\u0060\u301F]+/,
  PS = /[,:;)('"\u201D\]]/,
  HS = /^[-–—]$/,
  LS = / /,
  Do = function (e, n, o = !0) {
    let t = "";
    return (
      e.forEach((l) => {
        let s = l.pre || "",
          d = l.post || "";
        n.punctuation === "some" &&
          ((s = s.replace(zu, "")),
          HS.test(d) && (d = " "),
          (d = d.replace(PS, "")),
          (d = d.replace(/\?!+/, "?")),
          (d = d.replace(/!+/, "!")),
          (d = d.replace(/\?+/, "?")),
          (d = d.replace(/\.{2,}/, "")),
          l.tags.has("Abbreviation") && (d = d.replace(/\./, ""))),
          n.whitespace === "some" &&
            ((s = s.replace(/\s/, "")), (d = d.replace(/\s+/, " "))),
          n.keepPunct ||
            ((s = s.replace(zu, "")),
            d === "-" ? (d = " ") : (d = d.replace(ly, "")));
        let g = l[n.form || "text"] || l.normal || "";
        n.form === "implicit" && (g = l.implicit || l.text),
          n.form === "root" &&
            l.implicit &&
            (g = l.root || l.implicit || l.normal),
          (n.form === "machine" ||
            n.form === "implicit" ||
            n.form === "root") &&
            l.implicit &&
            (!d || !LS.test(d)) &&
            (d += " "),
          (t += s + g + d);
      }),
      o === !1 && (t = t.trim()),
      n.lowerCase === !0 && (t = t.toLowerCase()),
      t
    );
  },
  WS = function (e, n) {
    let o = "";
    if (!e || !e[0] || !e[0][0]) return o;
    for (let t = 0; t < e.length; t += 1) o += Do(e[t], n, !0);
    if ((n.keepSpace || (o = o.trim()), n.keepEndPunct === !1)) {
      e[0][0].tags.has("Emoticon") || (o = o.replace(zu, ""));
      let t = e[e.length - 1];
      t[t.length - 1].tags.has("Emoticon") || (o = o.replace(ly, "")),
        o.endsWith("'") && !o.endsWith("s'") && (o = o.replace(/'/, ""));
    }
    return n.cleanWhitespace === !0 && (o = o.trim()), o;
  },
  vo = {
    text: { form: "text" },
    normal: {
      whitespace: "some",
      punctuation: "some",
      case: "some",
      unicode: "some",
      form: "normal",
    },
    machine: {
      keepSpace: !1,
      whitespace: "some",
      punctuation: "some",
      case: "none",
      unicode: "some",
      form: "machine",
    },
    root: {
      keepSpace: !1,
      whitespace: "some",
      punctuation: "some",
      case: "some",
      unicode: "some",
      form: "root",
    },
    implicit: { form: "implicit" },
  };
vo.clean = vo.normal;
vo.reduced = vo.root;
let iy = [],
  Oo = 0;
for (; Oo < 64; ) iy[Oo] = 0 | (Math.sin(++Oo % Math.PI) * 4294967296);
const pd = function (e) {
    let n,
      o,
      t,
      l = [(n = 1732584193), (o = 4023233417), ~n, ~o],
      s = [],
      d = decodeURI(encodeURI(e)) + "",
      g = d.length;
    for (e = (--g / 4 + 2) | 15, s[--e] = g * 8; ~g; )
      s[g >> 2] |= d.charCodeAt(g) << (8 * g--);
    for (Oo = d = 0; Oo < e; Oo += 16) {
      for (
        g = l;
        d < 64;
        g = [
          (t = g[3]),
          n +
            (((t =
              g[0] +
              [(n & o) | (~n & t), (t & n) | (~t & o), n ^ o ^ t, o ^ (n | ~t)][
                (g = d >> 4)
              ] +
              iy[d] +
              ~~s[Oo | ([d, 5 * d + 1, 3 * d + 5, 7 * d][g] & 15)]) <<
              (g = [7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21][
                4 * g + (d++ % 4)
              ])) |
              (t >>> -g)),
          n,
          o,
        ]
      )
        (n = g[1] | 0), (o = g[2]);
      for (d = 4; d; ) l[--d] += g[d];
    }
    for (e = ""; d < 32; )
      e += ((l[d >> 3] >> ((1 ^ d++) * 4)) & 15).toString(16);
    return e;
  },
  AS = { text: !0, terms: !0 };
let rm = {
  case: "none",
  unicode: "some",
  form: "machine",
  punctuation: "some",
};
const ku = function (e, n) {
    return Object.assign({}, e, n);
  },
  Ka = {
    text: (e) => Do(e, { keepPunct: !0 }, !1),
    normal: (e) => Do(e, ku(vo.normal, { keepPunct: !0 }), !1),
    implicit: (e) => Do(e, ku(vo.implicit, { keepPunct: !0 }), !1),
    machine: (e) => Do(e, rm, !1),
    root: (e) => Do(e, ku(rm, { form: "root" }), !1),
    hash: (e) => pd(Do(e, { keepPunct: !0 }, !1)),
    offset: (e) => {
      let n = Ka.text(e).length;
      return { index: e[0].offset.index, start: e[0].offset.start, length: n };
    },
    terms: (e) =>
      e.map((n) => {
        let o = Object.assign({}, n);
        return (o.tags = Array.from(n.tags)), o;
      }),
    confidence: (e, n, o) => n.eq(o).confidence(),
    syllables: (e, n, o) => n.eq(o).syllables(),
    sentence: (e, n, o) => n.eq(o).fullSentence().text(),
    dirty: (e) => e.some((n) => n.dirty === !0),
  };
Ka.sentences = Ka.sentence;
Ka.clean = Ka.normal;
Ka.reduced = Ka.root;
const GS = function (e, n) {
    return (
      (n = n || {}),
      typeof n == "string" && (n = {}),
      (n = Object.assign({}, AS, n)),
      n.offset && e.compute("offset"),
      e.docs.map((o, t) => {
        let l = {};
        return (
          Object.keys(n).forEach((s) => {
            n[s] && Ka[s] && (l[s] = Ka[s](o, e, t));
          }),
          l
        );
      })
    );
  },
  ju = {
    json: function (e) {
      let n = GS(this, e);
      return typeof e == "number" ? n[e] : n;
    },
  };
ju.data = ju.json;
const RS = () => typeof window != "undefined" && window.document,
  NS = function (e) {
    let n = this.methods.one.debug || {};
    return e && n.hasOwnProperty(e)
      ? (n[e](this), this)
      : RS()
      ? (n.clientSide(this), this)
      : (n.tags(this), this);
  },
  ES = function (e) {
    let n = e.pre || "",
      o = e.post || "";
    return n + e.text + o;
  },
  FS = function (e, n) {
    let o = {};
    return (
      Object.keys(n).forEach((t) => {
        e.match(t).fullPointer.forEach((s) => {
          o[s[3]] = { fn: n[t], end: s[2] };
        });
      }),
      o
    );
  },
  sy = function (e, n) {
    let o = FS(e, n),
      t = "";
    return (
      e.docs.forEach((l, s) => {
        for (let d = 0; d < l.length; d += 1) {
          let g = l[d];
          if (o.hasOwnProperty(g.id)) {
            let { fn: m, end: y } = o[g.id],
              f = e.update([[s, d, y]]);
            (t += l[d].pre || ""),
              (t += m(f)),
              (d = y - 1),
              (t += l[d].post || "");
          } else t += ES(g);
        }
      }),
      t
    );
  },
  DS = (e) => Object.prototype.toString.call(e) === "[object Object]",
  TS = function (e) {
    let n = {};
    return (
      e.forEach((t) => {
        (n[t] = n[t] || 0), (n[t] += 1);
      }),
      Object.keys(n)
        .map((t) => ({ normal: t, count: n[t] }))
        .sort((t, l) => (t.count > l.count ? -1 : 0))
    );
  },
  OS = function (e) {
    if (DS(e)) return sy(this, e);
    if (e === "text") return this.text();
    if (e === "normal") return this.text("normal");
    if (e === "root") return this.text("root");
    if (e === "machine" || e === "reduced") return this.text("machine");
    if (e === "hash" || e === "md5") return pd(this.text());
    if (e === "json") return this.json();
    if (e === "offset" || e === "offsets")
      return this.compute("offset"), this.json({ offset: !0 });
    if (e === "array")
      return this.docs
        .map((o) => o.reduce((t, l) => t + l.pre + l.text + l.post, "").trim())
        .filter((o) => o);
    if (e === "freq" || e === "frequency" || e === "topk")
      return TS(this.json({ normal: !0 }).map((n) => n.normal));
    if (e === "terms") {
      let n = [];
      return (
        this.docs.forEach((o) => {
          let t = o.map((l) => l.text);
          (t = t.filter((l) => l)), (n = n.concat(t));
        }),
        n
      );
    }
    return e === "tags"
      ? this.docs.map((n) =>
          n.reduce(
            (o, t) => ((o[t.implicit || t.normal] = Array.from(t.tags)), o),
            {}
          )
        )
      : e === "debug"
      ? this.debug()
      : this.text();
  },
  xS = {
    debug: NS,
    out: OS,
    wrap: function (e) {
      return sy(this, e);
    },
  },
  VS = (e) => Object.prototype.toString.call(e) === "[object Object]",
  IS = {
    text: function (e) {
      let n = {};
      if (
        (e && typeof e == "string" && vo.hasOwnProperty(e)
          ? (n = Object.assign({}, vo[e]))
          : e && VS(e) && (n = Object.assign({}, e)),
        n.keepSpace === void 0 && !this.isFull() && (n.keepSpace = !1),
        n.keepEndPunct === void 0 && this.pointer)
      ) {
        let o = this.pointer[0];
        o && o[1] ? (n.keepEndPunct = !1) : (n.keepEndPunct = !0);
      }
      return (
        n.keepPunct === void 0 && (n.keepPunct = !0),
        n.keepSpace === void 0 && (n.keepSpace = !0),
        WS(this.docs, n)
      );
    },
  },
  _S = Object.assign({}, xS, IS, ju, BS),
  KS = function (e) {
    Object.assign(e.prototype, _S);
  },
  JS = function (e) {
    console.log("%c -=-=- ", "background-color:#6699cc;"),
      e.forEach((n) => {
        console.groupCollapsed(n.text());
        let t = n.docs[0].map((l) => {
          let s = l.text || "-";
          l.implicit && (s = "[" + l.implicit + "]");
          let d = "[" + Array.from(l.tags).join(", ") + "]";
          return { text: s, tags: d };
        });
        console.table(t, ["text", "tags"]), console.groupEnd();
      });
  },
  Ra = "\x1B[0m",
  In = {
    green: (e) => "\x1B[32m" + e + Ra,
    red: (e) => "\x1B[31m" + e + Ra,
    blue: (e) => "\x1B[34m" + e + Ra,
    magenta: (e) => "\x1B[35m" + e + Ra,
    cyan: (e) => "\x1B[36m" + e + Ra,
    yellow: (e) => "\x1B[33m" + e + Ra,
    black: (e) => "\x1B[30m" + e + Ra,
    dim: (e) => "\x1B[2m" + e + Ra,
    i: (e) => "\x1B[3m" + e + Ra,
  },
  zS = function (e, n) {
    return (
      n.one.tagSet &&
        (e = e.map((o) => {
          if (!n.one.tagSet.hasOwnProperty(o)) return o;
          const t = n.one.tagSet[o].color || "blue";
          return In[t](o);
        })),
      e.join(", ")
    );
  },
  jS = function (e) {
    let { docs: n, model: o } = e;
    n.length === 0 &&
      console.log(
        In.blue(`
     ──────`)
      ),
      n.forEach((t) => {
        console.log(
          In.blue(`
  ┌─────────`)
        ),
          t.forEach((l) => {
            let s = [...(l.tags || [])],
              d = l.text || "-";
            l.sense && (d = `{${l.normal}/${l.sense}}`),
              l.implicit && (d = "[" + l.implicit + "]"),
              (d = In.yellow(d));
            let g = "'" + d + "'";
            if (l.reference) {
              let y = e.update([l.reference]).text("normal");
              g += ` - ${In.dim(In.i("[" + y + "]"))}`;
            }
            g = g.padEnd(18);
            let m = In.blue("  │ ") + In.i(g) + "  - " + zS(s, o);
            console.log(m);
          });
      }),
      console.log(`
`);
  },
  $S = function (e) {
    let { docs: n } = e;
    console.log(""),
      n.forEach((o) => {
        let t = [];
        o.forEach((l) => {
          l.chunk === "Noun"
            ? t.push(In.blue(l.implicit || l.normal))
            : l.chunk === "Verb"
            ? t.push(In.green(l.implicit || l.normal))
            : l.chunk === "Adjective"
            ? t.push(In.yellow(l.implicit || l.normal))
            : l.chunk === "Pivot"
            ? t.push(In.red(l.implicit || l.normal))
            : t.push(l.implicit || l.normal);
        }),
          console.log(
            t.join(" "),
            `
`
          );
      }),
      console.log(`
`);
  },
  US = (e, n, o) => {
    let t = o * 9,
      l = n.start + t,
      s = l + n.length,
      d = e.substring(0, l),
      g = e.substring(l, s),
      m = e.substring(s, e.length);
    return [d, g, m];
  },
  qS = function (e, n, o) {
    let t = US(e, n, o);
    return `${t[0]}${In.blue(t[1])}${t[2]}`;
  },
  YS = function (e) {
    if (!e.found) return;
    let n = {};
    e.fullPointer.forEach((o) => {
      (n[o[0]] = n[o[0]] || []), n[o[0]].push(o);
    }),
      Object.keys(n).forEach((o) => {
        let l = e.update([[Number(o)]]).text();
        e
          .update(n[o])
          .json({ offset: !0 })
          .forEach((g, m) => {
            l = qS(l, g.offset, m);
          }),
          console.log(l);
      }),
      console.log(`
`);
  },
  QS = { tags: jS, clientSide: JS, chunks: $S, highlight: YS },
  ZS = { api: KS, methods: { one: { hash: pd, debug: QS } } },
  uy = function (e, n) {
    if (e[0] !== n[0]) return !1;
    let [, o, t] = e,
      [, l, s] = n;
    return (o <= l && t > l) || (l <= o && s > o);
  },
  XS = function (e) {
    let n = e[0][1],
      o = e[0][2];
    return (
      e.forEach((t) => {
        t[1] < n && (n = t[1]), t[2] > o && (o = t[2]);
      }),
      [e[0][0], n, o]
    );
  },
  yi = function (e) {
    let n = {};
    return (
      e.forEach((o) => {
        (n[o[0]] = n[o[0]] || []), n[o[0]].push(o);
      }),
      n
    );
  },
  eb = function (e) {
    let n = {};
    for (let o = 0; o < e.length; o += 1) n[e[o].join(",")] = e[o];
    return Object.values(n);
  },
  nb = function (e, n) {
    let [o, t] = e,
      l = n[1],
      s = n[2],
      d = {};
    if (t < l) {
      let g = l < e[2] ? l : e[2];
      d.before = [o, t, g];
    }
    return (d.match = n), e[2] > s && (d.after = [o, s, e[2]]), d;
  },
  ab = function (e, n) {
    return e[1] <= n[1] && n[2] <= e[2];
  },
  dy = function (e, n) {
    let o = yi(n),
      t = [];
    return (
      e.forEach((l) => {
        let [s] = l,
          d = o[s] || [];
        if (((d = d.filter((m) => ab(l, m))), d.length === 0)) {
          t.push({ passthrough: l });
          return;
        }
        d = d.sort((m, y) => m[1] - y[1]);
        let g = l;
        d.forEach((m, y) => {
          let f = nb(g, m);
          d[y + 1]
            ? (t.push({ before: f.before, match: f.match }),
              f.after && (g = f.after))
            : t.push(f);
        });
      }),
      t
    );
  },
  ob = 20,
  rb = function (e, n, o) {
    for (let t = 0; t < ob; t += 1) {
      if (n[o - t]) {
        let l = n[o - t].findIndex((s) => s.id === e);
        if (l !== -1) return [o - t, l];
      }
      if (n[o + t]) {
        let l = n[o + t].findIndex((s) => s.id === e);
        if (l !== -1) return [o + t, l];
      }
    }
    return null;
  },
  tb = function (e, n) {
    let [o, t, , , l] = e,
      s = n[o],
      d = s.findIndex((g) => g.id === l);
    return (
      d === -1
        ? ((e[2] = n[o].length), (e[4] = s.length ? s[s.length - 1].id : null))
        : (e[2] = d),
      n[o].slice(t, e[2] + 1)
    );
  },
  lb = function (e, n) {
    let o = [];
    return (
      e.forEach((t, l) => {
        if (!t) return;
        let [s, d, g, m, y] = t,
          f = n[s] || [];
        if (
          (d === void 0 && (d = 0),
          g === void 0 && (g = f.length),
          m && (!f[d] || f[d].id !== m))
        ) {
          let v = rb(m, n, s);
          if (v !== null) {
            let M = g - d;
            f = n[v[0]].slice(v[1], v[1] + M);
            let G = f[0] ? f[0].id : null;
            e[l] = [v[0], v[1], v[1] + M, G];
          }
        } else f = f.slice(d, g);
        f.length !== 0 &&
          d !== g &&
          (y && f[f.length - 1].id !== y && (f = tb(t, n)), o.push(f));
      }),
      (o = o.filter((t) => t.length > 0)),
      o
    );
  },
  ib = function (e) {
    let n = [];
    for (let o = 0; o < e.length; o += 1)
      for (let t = 0; t < e[o].length; t += 1) n.push(e[o][t]);
    return n;
  },
  sb = {
    one: { termList: ib, getDoc: lb, pointer: { indexN: yi, splitAll: dy } },
  },
  cy = function (e, n) {
    let o = e.concat(n),
      t = yi(o),
      l = [];
    return (
      o.forEach((s) => {
        let [d] = s;
        if (t[d].length === 1) {
          l.push(s);
          return;
        }
        let g = t[d].filter((y) => uy(s, y));
        g.push(s);
        let m = XS(g);
        l.push(m);
      }),
      (l = eb(l)),
      l
    );
  },
  hy = function (e, n) {
    let o = [];
    return (
      dy(e, n).forEach((l) => {
        l.passthrough && o.push(l.passthrough),
          l.before && o.push(l.before),
          l.after && o.push(l.after);
      }),
      o
    );
  },
  ub = function (e, n) {
    let o = e[1] < n[1] ? n[1] : e[1],
      t = e[2] > n[2] ? n[2] : e[2];
    return o < t ? [e[0], o, t] : null;
  },
  db = function (e, n) {
    let o = yi(n),
      t = [];
    return (
      e.forEach((l) => {
        let s = o[l[0]] || [];
        (s = s.filter((d) => uy(l, d))),
          s.length !== 0 &&
            s.forEach((d) => {
              let g = ub(l, d);
              g && t.push(g);
            });
      }),
      t
    );
  },
  cb = function (e) {
    return Object.prototype.toString.call(e) === "[object Array]";
  },
  yd = (e, n) => (typeof e == "string" || cb(e) ? n.match(e) : e || n.none()),
  Wt = function (e, n) {
    return e.map((o) => {
      let [t, l] = o;
      return n[t] && n[t][l] && (o[3] = n[t][l].id), o;
    });
  },
  ba = {};
ba.union = function (e) {
  e = yd(e, this);
  let n = cy(this.fullPointer, e.fullPointer);
  return (n = Wt(n, this.document)), this.toView(n);
};
ba.and = ba.union;
ba.intersection = function (e) {
  e = yd(e, this);
  let n = db(this.fullPointer, e.fullPointer);
  return (n = Wt(n, this.document)), this.toView(n);
};
ba.not = function (e) {
  e = yd(e, this);
  let n = hy(this.fullPointer, e.fullPointer);
  return (n = Wt(n, this.document)), this.toView(n);
};
ba.difference = ba.not;
ba.complement = function () {
  let e = this.all(),
    n = hy(e.fullPointer, this.fullPointer);
  return (n = Wt(n, this.document)), this.toView(n);
};
ba.settle = function () {
  let e = this.fullPointer;
  return (
    e.forEach((n) => {
      e = cy(e, [n]);
    }),
    (e = Wt(e, this.document)),
    this.update(e)
  );
};
const hb = function (e) {
    Object.assign(e.prototype, ba);
  },
  gb = { methods: sb, api: hb },
  mb = {
    buildNet: function (e) {
      let o = this.methods().one.buildNet(e, this.world());
      return (o.isNet = !0), o;
    },
  },
  pb = function (e) {
    e.prototype.sweep = function (n, o = {}) {
      const { world: t, docs: l } = this,
        { methods: s } = t;
      let d = s.one.bulkMatch(l, n, this.methods, o);
      o.tagger !== !1 && s.one.bulkTagger(d, l, this.world),
        (d = d.map((m) => {
          let y = m.pointer,
            f = l[y[0]][y[1]],
            v = y[2] - y[1];
          return f.index && (m.pointer = [f.index[0], f.index[1], y[1] + v]), m;
        }));
      let g = d.map((m) => m.pointer);
      return (
        (d = d.map(
          (m) => (
            (m.view = this.update([m.pointer])),
            delete m.regs,
            delete m.needs,
            delete m.pointer,
            delete m._expanded,
            m
          )
        )),
        { view: this.update(g), found: d }
      );
    };
  },
  $u = function (e) {
    return e.optional === !0 || e.negative === !0
      ? null
      : e.tag
      ? "#" + e.tag
      : e.word
      ? e.word
      : e.switch
      ? `%${e.switch}%`
      : null;
  },
  yb = function (e) {
    let n = [];
    return (
      e.forEach((o) => {
        n.push($u(o)),
          o.operator === "and" &&
            o.choices &&
            o.choices.forEach((t) => {
              t.forEach((l) => {
                n.push($u(l));
              });
            });
      }),
      n.filter((o) => o)
    );
  },
  fb = function (e) {
    let n = [],
      o = 0;
    return (
      e.forEach((t) => {
        t.operator === "or" &&
          !t.optional &&
          !t.negative &&
          (t.fastOr &&
            Array.from(t.fastOr).forEach((l) => {
              n.push(l);
            }),
          t.choices &&
            t.choices.forEach((l) => {
              l.forEach((s) => {
                let d = $u(s);
                d && n.push(d);
              });
            }),
          (o += 1));
      }),
      { wants: n, count: o }
    );
  },
  vb = function (e, n) {
    const o = n.methods.one.parseMatch;
    return (
      e.forEach((t) => {
        (t.regs = o(t.match, {}, n)),
          typeof t.ifNo == "string" && (t.ifNo = [t.ifNo]),
          t.notIf && (t.notIf = o(t.notIf, {}, n)),
          (t.needs = yb(t.regs));
        let { wants: l, count: s } = fb(t.regs);
        (t.wants = l),
          (t.minWant = s),
          (t.minWords = t.regs.filter((d) => !d.optional).length);
      }),
      e
    );
  },
  Cb = function (e, n) {
    e = vb(e, n);
    let o = {};
    e.forEach((l) => {
      l.needs.forEach((s) => {
        (o[s] = Array.isArray(o[s]) ? o[s] : []), o[s].push(l);
      }),
        l.wants.forEach((s) => {
          (o[s] = Array.isArray(o[s]) ? o[s] : []), o[s].push(l);
        });
    }),
      Object.keys(o).forEach((l) => {
        let s = {};
        o[l] = o[l].filter((d) =>
          typeof s[d.match] == "boolean" ? !1 : ((s[d.match] = !0), !0)
        );
      });
    let t = e.filter((l) => l.needs.length === 0 && l.wants.length === 0);
    return { hooks: o, always: t };
  },
  kb = function (e, n) {
    return e.map((o, t) => {
      let l = [];
      Object.keys(n).forEach((d) => {
        e[t].has(d) && (l = l.concat(n[d]));
      });
      let s = {};
      return (
        (l = l.filter((d) =>
          typeof s[d.match] == "boolean" ? !1 : ((s[d.match] = !0), !0)
        )),
        l
      );
    });
  },
  wb = function (e, n) {
    return e.map((o, t) => {
      let l = n[t];
      return (
        (o = o.filter((s) => s.needs.every((d) => l.has(d)))),
        (o = o.filter(
          (s) => !(s.ifNo !== void 0 && s.ifNo.some((d) => l.has(d)) === !0)
        )),
        (o = o.filter((s) =>
          s.wants.length === 0
            ? !0
            : s.wants.filter((g) => l.has(g)).length >= s.minWant
        )),
        o
      );
    });
  },
  Sb = function (e, n, o, t, l) {
    let s = [];
    for (let d = 0; d < e.length; d += 1)
      for (let g = 0; g < e[d].length; g += 1) {
        let m = e[d][g],
          y = t.one.match([n[d]], m);
        if (
          y.ptrs.length > 0 &&
          (y.ptrs.forEach((f) => {
            f[0] = d;
            let v = Object.assign({}, m, { pointer: f });
            m.unTag !== void 0 && (v.unTag = m.unTag), s.push(v);
          }),
          l.matchOne === !0)
        )
          return [s[0]];
      }
    return s;
  },
  bb = function (e, n) {
    return e.map((o, t) => {
      let l = n[t].length;
      return (o = o.filter((s) => l >= s.minWords)), o;
    });
  },
  Mb = function (e, n, o, t = {}) {
    let l = o.one.cacheDoc(e),
      s = kb(l, n.hooks);
    return (
      (s = wb(s, l)),
      n.always.length > 0 && (s = s.map((g) => g.concat(n.always))),
      (s = bb(s, e)),
      Sb(s, e, l, o, t)
    );
  },
  Bb = function (e, n, o) {
    let t = o.one.tagSet;
    if (!t.hasOwnProperty(n)) return !0;
    let l = t[n].not || [];
    for (let s = 0; s < e.length; s += 1) {
      let d = e[s];
      for (let g = 0; g < l.length; g += 1)
        if (d.tags.has(l[g]) === !0) return !1;
    }
    return !0;
  };
var tm = {};
const Pb = function (e, n, o) {
    const { model: t, methods: l } = o,
      { getDoc: s, setTag: d, unTag: g } = l.one,
      m = l.two.looksPlural;
    return e.length === 0
      ? e
      : ((typeof process == "undefined" || !tm ? self.env || {} : tm)
          .DEBUG_TAGS &&
          console.log(`

  \x1B[32m→ ${e.length} post-tagger:\x1B[0m`),
        e.map((f) => {
          if (!f.tag && !f.chunk && !f.unTag) return;
          let v = f.reason || f.match,
            M = s([f.pointer], n)[0];
          if (
            !(
              f.safe === !0 &&
              (Bb(M, f.tag, t) === !1 || M[M.length - 1].post === "-")
            )
          ) {
            if (f.tag !== void 0) {
              if (
                (d(M, f.tag, o, f.safe, `[post] '${v}'`), f.tag === "Noun" && m)
              ) {
                let G = M[M.length - 1];
                m(G.text)
                  ? d([G], "Plural", o, f.safe, "quick-plural")
                  : d([G], "Singular", o, f.safe, "quick-singular");
              }
              f.freeze === !0 && M.forEach((G) => (G.frozen = !0));
            }
            f.unTag !== void 0 && g(M, f.unTag, o, f.safe, v),
              f.chunk && M.forEach((G) => (G.chunk = f.chunk));
          }
        }));
  },
  Hb = { buildNet: Cb, bulkMatch: Mb, bulkTagger: Pb },
  Lb = { lib: mb, api: pb, methods: { one: Hb } };
var lm = {};
const gy = / /,
  im = function (e, n) {
    n === "Noun" && (e.chunk = n), n === "Verb" && (e.chunk = n);
  },
  my = function (e, n, o, t) {
    if (e.tags.has(n) === !0 || n === ".") return null;
    e.frozen === !0 && (t = !0);
    let l = o[n];
    if (l) {
      if (l.not && l.not.length > 0)
        for (let s = 0; s < l.not.length; s += 1) {
          if (t === !0 && e.tags.has(l.not[s])) return null;
          e.tags.delete(l.not[s]);
        }
      if (l.parents && l.parents.length > 0)
        for (let s = 0; s < l.parents.length; s += 1)
          e.tags.add(l.parents[s]), im(e, l.parents[s]);
    }
    return e.tags.add(n), (e.dirty = !0), im(e, n), !0;
  },
  Wb = function (e, n, o, t) {
    let l = n.split(gy);
    e.forEach((s, d) => {
      let g = l[d];
      g && ((g = g.replace(/^#/, "")), my(s, g, o, t));
    });
  },
  Ab = function (e) {
    return Object.prototype.toString.call(e) === "[object Array]";
  },
  Gb = (e, n, o = "") => {
    const t = (d) => "\x1B[33m\x1B[3m" + d + "\x1B[0m",
      l = (d) => "\x1B[3m" + d + "\x1B[0m";
    let s = e.map((d) => d.text || "[" + d.implicit + "]").join(" ");
    typeof n != "string" &&
      n.length > 2 &&
      (n = n.slice(0, 2).join(", #") + " +"),
      (n = typeof n != "string" ? n.join(", #") : n),
      console.log(
        ` ${t(s).padEnd(24)} \x1B[32m→\x1B[0m #${n.padEnd(22)}  ${l(o)}`
      );
  },
  py = function (e, n, o = {}, t, l) {
    const s = o.model.one.tagSet || {};
    if (!n) return;
    const d = typeof process == "undefined" || !lm ? self.env || {} : lm;
    if ((d && d.DEBUG_TAGS && Gb(e, n, l), Ab(n) === !0)) {
      n.forEach((g) => py(e, g, o, t));
      return;
    }
    if (typeof n != "string") {
      console.warn(`compromise: Invalid tag '${n}'`);
      return;
    }
    if (((n = n.trim()), gy.test(n))) {
      Wb(e, n, s, t);
      return;
    }
    n = n.replace(/^#/, "");
    for (let g = 0; g < e.length; g += 1) my(e[g], n, s, t);
  },
  Rb = function (e, n, o) {
    n = n.trim().replace(/^#/, "");
    for (let t = 0; t < e.length; t += 1) {
      let l = e[t];
      if (l.frozen === !0) continue;
      if (n === "*") {
        l.tags.clear();
        continue;
      }
      let s = o[n];
      if (s && s.children.length > 0)
        for (let d = 0; d < s.children.length; d += 1)
          l.tags.delete(s.children[d]);
      l.tags.delete(n);
    }
  },
  Nb = function (e, n, o) {
    if (!o.hasOwnProperty(n)) return !0;
    let t = o[n].not || [];
    for (let l = 0; l < t.length; l += 1) if (e.tags.has(t[l])) return !1;
    return !0;
  },
  po = function (e) {
    return (
      (e.children = e.children || []),
      (e._cache = e._cache || {}),
      (e.props = e.props || {}),
      (e._cache.parents = e._cache.parents || []),
      (e._cache.children = e._cache.children || []),
      e
    );
  },
  Eb = /^ *(#|\/\/)/,
  Fb = function (e) {
    let n = e.trim().split(/->/),
      o = [];
    n.forEach((l) => {
      o = o.concat(
        (function (s) {
          if (!(s = s.trim())) return null;
          if (/^\[/.test(s) && /\]$/.test(s)) {
            let d = (s = (s = s.replace(/^\[/, "")).replace(/\]$/, "")).split(
              /,/
            );
            return (
              (d = d.map((g) => g.trim()).filter((g) => g)),
              (d = d.map((g) => po({ id: g }))),
              d
            );
          }
          return [po({ id: s })];
        })(l)
      );
    }),
      (o = o.filter((l) => l));
    let t = o[0];
    for (let l = 1; l < o.length; l += 1) t.children.push(o[l]), (t = o[l]);
    return o[0];
  },
  _a = (e, n) => {
    let o = [],
      t = [e];
    for (; t.length > 0; ) {
      let l = t.pop();
      o.push(l),
        l.children &&
          l.children.forEach((s) => {
            n && n(l, s), t.push(s);
          });
    }
    return o;
  },
  fd = (e) => Object.prototype.toString.call(e) === "[object Array]",
  Il = (e) => (e = e || "").trim(),
  Db = function (e = []) {
    return typeof e == "string"
      ? (function (o) {
          let t = o.split(/\r?\n/),
            l = [];
          t.forEach((d) => {
            if (!d.trim() || Eb.test(d)) return;
            let g = ((m) => {
              const y = /^( {2}|\t)/;
              let f = 0;
              for (; y.test(m); ) (m = m.replace(y, "")), (f += 1);
              return f;
            })(d);
            l.push({ indent: g, node: Fb(d) });
          });
          let s = (function (d) {
            let g = { children: [] };
            return (
              d.forEach((m, y) => {
                m.indent === 0
                  ? (g.children = g.children.concat(m.node))
                  : d[y - 1] &&
                    (function (f, v) {
                      let M = f[v].indent;
                      for (; v >= 0; v -= 1) if (f[v].indent < M) return f[v];
                      return f[0];
                    })(d, y).node.children.push(m.node);
              }),
              g
            );
          })(l);
          return (s = po(s)), s;
        })(e)
      : fd(e)
      ? (function (o) {
          let t = {};
          o.forEach((s) => {
            t[s.id] = s;
          });
          let l = po({});
          return (
            o.forEach((s) => {
              if ((s = po(s)).parent)
                if (t.hasOwnProperty(s.parent)) {
                  let d = t[s.parent];
                  delete s.parent, d.children.push(s);
                } else console.warn(`[Grad] - missing node '${s.parent}'`);
              else l.children.push(s);
            }),
            l
          );
        })(e)
      : (_a((n = e)).forEach(po), n);
    var n;
  },
  Tb = (e) => "\x1B[31m" + e + "\x1B[0m",
  Ob = (e) => "\x1B[2m" + e + "\x1B[0m",
  Uu = function (e, n) {
    let o = "-> ";
    n && (o = Ob("→ "));
    let t = "";
    return (
      _a(e).forEach((l, s) => {
        let d = l.id || "";
        if ((n && (d = Tb(d)), s === 0 && !l.id)) return;
        let g = l._cache.parents.length;
        t +=
          "    ".repeat(g) +
          o +
          d +
          `
`;
      }),
      t
    );
  },
  sm = function (e) {
    let n = _a(e);
    n.forEach((t) => {
      delete (t = Object.assign({}, t)).children;
    });
    let o = n[0];
    return o && !o.id && Object.keys(o.props).length === 0 && n.shift(), n;
  },
  um = { text: Uu, txt: Uu, array: sm, flat: sm },
  dm = function (e, n) {
    return n === "nested" || n === "json"
      ? e
      : n === "debug"
      ? (console.log(Uu(e, !0)), null)
      : um.hasOwnProperty(n)
      ? um[n](e)
      : e;
  },
  wu = (e) => {
    _a(e, (n, o) => {
      n.id &&
        ((n._cache.parents = n._cache.parents || []),
        (o._cache.parents = n._cache.parents.concat([n.id])));
    });
  },
  xb = (e, n) => (
    Object.keys(n).forEach((o) => {
      if (n[o] instanceof Set) {
        let t = e[o] || new Set();
        e[o] = new Set([...t, ...n[o]]);
      } else if (
        ((t) => t && typeof t == "object" && !Array.isArray(t))(n[o])
      ) {
        let t = e[o] || {};
        e[o] = Object.assign({}, n[o], t);
      } else
        fd(n[o])
          ? (e[o] = n[o].concat(e[o] || []))
          : e[o] === void 0 && (e[o] = n[o]);
    }),
    e
  ),
  Vb = /\//;
let Ib = class si {
  constructor(n = {}) {
    Object.defineProperty(this, "json", {
      enumerable: !1,
      value: n,
      writable: !0,
    });
  }
  get children() {
    return this.json.children;
  }
  get id() {
    return this.json.id;
  }
  get found() {
    return this.json.id || this.json.children.length > 0;
  }
  props(n = {}) {
    let o = this.json.props || {};
    return (
      typeof n == "string" && (o[n] = !0),
      (this.json.props = Object.assign(o, n)),
      this
    );
  }
  get(n) {
    if (((n = Il(n)), !Vb.test(n))) {
      let t = this.json.children.find((l) => l.id === n);
      return new si(t);
    }
    let o =
      ((t, l) => {
        let s = ((d) =>
          typeof d != "string" ? d : (d = d.replace(/^\//, "")).split(/\//))(
          (l = l || "")
        );
        for (let d = 0; d < s.length; d += 1) {
          let g = t.children.find((m) => m.id === s[d]);
          if (!g) return null;
          t = g;
        }
        return t;
      })(this.json, n) || po({});
    return new si(o);
  }
  add(n, o = {}) {
    if (fd(n)) return n.forEach((l) => this.add(Il(l), o)), this;
    n = Il(n);
    let t = po({ id: n, props: o });
    return this.json.children.push(t), new si(t);
  }
  remove(n) {
    return (
      (n = Il(n)),
      (this.json.children = this.json.children.filter((o) => o.id !== n)),
      this
    );
  }
  nodes() {
    return _a(this.json).map(
      (n) => (delete (n = Object.assign({}, n)).children, n)
    );
  }
  cache() {
    return (
      ((n) => {
        let o = _a(n, (l, s) => {
            l.id &&
              ((l._cache.parents = l._cache.parents || []),
              (l._cache.children = l._cache.children || []),
              (s._cache.parents = l._cache.parents.concat([l.id])));
          }),
          t = {};
        o.forEach((l) => {
          l.id && (t[l.id] = l);
        }),
          o.forEach((l) => {
            l._cache.parents.forEach((s) => {
              t.hasOwnProperty(s) && t[s]._cache.children.push(l.id);
            });
          }),
          (n._cache.children = Object.keys(t));
      })(this.json),
      this
    );
  }
  list() {
    return _a(this.json);
  }
  fillDown() {
    var n;
    return (
      (n = this.json),
      _a(n, (o, t) => {
        t.props = xb(t.props, o.props);
      }),
      this
    );
  }
  depth() {
    wu(this.json);
    let n = _a(this.json),
      o = n.length > 1 ? 1 : 0;
    return (
      n.forEach((t) => {
        if (t._cache.parents.length === 0) return;
        let l = t._cache.parents.length + 1;
        l > o && (o = l);
      }),
      o
    );
  }
  out(n) {
    return wu(this.json), dm(this.json, n);
  }
  debug() {
    return wu(this.json), dm(this.json, "debug"), this;
  }
};
const yy = function (e) {
  let n = Db(e);
  return new Ib(n);
};
yy.prototype.plugin = function (e) {
  e(this);
};
const pr = {
    Noun: "blue",
    Verb: "green",
    Negative: "green",
    Date: "red",
    Value: "red",
    Adjective: "magenta",
    Preposition: "cyan",
    Conjunction: "cyan",
    Determiner: "cyan",
    Hyphenated: "cyan",
    Adverb: "cyan",
  },
  _b = function (e) {
    if (pr.hasOwnProperty(e.id)) return pr[e.id];
    if (pr.hasOwnProperty(e.is)) return pr[e.is];
    let n = e._cache.parents.find((o) => pr[o]);
    return pr[n];
  },
  Kb = function (e) {
    const n = {};
    return (
      e.forEach((o) => {
        let { not: t, also: l, is: s, novel: d } = o.props,
          g = o._cache.parents;
        l && (g = g.concat(l)),
          (n[o.id] = {
            is: s,
            not: t,
            novel: d,
            also: l,
            parents: g,
            children: o._cache.children,
            color: _b(o),
          });
      }),
      Object.keys(n).forEach((o) => {
        let t = new Set(n[o].not);
        n[o].not.forEach((l) => {
          n[l] && n[l].children.forEach((s) => t.add(s));
        }),
          (n[o].not = Array.from(t));
      }),
      n
    );
  },
  cm = function (e) {
    return e ? (typeof e == "string" ? [e] : e) : [];
  },
  Jb = function (e, n) {
    return (
      Object.keys(e).forEach((o) => {
        e[o].isA && (e[o].is = e[o].isA),
          e[o].notA && (e[o].not = e[o].notA),
          e[o].is &&
            typeof e[o].is == "string" &&
            !n.hasOwnProperty(e[o].is) &&
            !e.hasOwnProperty(e[o].is) &&
            (e[e[o].is] = {}),
          e[o].not &&
            typeof e[o].not == "string" &&
            !e.hasOwnProperty(e[o].not) &&
            !n.hasOwnProperty(e[o].not) &&
            !e.hasOwnProperty(e[o].not) &&
            (e[e[o].not] = {});
      }),
      e
    );
  },
  zb = function (e, n) {
    return (
      (e = Jb(e, n)),
      Object.keys(e).forEach((o) => {
        (e[o].children = cm(e[o].children)), (e[o].not = cm(e[o].not));
      }),
      Object.keys(e).forEach((o) => {
        (e[o].not || []).forEach((l) => {
          e[l] && e[l].not && e[l].not.push(o);
        });
      }),
      e
    );
  },
  jb = function (e) {
    const n = Object.keys(e).map((t) => {
      let l = e[t];
      const s = { not: new Set(l.not), also: l.also, is: l.is, novel: l.novel };
      return { id: t, parent: l.is, props: s, children: [] };
    });
    return yy(n).cache().fillDown().out("array");
  },
  $b = function (e) {
    return (
      Object.keys(e).forEach((n) => {
        (e[n] = Object.assign({}, e[n])), (e[n].novel = !0);
      }),
      e
    );
  },
  Ub = function (e, n) {
    Object.keys(n).length > 0 && (e = $b(e)), (e = zb(e, n));
    let o = Object.assign({}, n, e);
    const t = jb(o);
    return Kb(t);
  },
  qb = { one: { setTag: py, unTag: Rb, addTags: Ub, canBe: Nb } },
  hm = function (e) {
    return Object.prototype.toString.call(e) === "[object Array]";
  },
  Yb = {
    tag: function (e, n = "", o) {
      if (!this.found || !e) return this;
      let t = this.termList();
      if (t.length === 0) return this;
      const { methods: l, verbose: s, world: d } = this;
      return (
        s === !0 && console.log(" +  ", e, n || ""),
        hm(e)
          ? e.forEach((g) => l.one.setTag(t, g, d, o, n))
          : l.one.setTag(t, e, d, o, n),
        this.uncache(),
        this
      );
    },
    tagSafe: function (e, n = "") {
      return this.tag(e, n, !0);
    },
    unTag: function (e, n) {
      if (!this.found || !e) return this;
      let o = this.termList();
      if (o.length === 0) return this;
      const { methods: t, verbose: l, model: s } = this;
      l === !0 && console.log(" -  ", e, n || "");
      let d = s.one.tagSet;
      return (
        hm(e) ? e.forEach((g) => t.one.unTag(o, g, d)) : t.one.unTag(o, e, d),
        this.uncache(),
        this
      );
    },
    canBe: function (e) {
      e = e.replace(/^#/, "");
      let n = this.model.one.tagSet,
        o = this.methods.one.canBe,
        t = [];
      this.document.forEach((s, d) => {
        s.forEach((g, m) => {
          o(g, e, n) || t.push([d, m, m + 1]);
        });
      });
      let l = this.update(t);
      return this.difference(l);
    },
  },
  Qb = function (e) {
    Object.assign(e.prototype, Yb);
  },
  Zb = function (e) {
    const { model: n, methods: o } = this.world(),
      t = n.one.tagSet,
      l = o.one.addTags;
    let s = l(e, t);
    return (n.one.tagSet = s), this;
  },
  Xb = { addTags: Zb },
  gm = new Set(["Auxiliary", "Possessive"]),
  eM = function (e, n) {
    return (
      (e = e.sort((o, t) => {
        if (gm.has(o) || !n.hasOwnProperty(t)) return 1;
        if (gm.has(t) || !n.hasOwnProperty(o)) return -1;
        let l = n[o].children || [],
          s = l.length;
        l = n[t].children || [];
        let d = l.length;
        return s - d;
      })),
      e
    );
  },
  nM = function (e) {
    const { document: n, world: o } = e,
      t = o.model.one.tagSet;
    n.forEach((l) => {
      l.forEach((s) => {
        let d = Array.from(s.tags);
        s.tagRank = eM(d, t);
      });
    });
  },
  aM = {
    model: { one: { tagSet: {} } },
    compute: { tagRank: nM },
    methods: qb,
    api: Qb,
    lib: Xb,
  },
  oM = /([.!?\u203D\u2E18\u203C\u2047-\u2049\u3002]+\s)/g,
  rM = /^[.!?\u203D\u2E18\u203C\u2047-\u2049\u3002]+\s$/,
  tM = /((?:\r?\n|\r)+)/,
  lM = function (e) {
    let n = [],
      o = e.split(tM);
    for (let t = 0; t < o.length; t++) {
      let l = o[t].split(oM);
      for (let s = 0; s < l.length; s++)
        l[s + 1] &&
          rM.test(l[s + 1]) === !0 &&
          ((l[s] += l[s + 1]), (l[s + 1] = "")),
          l[s] !== "" && n.push(l[s]);
    }
    return n;
  },
  iM = /[a-z0-9\u00C0-\u00FF\u00a9\u00ae\u2000-\u3300\ud000-\udfff]/i,
  sM = /\S/,
  uM = function (e) {
    let n = [];
    for (let o = 0; o < e.length; o++) {
      let t = e[o];
      if (!(t === void 0 || t === "")) {
        if (sM.test(t) === !1 || iM.test(t) === !1) {
          if (n[n.length - 1]) {
            n[n.length - 1] += t;
            continue;
          } else if (e[o + 1]) {
            e[o + 1] = t + e[o + 1];
            continue;
          }
        }
        n.push(t);
      }
    }
    return n;
  },
  dM = function (e, n) {
    const o = n.methods.one.tokenize.isSentence,
      t = n.model.one.abbreviations || new Set();
    let l = [];
    for (let s = 0; s < e.length; s++) {
      let d = e[s];
      e[s + 1] && o(d, t) === !1
        ? (e[s + 1] = d + (e[s + 1] || ""))
        : d && d.length > 0 && (l.push(d), (e[s] = ""));
    }
    return l;
  },
  mm = 280,
  fy = {
    '"': '"',
    "＂": "＂",
    "“": "”",
    "‟": "”",
    "„": "”",
    "⹂": "”",
    "‚": "’",
    "«": "»",
    "‹": "›",
    "‵": "′",
    "‶": "″",
    "‷": "‴",
    "〝": "〞",
    "〟": "〞",
  },
  cM = RegExp("[" + Object.keys(fy).join("") + "]", "g"),
  hM = RegExp("[" + Object.values(fy).join("") + "]", "g"),
  pm = function (e) {
    if (!e) return !1;
    let n = e.match(hM);
    return n !== null && n.length === 1;
  },
  gM = function (e) {
    let n = [];
    for (let o = 0; o < e.length; o += 1) {
      let l = e[o].match(cM);
      if (l !== null && l.length === 1) {
        if (pm(e[o + 1]) && e[o + 1].length < mm) {
          (e[o] += e[o + 1]), n.push(e[o]), (e[o + 1] = ""), (o += 1);
          continue;
        }
        if (pm(e[o + 2])) {
          let s = e[o + 1] + e[o + 2];
          if (s.length < mm) {
            (e[o] += s),
              n.push(e[o]),
              (e[o + 1] = ""),
              (e[o + 2] = ""),
              (o += 2);
            continue;
          }
        }
      }
      n.push(e[o]);
    }
    return n;
  },
  mM = 250,
  ym = /\(/g,
  pM = /\)/g,
  yM = function (e) {
    let n = [];
    for (let o = 0; o < e.length; o += 1) {
      let l = e[o].match(ym);
      if (
        l !== null &&
        l.length === 1 &&
        e[o + 1] &&
        e[o + 1].length < mM &&
        e[o + 1].match(pM) !== null &&
        l.length === 1 &&
        !ym.test(e[o + 1])
      ) {
        (e[o] += e[o + 1]), n.push(e[o]), (e[o + 1] = ""), (o += 1);
        continue;
      }
      n.push(e[o]);
    }
    return n;
  },
  fM = /\S/,
  fm = /^\s+/,
  vM = function (e, n) {
    if (
      ((e = e || ""),
      (e = String(e)),
      !e || typeof e != "string" || fM.test(e) === !1)
    )
      return [];
    e = e.replace(" ", " ");
    let o = lM(e),
      t = uM(o);
    if (((t = dM(t, n)), (t = gM(t)), (t = yM(t)), t.length === 0)) return [e];
    for (let l = 1; l < t.length; l += 1) {
      let s = t[l].match(fm);
      s !== null && ((t[l - 1] += s[0]), (t[l] = t[l].replace(fm, "")));
    }
    return t;
  },
  CM = function (e, n) {
    let o = e.split(/[-–—]/);
    if (o.length <= 1) return !1;
    const { prefixes: t, suffixes: l } = n.one;
    return (o[0].length === 1 && /[a-z]/i.test(o[0])) ||
      t.hasOwnProperty(o[0]) ||
      ((o[1] = o[1].trim().replace(/[.?!]$/, "")), l.hasOwnProperty(o[1]))
      ? !1
      : /^([a-z\u00C0-\u00FF`"'/]+)[-–—]([a-z0-9\u00C0-\u00FF].*)/i.test(e) ===
          !0 ||
          /^[('"]?([0-9]{1,4})[-–—]([a-z\u00C0-\u00FF`"'/-]+[)'"]?$)/i.test(
            e
          ) === !0;
  },
  kM = function (e) {
    let n = [];
    const o = e.split(/[-–—]/);
    let t = "-",
      l = e.match(/[-–—]/);
    l && l[0] && (t = l);
    for (let s = 0; s < o.length; s++)
      s === o.length - 1 ? n.push(o[s]) : n.push(o[s] + t);
    return n;
  },
  wM = function (e) {
    const n = /^[0-9]{1,4}(:[0-9][0-9])?([a-z]{1,2})? ?[-–—] ?$/,
      o = /^[0-9]{1,4}([a-z]{1,2})? ?$/;
    for (let t = 0; t < e.length - 1; t += 1)
      e[t + 1] &&
        n.test(e[t]) &&
        o.test(e[t + 1]) &&
        ((e[t] = e[t] + e[t + 1]), (e[t + 1] = null));
    return e;
  },
  SM = new RegExp("\\p{L} ?\\/ ?\\p{L}+$", "u"),
  bM = function (e) {
    for (let n = 1; n < e.length - 1; n++)
      SM.test(e[n]) &&
        ((e[n - 1] += e[n] + e[n + 1]), (e[n] = null), (e[n + 1] = null));
    return e;
  },
  MM = /\S/,
  BM = /^[!?.]+$/,
  PM = /(\S+)/;
let qu = [
  ".",
  "?",
  "!",
  ":",
  ";",
  "-",
  "–",
  "—",
  "--",
  "...",
  "(",
  ")",
  "[",
  "]",
  '"',
  "'",
  "`",
  "«",
  "»",
  "*",
  "•",
];
qu = qu.reduce((e, n) => ((e[n] = !0), e), {});
const HM = function (e) {
    return Object.prototype.toString.call(e) === "[object Array]";
  },
  LM = function (e, n) {
    let o = [],
      t = [];
    if (((e = e || ""), typeof e == "number" && (e = String(e)), HM(e)))
      return e;
    const l = e.split(PM);
    for (let d = 0; d < l.length; d++) {
      if (CM(l[d], n) === !0) {
        t = t.concat(kM(l[d]));
        continue;
      }
      t.push(l[d]);
    }
    let s = "";
    for (let d = 0; d < t.length; d++) {
      let g = t[d];
      MM.test(g) === !0 && qu.hasOwnProperty(g) === !1 && BM.test(g) === !1
        ? (o.length > 0 ? ((o[o.length - 1] += s), o.push(g)) : o.push(s + g),
          (s = ""))
        : (s += g);
    }
    return (
      s && (o.length === 0 && (o[0] = ""), (o[o.length - 1] += s)),
      (o = bM(o)),
      (o = wM(o)),
      (o = o.filter((d) => d)),
      o
    );
  },
  vm = new RegExp("\\p{Letter}", "u"),
  _l = /[\p{Number}\p{Currency_Symbol}]/u,
  WM = /^[a-z]\.([a-z]\.)+/i,
  AM = /[sn]['’]$/,
  GM = function (e, n) {
    let { prePunctuation: o, postPunctuation: t, emoticons: l } = n.one,
      s = e,
      d = "",
      g = "",
      m = Array.from(e);
    if (l.hasOwnProperty(e.trim())) return { str: e.trim(), pre: d, post: " " };
    let y = m.length;
    for (let f = 0; f < y; f += 1) {
      let v = m[0];
      if (o[v] !== !0) {
        if (
          ((v === "+" || v === "-") && _l.test(m[1])) ||
          (v === "'" && v.length === 3 && _l.test(m[1])) ||
          vm.test(v) ||
          _l.test(v)
        )
          break;
        d += m.shift();
      }
    }
    y = m.length;
    for (let f = 0; f < y; f += 1) {
      let v = m[m.length - 1];
      if (t[v] !== !0) {
        if (vm.test(v) || _l.test(v)) break;
        (v === "." && WM.test(s) === !0) ||
          (v === "'" && AM.test(s) === !0) ||
          (g = m.pop() + g);
      }
    }
    return (
      (e = m.join("")),
      e === "" &&
        ((s = s.replace(/ *$/, (f) => ((g = f || ""), ""))), (e = s), (d = "")),
      { str: e, pre: d, post: g }
    );
  },
  RM = (e, n) => {
    let { str: o, pre: t, post: l } = GM(e, n);
    return { text: o, pre: t, post: l, tags: new Set() };
  },
  NM = function (e, n) {
    const o = n.model.one.unicode || {};
    e = e || "";
    let t = e.split("");
    return (
      t.forEach((l, s) => {
        o[l] && (t[s] = o[l]);
      }),
      t.join("")
    );
  },
  EM = function (e) {
    (e = e || ""), (e = e.toLowerCase()), (e = e.trim());
    let n = e;
    return (
      (e = e.replace(/[,;.!?]+$/, "")),
      (e = e.replace(/\u2026/g, "...")),
      (e = e.replace(/\u2013/g, "-")),
      /^[:;]/.test(e) === !1 &&
        ((e = e.replace(/\.{3,}$/g, "")),
        (e = e.replace(/[",.!:;?)]+$/g, "")),
        (e = e.replace(/^['"(]+/g, ""))),
      (e = e.replace(/[\u200B-\u200D\uFEFF]/g, "")),
      (e = e.trim()),
      e === "" && (e = n),
      (e = e.replace(/([0-9]),([0-9])/g, "$1$2")),
      e
    );
  },
  FM = /([A-Z]\.)+[A-Z]?,?$/,
  DM = /^[A-Z]\.,?$/,
  TM = /[A-Z]{2,}('s|,)?$/,
  OM = /([a-z]\.)+[a-z]\.?$/,
  xM = function (e) {
    return (
      FM.test(e) === !0 ||
      OM.test(e) === !0 ||
      DM.test(e) === !0 ||
      TM.test(e) === !0
    );
  },
  VM = function (e) {
    return xM(e) && (e = e.replace(/\./g, "")), e;
  },
  vy = function (e, n) {
    const o = n.methods.one.killUnicode;
    let t = e.text || "";
    (t = EM(t)), (t = o(t, n)), (t = VM(t)), (e.normal = t);
  },
  IM = function (e, n) {
    const { methods: o, model: t } = n,
      { splitSentences: l, splitTerms: s, splitWhitespace: d } = o.one.tokenize;
    return (
      (e = e || ""),
      (e = l(e, n).map((m) => {
        let y = s(m, t);
        return (
          (y = y.map((f) => d(f, t))),
          y.forEach((f) => {
            vy(f, n);
          }),
          y
        );
      })),
      e
    );
  },
  _M = /[ .][A-Z]\.? *$/i,
  KM = /(?:\u2026|\.{2,}) *$/,
  JM = new RegExp("\\p{L}", "u"),
  zM = /\. *$/,
  jM = /^[A-Z]\. $/,
  $M = function (e, n) {
    if (
      JM.test(e) === !1 ||
      _M.test(e) === !0 ||
      (e.length === 3 && jM.test(e)) ||
      KM.test(e) === !0
    )
      return !1;
    let t = e.replace(/[.!?\u203D\u2E18\u203C\u2047-\u2049] *$/, "").split(" "),
      l = t[t.length - 1].toLowerCase();
    return !(n.hasOwnProperty(l) === !0 && zM.test(e) === !0);
  },
  UM = {
    one: {
      killUnicode: NM,
      tokenize: {
        splitSentences: vM,
        isSentence: $M,
        splitTerms: LM,
        splitWhitespace: RM,
        fromString: IM,
      },
    },
  },
  qM = { "&": "and", "@": "at", "%": "percent", plz: "please", bein: "being" },
  YM = [
    "approx",
    "apt",
    "bc",
    "cyn",
    "eg",
    "esp",
    "est",
    "etc",
    "ex",
    "exp",
    "prob",
    "pron",
    "gal",
    "min",
    "pseud",
    "fig",
    "jd",
    "lat",
    "lng",
    "vol",
    "fm",
    "def",
    "misc",
    "plz",
    "ea",
    "ps",
    "sec",
    "pt",
    "pref",
    "pl",
    "pp",
    "qt",
    "fr",
    "sq",
    "nee",
    "ss",
    "tel",
    "temp",
    "vet",
    "ver",
    "fem",
    "masc",
    "eng",
    "adj",
    "vb",
    "rb",
    "inf",
    "situ",
    "vivo",
    "vitro",
    "wr",
  ],
  QM = [
    "adj",
    "adm",
    "adv",
    "asst",
    "atty",
    "bldg",
    "brig",
    "capt",
    "cmdr",
    "comdr",
    "cpl",
    "det",
    "dr",
    "esq",
    "gen",
    "gov",
    "hon",
    "jr",
    "llb",
    "lt",
    "maj",
    "messrs",
    "mlle",
    "mme",
    "mr",
    "mrs",
    "ms",
    "mstr",
    "phd",
    "prof",
    "pvt",
    "rep",
    "reps",
    "res",
    "rev",
    "sen",
    "sens",
    "sfc",
    "sgt",
    "sir",
    "sr",
    "supt",
    "surg",
  ],
  ZM = [
    "jan",
    "feb",
    "mar",
    "apr",
    "jun",
    "jul",
    "aug",
    "sep",
    "sept",
    "oct",
    "nov",
    "dec",
  ],
  XM = [
    "ad",
    "al",
    "arc",
    "ba",
    "bl",
    "ca",
    "cca",
    "col",
    "corp",
    "ft",
    "fy",
    "ie",
    "lit",
    "ma",
    "md",
    "pd",
    "tce",
  ],
  eB = ["dept", "univ", "assn", "bros", "inc", "ltd", "co"],
  nB = [
    "rd",
    "st",
    "dist",
    "mt",
    "ave",
    "blvd",
    "cl",
    "cres",
    "hwy",
    "ariz",
    "cal",
    "calif",
    "colo",
    "conn",
    "fla",
    "fl",
    "ga",
    "ida",
    "ia",
    "kan",
    "kans",
    "minn",
    "neb",
    "nebr",
    "okla",
    "penna",
    "penn",
    "pa",
    "dak",
    "tenn",
    "tex",
    "ut",
    "vt",
    "va",
    "wis",
    "wisc",
    "wy",
    "wyo",
    "usafa",
    "alta",
    "ont",
    "que",
    "sask",
  ],
  aB = [
    "dl",
    "ml",
    "gal",
    "qt",
    "pt",
    "tbl",
    "tsp",
    "tbsp",
    "km",
    "dm",
    "cm",
    "mm",
    "mi",
    "td",
    "hr",
    "hrs",
    "kg",
    "hg",
    "dg",
    "cg",
    "mg",
    "µg",
    "lb",
    "oz",
    "sq ft",
    "hz",
    "mps",
    "mph",
    "kmph",
    "kb",
    "mb",
    "tb",
    "lx",
    "lm",
    "fl oz",
    "yb",
  ];
let oB = [
    [YM],
    [aB, "Unit"],
    [XM, "Noun"],
    [QM, "Honorific"],
    [ZM, "Month"],
    [eB, "Organization"],
    [nB, "Place"],
  ],
  Cy = {},
  ui = {};
oB.forEach((e) => {
  e[0].forEach((n) => {
    (Cy[n] = !0),
      (ui[n] = "Abbreviation"),
      e[1] !== void 0 && (ui[n] = [ui[n], e[1]]);
  });
});
const rB = [
    "anti",
    "bi",
    "co",
    "contra",
    "de",
    "extra",
    "infra",
    "inter",
    "intra",
    "macro",
    "micro",
    "mis",
    "mono",
    "multi",
    "peri",
    "pre",
    "pro",
    "proto",
    "pseudo",
    "re",
    "sub",
    "supra",
    "trans",
    "tri",
    "un",
    "out",
    "ex",
  ].reduce((e, n) => ((e[n] = !0), e), {}),
  tB = {
    like: !0,
    ish: !0,
    less: !0,
    able: !0,
    elect: !0,
    type: !0,
    designate: !0,
  };
let Cm = {
    "!": "¡",
    "?": "¿Ɂ",
    '"': '“”"❝❞',
    "'": "‘‛❛❜’",
    "-": "—–",
    a: "ªÀÁÂÃÄÅàáâãäåĀāĂăĄąǍǎǞǟǠǡǺǻȀȁȂȃȦȧȺΆΑΔΛάαλАаѦѧӐӑӒӓƛæ",
    b: "ßþƀƁƂƃƄƅɃΒβϐϦБВЪЬвъьѢѣҌҍ",
    c: "¢©ÇçĆćĈĉĊċČčƆƇƈȻȼͻͼϲϹϽϾСсєҀҁҪҫ",
    d: "ÐĎďĐđƉƊȡƋƌ",
    e: "ÈÉÊËèéêëĒēĔĕĖėĘęĚěƐȄȅȆȇȨȩɆɇΈΕΞΣέεξϵЀЁЕеѐёҼҽҾҿӖӗễ",
    f: "ƑƒϜϝӺӻҒғſ",
    g: "ĜĝĞğĠġĢģƓǤǥǦǧǴǵ",
    h: "ĤĥĦħƕǶȞȟΉΗЂЊЋНнђћҢңҤҥҺһӉӊ",
    I: "ÌÍÎÏ",
    i: "ìíîïĨĩĪīĬĭĮįİıƖƗȈȉȊȋΊΐΪίιϊІЇіїi̇",
    j: "ĴĵǰȷɈɉϳЈј",
    k: "ĶķĸƘƙǨǩΚκЌЖКжкќҚқҜҝҞҟҠҡ",
    l: "ĹĺĻļĽľĿŀŁłƚƪǀǏǐȴȽΙӀӏ",
    m: "ΜϺϻМмӍӎ",
    n: "ÑñŃńŅņŇňŉŊŋƝƞǸǹȠȵΝΠήηϞЍИЙЛПийлпѝҊҋӅӆӢӣӤӥπ",
    o: "ÒÓÔÕÖØðòóôõöøŌōŎŏŐőƟƠơǑǒǪǫǬǭǾǿȌȍȎȏȪȫȬȭȮȯȰȱΌΘΟθοσόϕϘϙϬϴОФоѲѳӦӧӨөӪӫ",
    p: "ƤΡρϷϸϼРрҎҏÞ",
    q: "Ɋɋ",
    r: "ŔŕŖŗŘřƦȐȑȒȓɌɍЃГЯгяѓҐґ",
    s: "ŚśŜŝŞşŠšƧƨȘșȿЅѕ",
    t: "ŢţŤťŦŧƫƬƭƮȚțȶȾΓΤτϮТт",
    u: "ÙÚÛÜùúûüŨũŪūŬŭŮůŰűŲųƯưƱƲǓǔǕǖǗǘǙǚǛǜȔȕȖȗɄΰυϋύ",
    v: "νѴѵѶѷ",
    w: "ŴŵƜωώϖϢϣШЩшщѡѿ",
    x: "×ΧχϗϰХхҲҳӼӽӾӿ",
    y: "ÝýÿŶŷŸƳƴȲȳɎɏΎΥΫγψϒϓϔЎУучўѰѱҮүҰұӮӯӰӱӲӳ",
    z: "ŹźŻżŽžƵƶȤȥɀΖ",
  },
  ky = {};
Object.keys(Cm).forEach(function (e) {
  Cm[e].split("").forEach(function (n) {
    ky[n] = e;
  });
});
const lB = {
    "#": !0,
    "@": !0,
    _: !0,
    "°": !0,
    "​": !0,
    "‌": !0,
    "‍": !0,
    "\uFEFF": !0,
  },
  iB = { "%": !0, _: !0, "°": !0, "​": !0, "‌": !0, "‍": !0, "\uFEFF": !0 },
  sB = {
    "<3": !0,
    "</3": !0,
    "<\\3": !0,
    ":^P": !0,
    ":^p": !0,
    ":^O": !0,
    ":^3": !0,
  },
  uB = {
    one: {
      aliases: qM,
      abbreviations: Cy,
      prefixes: rB,
      suffixes: tB,
      prePunctuation: lB,
      postPunctuation: iB,
      lexicon: ui,
      unicode: ky,
      emoticons: sB,
    },
  },
  km = /\//,
  dB = /[a-z]\.[a-z]/i,
  cB = /[0-9]/,
  hB = function (e, n) {
    let o = e.normal || e.text || e.machine;
    const t = n.model.one.aliases;
    if (
      (t.hasOwnProperty(o) && ((e.alias = e.alias || []), e.alias.push(t[o])),
      km.test(o) && !dB.test(o) && !cB.test(o))
    ) {
      let l = o.split(km);
      l.length <= 3 &&
        l.forEach((s) => {
          (s = s.trim()),
            s !== "" && ((e.alias = e.alias || []), e.alias.push(s));
        });
    }
    return e;
  },
  gB = new RegExp("^\\p{Letter}+-\\p{Letter}+$", "u"),
  mB = function (e) {
    let n = e.implicit || e.normal || e.text;
    (n = n.replace(/['’]s$/, "")),
      (n = n.replace(/s['’]$/, "s")),
      (n = n.replace(/([aeiou][ktrp])in'$/, "$1ing")),
      gB.test(n) && (n = n.replace(/-/g, "")),
      (n = n.replace(/^[#@]/, "")),
      n !== e.normal && (e.machine = n);
  },
  pB = function (e) {
    let n = e.docs,
      o = {};
    for (let t = 0; t < n.length; t += 1)
      for (let l = 0; l < n[t].length; l += 1) {
        let s = n[t][l],
          d = s.machine || s.normal;
        (o[d] = o[d] || 0), (o[d] += 1);
      }
    for (let t = 0; t < n.length; t += 1)
      for (let l = 0; l < n[t].length; l += 1) {
        let s = n[t][l],
          d = s.machine || s.normal;
        s.freq = o[d];
      }
  },
  yB = function (e) {
    let n = 0,
      o = 0,
      t = e.document;
    for (let l = 0; l < t.length; l += 1)
      for (let s = 0; s < t[l].length; s += 1) {
        let d = t[l][s];
        (d.offset = {
          index: o,
          start: n + d.pre.length,
          length: d.text.length,
        }),
          (n += d.pre.length + d.text.length + d.post.length),
          (o += 1);
      }
  },
  fB = function (e) {
    let n = e.document;
    for (let o = 0; o < n.length; o += 1)
      for (let t = 0; t < n[o].length; t += 1) n[o][t].index = [o, t];
  },
  vB = function (e) {
    let n = 0,
      o = e.docs;
    for (let t = 0; t < o.length; t += 1)
      for (let l = 0; l < o[t].length; l += 1)
        o[t][l].normal !== "" && ((n += 1), (o[t][l].wordCount = n));
  },
  Su = function (e, n) {
    let o = e.docs;
    for (let t = 0; t < o.length; t += 1)
      for (let l = 0; l < o[t].length; l += 1) n(o[t][l], e.world);
  },
  CB = {
    alias: (e) => Su(e, hB),
    machine: (e) => Su(e, mB),
    normal: (e) => Su(e, vy),
    freq: pB,
    offset: yB,
    index: fB,
    wordCount: vB,
  },
  kB = {
    compute: CB,
    methods: UM,
    model: uB,
    hooks: ["alias", "machine", "index", "id"],
  },
  wB = function (e) {
    const n = e.model.one.typeahead,
      o = e.docs;
    if (o.length === 0 || Object.keys(n).length === 0) return;
    let t = o[o.length - 1] || [],
      l = t[t.length - 1];
    if (!l.post && n.hasOwnProperty(l.normal)) {
      let s = n[l.normal];
      (l.implicit = s),
        (l.machine = s),
        (l.typeahead = !0),
        e.compute.preTagger &&
          e.last().unTag("*").compute(["lexicon", "preTagger"]);
    }
  },
  SB = { typeahead: wB },
  bB = function () {
    const e = this.docs;
    if (e.length === 0) return this;
    let n = e[e.length - 1] || [],
      o = n[n.length - 1];
    return (
      o.typeahead === !0 &&
        o.machine &&
        ((o.text = o.machine), (o.normal = o.machine)),
      this
    );
  },
  MB = function (e) {
    e.prototype.autoFill = bB;
  },
  BB = function (e, n, o) {
    let t = {},
      l = [],
      s = o.prefixes || {};
    return (
      e.forEach((d) => {
        d = d.toLowerCase().trim();
        let g = d.length;
        n.max && g > n.max && (g = n.max);
        for (let m = n.min; m < g; m += 1) {
          let y = d.substring(0, m);
          if (!(n.safe && o.model.one.lexicon.hasOwnProperty(y))) {
            if (s.hasOwnProperty(y) === !0) {
              l.push(y);
              continue;
            }
            if (t.hasOwnProperty(y) === !0) {
              l.push(y);
              continue;
            }
            t[y] = d;
          }
        }
      }),
      (t = Object.assign({}, s, t)),
      l.forEach((d) => {
        delete t[d];
      }),
      t
    );
  },
  PB = (e) => Object.prototype.toString.call(e) === "[object Object]",
  HB = { safe: !0, min: 3 },
  LB = function (e = [], n = {}) {
    let o = this.model();
    (n = Object.assign({}, HB, n)),
      PB(e) && (Object.assign(o.one.lexicon, e), (e = Object.keys(e)));
    let t = BB(e, n, this.world());
    return (
      Object.keys(t).forEach((l) => {
        if (o.one.typeahead.hasOwnProperty(l)) {
          delete o.one.typeahead[l];
          return;
        }
        o.one.typeahead[l] = t[l];
      }),
      this
    );
  },
  WB = { typeahead: LB },
  AB = { one: { typeahead: {} } },
  GB = { model: AB, api: MB, lib: WB, compute: SB, hooks: ["typeahead"] };
Q.extend(kk);
Q.extend(ZS);
Q.extend(vS);
Q.extend(gb);
Q.extend(aM);
Q.plugin(jk);
Q.extend(kB);
Q.extend(qk);
Q.plugin(EC);
Q.extend(mw);
Q.extend(GB);
Q.extend(lw);
Q.extend(Lb);
const wy = {
    addendum: "addenda",
    corpus: "corpora",
    criterion: "criteria",
    curriculum: "curricula",
    genus: "genera",
    memorandum: "memoranda",
    opus: "opera",
    ovum: "ova",
    phenomenon: "phenomena",
    referendum: "referenda",
    alga: "algae",
    alumna: "alumnae",
    antenna: "antennae",
    formula: "formulae",
    larva: "larvae",
    nebula: "nebulae",
    vertebra: "vertebrae",
    analysis: "analyses",
    axis: "axes",
    diagnosis: "diagnoses",
    parenthesis: "parentheses",
    prognosis: "prognoses",
    synopsis: "synopses",
    thesis: "theses",
    neurosis: "neuroses",
    appendix: "appendices",
    index: "indices",
    matrix: "matrices",
    ox: "oxen",
    sex: "sexes",
    alumnus: "alumni",
    bacillus: "bacilli",
    cactus: "cacti",
    fungus: "fungi",
    hippopotamus: "hippopotami",
    libretto: "libretti",
    modulus: "moduli",
    nucleus: "nuclei",
    octopus: "octopi",
    radius: "radii",
    stimulus: "stimuli",
    syllabus: "syllabi",
    cookie: "cookies",
    calorie: "calories",
    auntie: "aunties",
    movie: "movies",
    pie: "pies",
    rookie: "rookies",
    tie: "ties",
    zombie: "zombies",
    leaf: "leaves",
    loaf: "loaves",
    thief: "thieves",
    foot: "feet",
    goose: "geese",
    tooth: "teeth",
    beau: "beaux",
    chateau: "chateaux",
    tableau: "tableaux",
    bus: "buses",
    gas: "gases",
    circus: "circuses",
    crisis: "crises",
    virus: "viruses",
    database: "databases",
    excuse: "excuses",
    abuse: "abuses",
    avocado: "avocados",
    barracks: "barracks",
    child: "children",
    clothes: "clothes",
    echo: "echoes",
    embargo: "embargoes",
    epoch: "epochs",
    deer: "deer",
    halo: "halos",
    man: "men",
    woman: "women",
    mosquito: "mosquitoes",
    mouse: "mice",
    person: "people",
    quiz: "quizzes",
    rodeo: "rodeos",
    shoe: "shoes",
    sombrero: "sombreros",
    stomach: "stomachs",
    tornado: "tornados",
    tuxedo: "tuxedos",
    volcano: "volcanoes",
  },
  wm = {
    Comparative: "true¦bett1f0;arth0ew0in0;er",
    Superlative: "true¦earlier",
    PresentTense: "true¦bests,sounds",
    Condition: "true¦lest,unless",
    PastTense: "true¦began,came,d4had,kneel3l2m0sa4we1;ea0sg2;nt;eap0i0;ed;id",
    Participle:
      "true¦0:09;a06b01cZdXeat0fSgQhPoJprov0rHs7t6u4w1;ak0ithdra02o2r1;i02uY;k0v0;nd1pr04;ergoJoJ;ak0hHo3;e9h7lain,o6p5t4un3w1;o1um;rn;g,k;ol0reS;iQok0;ught,wn;ak0o1runk;ne,wn;en,wn;ewriNi1uJ;dd0s0;ut3ver1;do4se0t1;ak0h2;do2g1;roG;ne;ast0i7;iv0o1;ne,tt0;all0loBor1;bi3g2s1;ak0e0;iv0o9;dd0;ove,r1;a5eamt,iv0;hos0lu1;ng;e4i3lo2ui1;lt;wn;tt0;at0en,gun;r2w1;ak0ok0;is0;en",
    Gerund: "true¦accord0be0doin,go0result0stain0;ing",
    Expression:
      "true¦a0Yb0Uc0Sd0Oe0Mfarew0Lg0FhZjeez,lWmVnToOpLsJtIuFvEw7y0;a5e3i1u0;ck,p;k04p0;ee,pee;a0p,s;!h;!a,h,y;a5h2o1t0;af,f;rd up,w;atsoever,e1o0;a,ops;e,w;hoo,t;ery w06oi0L;gh,h0;! 0h,m;huh,oh;here nPsk,ut tut;h0ic;eesh,hh,it,oo;ff,h1l0ow,sst;ease,s,z;ew,ooey;h1i,mg,o0uch,w,y;h,o,ps;! 0h;hTmy go0wT;d,sh;a7evertheless,o0;!pe;eh,mm;ah,eh,m1ol0;!s;ao,fao;aCeBi9o2u0;h,mph,rra0zzC;h,y;l1o0;r6y9;la,y0;! 0;c1moCsmok0;es;ow;!p hip hoor0;ay;ck,e,llo,y;ha1i,lleluj0;ah;!ha;ah,ee4o1r0;eat scott,r;l1od0sh; grief,bye;ly;! whiz;ell;e0h,t cetera,ureka,ww,xcuse me;k,p;'oh,a0rat,uh;m0ng;mit,n0;!it;mon,o0;ngratulations,wabunga;a2oo1r0tw,ye;avo,r;!ya;h,m; 1h0ka,las,men,rgh,ye;!a,em,h,oy;la",
    Negative: "true¦n0;ever,o0;n,t",
    QuestionWord: "true¦how3wh0;at,e1ich,o0y;!m,se;n,re; come,'s",
    Reflexive: "true¦h4it5my5o1the0your2;ir1m1;ne3ur0;sel0;f,ves;er0im0;self",
    Plural: "true¦dick0gre0ones,records;ens",
    "Unit|Noun":
      "true¦cEfDgChBinchAk9lb,m6newt5oz,p4qt,t1y0;ardEd;able1b0ea1sp;!l,sp;spo1;a,t,x;on9;!b,g,i1l,m,p0;h,s;!les;!b,elvin,g,m;!es;g,z;al,b;eet,oot,t;m,up0;!s",
    Value: "true¦a few",
    Imperative: "true¦bewa0come he0;re",
    "Plural|Verb": "true¦leaves",
    Demonym:
      "true¦0:15;1:12;a0Vb0Oc0Dd0Ce08f07g04h02iYjVkTlPmLnIomHpEqatari,rCs7t5u4v3welAz2;am0Gimbabwe0;enezuel0ietnam0I;gAkrai1;aiwTex0hai,rinida0Ju2;ni0Prkmen;a5cotti4e3ingapoOlovak,oma0Spaniard,udRw2y0W;ede,iss;negal0Cr09;sh;mo0uT;o5us0Jw2;and0;a2eru0Fhilippi0Nortugu07uerto r0S;kist3lesti1na2raguay0;ma1;ani;ami00i2orweP;caragu0geri2;an,en;a3ex0Lo2;ngo0Drocc0;cedo1la2;gasy,y07;a4eb9i2;b2thua1;e0Cy0;o,t01;azakh,eny0o2uwaiI;re0;a2orda1;ma0Ap2;anO;celandic,nd4r2sraeli,ta01vo05;a2iB;ni0qi;i0oneU;aiAin2ondur0unO;di;amEe2hanai0reek,uatemal0;or2rm0;gi0;ilipino,ren8;cuadoVgyp4mira3ngli2sto1thiopi0urope0;shm0;ti;ti0;aPominUut3;a9h6o4roat3ub0ze2;ch;!i0;lom2ngol5;bi0;a6i2;le0n2;ese;lifor1m2na3;bo2eroo1;di0;angladeshi,el6o4r3ul2;gaE;azi9it;li2s1;vi0;aru2gi0;si0;fAl7merBngol0r5si0us2;sie,tr2;a2i0;li0;genti2me1;ne;ba1ge2;ri0;ni0;gh0r2;ic0;an",
    Organization:
      "true¦0:4Q;a3Tb3Bc2Od2He2Df27g1Zh1Ti1Pj1Nk1Ll1Gm12n0Po0Mp0Cqu0Br02sTtHuCv9w3xiaomi,y1;amaha,m1Bou1w1B;gov,tu3C;a4e2iki1orld trade organizati33;leaRped0O;lls fargo,st1;fie2Hinghou2R;l1rner br3U;gree3Jl street journ2Im1E;an halOeriz2Xisa,o1;dafo2Yl1;kswagMvo;b4kip,n2ps,s1;a tod3Aps;es3Mi1;lev3Fted natio3C;er,s; mobi32aco beRd bOe9gi frida3Lh3im horto3Amz,o1witt3D;shi49y1;ota,s r 05;e 1in lizzy;b3carpen3Jdaily ma3Dguess w2holli0s1w2;mashing pumpki35uprem0;ho;ea1lack eyed pe3Xyr0Q;ch bo3Dtl0;l2n3Qs1xas instrumen1U;co,la m1F;efoni0Kus;a8cientology,e5ieme2Ymirnoff,np,o3pice gir6quare0Ata1ubaru;rbuc1to34;ks;ny,undgard1;en;a2x pisto1;ls;g1Wrs;few2Minsbur31lesfor03msu2E;adiohead,b8e4o1yana3C;man empi1Xyal 1;b1dutch she4;ank;a3d 1max,vl20;bu1c2Ahot chili peppe2Ylobst2N;ll;ders dige1Ll madrid;c,s;ant3Aizn2Q;a8bs,e5fiz2Ihilip4i3r1;emier 1udenti1D;leagTo2K;nk floyd,zza hut; morrBs;psi2tro1uge0E;br33chi0Tn33;!co;lant2Un1yp16; 2ason27da2P;ld navy,pec,range juli2xf1;am;us;aAb9e6fl,h5i4o1sa,vid3wa;k2tre dame,vart1;is;ia;ke,ntendo,ss0QvZ;l,s;c,st1Otflix,w1; 1sweek;kids on the block,york0D;a,c;nd22s2t1;ional aca2Po,we0U;a,c02d0S;aDcdonalCe9i6lb,o3tv,y1;spa1;ce;b1Tnsanto,ody blu0t1;ley cr1or0T;ue;c2t1;as,subisO;helin,rosoft;dica2rcedes benz,talli1;ca;id,re;ds;cs milk,tt19z24;a3e1g,ittle caesa1P; ore09novo,x1;is,mark,us; 1bour party;pres0Dz boy;atv,fc,kk,lm,m1od1O;art;iffy lu0Roy divisi0Jpmorgan1sa;! cha09;bm,hop,k3n1tv;g,te1;l,rpol;ea;a5ewlett pack1Vi3o1sbc,yundai;me dep1n1P;ot;tac1zbollah;hi;lliburt08sbro;eneral 6hq,ithub,l5mb,o2reen d0Ou1;cci,ns n ros0;ldman sachs,o1;dye1g0H;ar;axo smith kli04encoW;electr0Nm1;oto0Z;a5bi,c barcelo4da,edex,i2leetwood m03o1rito l0G;rd,xcY;at,fa,nancial1restoZ; tim0;na;cebook,nnie mae;b0Asa,u3xxon1; m1m1;ob0J;!rosceptics;aiml0De5isney,o4u1;nkin donu2po0Zran dur1;an;ts;j,w jon0;a,f lepp12ll,peche mode,r spieg02stiny's chi1;ld;aJbc,hFiDloudflaCnn,o3r1;aigsli5eedence clearwater reviv1ossra09;al;c7inba6l4m1o0Est09;ca2p1;aq;st;dplSg1;ate;se;a c1o chanQ;ola;re;a,sco1tigroup;! systems;ev2i1;ck fil a,na daily;r1y;on;d2pital o1rls jr;ne;bury,ill1;ac;aEbc,eBf9l5mw,ni,o1p,rexiteeU;ei3mbardiIston 1;glo1pizza;be;ng;o2ue c1;roV;ckbuster video,omingda1;le; g1g1;oodriL;cht2e ge0rkshire hathaw1;ay;el;cardi,idu,nana republ3s1xt5y5;f,kin robbi1;ns;ic;bYcTdidSerosmith,iRlKmEnheuser busDol,ppleAr6s4u3v2y1;er;is,on;di,todesk;hland o1sociated E;il;b3g2m1;co;os;ys; compu1be0;te1;rs;ch;c,d,erican3t1;!r1;ak; ex1;pre1;ss; 5catel2ta1;ir;! lu1;ce1;nt;jazeera,qae1;da;g,rbnb;as;/dc,a3er,tivision1;! blizz1;ard;demy of scienc0;es;ba",
    Possessive: "true¦its,my,our0thy;!s",
    "Noun|Verb":
      "true¦0:9W;1:AA;2:96;3:A3;4:9R;5:A2;6:9K;7:8N;8:7L;9:A8;A:93;B:8D;C:8X;a9Ob8Qc7Id6Re6Gf5Sg5Hh55i4Xj4Uk4Rl4Em40n3Vo3Sp2Squ2Rr21s0Jt02u00vVwGyFzD;ip,oD;ne,om;awn,e6Fie68;aOeMhJiHoErD;ap,e9Oink2;nd0rDuC;kDry,sh5Hth;!shop;ck,nDpe,re,sh;!d,g;e86iD;p,sD;k,p0t2;aDed,lco8W;r,th0;it,lk,rEsDt4ve,x;h,te;!ehou1ra9;aGen5FiFoD;iDmAte,w;ce,d;be,ew,sA;cuum,l4B;pDr7;da5gra6Elo6A;aReQhrPiOoMrGuEwiDy5Z;n,st;nDrn;e,n7O;aGeFiEoDu6;t,ub2;bu5ck4Jgg0m,p;at,k,nd;ck,de,in,nsDp,v7J;f0i8R;ll,ne,p,r4Yss,t94uD;ch,r;ck,de,e,le,me,p,re;e5Wow,u6;ar,e,ll,mp0st,xt;g,lDng2rg7Ps5x;k,ly;a0Sc0Ne0Kh0Fi0Dk0Cl0Am08n06o05pXquaBtKuFwD;ea88iD;ng,pe,t4;bGit,m,ppErD;fa3ge,pri1v2U;lDo6S;e6Py;!je8;aMeLiKoHrEuDy2;dy,ff,mb2;a85eEiDo5Pugg2;ke,ng;am,ss,t4;ckEop,p,rD;e,m;ing,pi2;ck,nk,t4;er,m,p;ck,ff,ge,in,ke,lEmp,nd,p2rDte,y;!e,t;k,l;aJeIiHlGoFrDur,y;ay,e56inDu3;g,k2;ns8Bt;a5Qit;ll,n,r87te;ed,ll;m,n,rk;b,uC;aDee1Tow;ke,p;a5Je4FiDo53;le,rk;eep,iDou4;ce,p,t;ateboa7Ii;de,gnDl2Vnk,p,ze;!al;aGeFiEoDuff2;ck,p,re,w;ft,p,v0;d,i3Ylt0;ck,de,pe,re,ve;aEed,nDrv1It;se,t2N;l,r4t;aGhedu2oBrD;aEeDibb2o3Z;en,w;pe,t4;le,n,r2M;cDfegua72il,mp2;k,rifi3;aZeHhy6LiGoEuD;b,in,le,n,s5X;a6ck,ll,oDpe,u5;f,t;de,ng,ot,p,s1W;aTcSdo,el,fQgPje8lOmMnLo17pJque6sFturn,vDwa6V;eDi27;al,r1;er74oFpe8tEuD;lt,me;!a55;l71rt;air,eaDly,o53;l,t;dezvo2Zt;aDedy;ke,rk;ea1i4G;a6Iist0r5N;act6Yer1Vo71uD;nd,se;a38o6F;ch,s6G;c1Dge,iEke,lly,nDp1Wt1W;ge,k,t;n,se;es6Biv0;a04e00hYiXlToNrEsy4uD;mp,n4rcha1sh;aKeIiHoDu4O;be,ceFdu3fi2grDje8mi1p,te6;amDe6W;!me;ed,ss;ce,de,nt;sDy;er6Cs;cti3i1;iHlFoEp,re,sDuCw0;e,i5Yt;l,p;iDl;ce,sh;nt,s5V;aEce,e32uD;g,mp,n7;ce,nDy;!t;ck,le,n17pe,tNvot;a1oD;ne,tograph;ak,eFnErDt;fu55mA;!c32;!l,r;ckJiInHrFsEtDu1y;ch,e9;s,te;k,tD;!y;!ic;nt,r,se;!a7;bje8ff0il,oErDutli3Qver4B;bAd0ie9;ze;a4ReFoDur1;d,tD;e,i3;ed,gle8tD;!work;aMeKiIoEuD;rd0;ck,d3Rld,nEp,uDve;nt,th;it5EkD;ey;lk,n4Brr5CsDx;s,ta2B;asuBn4UrDss;ge,it;il,nFp,rk3WsEtD;ch,t0;h,k,t0;da5n0oeuvB;aLeJiHoEuD;mp,st;aEbby,ck,g,oDve;k,t;d,n;cDe,ft,mAnIst;en1k;aDc0Pe4vK;ch,d,k,p,se;bFcEnd,p,t4uD;gh,n4;e,k;el,o2U;eEiDno4E;ck,d,ll,ss;el,y;aEo1OuD;i3mp;m,zz;mpJnEr46ssD;ue;c1Rdex,fluGha2k,se2HteDvoi3;nt,rD;e6fa3viD;ew;en3;a8le2A;aJeHiGoEuD;g,nt;l3Ano2Dok,pDr1u1;!e;ghli1Fke,nt,re,t;aDd7lp;d,t;ck,mGndFrEsh,tDu9;ch,e;bo3Xm,ne4Eve6;!le;!m0;aMear,ift,lKossJrFuD;arDe4Alp,n;antee,d;aFiEoDumb2;uCwth;ll,nd,p;de,sp;ip;aBoDue;ss,w;g,in,me,ng,s,te,ze;aZeWiRlNoJrFuD;ck,el,nDss,zz;c38d;aEoDy;st,wn;cDgme,me,nchi1;tuB;cFg,il,ld,rD;ce,e29mDwa31;!at;us;aFe0Vip,oDy;at,ck,od,wD;!er;g,ke,me,re,sh,vo1E;eGgFlEnDre,sh,t,x;an3i0Q;e,m,t0;ht,uB;ld;aEeDn3;d,l;r,tuB;ce,il,ll,rm,vo2W;cho,d7ffe8nMsKxFyeD;!baD;ll;cGerci1hFpDtra8;eriDo0W;en3me9;au6ibA;el,han7u1;caDtima5;pe;count0d,vy;a01eSiMoJrEuDye;b,el,mp,pli2X;aGeFiEoD;ne,p;ft,ll,nk,p,ve;am,ss;ft,g,in;cEd7ubt,wnloD;ad;k,u0E;ge6p,sFt4vD;e,iDor3;de;char7gui1h,liEpD;at4lay,u5;ke;al,bKcJfeIlGmaCposAsEtaD;il;e07iD;gn,re;ay,ega5iD;ght;at,ct;li04rea1;a5ut;b,ma7n3rDte;e,t;a0Eent0Dh06irc2l03oKrFuD;be,e,rDt;b,e,l,ve;aGeFoEuDy;sh;p,ss,wd;dAep;ck,ft,sh;at,de,in,lTmMnFordina5py,re,st,uDv0;gh,nDp2rt;s01t;ceHdu8fli8glomeIsFtDveN;a8rD;a6ol;e9tru8;ct;ntDrn;ra5;bHfoGmFpD;leDouCromi1;me9;aCe9it,u5;rt;at,iD;ne;lap1oD;r,ur;aEiDoud,ub;ck,p;im,w;aEeDip;at,ck,er;iGllen7nErD;ge,m,t;ge,nD;el;n,r;er,re;ke,ll,mp,noe,pGrXsFtEuDve;se,ti0I;alog,ch;h,t;!tuB;re;a03eZiXlToPrHuEyD;pa11;bb2ck2dgEff0mp,rDst,zz;den,n;et;anJeHiFoadEuD;i1sh;ca6;be,d7;ge;aDed;ch,k;ch,d;aFg,mb,nEoDrd0tt2x,ycott;k,st,t;d,e;rd,st;aFeCiDoYur;nk,tz;nd;me;as,d,ke,nd,opsy,tD;!ch,e;aFef,lt,nDt;d,efA;it;r,t;ck,il,lan3nIrFsEtt2;le;e,h;!gDk;aDe;in;!d,g,k;bu1c05dZge,iYlVnTppQrLsIttGucEwaD;rd;tiD;on;aDempt;ck;k,sD;i6ocia5;st;chFmD;!oD;ur;!iD;ve;eEroa4;ch;al;chDg0sw0;or;aEt0;er;rm;d,m,r;dreHvD;an3oD;ca5;te;ce;ss;cDe,he,t;eFoD;rd,u9;nt;nt,ss;se",
    Actor:
      "true¦0:7B;1:7G;2:6A;3:7F;4:7O;5:7K;a6Nb62c4Ud4Be41f3Sg3Bh30i2Uj2Qkin2Pl2Km26n1Zo1Sp0Vqu0Tr0JsQtJuHvEw8yo6;gi,ut6;h,ub0;aAe9i8o7r6;estl0it0;m2rk0;fe,nn0t2Bza2H;atherm2ld0;ge earn0it0nder0rri1;eter7i6oyF;ll5Qp,s3Z;an,ina2U;n6s0;c6Uder03;aoisea23e9herapi5iktok0o8r6ut1yco6S;a6endseLo43;d0mp,nscri0Bvel0;ddl0u1G;a0Qchn7en6na4st0;ag0;i3Oo0D;aiXcUeRhPiMki0mu26oJpGquaFtBu7wee6;p0theart;lt2per7r6;f0ge6Iviv1;h6inten0Ist5Ivis1;ero,um2;a8ep7r6;ang0eam0;bro2Nc2Ofa2Nmo2Nsi20;ff0tesm2;tt0;ec7ir2Do6;kesp59u0M;ia5Jt3;l7me6An,rcere6ul;r,ss;di0oi5;n7s6;sy,t0;g0n0;am2ephe1Iow6;girl,m2r2Q;cretInior cit3Fr6;gea4v6;a4it1;hol4Xi7reen6ulpt1;wr2C;e01on;l1nt;aEe9o8u6;l0nn6;er up,ingE;g40le mod3Zof0;a4Zc8fug2Ppo32searQv6;ere4Uolution6;ary;e6luYru22;ptio3T;bbi,dic5Vpp0;arter6e2Z;back;aYeWhSiRlOoKr8sycho7u6;nk,p31;logi5;aGeDiBo6;d9fess1g7ph47s6;pe2Ktitu51;en6ramm0;it1y;igy,uc0;est4Nme mini0Unce6s3E;!ss;a7si6;de4;ch0;ctiti39nk0P;dca0Oet,li6pula50rnst42;c2Itic6;al scie6i2;nti5;a6umb0;nn0y6;er,ma4Lwright;lgrim,one0;a8iloso7otogra7ra6ysi1V;se;ph0;ntom,rmaci5;r6ssi1T;form0s4O;i3El,nel3Yr8st1tr6wn;i6on;arWot;ent4Wi42tn0;ccupa4ffBp8r7ut6;ca5l0B;ac4Iganiz0ig2Fph2;er3t6;i1Jomet6;ri5;ic0spring;aBe9ie4Xo7u6;n,rser3J;b6mad,vi4V;le2Vo4D;i6mesis,phew;ce,ghb1;nny,rr3t1X;aEeDiAo7u6yst1Y;m8si16;der3gul,m7n6th0;arDk;!my;ni7s6;f02s0Jt0;on,st0;chan1Qnt1rcha4;gi9k0n8rtyr,t6y1;e,riar6;ch;ag0iac;ci2stra3I;a7e2Aieutena4o6;rd,s0v0;bor0d7ndlo6ss,urea3Fwy0ym2;rd;!y;!s28;e8o7u6;ggl0;gg0urna2U;st0;c3Hdol,llu3Ummigra4n6; l9c1Qfa4habi42nov3s7ve6;nt1stig3;pe0Nt6;a1Fig3ru0M;aw;airFeBistoAo8u6ygie1K;man6sba2H;!ita8;bo,st6usekN;age,e3P;ri2;ir,r6;m7o6;!ine;it;dress0sty2C;aLeIhostGirl26ladi3oCrand7u6;e5ru;c9daug0Jfa8m7pa6s2Y;!re4;a,o6;th0;hi1B;al7d6lf0;!de3A;ie,k6te26;eep0;!wr6;it0;isha,n6;i6tl04;us;mbl0rden0;aDella,iAo7r6;eela2Nie1P;e,re6ster pare4;be1Hm2r6st0;unn0;an2ZgZlmm17nanci0r6tt0;e6st la2H; marsh2OfigXm2;rm0th0;conoEdDlectriCm8n7x6;amin0cellency,i2A;emy,trepreneur,vironmenta1J;c8p6;er1loye6;e,r;ee;ci2;it1;mi5;aKeBi8ork,ri7u6we02;de,tche2H;ft0v0;ct3eti7plom2Hre6va;ct1;ci2ti2;aDcor3fencCi0InAput9s7tectLvel6;op0;ce1Ge6ign0;rt0;ee,y;iz6;en;em2;c1Ml0;d8nc0redev7ug6;ht0;il;!dy;a06e04fo,hXitizenWlToBr9u6;r3stomer6;! representat6;ive;e3it6;ic;lJmGnAord9rpor1Nu7w6;boy,ork0;n6ri0;ciTte1Q;in3;fidantAgressSs9t6;e0Kr6;ibut1o6;ll0;tab13ul1O;!e;edi2m6pos0rade;a0EeQissi6;on0;leag8on7um6;ni5;el;ue;e6own;an0r6;ic,k;!s;a9e7i6um;ld;erle6f;ad0;ir7nce6plFract0;ll1;m2wI;lebri6o;ty;dBptAr6shi0;e7pe6;nt0;r,t6;ak0;ain;et;aMeLiJlogg0oErBu6;dd0Fild0rgl9siness6;m2p7w6;om2;ers05;ar;i7o6;!k0th0;cklay0de,gadi0;hemi2oge8y6;!frie6;nd;ym2;an;cyc6sR;li5;atbox0ings;by,nk0r6;b0on7te6;nd0;!e07;c04dWge4nQpLrHsFtAu7yatull6;ah;nt7t6;h1oG;!ie;h8t6;e6orney;nda4;ie5le6;te;sis00tron6;aut,om0;chbis8isto7tis6;an,t;crU;hop;ost9p6;ari6rentiS;ti6;on;le;a9cest1im3nou8y6;bo6;dy;nc0;ly5rc6;hi5;mi8v6;entur0is1;er;ni7r6;al;str3;at1;or;counBquaintanArob9t6;ivi5or,re6;ss;st;at;ce;ta4;nt",
    "Adj|Noun":
      "true¦0:16;a1Db17c0Ud0Re0Mf0Dg0Ah08i06ju05l02mWnUoSpNrIsBt7u4v1watershed;a1ision0Z;gabo4nilla,ria1;b0Vnt;ndergr1pstairs;adua14ou1;nd;a3e1oken,ri0;en,r1;min0rori13;boo,n;age,e5ilv0Flack,o3quat,ta2u1well;bordina0Xper5;b0Lndard;ciali0Yl1vereign;e,ve16;cret,n1ri0;ior;a4e2ou1ubbiL;nd,tiY;ar,bBl0Wnt0p1side11;resent0Vublican;ci0Qsh;a4eriodic0last0Zotenti0r1;emi2incip0o1;!fession0;er,um;rall4st,tie0U;ff1pposi0Hv0;ens0Oi0C;agg01ov1uts;el;a5e3iniatJo1;bi01der07r1;al,t0;di1tr0N;an,um;le,riG;attOi2u1;sh;ber0ght,qC;stice,veniT;de0mpressioYn1;cumbe0Edividu0no0Dsta0Eterim;alf,o1umdrum;bby,melF;en2old,ra1;ph0Bve;er0ious;a7e5i4l3u1;git03t1;ure;uid;ne;llow,m1;aFiL;ir,t,vo1;riOuriO;l3p00x1;c1ecutUpeV;ess;d1iK;er;ar2e1;mographUrivO;k,l2;hiGlassSo2rude,unn1;ing;m5n1operK;creCstitueOte2vertab1;le;mpor1nt;ary;ic,m2p1;anion,lex;er2u1;ni8;ci0;al;e5lank,o4r1;i2u1;te;ef;ttom,urgeois;st;cadem9d6l2ntarct9r1;ab,ct8;e3tern1;at1;ive;rt;oles1ult;ce1;nt;ic",
    "Adj|Past":
      "true¦0:4Q;1:4C;2:4H;3:4E;a44b3Tc36d2Je29f20g1Wh1Si1Jj1Gkno1Fl1Am15n12o0Xp0Mqu0Kr08sLtEuAv9w4yellow0;a7ea6o4rinkl0;r4u3Y;n,ri0;k31th3;rp0sh0tZ;ari0e1O;n5p4s0;d1li1Rset;cov3derstood,i4;fi0t0;a8e3Rhr7i6ouTr4urn0wi4C;a4imm0ou2G;ck0in0pp0;ed,r0;eat2Qi37;m0nn0r4;get0ni2T;aOcKeIhGimFm0Hoak0pDt7u4;bsid3Ogge44s4;pe4ta2Y;ct0nd0;a8e7i2Eok0r5u4;ff0mp0nn0;ength2Hip4;ed,p0;am0reotyp0;in0t0;eci4ik0oH;al3Efi0;pRul1;a4ock0ut;d0r0;a4c1Jle2t31;l0s3Ut0;a6or5r4;at4e25;ch0;r0tt3;t4ut0;is2Mur1;aEe5o4;tt0;cAdJf2Bg9je2l8m0Knew0p7qu6s4;eTpe2t4;or0ri2;e3Dir0;e1lac0;at0e2Q;i0Rul1;eiv0o4ycl0;mme2Lrd0v3;in0lli0ti2A;a4ot0;li28;aCer30iBlAo9r5u4;mp0zzl0;e6i2Oo4;ce2Fd4lo1Anou30pos0te2v0;uc0;fe1CocCp0Iss0;i2Kli1L;ann0e2CuS;ck0erc0ss0;ck0i2Hr4st0;allLk0;bse7c6pp13rgan2Dver4;lo4whelm0;ok0;cupi0;rv0;aJe5o4;t0uri1A;ed0gle2;a6e5ix0o4ut0ys1N;di1Nt15u26;as0Clt0;n4rk0;ag0ufact0A;e6i5o4;ad0ck0st,v0;cens0m04st0;ft,v4;el0;tt0wn;a5o15u4;dg0s1B;gg0;llumSmpAn4sol1;br0cre1Ldebt0f8jZspir0t5v4;it0olv0;e4ox0Y;gr1n4re23;d0si15;e2l1o1Wuri1;li0o01r4;ov0;a6e1o4um03;ok0r4;ri0Z;mm3rm0;i6r5u4;a1Bid0;a0Ui0Rown;ft0;aAe9i8l6oc0Ir4;a4i0oz0Y;ctHg19m0;avo0Ju4;st3;ni08tt0x0;ar0;d0il0sc4;in1;dCl1mBn9quipp0s8x4;agger1c6p4te0T;a0Se4os0;ct0rie1D;it0;cap0tabliZ;cha0XgFha1As4;ur0;a0Zbarra0N;i0Buc1;aMeDi5r4;a01i0;gni08miniSre2s4;a9c6grun0Ft4;o4re0Hu17;rt0;iplWou4;nt0r4;ag0;bl0;cBdRf9l8p7ra6t5v4;elop0ot0;ail0ermQ;ng0;re07;ay0ight0;e4in0o0M;rr0;ay0enTor1;m5t0z4;ed,zl0;ag0p4;en0;aPeLhIlHo9r6u4;lt4r0stom03;iv1;a5owd0u4;sh0;ck0mp0;d0loAm7n4ok0v3;centr1f5s4troC;id3olid1;us0;b5pl4;ic1;in0;r0ur0;assi9os0utt3;ar5i4;ll0;g0m0;lebr1n6r4;ti4;fi0;tralJ;g0lcul1;aDewild3iCl9o7r5urn4;ed,t;ok4uis0;en;il0r0t4und;tl0;e5i4;nd0;ss0;as0;ffl0k0laMs0tt3;bPcNdKfIg0lFmaz0nDppBrm0ss9u5wa4;rd0;g5thor4;iz0;me4;nt0;o6u4;m0r0;li0re4;ci1;im1ticip1;at0;a5leg0t3;er0;rm0;fe2;ct0;ju5o7va4;nc0;st0;ce4knowledg0;pt0;and5so4;rb0;on0;ed",
    Singular:
      "true¦0:5J;1:5H;2:4W;3:4S;4:52;5:57;6:5L;7:56;8:5B;a52b4Lc3Nd35e2Xf2Og2Jh28in24j23k22l1Um1Ln1Ho1Bp0Rqu0Qr0FsZtMuHvCw9x r58yo yo;a9ha3Po3Q;f3i4Rt0Gy9;! arou39;arCeAideo ga2Qo9;cabu4Jl5C;gOr9t;di4Zt1Y;iety,ni4P;nBp30rAs 9;do43s5E;bani1in0;coordinat3Ader9;estima1to24we41; rex,aKeJhHiFoErBuAv9;! show;m2On2rntLto1D;agedy,ib9o4E;e,u9;n0ta46;ni1p2rq3L;c,er,m9;etF;ing9ree26;!y;am,mp3F;ct2le6x return;aNcMeKhor4QiJkHoGpin off,tDuBy9;ll9ner7st4T;ab2X;b9i1n28per bowl,rro1X;st3Ltot0;atAipe2Go1Lrate7udent9;! lo0I;i39u1;ft ser4Lmeo1I;elet5i9;ll,r3V;b38gn2Tte;ab2Jc9min3B;t,urity gua2N;e6ho2Y;bbatic0la3Jndwi0Qpi5;av5eDhetor2iAo9;de6om,w;tAv9;erb2C;e,u0;bDcBf9publ2r10spi1;er9orm3;e6r0;i9ord label;p2Ht0;a1u46;estion mark,ot2F;aPeMhoLiIlGoErAu9yram1F;ddi3HpErpo1Js3J;eBo9;bl3Zs9;pe3Jta1;dic1Rmi1Fp1Qroga8ss relea1F;p9rt0;py;a9ebisci1;q2Dte;cn2eAg9;!gy;!r;ne call,tocoK;anut,dAr9t0yo1;cen3Jsp3K;al,est0;nop4rAt9;e,hog5;adi11i2V;atme0bj3FcBpia1rde0thers,utspok5ve9wn3;n,r9;ti0Pview;cuAe9;an;pi3;arBitAot9umb3;a2Fhi2R;e,ra1;cot2ra8;aFeCiAo9ur0;nopo4p18rni2Nsq1Rti36uld;c,li11n0As9tt5;chief,si34;dAnu,t9;al,i3;al,ic;gna1mm0nd15rsupi0te9yf4;ri0;aDegCiBu9;ddi1n9;ch;me,p09; Be0M;bor14y9; 9er;up;eyno1itt5;el4ourn0;cBdices,itia8ni25sAtel0Lvert9;eb1J;e28titu1;en8i2T;aIeEighDoAu9;man right,s22;me9rmoFsp1Ftb0K;! r9;un; scho0YriY;a9i1N;d9v5; start,pho9;ne;ndful,sh brown,v5ze;aBelat0Ilaci3r9ul4yp1S;an9enadi3id;a1Cd slam,ny;df4r9;l2ni1I;aGeti1HiFlu1oCrAun9;er0;ee market,i9onti3;ga1;l4ur9;so9;me;ePref4;br2mi4;conoFffi7gg,lecto0Rmbas1EnCpidem2s1Zth2venBxAyel9;id;ampZempl0Nte6;i19t;er7terp9;ri9;se;my;eLiEoBr9ump tru0U;agonf4i9;er,ve thru;cAg7i4or,ssi3wn9;side;to0EumenE;aEgniDnn3sAvide9;nd;conte6incen8p9tri11;osi9;ti0C;ta0H;le0X;athBcAf9ni0terre6;ault 05err0;al,im0;!b9;ed;aWeThMiLlJoDr9;edit caBuc9;ib9;le;rd;efficDke,lCmmuniqLnsApi3rr0t0Xus9yo1;in;erv9uI;ato02;ic,lQ;ie6;er7i9oth;e6n2;ty,vil wM;aDeqCick5ocoBr9;istmas car9ysanthemum;ol;la1;ue;ndeli3racteri9;st2;iAllEr9;e0tifica1;liZ;hi3nFpErCt9ucus;erpi9hedr0;ll9;ar;!bohyd9ri3;ra1;it0;aAe,nib0t9;on;l,ry;aMeLiop2leJoHrDu9;nny,r9tterf4;g9i0;la9;ry;eakAi9;ck;fa9throB;st;dy,ro9wl;ugh;mi9;sh;an,l4;nkiArri3;er;ng;cSdMlInFppeti1rDsBtt2utop9;sy;ic;ce6pe9;ct;r9sen0;ay;ecAoma4tiA;ly;do1;i5l9;er7y;gy;en; hominDjAvan9;tage;ec8;ti9;ve;em;cCeAqui9;tt0;ta1;te;iAru0;al;de6;nt",
    "Person|Noun":
      "true¦a0Eb07c03dWeUfQgOhLjHkiGlFmCnBolive,p7r4s3trini06v1wa0;ng,rd,tts;an,enus,iol0;a,et;ky,onPumm09;ay,e1o0uby;bin,d,se;ed,x;a2e1o0;l,tt04;aLnJ;dYge,tR;at,orm;a0eloW;t0x,ya;!s;a9eo,iH;ng,tP;a2e1o0;lGy;an,w3;de,smi4y;a0erb,iOolBuntR;ll,z0;el;ail,e0iLuy;ne;a1ern,i0lo;elds,nn;ith,n0;ny;a0dEmir,ula,ve;rl;a4e3i1j,ol0;ly;ck,x0;ie;an,ja;i0wn;sy;am,h0liff,rystal;a0in,ristian;mbers,ri0;ty;a4e3i2o,r0ud;an0ook;dy;ll;nedict,rg;k0nks;er;l0rt;fredo,ma",
    "Actor|Verb":
      "true¦aCb8c5doctor,engineAfool,g3host,judge,m2nerd,p1recruit,scout,ushAvolunteAwi0;mp,tneA;arent,ilot;an,ime;eek,oof,r0uide;adu8oom;ha1o0;ach,nscript,ok;mpion,uffeur;o2u0;lly,tch0;er;ss;ddi1ffili0rchite1;ate;ct",
    MaleName:
      "true¦0:H6;1:FZ;2:DS;3:GQ;4:CZ;5:FV;6:GM;7:FP;8:GW;9:ET;A:C2;B:GD;aF8bE1cCQdBMeASfA1g8Yh88i7Uj6Sk6Bl5Mm48n3So3Ip33qu31r26s1Et0Ru0Ov0CwTxSyHzC;aCor0;cChC1karia,nAT;!hDkC;!aF6;!ar7CeF5;aJevgenBSoEuC;en,rFVsCu3FvEF;if,uf;nDs6OusC;ouf,s6N;aCg;s,tC;an,h0;hli,nCrosE1ss09;is,nC;!iBU;avi2ho5;aPeNiDoCyaEL;jcieBJlfgang,odrFutR;lFnC;f8TsC;lCt1;ow;bGey,frEhe4QlC;aE5iCy;am,e,s;ed8iC;d,ed;eAur;i,ndeD2rn2sC;!l9t1;lDyC;l1ne;lDtC;!er;aCHy;aKernDAiFladDoC;jteB0lodymyr;!iC;mFQsDB;cFha0ktBZnceDrgCOvC;a0ek;!nC;t,zo;!e4StBV;lCnC7sily;!entC;in9J;ghE2lCm70nax,ri,sm0;riCyss87;ch,k;aWeRhNiLoGrEuDyC;!l2roEDs1;n6r6E;avD0eCist0oy,um0;ntCRvBKy;bFdAWmCny;!asDmCoharu;aFFie,y;!z;iA6y;mCt4;!my,othy;adEeoDia0SomC;!as;!dor91;!de4;dFrC;enBKrC;anBJeCy;ll,nBI;!dy;dgh,ha,iCnn2req,tsu5V;cDAka;aYcotWeThPiMlobod0oKpenc2tEurDvenAEyCzym1;ed,lvest2;aj,e9V;anFeDuC;!aA;fan17phEQvCwaA;e77ie;!islaCl9;v,w;lom1rBuC;leymaDHta;dDgmu9UlCm1yabonga;as,v8B;!dhart8Yn9;aEeClo75;lCrm0;d1t1;h9Jne,qu1Jun,wn,yne;aDbastiEDk2Yl5Mpp,rgCth,ymoCU;e1Dio;m4n;!tC;!ie,y;eDPlFmEnCq67tosCMul;dCj2UtiA5;e01ro;!iATkeB6mC4u5;!ik,vato9K;aZeUheC8iRoGuDyC;an,ou;b99dDf4peAssC;!elEG;ol00y;an,bLc7MdJel,geIh0lHmGnEry,sDyC;!ce;ar7Ocoe,s;!aCnBU;ld,n;an,eo;a7Ef;l7Jr;e3Eg2n9olfo,riC;go;bBNeDH;cCl9;ar87c86h54kCo;!ey,ie,y;cFeA3gDid,ubByCza;an8Ln06;g85iC;naC6s;ep;ch8Kfa5hHin2je8HlGmFndEoHpha5sDul,wi36yC;an,mo8O;h9Im4;alDSol3O;iD0on;f,ph;ul;e9CinC;cy,t1;aOeLhilJiFrCyoG;aDeC;m,st1;ka85v2O;eDoC;tr;r8GtC;er,ro;!ipCl6H;!p6U;dCLrcy,tC;ar,e9JrC;!o7;b9Udra8So9UscAHtri62ulCv8I;!ie,o7;ctav6Ji2lImHndrBRrGsDtCum6wB;is,to;aDc6k6m0vCwaBE;al79;ma;i,vR;ar,er;aDeksandr,ivC;er,i2;f,v;aNeLguyBiFoCu3O;aDel,j4l0ma0rC;beAm0;h,m;cFels,g5i9EkDlC;es,s;!au,h96l78olaC;!i,y;hCkCol76;ol75;al,d,il,ls1vC;ilAF;hom,tC;e,hC;anCy;!a5i5;aYeViLoGuDyC;l4Nr1;hamDr84staC;fa,p6E;ed,mG;di10e,hamEis4JntDritz,sCussa;es,he;e,y;ad,ed,mC;ad,ed;cGgu5hai,kFlEnDtchC;!e8O;a9Pik;house,o7t1;ae73eC3ha8Iolaj;ah,hDkC;!ey,y;aDeC;al,l;el,l;hDlv3rC;le,ri8Ev4T;di,met;ay0c00gn4hWjd,ks2NlTmadZnSrKsXtDuric7VxC;imilBKwe8B;eHhEi69tCus,y69;!eo,hCia7;ew,i67;eDiC;as,eu,s;us,w;j,o;cHiGkFlEqu8Qsha83tCv3;iCy;!m,n;in,on;el,o7us;a6Yo7us;!elCin,o7us;!l8o;frAEi5Zny,u5;achDcoCik;lm;ai,y;amDdi,e5VmC;oud;adCm6W;ou;aulCi9P;ay;aWeOiMloyd,oJuDyC;le,nd1;cFdEiDkCth2uk;a7e;gi,s,z;ov7Cv6Hw6H;!as,iC;a6Een;g0nn52renDuCvA4we7D;!iS;!zo;am,n4oC;n5r;a9Yevi,la5KnHoFst2thaEvC;eCi;nte;bo;nCpo8V;!a82el,id;!nC;aAy;mEnd1rDsz73urenCwr6K;ce,t;ry,s;ar,beAont;aOeIhalHiFla4onr63rDu5SylC;e,s;istCzysztof;i0oph2;er0ngsl9p,rC;ilA9k,ollos;ed,id;en0iGnDrmCv4Z;it;!dDnCt1;e2Ny;ri4Z;r,th;cp2j4mEna8BrDsp6them,uC;ri;im,l;al,il;a03eXiVoFuC;an,lCst3;en,iC;an,en,o,us;aQeOhKkub4AnIrGsDzC;ef;eDhCi9Wue;!ua;!f,ph;dCge;i,on;!aCny;h,s,th6J;anDnC;!ath6Hie,n72;!nC;!es;!l,sCy;ph;o,qu3;an,mC;!i,m6V;d,ffFns,rCs4;a7JemDmai7QoCry;me,ni1H;i9Dy;!e73rC;ey,y;cKdBkImHrEsDvi2yC;dBs1;on,p2;ed,oDrCv67;e6Qod;d,s61;al,es5Wis1;a,e,oCub;b,v;ob,qu13;aTbNchiMgLke53lija,nuKonut,rIsEtCv0;ai,suC;ki;aDha0i8XmaCsac;el,il;ac,iaC;h,s;a,vinCw3;!g;k,nngu6X;nac1Xor;ka;ai,rahC;im;aReLoIuCyd6;beAgGmFsC;eyDsC;a3e3;in,n;ber5W;h,o;m2raDsse3wC;a5Pie;c49t1K;a0Qct3XiGnDrC;beAman08;dr7VrC;iCy2N;!k,q1R;n0Tt3S;bKlJmza,nIo,rEsDyC;a5KdB;an,s0;lEo67r2IuCv9;hi5Hki,tC;a,o;an,ey;k,s;!im;ib;a08e00iUlenToQrMuCyorgy;iHnFsC;!taC;f,vC;!e,o;n6tC;er,h2;do,lC;herDlC;auCerQ;me;aEegCov2;!g,orC;!io,y;dy,h7C;dfr9nza3XrDttfC;ri6C;an,d47;!n;acoGlEno,oCuseppe;rgiCvan6O;!o,s;be6Ies,lC;es;mo;oFrC;aDha4HrC;it,y;ld,rd8;ffErgC;!e7iCy;!os;!r9;bElBrCv3;eCla1Nr4Hth,y;th;e,rC;e3YielC;!i4;aXeSiQlOorrest,rCyod2E;aHedFiC;edDtC;s,z;ri18;!d42eri11riC;ck,k;nCs2;cEkC;ie,lC;in,yn;esLisC;!co,z3M;etch2oC;ri0yd;d5lConn;ip;deriFliEng,rC;dinaCg4nan0B;nd8;pe,x;co;bCdi,hd;iEriC;ce,zC;io;an,en,o;benez2dZfrYit0lTmMnJo3rFsteb0th0ugenEvCymBzra;an,eCge4D;ns,re3K;!e;gi,iDnCrol,v3w3;est8ie,st;cCk;!h,k;o0DriCzo;co,qC;ue;aHerGiDmC;aGe3A;lCrh0;!iC;a10o,s;s1y;nu5;beAd1iEliDm2t1viCwood;n,s;ot28s;!as,j5Hot,sC;ha;a3en;!dGg6mFoDua2QwC;a2Pin;arC;do;oZuZ;ie;a04eTiOmitrNoFrag0uEwDylC;an,l0;ay3Hig4D;a3Gdl9nc0st3;minFnDri0ugCvydGy2S;!lF;!a36nCov0;e1Eie,y;go,iDykC;as;cCk;!k;i,y;armuFetDll1mitri7neCon,rk;sh;er,m6riC;ch;id;andLepak,j0lbeAmetri4nIon,rGsEvDwCxt2;ay30ey;en,in;hawn,moC;nd;ek,riC;ck;is,nC;is,y;rt;re;an,le,mKnIrEvC;e,iC;!d;en,iEne0PrCyl;eCin,yl;l45n;n,o,us;!iCny;el,lo;iCon;an,en,on;a0Fe0Ch03iar0lRoJrFuDyrC;il,us;rtC;!is;aEistC;iaCob12;no;ig;dy,lInErC;ey,neliCy;s,us;nEor,rDstaC;nt3;ad;or;by,e,in,l3t1;aHeEiCyde;fCnt,ve;fo0Xt1;menDt4;us;s,t;rFuDyC;!t1;dCs;e,io;enC;ce;aHeGrisC;!toC;phCs;!eC;!r;st2t;d,rCs;b5leC;s,y;cDdrCs6;ic;il;lHmFrC;ey,lDroCy;ll;!o7t1;er1iC;lo;!eb,v3;a09eZiVjorn,laUoSrEuCyr1;ddy,rtKst2;er;aKeFiEuDyC;an,ce,on;ce,no;an,ce;nDtC;!t;dDtC;!on;an,on;dFnC;dDisC;lav;en,on;!foOl9y;bby,gd0rCyd;is;i0Lke;bElDshC;al;al,lL;ek;nIrCshoi;at,nEtC;!raC;m,nd;aDhaCie;rd;rd8;!iDjam3nCs1;ie,y;to;kaMlazs,nHrC;n9rDtC;!holomew;eCy;tt;ey;dCeD;ar,iC;le;ar1Nb1Dd16fon15gust3hm12i0Zja0Yl0Bm07nTputsiSrGsaFugustEveDyCziz;a0kh0;ry;o,us;hi;aMchiKiJjun,mHnEon,tCy0;em,hCie,ur8;ur;aDoC;!ld;ud,v;aCin;an,nd8;!el,ki;baCe;ld;ta;aq;aMdHgel8tCw6;hoFoC;iDnC;!i8y;ne;ny;er7rCy;eDzC;ej;!as,i,j,s,w;!s;s,tolC;iCy;!y;ar,iEmaCos;nu5r;el;ne,r,t;aVbSdBeJfHiGl01onFphonsEt1vC;aPin;on;e,o;so,zo;!sR;!onZrC;ed;c,jaHksFssaHxC;!andC;er,rC;e,os,u;andCei;ar,er,r;ndC;ro;en;eDrecC;ht;rt8;dd3in,n,sC;taC;ir;ni;dDm6;ar;an,en;ad,eC;d,t;in;so;aGi,olErDvC;ik;ian8;f8ph;!o;mCn;!a;dGeFraDuC;!bakr,lfazl;hCm;am;!l;allFel,oulaye,ulC;!lDrahm0;an;ah,o;ah;av,on",
    Uncountable:
      "true¦0:2E;1:2L;2:33;a2Ub2Lc29d22e1Rf1Ng1Eh16i11j0Yk0Wl0Rm0Hn0Do0Cp03rZsLt9uran2Jv7w3you gu0E;a5his17i4oo3;d,l;ldlife,ne;rm8t1;apor,ernacul29i3;neg28ol1Otae;eDhBiAo8r4un3yranny;a,gst1B;aff2Oea1Ko4ue nor3;th;o08u3;bleshoot2Ose1Tt;night,othpas1Vwn3;foEsfoE;me off,n;er3und1;e,mod2S;a,nnis;aDcCeBhAi9ki8o7p6t4u3weepstak0;g1Unshi2Hshi;ati08e3;am,el;ace2Keci0;ap,cc1meth2C;n,ttl0;lk;eep,ingl0or1C;lf,na1Gri0;ene1Kisso1C;d0Wfe2l4nd,t3;i0Iurn;m1Ut;abi0e4ic3;e,ke15;c3i01laxa11search;ogni10rea10;a9e8hys7luto,o5re3ut2;amble,mis0s3ten20;en1Zs0L;l3rk;i28l0EyH; 16i28;a24tr0F;nt3ti0M;i0s;bstetri24vercrowd1Qxyg09;a5e4owada3utella;ys;ptu1Ows;il poliZtional securi2;aAe8o5u3;m3s1H;ps;n3o1K;ey,o3;gamy;a3cha0Elancholy,rchandi1Htallurgy;sl0t;chine3g1Aj1Hrs,thema1Q; learn1Cry;aught1e6i5ogi4u3;ck,g12;c,s1M;ce,ghtn18nguis1LteratWv1;ath1isVss;ara0EindergartPn3;icke0Aowled0Y;e3upit1;a3llyfiGwel0G;ns;ce,gnor6mp5n3;forma00ter3;net,sta07;atiSort3rov;an18;a7e6isto09o3ung1;ckey,mework,ne4o3rseradi8spitali2use arrest;ky;s2y;adquarteXre;ir,libut,ppiHs3;hi3te;sh;ene8l6o5r3um,ymnas11;a3eZ;niUss;lf,re;ut3yce0F;en; 3ti0W;edit0Hpo3;ol;aNicFlour,o4urnit3;ure;od,rgive3uri1wl;ness;arCcono0LducaBlectr9n7quip8thi0Pvery6x3;ist4per3;ti0B;en0J;body,o08th07;joy3tertain3;ment;ici2o3;ni0H;tiS;nings,th;emi02i6o4raugh3ynas2;ts;pe,wnstai3;rs;abet0ce,s3;honZrepu3;te;aDelciChAivi07l8o3urrency;al,ld w6mmenta5n3ral,ttIuscoB;fusiHt 3;ed;ry;ar;assi01oth0;es;aos,e3;eMwK;us;d,rO;a8i6lood,owlHread5u3;ntGtt1;er;!th;lliarJs3;on;g3ss;ga3;ge;cKdviJeroGirFmBn6ppeal court,r4spi3thleL;rin;ithmet3sen3;ic;i6y3;o4th3;ing;ne;se;en5n3;es2;ty;ds;craft;bi8d3nau7;yna3;mi6;ce;id,ous3;ti3;cs",
    Infinitive:
      "true¦0:9G;1:9T;2:AD;3:90;4:9Z;5:84;6:AH;7:A9;8:92;9:A0;A:AG;B:AI;C:9V;D:8R;E:8O;F:97;G:6H;H:7D;a94b8Hc7Jd68e4Zf4Mg4Gh4Ai3Qj3Nk3Kl3Bm34nou48o2Vp2Equ2Dr1Es0CtZuTvRwI;aOeNiLors5rI;eJiI;ng,te;ak,st3;d5e8TthI;draw,er;a2d,ep;i2ke,nIrn;d1t;aIie;liADniAry;nJpI;ho8Llift;cov1dJear8Hfound8DlIplug,rav82tie,ve94;eaAo3X;erIo;cut,go,staAFvalA3w2G;aSeQhNoMrIu73;aIe72;ffi3Smp3nsI;aBfo7CpI;i8oD;pp3ugh5;aJiJrIwaD;eat5i2;nk;aImA0;ch,se;ck3ilor,keImp1r8L;! paD;a0Ic0He0Fh0Bi0Al08mugg3n07o05p02qu01tUuLwI;aJeeIim;p,t5;ll7Wy;bNccMffLggeCmmKppJrI;mouFpa6Zvi2;o0re6Y;ari0on;er,i4;e7Numb;li9KmJsiIveD;de,st;er9it;aMe8MiKrI;ang3eIi2;ng27w;fIng;f5le;b,gg1rI;t3ve;a4AiA;a4UeJit,l7DoI;il,of;ak,nd;lIot7Kw;icEve;atGeak,i0O;aIi6;m,y;ft,ng,t;aKi6CoJriIun;nk,v6Q;ot,rt5;ke,rp5tt1;eIll,nd,que8Gv1w;!k,m;aven9ul8W;dd5tis1Iy;a0FeKiJoI;am,t,ut;d,p5;a0Ab08c06d05f01group,hea00iZjoi4lXmWnVpTq3MsOtMup,vI;amp,eJiIo3B;sEve;l,rI;e,t;i8rI;ie2ofE;eLiKpo8PtIurfa4;o24rI;aHiBuctu8;de,gn,st;mb3nt;el,hra0lIreseF;a4e71;d1ew,o07;aHe3Fo2;a7eFiIo6Jy;e2nq41ve;mbur0nf38;r0t;inKleBocus,rJuI;el,rbiA;aBeA;an4e;aBu4;ei2k8Bla43oIyc3;gni39nci3up,v1;oot,uI;ff;ct,d,liIp;se,ze;tt3viA;aAenGit,o7;aWerUinpoiFlumm1LoTrLuI;b47ke,niArIt;poDsuI;aFe;eMoI;cKd,fe4XhibEmo7noJpo0sp1tru6vI;e,i6o5L;un4;la3Nu8;aGclu6dJf1occupy,sup0JvI;a6BeF;etermi4TiB;aGllu7rtr5Ksse4Q;cei2fo4NiAmea7plex,sIva6;eve8iCua6;mp1rItrol,ve;a6It6E;bOccuNmEpMutLverIwe;l07sJtu6Yu0wI;helm;ee,h1F;gr5Cnu2Cpa4;era7i4Ipo0;py,r;ey,seItaH;r2ss;aMe0ViJoIultiply;leCu6Pw;micJnIspla4;ce,g3us;!k;iIke,na9;m,ntaH;aPeLiIo0u3N;ke,ng1quIv5;eIi6S;fy;aKnIss5;d,gI;th5;rn,ve;ng2Gu1N;eep,idnJnI;e4Cow;ap;oHuI;gg3xtaI;po0;gno8mVnIrk;cTdRfQgeChPitia7ju8q1CsNtKun6EvI;a6eIo11;nt,rt,st;erJimi6BoxiPrI;odu4u6;aBn,pr03ru6C;iCpi8tIu8;all,il,ruB;abEibE;eCo3Eu0;iIul9;ca7;i7lu6;b5Xmer0pI;aLer4Uin9ly,oJrI;e3Ais6Bo2;rt,se,veI;riA;le,rt;aLeKiIoiCuD;de,jaInd1;ck;ar,iT;mp1ng,pp5raIve;ng5Mss;ath1et,iMle27oLrI;aJeIow;et;b,pp3ze;!ve5A;gg3ve;aTer45i5RlSorMrJuI;lf4Cndrai0r48;eJiIolic;ght5;e0Qsh5;b3XeLfeEgJsI;a3Dee;eIi2;!t;clo0go,shIwa4Z;ad3F;att1ee,i36;lt1st5;a0OdEl0Mm0FnXquip,rWsVtGvTxI;aRcPeDhOiNpJtIu6;ing0Yol;eKi8lIo0un9;aHoI;it,re;ct,di7l;st,t;a3oDu3B;e30lI;a10u6;lt,mi28;alua7oI;ke,l2;chew,pou0tab19;a0u4U;aYcVdTfSgQhan4joy,lPqOrNsuMtKvI;e0YisI;a9i50;er,i4rI;aHenGuC;e,re;iGol0F;ui8;ar9iC;a9eIra2ulf;nd1;or4;ang1oIu8;r0w;irc3lo0ou0ErJuI;mb1;oaGy4D;b3ct;bKer9pI;hasiIow1;ze;aKody,rI;a4oiI;d1l;lm,rk;ap0eBuI;ci40de;rIt;ma0Rn;a0Re04iKo,rIwind3;aw,ed9oI;wn;agno0e,ff1g,mi2Kne,sLvI;eIul9;rIst;ge,t;aWbVcQlod9mant3pNru3TsMtI;iIoDu37;lJngI;uiA;!l;ol2ua6;eJlIo0ro2;a4ea0;n0r0;a2Xe36lKoIu0S;uIv1;ra9;aIo0;im;a3Kur0;b3rm;af5b01cVduBep5fUliTmQnOpMrLsiCtaGvI;eIol2;lop;ch;a20i2;aDiBloIoD;re,y;oIy;te,un4;eJoI;liA;an;mEv1;a4i0Ao06raud,y;ei2iMla8oKrI;ee,yI;!pt;de,mIup3;missi34po0;de,ma7ph1;aJrief,uI;g,nk;rk;mp5rk5uF;a0Dea0h0Ai09l08oKrIurta1G;a2ea7ipp3uI;mb3;ales4e04habEinci6ll03m00nIrro6;cXdUfQju8no7qu1sLtKvI;eIin4;ne,r9y;aHin2Bribu7;er2iLoli2Epi8tJuI;lt,me;itu7raH;in;d1st;eKiJoIroFu0;rm;de,gu8rm;ss;eJoI;ne;mn,n0;eIlu6ur;al,i2;buCe,men4pI;eIi3ly;l,te;eBi6u6;r4xiC;ean0iT;rcumveFte;eJirp,oI;o0p;riAw;ncIre5t1ulk;el;a02eSi6lQoPrKuI;iXrIy;st,y;aLeaKiJoad5;en;ng;stfeLtX;ke;il,l11mba0WrrMth1;eIow;ed;!coQfrie1LgPhMliLqueaKstJtrIwild1;ay;ow;th;e2tt3;a2eJoI;ld;ad;!in,ui3;me;bysEckfi8ff3tI;he;b15c0Rd0Iff0Ggree,l0Cm09n03ppZrXsQttOuMvJwaE;it;eDoI;id;rt;gIto0X;meF;aIeCraB;ch,in;pi8sJtoI;niA;aKeIi04u8;mb3rt,ss;le;il;re;g0Hi0ou0rI;an9i2;eaKly,oiFrI;ai0o2;nt;r,se;aMi0GnJtI;icipa7;eJoIul;un4y;al;ly0;aJu0;se;lga08ze;iKlI;e9oIu6;t,w;gn;ix,oI;rd;a03jNmiKoJsoI;rb;pt,rn;niIt;st1;er;ouJuC;st;rn;cLhie2knowled9quiItiva7;es4re;ce;ge;eQliOoKrJusI;e,tom;ue;mIst;moJpI;any,liA;da7;ma7;te;pt;andPduBet,i6oKsI;coKol2;ve;liArt,uI;nd;sh;de;ct;on",
    Person:
      "true¦0:1Q;a29b1Zc1Md1Ee18f15g13h0Ri0Qj0Nk0Jl0Gm09n06o05p00rPsItCusain bolt,v9w4xzibit,y1;anni,oko on2uji,v1;an,es;en,o;a3ednesday adams,i2o1;lfram,o0Q;ll ferrell,z khalifa;lt disn1Qr1;hol,r0G;a2i1oltai06;n dies0Zrginia wo17;lentino rossi,n goG;a4h3i2ripp,u1yra banks;lZpac shakur;ger woods,mba07;eresa may,or;kashi,t1ylor;um,ya1B;a5carlett johanss0h4i3lobodan milosevic,no2ocr1Lpider1uperm0Fwami; m0Em0E;op dogg,w whi1H;egfried,nbad;akespeaTerlock holm1Sia labeouf;ddam hussa16nt1;a cla11ig9;aAe6i5o3u1za;mi,n dmc,paul,sh limbau1;gh;bin hood,d stew16nald1thko;in0Mo;han0Yngo starr,valdo;ese witherspo0i1mbrandt;ll2nh1;old;ey,y;chmaninoff,ffi,iJshid,y roma1H;a4e3i2la16o1uff daddy;cahont0Ie;lar,p19;le,rZ;lm17ris hilt0;leg,prah winfr0Sra;a2e1iles cra1Bostradam0J; yo,l5tt06wmQ;pole0s;a5e4i2o1ubar03;by,lie5net,rriss0N;randa ju1tt romn0M;ly;rl0GssiaB;cklemo1rkov,s0ta hari,ya angelou;re;ady gaga,e1ibera0Pu;bron jam0Xch wale1e;sa;anye west,e3i1obe bryant;d cudi,efer suther1;la0P;ats,sha;a2effers0fk,k rowling,rr tolki1;en;ck the ripp0Mwaharlal nehru,y z;liTnez,ron m7;a7e5i3u1;lk hog5mphrey1sa01;! bog05;l1tl0H;de; m1dwig,nry 4;an;ile selassFlle ber4m3rrison1;! 1;ford;id,mo09;ry;ast0iannis,o1;odwPtye;ergus0lorence nightinga08r1;an1ederic chopN;s,z;ff5m2nya,ustaXzeki1;el;eril lagasse,i1;le zatop1nem;ek;ie;a6e4i2octor w1rake;ho;ck w1ego maradoC;olf;g1mi lovaOnzel washingt0;as;l1nHrth vadR;ai lNt0;a8h5lint0o1thulhu;n1olio;an,fuci1;us;on;aucKop2ristian baMy1;na;in;millo,ptain beefhe4r1;dinal wols2son1;! palmF;ey;art;a8e5hatt,i3oHro1;ck,n1;te;ll g1ng crosby;atB;ck,nazir bhut2rtil,yon1;ce;to;nksy,rack ob1;ama;l 6r3shton kutch2vril lavig8yn ra1;nd;er;chimed2istot1;le;es;capo2paci1;no;ne",
    Adjective:
      "true¦0:AI;1:BS;2:BI;3:BA;4:A8;5:84;6:AV;7:AN;8:AF;9:7H;A:BQ;B:AY;C:BC;D:BH;E:9Y;aA2b9Ec8Fd7We79f6Ng6Eh61i4Xj4Wk4Tl4Im41n3Po36p2Oquart7Pr2Ds1Dt14uSvOwFye29;aMeKhIiHoF;man5oFrth7G;dADzy;despreB1n w97s86;acked1UoleF;!sa6;ather1PeFll o70ste1D;!k5;nt1Ist6Ate4;aHeGiFola5T;bBUce versa,gi3Lle;ng67rsa5R;ca1gBSluAV;lt0PnLpHrGsFttermoBL;ef9Ku3;b96ge1; Hb32pGsFtiAH;ca6ide d4R;er,i85;f52to da2;a0Fbeco0Hc0Bd04e02f01gu1XheaBGiXkn4OmUnTopp06pRrNsJtHus0wF;aFiel3K;nt0rra0P;app0eXoF;ld,uS;eHi37o5ApGuF;perv06spec39;e1ok9O;en,ttl0;eFu5;cogn06gul2RlGqu84sF;erv0olv0;at0en33;aFrecede0E;id,rallel0;am0otic0;aFet;rri0tF;ch0;nFq26vers3;sur0terFv7U;eFrupt0;st0;air,inish0orese98;mploy0n7Ov97xpF;ect0lain0;eHisFocume01ue;clFput0;os0;cid0rF;!a8Scov9ha8Jlyi8nea8Gprivileg0sMwF;aFei9I;t9y;hGircumcFonvin2U;is0;aFeck0;lleng0rt0;b20ppea85ssuGttend0uthorF;iz0;mi8;i4Ara;aLeIhoHip 25oGrF;anspare1encha1i2;geth9leADp notch,rpB;rny,ugh6H;ena8DmpGrFs6U;r49tia4;eCo8P;leFst4M;nt0;a0Dc09e07h06i04ki03l01mug,nobbi4XoVpRqueami4XtKuFymb94;bHccinAi generis,pFr5;erFre7N;! dup9b,vi70;du0li7Lp6IsFurb7J;eq9Atanda9X;aKeJi16o2QrGubboFy4Q;rn;aightFin5GungS; fFfF;or7V;adfa9Pri6;lwa6Ftu82;arHeGir6NlendBot Fry;on;c3Qe1S;k5se; call0lImb9phistic16rHuFviV;ndFth1B;proof;dBry;dFub6; o2A;e60ipF;pe4shod;ll0n d7R;g2HnF;ceEg6ist9;am3Se9;co1Zem5lfFn6Are7; suf4Xi43;aGholFient3A;ar5;rlFt4A;et;cr0me,tisfac7F;aOeIheumatoBiGoF;bu8Ztt7Gy3;ghtFv3; 1Sf6X;cJdu8PlInown0pro69sGtF;ard0;is47oF;lu2na1;e1Suc45;alcit8Xe1ondi2;bBci3mpa1;aSePicayu7laOoNrGuF;bl7Tnjabi;eKiIoF;b7VfGmi49pFxi2M;er,ort81;a7uD;maFor,sti7va2;!ry;ciDexis0Ima2CpaB;in55puli8G;cBid;ac2Ynt 3IrFti2;ma40tFv7W;!i3Z;i2YrFss7R;anoBtF; 5XiF;al,s5V;bSffQkPld OnMrLth9utKverF;!aIbMdHhGni75seas,t,wF;ei74rou74;a63e7A;ue;ll;do1Ger,si6A;d3Qg2Aotu5Z; bFbFe on o7g3Uli7;oa80;fashion0school;!ay; gua7XbFha5Uli7;eat;eHligGsF;ce7er0So1C;at0;diFse;a1e1;aOeNiMoGuF;anc0de; moEnHrthFt6V;!eFwe7L;a7Krn;chaGdescri7Iprof30sF;top;la1;ght5;arby,cessa4ighbor5wlyw0xt;k0usiaFv3;ti8;aQeNiLoHuF;dIltiF;facet0p6;deHlGnFot,rbBst;ochro4Xth5;dy;rn,st;ddle ag0nF;dbloZi,or;ag9diocEga,naGrFtropolit4Q;e,ry;ci8;cIgenta,inHj0Fkeshift,mmGnFri4Oscu61ver18;da5Dy;ali4Lo4U;!stream;abEho;aOeLiIoFumberi8;ngFuti1R;stan3RtF;erm,i4H;ghtGteraF;l,ry,te;heart0wei5O;ft JgFss9th3;al,eFi0M;nda4;nguBps0te5;apGind5noF;wi8;ut;ad0itte4uniW;ce co0Hgno6Mll0Cm04nHpso 2UrF;a2releF;va1; ZaYcoWdReQfOgrNhibi4Ri05nMoLsHtFvalu5M;aAeF;nDrdepe2K;a7iGolFuboI;ub6ve1;de,gF;nifica1;rdi5N;a2er;own;eriIiLluenVrF;ar0eq5H;pt,rt;eHiGoFul1O;or;e,reA;fiFpe26termi5E;ni2;mpFnsideCrreA;le2;ccuCdeq5Ene,ppr4J;fFsitu,vitro;ro1;mJpF;arHeGl15oFrop9;li2r11;n2LrfeA;ti3;aGeFi18;d4BnD;tuE;egGiF;c0YteC;al,iF;tiF;ma2;ld;aOelNiLoFuma7;a4meInHrrGsFur5;ti6;if4E;e58o3U; ma3GsF;ick;ghfalut2HspF;an49;li00pf33;i4llow0ndGrdFtM; 05coEworki8;sy,y;aLener44iga3Blob3oKrGuF;il1Nng ho;aFea1Fizzl0;cGtF;ef2Vis;ef2U;ld3Aod;iFuc2D;nf2R;aVeSiQlOoJrF;aGeFil5ug3;q43tf2O;gFnt3S;i6ra1;lk13oHrF; keeps,eFge0Vm9tu41;g0Ei2Ds3R;liF;sh;ag4Mowe4uF;e1or45;e4nF;al,i2;d Gmini7rF;ti6ve1;up;bl0lDmIr Fst pac0ux;oGreacF;hi8;ff;ed,ili0R;aXfVlTmQnOqu3rMthere3veryday,xF;aApIquisi2traHuF;be48lF;ta1;!va2L;edRlF;icF;it;eAstF;whi6; Famor0ough,tiE;rou2sui2;erGiF;ne1;ge1;dFe2Aoq34;er5;ficF;ie1;g9sF;t,ygF;oi8;er;aWeMiHoGrFue;ea4owY;ci6mina1ne,r31ti8ubQ;dact2Jfficult,m,sGverF;ge1se;creGePjoi1paCtF;a1inA;et,te; Nadp0WceMfiLgeneCliJmuEpeIreliAsGvoF;id,ut;pFtitu2ul1L;eCoF;nde1;ca2ghF;tf13;a1ni2;as0;facto;i5ngero0I;ar0Ce09h07i06l05oOrIuF;rmudgeon5stoma4teF;sy;ly;aIeHu1EystalF; cleFli7;ar;epy;fFv17z0;ty;erUgTloSmPnGrpoCunterclVveFy;rt;cLdJgr21jIsHtrF;aFi2;dic0Yry;eq1Yta1;oi1ug3;escenFuN;di8;a1QeFiD;it0;atoDmensuCpF;ass1SulF;so4;ni3ss3;e1niza1;ci1J;ockwiD;rcumspeAvil;eFintzy;e4wy;leGrtaF;in;ba2;diac,ef00;a00ePiLliJoGrFuck nak0;and new,isk,on22;gGldface,naF; fi05fi05;us;nd,tF;he;gGpartisFzarE;an;tiF;me;autifOhiNlLnHsFyoN;iWtselF;li8;eGiFt;gn;aFfi03;th;at0oF;v0w;nd;ul;ckwards,rF;e,rT; priori,b13c0Zd0Tf0Ng0Ihe0Hl09mp6nt06pZrTsQttracti0MuLvIwF;aGkF;wa1B;ke,re;ant garGeraF;ge;de;diIsteEtF;heFoimmu7;nt07;re;to4;hGlFtu2;eep;en;bitIchiv3roHtF;ifiFsy;ci3;ga1;ra4;ry;pFt;aHetizi8rF;oprF;ia2;llFre1;ed,i8;ng;iquFsy;at0e;ed;cohKiJkaHl,oGriFterX;ght;ne,of;li7;ne;ke,ve;olF;ic;ad;ain07gressiIi6rF;eeF;ab6;le;ve;fGraB;id;ectGlF;ue1;ioF;na2; JaIeGvF;erD;pt,qF;ua2;ma1;hoc,infinitum;cuCquiGtu3u2;al;esce1;ra2;erSjeAlPoNrKsGuF;nda1;e1olu2trF;aAuD;se;te;eaGuF;pt;st;aFve;rd;aFe;ze;ct;ra1;nt",
    Pronoun: "true¦elle,h3i2me,she,th0us,we,you;e0ou;e,m,y;!l,t;e,im",
    Preposition:
      "true¦aPbMcLdKexcept,fIinGmid,notwithstandiWoDpXqua,sCt7u4v2w0;/o,hereSith0;! whHin,oW;ersus,i0;a,s a vis;n1p0;!on;like,til;h1ill,oward0;!s;an,ereby,r0;ough0u;!oM;ans,ince,o that,uch G;f1n0ut;!to;!f;! 0to;effect,part;or,r0;om;espite,own,u3;hez,irca;ar1e0oBy;sides,tween;ri7;bo8cross,ft7lo6m4propos,round,s1t0;!op;! 0;a whole,long 0;as;id0ong0;!st;ng;er;ut",
    SportsTeam:
      "true¦0:18;1:1E;2:1D;3:14;a1Db15c0Sd0Kfc dallas,g0Ihouston 0Hindiana0Gjacksonville jagua0k0El0Am01new UoRpKqueens parkJreal salt lake,sBt6utah jazz,vancouver whitecaps,w4yW;ashington 4h10;natio1Mredski2wizar0W;ampa bay 7e6o4;ronto 4ttenham hotspur;blue ja0Mrapto0;nnessee tita2xasD;buccanee0ra0K;a8eattle 6porting kansas0Wt4; louis 4oke0V;c1Drams;marine0s4;eah13ounH;cramento Rn 4;antonio spu0diego 4francisco gJjose earthquak1;char08paB; ran07;a9h6ittsburgh 5ortland t4;imbe0rail blaze0;pirat1steele0;il4oenix su2;adelphia 4li1;eagl1philNunE;dr1;akland 4klahoma city thunder,rlando magic;athle0Lrai4;de0;england 8orleans 7york 4;g5je3knYme3red bul0Xy4;anke1;ian3;pelica2sain3;patrio3revolut4;ion;anchEeAi4ontreal impact;ami 8lwaukee b7nnesota 4;t5vi4;kings;imberwolv1wi2;rewe0uc0J;dolphi2heat,marli2;mphis grizz4ts;li1;a6eic5os angeles 4;clippe0dodFlaB;esterV; galaxy,ke0;ansas city 4nF;chiefs,roya0D; pace0polis col3;astr05dynamo,rocke3texa2;olden state warrio0reen bay pac4;ke0;allas 8e4i04od6;nver 6troit 4;lio2pisto2ti4;ge0;broncYnugge3;cowbo5maver4;icZ;ys;arEelLhAincinnati 8leveland 6ol4;orado r4umbus crew sc;api7ocki1;brow2cavalie0guar4in4;dia2;bengaVre4;ds;arlotte horAicago 4;b5cubs,fire,wh4;iteB;ea0ulQ;diff4olina panthe0; city;altimore Alackburn rove0oston 6rooklyn 4uffalo bilN;ne3;ts;cel5red4; sox;tics;rs;oriol1rave2;rizona Ast8tlanta 4;brav1falco2h4;awA;ns;es;on villa,r4;os;c6di4;amondbac4;ks;ardi4;na4;ls",
    Unit: "true¦a07b04cXdWexVfTgRhePinYjoule0BkMlJmDnan08oCp9quart0Bsq ft,t7volts,w6y2ze3°1µ0;g,s;c,f,n;dVear1o0;ttR; 0s 0;old;att,b;erNon0;!ne02;ascals,e1i0;cXnt00;rcent,tJ;hms,unceY;/s,e4i0m²,²,³;/h,cro2l0;e0liK;!²;grLsR;gCtJ;it1u0;menQx;erPreP;b5elvins,ilo1m0notO;/h,ph,²;!byGgrEmCs;ct0rtzL;aJogrC;allonJb0ig3rB;ps;a0emtEl oz,t4;hrenheit,radG;aby9;eci3m1;aratDe1m0oulombD;²,³;lsius,nti0;gr2lit1m0;et0;er8;am7;b1y0;te5;l,ps;c2tt0;os0;econd1;re0;!s",
    "Noun|Gerund":
      "true¦0:3O;1:3M;2:3N;3:3D;4:32;5:2V;6:3E;7:3K;8:36;9:3J;A:3B;a3Pb37c2Jd27e23f1Vg1Sh1Mi1Ij1Gk1Dl18m13n11o0Wp0Pques0Sr0EsTtNunderMvKwFyDzB;eroi0oB;ni0o3P;aw2eB;ar2l3;aEed4hispe5i5oCrB;ap8est3i1;n0ErB;ki0r31;i1r2s9tc9;isualizi0oB;lunt1Vti0;stan4ta6;aFeDhin6iCraBy8;c6di0i2vel1M;mi0p8;aBs1;c9si0;l6n2s1;aUcReQhOiMkatKl2Wmo6nowJpeItFuCwB;ea5im37;b35f0FrB;fi0vB;e2Mi2J;aAoryt1KrCuB;d2KfS;etc9ugg3;l3n4;bCi0;ebBi0;oar4;gnBnAt1;a3i0;ip8oB;p8rte2u1;a1r27t1;hCo5reBulp1;a2Qe2;edu3oo3;i3yi0;aKeEi4oCuB;li0n2;oBwi0;fi0;aFcEhear7laxi0nDpor1sB;pon4tructB;r2Iu5;de5;or4yc3;di0so2;p8ti0;aFeacek20laEoCrBublis9;a1Teten4in1oces7;iso2siB;tio2;n2yi0;ckaAin1rB;ki0t1O;fEpeDrganiCvB;erco24ula1;si0zi0;ni0ra1;fe5;avi0QeBur7;gotia1twor6;aDeCi2oB;de3nito5;a2dita1e1ssaA;int0XnBrke1;ifUufactu5;aEeaDiBodAyi0;cen7f1mi1stB;e2i0;r2si0;n4ug9;iCnB;ea4it1;c6l3;ogAuB;dAgg3stif12;ci0llust0VmDnBro2;nova1sp0NterBven1;ac1vie02;agi2plo4;aDea1iCoBun1;l4w3;ki0ri0;nd3rB;roWvB;es1;aCene0Lli4rBui4;ee1ie0N;rde2the5;aHeGiDlCorBros1un4;e0Pmat1;ir1oo4;gh1lCnBs9;anZdi0;i0li0;e3nX;r0Zscina1;a1du01nCxB;erci7plo5;chan1di0ginB;ee5;aLeHiGoub1rCum8wB;el3;aDeCiB;bb3n6vi0;a0Qs7;wi0;rTscoDvi0;ba1coZlBvelo8;eCiB;ve5;ga1;nGti0;aVelebUhSlPoDrBur3yc3;aBos7yi0;f1w3;aLdi0lJmFnBo6pi0ve5;dDsCvinB;ci0;trBul1;uc1;muniDpB;lBo7;ai2;ca1;lBo5;ec1;c9ti0;ap8eaCimToBubT;ni0t9;ni0ri0;aBee5;n1t1;ra1;m8rCs1te5;ri0;vi0;aPeNitMlLoGrDuB;dge1il4llBr8;yi0;an4eat9oadB;cas1;di0;a1mEokB;i0kB;ee8;pi0;bi0;es7oa1;c9i0;gin2lonAt1;gi0;bysit1c6ki0tt3;li0;ki0;bando2cGdverti7gi0pproac9rgDssuCtB;trac1;mi0;ui0;hi0;si0;coun1ti0;ti0;ni0;ng",
    PhrasalVerb:
      "true¦0:92;1:96;2:8H;3:8V;4:8A;5:83;6:85;7:98;8:90;9:8G;A:8X;B:8R;C:8U;D:8S;E:70;F:97;G:8Y;H:81;I:7H;J:79;a9Fb7Uc6Rd6Le6Jf5Ig50h4Biron0j47k40l3Em31n2Yo2Wp2Cquiet Hr1Xs0KtZuXvacuu6QwNyammerBzK;ero Dip LonK;e0k0;by,ov9up;aQeMhLiKor0Mrit19;mp0n3Fpe0r5s5;ackAeel Di0S;aLiKn33;gh 3Wrd0;n Dr K;do1in,oJ;it 79k5lk Lrm 69sh Kt83v60;aw3do1o7up;aw3in,oC;rgeBsK;e 2herE;a00eYhViRoQrMuKypP;ckErn K;do1in,oJup;aLiKot0y 30;ckl7Zp F;ck HdK;e 5Y;n7Wp 3Es5K;ck MdLe Kghten 6me0p o0Rre0;aw3ba4do1in,up;e Iy 2;by,oG;ink Lrow K;aw3ba4in,up;ba4ov9up;aKe 77ll62;m 2r 5M;ckBke Llk K;ov9shit,u47;aKba4do1in,leave,o4Dup;ba4ft9pa69w3;a0Vc0Te0Mh0Ii0Fl09m08n07o06p01quar5GtQuOwK;earMiK;ngLtch K;aw3ba4o8K; by;cKi6Bm 2ss0;k 64;aReQiPoNrKud35;aigh2Det75iK;ke 7Sng K;al6Yup;p Krm2F;by,in,oG;c3Ln3Lr 2tc4O;p F;c3Jmp0nd LrKveAy 2O;e Ht 2L;ba4do1up;ar3GeNiMlLrKurB;ead0ingBuc5;a49it 6H;c5ll o3Cn 2;ak Fe1Xll0;a3Bber 2rt0und like;ap 5Vow Duggl5;ash 6Noke0;eep NiKow 6;cLp K;o6Dup;e 68;in,oK;ff,v9;de19gn 4NnKt 6Gz5;gKkE; al6Ale0;aMoKu5W;ot Kut0w 7M;aw3ba4f48oC;c2WdeEk6EveA;e Pll1Nnd Orv5tK; Ktl5J;do1foLin,o7upK;!on;ot,r5Z;aw3ba4do1in,o33up;oCto;al66out0rK;ap65ew 6J;ilAv5;aXeUiSoOuK;b 5Yle0n Kstl5;aLba4do1inKo2Ith4Nu5P;!to;c2Xr8w3;ll Mot LpeAuK;g3Ind17;a2Wf3Po7;ar8in,o7up;ng 68p oKs5;ff,p18;aKelAinEnt0;c6Hd K;o4Dup;c27t0;aZeYiWlToQrOsyc35uK;ll Mn5Kt K;aKba4do1in,oJto47up;pa4Dw3;a3Jdo1in,o21to45up;attleBess KiNop 2;ah2Fon;iLp Kr4Zu1Gwer 6N;do1in,o6Nup;nt0;aLuK;gEmp 6;ce u20y 6D;ck Kg0le 4An 6p5B;oJup;el 5NncilE;c53ir 39n0ss MtLy K;ba4oG; Hc2R;aw3ba4in,oJ;pKw4Y;e4Xt D;aLerd0oK;dAt53;il Hrrow H;aTeQiPoLuK;ddl5ll I;c1FnkeyMp 6uthAve K;aKdo1in,o4Lup;l4Nw3; wi4K;ss0x 2;asur5e3SlLss K;a21up;t 6;ke Ln 6rKs2Ax0;k 6ryA;do,fun,oCsure,up;a02eViQoLuK;ck0st I;aNc4Fg MoKse0;k Kse4D;aft9ba4do1forw37in56o0Zu46;in,oJ;d 6;e NghtMnLsKve 00;ten F;e 2k 2; 2e46;ar8do1in;aMt LvelK; oC;do1go,in,o7up;nEve K;in,oK;pKut;en;c5p 2sh LtchBughAy K;do1o59;in4Po7;eMick Lnock K;do1oCup;oCup;eLy K;in,up;l Ip K;aw3ba4do1f04in,oJto,up;aMoLuK;ic5mpE;ke3St H;c43zz 2;a01eWiToPuK;nLrrKsh 6;y 2;keLt K;ar8do1;r H;lKneErse3K;d Ke 2;ba4dKfast,o0Cup;ear,o1;de Lt K;ba4on,up;aw3o7;aKlp0;d Ml Ir Kt 2;fKof;rom;f11in,o03uW;cPm 2nLsh0ve Kz2P;at,it,to;d Lg KkerP;do1in,o2Tup;do1in,oK;ut,v9;k 2;aZeTive Rloss IoMrLunK; f0S;ab hold,in43ow 2U; Kof 2I;aMb1Mit,oLr8th1IuK;nd9;ff,n,v9;bo7ft9hQw3;aw3bKdo1in,oJrise,up,w3;a4ir2H;ar 6ek0t K;aLb1Fdo1in,oKr8up;ff,n,ut,v9;cLhKl2Fr8t,w3;ead;ross;d aKng 2;bo7;a0Ee07iYlUoQrMuK;ck Ke2N;ar8up;eLighten KownBy 2;aw3oG;eKshe27; 2z5;g 2lMol Krk I;aKwi20;bo7r8;d 6low 2;aLeKip0;sh0;g 6ke0mKrKtten H;e F;gRlPnNrLsKzzle0;h F;e Km 2;aw3ba4up;d0isK;h 2;e Kl 1T;aw3fPin,o7;ht ba4ure0;ePnLsK;s 2;cMd K;fKoG;or;e D;d04l 2;cNll Krm0t1G;aLbKdo1in,o09sho0Eth08victim;a4ehi2O;pa0C;e K;do1oGup;at Kdge0nd 12y5;in,o7up;aOi1HoNrK;aLess 6op KuN;aw3b03in,oC;gBwB; Ile0ubl1B;m 2;a0Ah05l02oOrLut K;aw3ba4do1oCup;ackBeep LoKy0;ss Dwd0;by,do1in,o0Uup;me NoLuntK; o2A;k 6l K;do1oG;aRbQforOin,oNtKu0O;hLoKrue;geth9;rough;ff,ut,v9;th,wK;ard;a4y;paKr8w3;rt;eaLose K;in,oCup;n 6r F;aNeLiK;ll0pE;ck Der Kw F;on,up;t 2;lRncel0rOsMtch LveE; in;o1Nup;h Dt K;doubt,oG;ry LvK;e 08;aw3oJ;l Km H;aLba4do1oJup;ff,n,ut;r8w3;a0Ve0MiteAl0Fo04rQuK;bblNckl05il0Dlk 6ndl05rLsKtMy FzzA;t 00;n 0HsK;t D;e I;ov9;anWeaUiLush K;oGup;ghQng K;aNba4do1forMin,oLuK;nd9p;n,ut;th;bo7lKr8w3;ong;teK;n 2;k K;do1in,o7up;ch0;arTg 6iRn5oPrNssMttlLunce Kx D;aw3ba4;e 6; ar8;e H;do1;k Dt 2;e 2;l 6;do1up;d 2;aPeed0oKurt0;cMw K;aw3ba4do1o7up;ck;k K;in,oC;ck0nk0stA; oQaNef 2lt0nd K;do1ov9up;er;up;r Lt K;do1in,oCup;do1o7;ff,nK;to;ck Pil0nMrgLsK;h D;ainBe D;g DkB; on;in,o7;aw3do1in,oCup;ff,ut;ay;ct FdQir0sk MuctionA; oG;ff;ar8o7;ouK;nd; o7;d K;do1oKup;ff,n;wn;o7up;ut",
    ProperNoun:
      "true¦aIbDc8dalhousHe7f5gosford,h4iron maiden,kirby,landsdowne,m2nis,r1s0wembF;herwood,paldiB;iel,othwe1;cgi0ercedes,issy;ll;intBudsB;airview,lorence,ra0;mpt9nco;lmo,uro;a1h0;arlt6es5risti;rl0talina;et4i0;ng;arb3e0;et1nt0rke0;ley;on;ie;bid,jax",
    "Person|Place":
      "true¦a8d6h4jordan,k3orlando,s1vi0;ctor9rgin9;a0ydney;lvador,mara,ntia4;ent,obe;amil0ous0;ton;arw2ie0;go;lexandr1ust0;in;ia",
    LastName:
      "true¦0:BR;1:BF;2:B5;3:BH;4:AX;5:9Y;6:B6;7:BK;8:B0;9:AV;A:AL;B:8Q;C:8G;D:7K;E:BM;F:AH;aBDb9Zc8Wd88e81f7Kg6Wh64i60j5Lk4Vl4Dm39n2Wo2Op25quispe,r1Ls0Pt0Ev03wTxSyKzG;aIhGimmerm6A;aGou,u;ng,o;khar5ytsE;aKeun9BiHoGun;koya32shiBU;!lG;diGmaz;rim,z;maGng;da,g52mo83sGzaC;aChiBV;iao,u;aLeJiHoGright,u;jcA5lff,ng;lGmm0nkl0sniewsC;kiB1liams33s3;bGiss,lt0;b,er,st0;a6Vgn0lHtG;anabe,s3;k0sh,tG;e2Non;aLeKiHoGukD;gt,lk5roby5;dHllalGnogr3Kr1Css0val3S;ba,ob1W;al,ov4;lasHsel8W;lJn dIrgBEsHzG;qu7;ilyEqu7siljE;en b6Aijk,yk;enzueAIverde;aPeix1VhKi2j8ka43oJrIsui,uG;om5UrG;c2n0un1;an,emblA7ynisC;dorAMlst3Km4rrAth;atch0i8UoG;mHrG;are84laci79;ps3sG;en,on;hirDkah9Mnaka,te,varA;a06ch01eYhUiRmOoMtIuHvGzabo;en9Jobod3N;ar7bot4lliv2zuC;aIeHoG;i7Bj4AyanAB;ele,in2FpheBvens25;l8rm0;kol5lovy5re7Tsa,to,uG;ng,sa;iGy72;rn5tG;!h;l71mHnGrbu;at9cla9Egh;moBo7M;aIeGimizu;hu,vchG;en8Luk;la,r1G;gu9infe5YmGoh,pulveA7rra5P;jGyG;on5;evi6iltz,miHneid0roed0uGwarz;be3Elz;dHtG;!t,z;!t;ar4Th8ito,ka4OlJnGr4saCto,unde19v4;ch7dHtGz;a5Le,os;b53e16;as,ihDm4Po0Y;aVeSiPoJuHyG;a6oo,u;bio,iz,sG;so,u;bKc8Fdrigue67ge10j9YmJosevelt,sItHux,wG;e,li6;a9Ch;enb4Usi;a54e4L;erts15i93;bei4JcHes,vGzzo;as,e9;ci,hards12;ag2es,iHut0yG;es,nol5N;s,t0;dImHnGsmu97v6C;tan1;ir7os;ic,u;aUeOhMiJoHrGut8;asad,if6Zochazk27;lishc2GpGrti72u10we76;e3Aov51;cHe45nG;as,to;as70hl0;aGillips;k,m,n6I;a3Hde3Wete0Bna,rJtG;ersHrovGters54;!a,ic;!en,on;eGic,kiBss3;i9ra,tz,z;h86k,padopoulIrk0tHvG;ic,l4N;el,te39;os;bMconn2Ag2TlJnei6PrHsbor6XweBzG;dem7Rturk;ella4DtGwe6N;ega,iz;iGof7Hs8I;vGyn1R;ei9;aSri1;aPeNiJoGune50ym2;rHvGwak;ak4Qik5otn66;odahl,r4S;cholsZeHkolGls4Jx3;ic,ov84;ls1miG;!n1;ils3mG;co4Xec;gy,kaGray2sh,var38;jiGmu9shiG;ma;a07c04eZiWoMuHyeG;rs;lJnIrGssoli6S;atGp03r7C;i,ov4;oz,te58;d0l0;h2lOnNo0RrHsGza1A;er,s;aKeJiIoz5risHtG;e56on;!on;!n7K;au,i9no,t5J;!lA;r1Btgome59;i3El0;cracFhhail5kkeHlG;l0os64;ls1;hmeJiIj30lHn3Krci0ssiGyer2N;!er;n0Po;er,j0;dDti;cartHlG;aughl8e2;hy;dQe7Egnu68i0jer3TkPmNnMrItHyG;er,r;ei,ic,su21thews;iHkDquAroqu8tinG;ez,s;a5Xc,nG;!o;ci5Vn;a5UmG;ad5;ar5e6Kin1;rig77s1;aVeOiLoJuHyG;!nch;k4nGo;d,gu;mbarGpe3Fvr4we;di;!nGu,yana2B;coln,dG;b21holm,strom;bedEfeKhIitn0kaHn8rGw35;oy;!j;m11tG;in1on1;bvGvG;re;iGmmy,ng,rs2Qu,voie,ws3;ne,t1F;aZeYh2iWlUnez50oNrJuHvar2woG;k,n;cerGmar68znets5;a,o34;aHem0isGyeziu;h23t3O;m0sni4Fus3KvG;ch4O;bay57ch,rh0Usk16vaIwalGzl5;czGsC;yk;cIlG;!cGen4K;huk;!ev4ic,s;e8uiveG;rt;eff0kGl4mu9nnun1;ucF;ll0nnedy;hn,llKminsCne,pIrHstra3Qto,ur,yGzl5;a,s0;j0Rls22;l2oG;or;oe;aPenOha6im14oHuG;ng,r4;e32hInHrge32u6vG;anD;es,ss3;anHnsG;en,on,t3;nesGs1R;en,s1;kiBnings,s1;cJkob4EnGrv0E;kDsG;en,sG;en0Ion;ks3obs2A;brahimDglesi5Nke5Fl0Qno07oneIshikHto,vanoG;u,v54;awa;scu;aVeOiNjaltal8oIrist50uG;!aGb0ghAynh;m2ng;a6dz4fIjgaa3Hk,lHpUrGwe,x3X;ak1Gvat;mAt;er,fm3WmG;ann;ggiBtchcock;iJmingw4BnHrGss;nand7re9;deGriks1;rs3;kkiHnG;on1;la,n1;dz4g1lvoQmOns0ZqNrMsJuIwHyG;asFes;kiB;g1ng;anHhiG;mo14;i,ov0J;di6p0r10t;ue;alaG;in1;rs1;aVeorgUheorghe,iSjonRoLrJuGw3;errGnnar3Co,staf3Ctierr7zm2;a,eG;ro;ayli6ee2Lg4iffithGub0;!s;lIme0UnHodGrbachE;e,m2;calvAzale0S;dGubE;bGs0E;erg;aj,i;bs3l,mGordaO;en7;iev3U;gnMlJmaIndFo,rGsFuthi0;cGdn0za;ia;ge;eaHlG;agh0i,o;no;e,on;aVerQiLjeldsted,lKoIrHuG;chs,entAji41ll0;eem2iedm2;ntaGrt8urni0wl0;na;emi6orA;lipIsHtzgeraG;ld;ch0h0;ovG;!ic;hatDnanIrG;arGei9;a,i;deY;ov4;b0rre1D;dKinsJriksIsGvaB;cob3GpGtra3D;inoza,osiQ;en,s3;te8;er,is3warG;ds;aXePiNjurhuMoKrisco15uHvorakG;!oT;arte,boHmitru,nn,rGt3C;and,ic;is;g2he0Omingu7nErd1ItG;to;us;aGcki2Hmitr2Ossanayake,x3;s,z; JbnaIlHmirGrvisFvi,w2;!ov4;gado,ic;th;bo0groot,jo6lHsilGvriA;va;a cruz,e3uG;ca;hl,mcevsCnIt2WviG;dGes,s;ov,s3;ielsGku22;!en;ki;a0Be06hRiobQlarkPoIrGunningh1H;awfo0RivGuz;elli;h1lKntJoIrGs2Nx;byn,reG;a,ia;ke,p0;i,rer2K;em2liB;ns;!e;anu;aOeMiu,oIristGu6we;eGiaG;ns1;i,ng,p9uHwGy;!dH;dGng;huJ;!n,onGu6;!g;kJnIpm2ttHudhGv7;ry;erjee,o14;!d,g;ma,raboG;rty;bJl0Cng4rG;eghetHnG;a,y;ti;an,ota1C;cerAlder3mpbeLrIstGvadi0B;iGro;llo;doHl0Er,t0uGvalho;so;so,zo;ll;a0Fe01hYiXlUoNrKuIyG;rLtyG;qi;chan2rG;ke,ns;ank5iem,oGyant;oks,wG;ne;gdan5nIruya,su,uchaHyKziG;c,n5;rd;darGik;enG;ko;ov;aGond15;nco,zG;ev4;ancFshw16;a08oGuiy2;umGwmG;ik;ckRethov1gu,ktPnNrG;gJisInG;ascoGds1;ni;ha;er,mG;anG;!n;gtGit7nP;ss3;asF;hi;er,hG;am;b4ch,ez,hRiley,kk0ldw8nMrIshHtAu0;es;ir;bInHtlGua;ett;es,i0;ieYosa;dGik;a9yoG;padhyG;ay;ra;k,ng;ic;bb0Acos09d07g04kht05lZnPrLsl2tJyG;aHd8;in;la;chis3kiG;ns3;aImstro6sl2;an;ng;ujo,ya;dJgelHsaG;ri;ovG;!a;ersJov,reG;aGjEws;ss1;en;en,on,s3;on;eksejEiyEmeiIvG;ar7es;ez;da;ev;arwHuilG;ar;al;ams,l0;er;ta;as",
    Ordinal:
      "true¦eBf7nin5s3t0zeroE;enDhir1we0;lfCn7;d,t3;e0ixt8;cond,vent7;et0th;e6ie7;i2o0;r0urt3;tie4;ft1rst;ight0lev1;e0h,ie1;en0;th",
    Cardinal:
      "true¦bEeBf5mEnine7one,s4t0zero;en,h2rDw0;e0o;lve,n5;irt6ousands,ree;even2ix2;i3o0;r1ur0;!t2;ty;ft0ve;e2y;ight0lev1;!e0y;en;illions",
    Multiple: "true¦b3hundred,m3qu2se1t0;housand,r2;pt1xt1;adr0int0;illion",
    City: "true¦0:74;1:61;2:6G;3:6J;4:5S;a68b53c4Id48e44f3Wg3Hh39i31j2Wk2Fl23m1Mn1Co19p0Wq0Ur0Os05tRuQvLwDxiBy9z5;a7h5i4Muri4O;a5e5ongsh0;ng3H;greb,nzib5G;ang2e5okoha3Sunfu;katerin3Hrev0;a5n0Q;m5Hn;arsBeAi6roclBu5;h0xi,zh5P;c7n5;d5nipeg,terth4;hoek,s1L;hi5Zkl3A;l63xford;aw;a8e6i5ladivost5Molgogr6L;en3lni6S;ni22r5;o3saill4N;lenc4Wncouv3Sr3ughn;lan bat1Crumqi,trecht;aFbilisi,eEheDiBo9r7u5;l21n63r5;in,ku;i5ondh62;es51poli;kyo,m2Zron1Pulo5;n,uS;an5jua3l2Tmisoa6Bra3;j4Tshui; hag62ssaloni2H;gucigal26hr0l av1U;briz,i6llinn,mpe56ng5rtu,shk2R;i3Esh0;an,chu1n0p2Eyu0;aEeDh8kopje,owe1Gt7u5;ra5zh4X;ba0Ht;aten is55ockholm,rasbou67uttga2V;an8e6i5;jiazhua1llo1m5Xy0;f50n5;ya1zh4H;gh3Kt4Q;att45o1Vv44;cramen16int ClBn5o paulo,ppo3Rrajevo; 7aa,t5;a 5o domin3E;a3fe,m1M;antonio,die3Cfrancisco,j5ped3Nsalvad0J;o5u0;se;em,t lake ci5Fz25;lou58peters24;a9e8i6o5;me,t59;ga,o5yadh;! de janei3F;cife,ims,nn3Jykjavik;b4Sip4lei2Inc2Pwalpindi;ingdao,u5;ez2i0Q;aFeEhDiCo9r7u6yong5;ya1;eb59ya1;a5etor3M;g52to;rt5zn0; 5la4Co;au prin0Melizabe24sa03;ls3Prae5Atts26;iladelph3Gnom pe1Aoenix;ki1tah tik3E;dua,lerYnaji,r4Ot5;na,r32;ak44des0Km1Mr6s5ttawa;a3Vlo;an,d06;a7ew5ing2Fovosibir1Jyc; 5cast36;del24orlea44taip14;g8iro4Wn5pl2Wshv33v0;ch6ji1t5;es,o1;a1o1;a6o5p4;ya;no,sa0W;aEeCi9o6u5;mb2Ani26sc3Y;gadishu,nt6s5;c13ul;evideo,pelli1Rre2Z;ami,l6n14s5;kolc,sissauga;an,waukee;cca,d5lbour2Mmph41ndo1Cssi3;an,ell2Xi3;cau,drAkass2Sl9n8r5shh4A;aca6ib5rakesh,se2L;or;i1Sy;a4EchFdal0Zi47;mo;id;aDeAi8o6u5vSy2;anMckn0Odhia3;n5s angel26;d2g bea1N;brev2Be3Lma5nz,sb2verpo28;!ss27; ma39i5;c5pzig;est16; p6g5ho2Wn0Cusan24;os;az,la33;aHharFiClaipeBo9rak0Du7y5;iv,o5;to;ala lump4n5;mi1sh0;hi0Hlka2Xpavog4si5wlo2;ce;da;ev,n5rkuk;gst2sha5;sa;k5toum;iv;bHdu3llakuric0Qmpa3Fn6ohsiu1ra5un1Iwaguc0Q;c0Pj;d5o,p4;ah1Ty;a7e6i5ohannesV;l1Vn0;dd36rusalem;ip4k5;ar2H;bad0mph1OnArkutUs7taXz5;mir,tapala5;pa;fah0l6tanb5;ul;am2Zi2H;che2d5;ianap2Mo20;aAe7o5yder2W; chi mi5ms,nolulu;nh;f6lsin5rakli2;ki;ei;ifa,lifax,mCn5rb1Dva3;g8nov01oi;aFdanEenDhCiPlasgBo9raz,u5;a5jr23;dal6ng5yaquil;zh1J;aja2Oupe;ld coa1Bthen5;bu2S;ow;ent;e0Uoa;sk;lw7n5za;dhi5gt1E;nag0U;ay;aisal29es,o8r6ukuya5;ma;ankfu5esno;rt;rt5sh0; wor6ale5;za;th;d5indhov0Pl paso;in5mont2;bur5;gh;aBe8ha0Xisp4o7resd0Lu5;b5esseldorf,nkirk,rb0shanbe;ai,l0I;ha,nggu0rtmu13;hradSl6nv5troit;er;hi;donghIe6k09l5masc1Zr es sala1KugavpiY;i0lU;gu,je2;aJebu,hAleve0Vo5raio02uriti1Q;lo7n6penhag0Ar5;do1Ok;akKst0V;gUm5;bo;aBen8i6ongqi1ristchur5;ch;ang m7ca5ttago1;go;g6n5;ai;du,zho1;ng5ttogr14;ch8sha,zh07;gliari,i9lga8mayenJn6pe town,r5tanO;acCdiff;ber1Ac5;un;ry;ro;aWeNhKirmingh0WoJr9u5;chareTdapeTenos air7r5s0tu0;g5sa;as;es;a9is6usse5;ls;ba6t5;ol;ne;sil8tisla7zzav5;il5;le;va;ia;goZst2;op6ubaneshw5;ar;al;iCl9ng8r5;g6l5n;in;en;aluru,hazi;fa6grade,o horizon5;te;st;ji1rut;ghd0BkFn9ot8r7s6yan n4;ur;el,r07;celo3i,ranquil09;ou;du1g6ja lu5;ka;alo6k5;ok;re;ng;ers5u;field;a05b02cc01ddis aba00gartaZhmedXizawl,lSmPnHqa00rEsBt7uck5;la5;nd;he7l5;an5;ta;ns;h5unci2;dod,gab5;at;li5;ngt2;on;a8c5kaOtwerp;hora6o3;na;ge;h7p5;ol5;is;eim;aravati,m0s5;terd5;am; 7buquerq6eppo,giers,ma5;ty;ue;basrah al qadim5mawsil al jadid5;ah;ab5;ad;la;ba;ra;idj0u dha5;bi;an;lbo6rh5;us;rg",
    Region:
      "true¦0:2O;1:2L;2:2U;3:2F;a2Sb2Fc21d1Wes1Vf1Tg1Oh1Ki1Fj1Bk16l13m0Sn09o07pYqVrSsJtEuBverAw6y4zacatec2W;akut0o0Fu4;cat1k09;a5est 4isconsin,yomi1O;bengal,virgin0;rwick3shington4;! dc;acruz,mont;dmurt0t4;ah,tar4; 2Pa12;a6e5laxca1Vripu21u4;scaEva;langa2nnessee,x2J;bas10m4smQtar29;aulip2Hil nadu;a9elang07i7o5taf16u4ylh1J;ff02rr09s1E;me1Gno1Uuth 4;cZdY;ber0c4kkim,naloa;hu1ily;n5rawak,skatchew1xo4;ny; luis potosi,ta catari2;a4hodeA;j4ngp0C;asth1shahi;ingh29u4;e4intana roo;bec,en6retaro;aAe6rince edward4unjab; i4;sl0G;i,n5r4;ak,nambu0F;a0Rnsylv4;an0;ha0Pra4;!na;axa0Zdisha,h4klaho21ntar4reg7ss0Dx0I;io;aLeEo6u4;evo le4nav0X;on;r4tt18va scot0;f9mandy,th4; 4ampton3;c6d5yo4;rk3;ako1O;aroli2;olk;bras1Nva0Dw4; 6foundland4;! and labrad4;or;brunswick,hamp3jers5mexiTyork4;! state;ey;galPyarit;aAeghala0Mi6o4;nta2r4;dov0elos;ch6dlanDn5ss4zor11;issippi,ouri;as geraPneso18;ig1oac1;dhy12harasht0Gine,lac07ni5r4ssachusetts;anhao,i el,ylG;p4toba;ur;anca3e4incoln3ouisI;e4iR;ds;a6e5h4omi;aka06ul2;dah,lant1ntucky,ra01;bardino,lmyk0ns0Qr4;achay,el0nata0X;alis6har4iangxi;kh4;and;co;daho,llino7n4owa;d5gush4;et0;ia2;is;a6ert5i4un1;dalFm0D;ford3;mp3rya2waii;ansu,eorg0lou7oa,u4;an4izhou,jarat;ajuato,gdo4;ng;cester3;lori4uji1;da;sex;ageUe7o5uran4;go;rs4;et;lawaMrby3;aFeaEh9o4rim08umbr0;ahui7l6nnectic5rsi4ventry;ca;ut;i03orado;la;e5hattisgarh,i4uvash0;apRhuahua;chn5rke4;ss0;ya;ra;lGm4;bridge3peche;a9ihar,r8u4;ck4ryat0;ingham3;shi4;re;emen,itish columb0;h0ja cal8lk7s4v7;hkorto4que;st1;an;ar0;iforn0;ia;dygHguascalientes,lBndhr9r5ss4;am;izo2kans5un4;achal 7;as;na;a 4;pradesh;a6ber5t4;ai;ta;ba5s4;ka;ma;ea",
    Place:
      "true¦0:4T;1:4V;2:44;3:4B;4:3I;a4Eb3Gc2Td2Ge26f25g1Vh1Ji1Fk1Cl14m0Vn0No0Jp08r04sTtNuLvJw7y5;a5o0Syz;kut1Bngtze;aDeChitBi9o5upatki,ycom2P;ki26o5;d5l1B;b3Ps5;i4to3Y;c0SllowbroCn5;c2Qgh2;by,chur1P;ed0ntw3Gs22;ke6r3St5;erf1f1; is0Gf3V;auxha3Mirgin is0Jost5;ok;laanbaatar,pto5xb3E;n,wn;a9eotihuac43h7ive49o6ru2Nsarskoe selo,u5;l2Dzigo47;nto,rquay,tt2J;am3e 5orn3E;bronx,hamptons;hiti,j mah0Iu1N;aEcotts bluff,eCfo,herbroQoApring9t7u5yd2F;dbu1Wn5;der03set3B;aff1ock2Nr5;atf1oud;hi37w24;ho,uth5; 1Iam1Zwo3E;a5i2O;f2Tt0;int lawrence riv3Pkhal2D;ayleigh,ed7i5oc1Z;chmo1Eo gran4ver5;be1Dfr09si4; s39cliffe,hi2Y;aCe9h8i5ompeii,utn2;c6ne5tcai2T; 2Pc0G;keri13t0;l,x;k,lh2mbr6n5r2J;n1Hzance;oke;cif38pahanaumokuak30r5;k5then0;si4w1K;ak7r6x5;f1l2X;ange county,d,f1inoco;mTw1G;e8i1Uo5;r5tt2N;th5wi0E; 0Sam19;uschwanste1Pw5; eng6a5h2market,po36;rk;la0P;a8co,e6i5uc;dt1Yll0Z;adow5ko0H;lands;chu picchu,gad2Ridsto1Ql8n7ple6r5;kh2; g1Cw11;hatt2Osf2B;ibu,t0ve1Z;a8e7gw,hr,in5owlOynd02;coln memori5dl2C;al;asi4w3;kefr7mbe1On5s,x;ca2Ig5si05;f1l27t0;ont;azan kreml14e6itchen2Gosrae,rasnoyar5ul;sk;ns0Hs1U;ax,cn,lf1n6ps5st;wiN;d5glew0Lverness;ian27ochina;aDeBi6kg,nd,ov5unti2H;d,enweep;gh6llc5;reL;bu03l5;and5;!s;r5yw0C;ef1tf1;libu24mp6r5stings;f1lem,row;stead,t0;aDodavari,r5uelph;avenAe5imsS;at 8en5; 6f1Fwi5;ch;acr3vall1H;brita0Flak3;hur5;st;ng3y villa0W;airhavHco,ra;aAgli9nf17ppi8u7ver6x5;et1Lf1;glad3t0;rope,st0;ng;nt0;rls1Ls5;t 5;e5si4;nd;aCe9fw,ig8o7ryd6u5xb;mfri3nstab00rh2tt0;en;nca18rcKv19wnt0B;by;n6r5vonpo1D;ry;!h2;nu8r5;l6t5;f1moor;ingt0;be;aLdg,eIgk,hClBo5royd0;l6m5rnwa0B;pt0;c7lingw6osse5;um;ood;he0S;earwat0St;a8el6i5uuk;chen itza,mney ro07natSricahua;m0Zt5;enh2;mor5rlottetPth2;ro;dar 5ntervilA;breaks,faZg5;rove;ld9m8r5versh2;lis6rizo pla5;in;le;bLpbellf1;weQ;aZcn,eNingl01kk,lackLolt0r5uckV;aGiAo5;ckt0ok5wns cany0;lyn,s5;i4to5;ne;de;dge6gh5;am,t0;n6t5;own;or5;th;ceb6m5;lNpt0;rid5;ge;bu5pool,wa8;rn;aconsfEdf1lBr9verly7x5;hi5;ll; hi5;lls;wi5;ck; air,l5;ingh2;am;ie5;ld;ltimore,rnsl6tters5;ea;ey;bLct0driadic,frica,ginJlGmFn9rc8s7tl6yleOzor3;es;!ant8;hcroft,ia; de triomphe,t6;adyr,ca8dov9tarct5;ic5; oce5;an;st5;er;ericas,s;be6dersh5hambra,list0;ot;rt0;cou5;rt;bot7i5;ngd0;on;sf1;ord",
    Country:
      "true¦0:38;1:2L;2:3B;a2Xb2Ec22d1Ye1Sf1Mg1Ch1Ai14j12k0Zl0Um0Gn05om2pZqat1KrXsKtCu7v5wal4yemTz3;a25imbabwe;es,lis and futu2Y;a3enezue32ietnam;nuatu,tican city;gTk6nited 4ruXs3zbeE; 2Ca,sr;arab emirat0Kkingdom,states3;! of am2Y;!raiV;a8haCimor les0Co7rinidad 5u3;nis0rk3valu;ey,me2Zs and caic1V;and t3t3;oba1L;go,kel10nga;iw2ji3nz2T;ki2V;aDcotl1eCi9lov8o6pa2Dri lanka,u5w3yr0;az3edAitzerl1;il1;d2riname;lomon1Xmal0uth 3;afr2KkMsud2;ak0en0;erra leoFn3;gapo1Yt maart3;en;negLrb0ychellZ;int 3moa,n marino,udi arab0;hele26luc0mart21;epublic of ir0Eom2Euss0w3;an27;a4eIhilippinUitcairn1Mo3uerto riN;l1rtugF;ki2Dl4nama,pua new0Vra3;gu7;au,esti3;ne;aBe9i7or3;folk1Ith4w3;ay; k3ern mariana1D;or0O;caragua,ger3ue;!ia;p3ther1Aw zeal1;al;mib0u3;ru;a7exi6icro0Bo3yanm06;ldova,n3roc5zambA;a4gol0t3;enegro,serrat;co;cAdagasc01l7r5urit4yot3;te;an0i16;shall0Xtin3;ique;a4div3i,ta;es;wi,ys0;ao,ed02;a6e5i3uxembourg;b3echtenste12thu1G;er0ya;ban0Isotho;os,tv0;azakh1Fe4iriba04o3uwait,yrgyz1F;rXsovo;eling0Knya;a3erG;ma16p2;c7nd6r4s3taly,vory coast;le of m2rael;a3el1;n,q;ia,oJ;el1;aiTon3ungary;dur0Ng kong;aBermany,ha0QibraltAre8u3;a6ern5inea3ya0P;! biss3;au;sey;deloupe,m,tema0Q;e3na0N;ce,nl1;ar;bUmb0;a7i6r3;ance,ench 3;guia0Epoly3;nes0;ji,nl1;lklandUroeU;ast tim7cu6gypt,l salv6ngl1quatorial4ritr5st3thiop0;on0; guin3;ea;ad3;or;enmark,jibou5ominica4r con3;go;!n C;ti;aBentral african Ah8o5roat0u4yprRzech3; 9ia;ba,racao;c4lo3morQngo brazzaville,okGsta r04te de ivoiL;mb0;osE;i3ristmasG;le,na;republic;m3naUpe verde,ymanA;bod0ero3;on;aGeDhut2o9r5u3;lgar0r3;kina faso,ma,undi;azil,itish 3unei;virgin3; is3;lands;liv0nai5snia and herzegoviHtswaHuvet3; isl1;and;re;l3n8rmuG;ar3gium,ize;us;h4ngladesh,rbad3;os;am4ra3;in;as;fghaGlDmBn6r4ustr3zerbaij2;al0ia;genti3men0uba;na;dorra,g5t3;arct7igua and barbu3;da;o3uil3;la;er3;ica;b3ger0;an0;ia;ni3;st2;an",
    FirstName:
      "true¦aTblair,cQdOfrancoZgabMhinaLilya,jHkClBm6ni4quinn,re3s0;h0umit,yd;ay,e0iloh;a,lby;g9ne;co,ko0;!s;a1el0ina,org6;!okuhF;ds,naia,r1tt0xiB;i,y;ion,lo;ashawn,eif,uca;a3e1ir0rM;an;lsFn0rry;dall,yat5;i,sD;a0essIie,ude;i1m0;ie,mG;me;ta;rie0y;le;arcy,ev0;an,on;as1h0;arl8eyenne;ey,sidy;drien,kira,l4nd1ubr0vi;ey;i,r0;a,e0;a,y;ex2f1o0;is;ie;ei,is",
    WeekDay: "true¦fri2mon2s1t0wednesd3;hurs1ues1;aturd1und1;!d0;ay0;!s",
    Month: "true¦dec0february,july,nov0octo1sept0;em0;ber",
    Date: "true¦ago,on4som4t1week0yesterd5; end,ends;mr1o0;d2morrow;!w;ed0;ay",
    Duration:
      "true¦centurAd8h7m5q4se3w1y0;ear8r8;eek0k7;!end,s;ason,c5;tr,uarter;i0onth3;llisecond2nute2;our1r1;ay0ecade0;!s;ies,y",
    FemaleName:
      "true¦0:J7;1:JB;2:IJ;3:IK;4:J1;5:IO;6:JS;7:JO;8:HB;9:JK;A:H4;B:I2;C:IT;D:JH;E:IX;F:BA;G:I4;aGTbFLcDRdD0eBMfB4gADh9Ti9Gj8Dk7Cl5Wm48n3Lo3Hp33qu32r29s15t0Eu0Cv02wVxiTyOzH;aLeIineb,oHsof3;e3Sf3la,ra;h2iKlIna,ynH;ab,ep;da,ma;da,h2iHra;nab;aKeJi0FolB7uIvH;et8onDP;i0na;le0sen3;el,gm3Hn,rGLs8W;aoHme0nyi;m5XyAD;aMendDZhiDGiH;dele9lJnH;if48niHo0;e,f47;a,helmi0lHma;a,ow;ka0nB;aNeKiHusa5;ck84kIl8oleAviH;anFenJ4;ky,toriBK;da,lA8rHs0;a,nHoniH9;a,iFR;leHnesH9;nILrH;i1y;g9rHs6xHA;su5te;aYeUhRiNoLrIuHy2;i,la;acJ3iHu0J;c3na,sH;hFta;nHr0F;iFya;aJffaEOnHs6;a,gtiH;ng;!nFSra;aIeHomasi0;a,l9Oo8Ares1;l3ndolwethu;g9Fo88rIssH;!a,ie;eHi,ri7;sa,za;bOlMmKnIrHs6tia0wa0;a60yn;iHya;a,ka,s6;arFe2iHm77ra;!ka;a,iH;a,t6;at6it6;a0Ecarlett,e0AhWiSkye,neza0oQri,tNuIyH;bIGlvi1;ha,mayIJniAsIzH;an3Net8ie,y;anHi7;!a,e,nH;aCe;aIeH;fan4l5Dphan6E;cI5r5;b3fiAAm0LnHphi1;d2ia,ja,ya;er2lJmon1nIobh8QtH;a,i;dy;lETv3;aMeIirHo0risFDy5;a,lDM;ba,e0i5lJrH;iHr6Jyl;!d8Ifa;ia,lDZ;hd,iMki2nJrIu0w0yH;la,ma,na;i,le9on,ron,yn;aIda,ia,nHon;a,on;!ya;k6mH;!aa;lJrItaye82vH;da,inj;e0ife;en1i0ma;anA9bLd5Oh1SiBkKlJmInd2rHs6vannaC;aCi0;ant6i2;lDOma,ome;ee0in8Tu2;in1ri0;a05eZhXiUoHuthDM;bScRghQl8LnPsJwIxH;anB3ie,y;an,e0;aIeHie,lD;ann7ll1marDGtA;!lHnn1;iHyn;e,nH;a,dF;da,i,na;ayy8G;hel67io;bDRerAyn;a,cIkHmas,nFta,ya;ki,o;h8Xki;ea,iannGMoH;da,n1P;an0bJemFgi0iInHta,y0;a8Bee;han86na;a,eH;cHkaC;a,ca;bi0chIe,i0mo0nHquETy0;di,ia;aERelHiB;!e,le;een4ia0;aPeOhMiLoJrHute6A;iHudenCV;scil3LyamvaB;lHrt3;i0ly;a,paluk;ilome0oebe,ylH;is,lis;ggy,nelope,r5t2;ige,m0VnKo5rvaDMtIulH;a,et8in1;ricHt4T;a,e,ia;do2i07;ctav3dIfD3is6ksa0lHphD3umC5yunbileg;a,ga,iv3;eHvAF;l3t8;aWeUiMoIurHy5;!ay,ul;a,eJor,rIuH;f,r;aCeEma;ll1mi;aNcLhariBQkKlaJna,sHta,vi;anHha;ur;!y;a,iDZki;hoGk9YolH;a,e4P;!mh;hir,lHna,risDEsreE;!a,lBV;asuMdLh3i6Dl5nKomi7rgEVtH;aHhal4;lHs6;i1ya;cy,et8;e9iF0ya;nngu2X;a0Ackenz4e02iMoJrignayani,uriDJyH;a,rH;a,iOlNna,tG;bi0i2llBJnH;a,iH;ca,ka,qD9;a,cUdo4ZkaTlOmi,nMrItzi,yH;ar;aJiIlH;anET;am;!l,nB;dy,eHh,n4;nhGrva;aKdJe0iCUlH;iHy;cent,e;red;!gros;!e5;ae5hH;ae5el3Z;ag5DgNi,lKrH;edi7AiIjem,on,yH;em,l;em,sCG;an4iHliCF;nHsCJ;a,da;!an,han;b09cASd07e,g05ha,i04ja,l02n00rLsoum5YtKuIv84xBKyHz4;bell,ra,soBB;d7rH;a,eE;h8Gild1t4;a,cUgQiKjor4l7Un4s6tJwa,yH;!aHbe6Xja9lAE;m,nBL;a,ha,in1;!aJbCGeIja,lDna,sHt63;!a,ol,sa;!l1D;!h,mInH;!a,e,n1;!awit,i;arJeIie,oHr48ueri8;!t;!ry;et46i3B;el4Xi7Cy;dHon,ue5;akranAy;ak,en,iHlo3S;a,ka,nB;a,re,s4te;daHg4;!l3E;alDd4elHge,isDJon0;ei9in1yn;el,le;a0Ne0CiXoQuLyH;d3la,nH;!a,dIe2OnHsCT;!a,e2N;a,sCR;aD4cJel0Pis1lIna,pHz;e,iA;a,u,wa;iHy;a0Se,ja,l2NnB;is,l1UrItt1LuHvel4;el5is1;aKeIi7na,rH;aADi7;lHn1tA;ei;!in1;aTbb9HdSepa,lNnKsJvIzH;!a,be5Ret8z4;!ia;a,et8;!a,dH;a,sHy;ay,ey,i,y;a,iJja,lH;iHy;aA8e;!aH;!nF;ia,ya;!nH;!a,ne;aPda,e0iNjYla,nMoKsJtHx93y5;iHt4;c3t3;e2PlCO;la,nHra;a,ie,o2;a,or1;a,gh,laH;!ni;!h,nH;a,d2e,n5V;cOdon9DiNkes6mi9Gna,rMtJurIvHxmi,y5;ern1in3;a,e5Aie,yn;as6iIoH;nya,ya;fa,s6;a,isA9;a,la;ey,ie,y;a04eZhXiOlASoNrJyH;lHra;a,ee,ie;istHy6I;a,en,iIyH;!na;!e,n5F;nul,ri,urtnB8;aOerNlB7mJrHzzy;a,stH;en,in;!berlImernH;aq;eHi,y;e,y;a,stE;!na,ra;aHei2ongordzol;dij1w5;el7UiKjsi,lJnIrH;a,i,ri;d2na,za;ey,i,lBLs4y;ra,s6;biAcARdiat7MeBAiSlQmPnyakuma1DrNss6NtKviAyH;!e,lH;a,eH;e,i8T;!a6HeIhHi4TlDri0y;ar8Her8Hie,leErBAy;!lyn8Ori0;a,en,iHl5Xoli0yn;!ma,nFs95;a5il1;ei8Mi,lH;e,ie;a,tl6O;a0AeZiWoOuH;anMdLlHst88;es,iH;a8NeHs8X;!n9tH;!a,te;e5Mi3My;a,iA;!anNcelDdMelGhan7VleLni,sIva0yH;a,ce;eHie;fHlDph7Y;a,in1;en,n1;i7y;!a,e,n45;lHng;!i1DlH;!i1C;anNle0nKrJsH;i8JsH;!e,i8I;i,ri;!a,elGif2CnH;a,et8iHy;!e,f2A;a,eJiInH;a,eIiH;e,n1;!t8;cMda,mi,nIque4YsminFvie2y9zH;min7;a7eIiH;ce,e,n1s;!lHs82t0F;e,le;inIk6HlDquelH;in1yn;da,ta;da,lRmPnOo0rNsIvaHwo0zaro;!a0lu,na;aJiIlaHob89;!n9R;do2;belHdo2;!a,e,l3B;a7Ben1i0ma;di2es,gr72ji;a9elBogH;en1;a,e9iHo0se;a0na;aSeOiJoHus7Kyacin2C;da,ll4rten24snH;a,i9U;lImaH;ri;aIdHlaI;a,egard;ry;ath1BiJlInrietArmi9sH;sa,t1A;en2Uga,mi;di;bi2Fil8MlNnMrJsItHwa,yl8M;i5Tt4;n60ti;iHmo51ri53;etH;!te;aCnaC;a,ey,l4;a02eWiRlPoNrKunJwH;enHyne1R;!dolD;ay,el;acieIetHiselB;a,chE;!la;ld1CogooH;sh;adys,enHor3yn2K;a,da,na;aKgi,lIna,ov8EselHta;a,e,le;da,liH;an;!n0;mLnJorgIrH;ald5Si,m3Etrud7;et8i4X;a,eHna;s29vieve;ma;bIle,mHrnet,yG;al5Si5;iIrielH;a,l1;!ja;aTeQiPlorOoz3rH;anJeIiH;da,eB;da,ja;!cH;esIiHoi0P;n1s66;!ca;a,enc3;en,o0;lIn0rnH;anB;ec3ic3;jr,nArKtHy7;emIiHma,oumaA;ha,ma,n;eh;ah,iBrah,za0;cr4Rd0Re0Qi0Pk0Ol07mXn54rUsOtNuMvHwa;aKelIiH;!e,ta;inFyn;!a;!ngel4V;geni1ni47;h5Yien9ta;mLperanKtH;eIhHrel5;er;l31r7;za;a,eralB;iHma,ne4Lyn;cHka,n;a,ka;aPeNiKmH;aHe21ie,y;!li9nuH;elG;lHn1;e7iHy;a,e,ja;lHrald;da,y;!nue5;aWeUiNlMma,no2oKsJvH;a,iH;na,ra;a,ie;iHuiH;se;a,en,ie,y;a0c3da,e,f,nMsJzaH;!betHveA;e,h;aHe,ka;!beH;th;!a,or;anor,nH;!a,i;!in1na;ate1Rta;leEs6;vi;eIiHna,wi0;e,th;l,n;aYeMh3iLjeneKoH;lor5Vminiq4Ln3FrHtt4;a,eEis,la,othHthy;ea,y;ba;an09naCon9ya;anQbPde,eOiMlJmetr3nHsir5M;a,iH;ce,se;a,iIla,orHphi9;es,is;a,l6F;dHrdH;re;!d5Ena;!b2ForaCraC;a,d2nH;!a,e;hl3i0l0GmNnLphn1rIvi1WyH;le,na;a,by,cIia,lH;a,en1;ey,ie;a,et8iH;!ca,el1Aka,z;arHia;is;a0Re0Nh04i02lUoJristIynH;di,th3;al,i0;lPnMrIurH;tn1D;aJd2OiHn2Ori9;!nH;a,e,n1;!l4;cepci5Cn4sH;tanHuelo;ce,za;eHleE;en,t8;aJeoIotH;il54;!pat2;ir7rJudH;et8iH;a,ne;a,e,iH;ce,sZ;a2er2ndH;i,y;aReNloe,rH;isJyH;stH;al;sy,tH;a1Sen,iHy;an1e,n1;deJlseIrH;!i7yl;a,y;li9;nMrH;isKlImH;ai9;a,eHot8;n1t8;!sa;d2elGtH;al,elG;cIlH;es8i47;el3ilH;e,ia,y;itlYlXmilWndVrMsKtHy5;aIeIhHri0;er1IleErDy;ri0;a38sH;a37ie;a,iOlLmeJolIrH;ie,ol;!e,in1yn;lHn;!a,la;a,eIie,otHy;a,ta;ne,y;na,s1X;a0Ii0I;a,e,l1;isAl4;in,yn;a0Ke02iZlXoUrH;andi7eRiJoIyH;an0nn;nwDoke;an3HdgMgiLtH;n31tH;!aInH;ey,i,y;ny;d,t8;etH;!t7;an0e,nH;da,na;bbi7glarIlo07nH;iAn4;ka;ancHythe;a,he;an1Clja0nHsm3M;iAtH;ou;aWcVlinUniArPssOtJulaCvH;!erlH;ey,y;hJsy,tH;e,iHy7;e,na;!anH;ie,y;!ie;nItHyl;ha,ie;adIiH;ce;et8i9;ay,da;ca,ky;!triH;ce,z;rbJyaH;rmH;aa;a2o2ra;a2Ub2Od25g21i1Sj5l18m0Zn0Boi,r06sWtVuPvOwa,yIzH;ra,u0;aKes6gJlIn,seH;!l;in;un;!nH;a,na;a,i2K;drLguJrIsteH;ja;el3;stH;in1;a,ey,i,y;aahua,he0;hIi2Gja,miAs2DtrH;id;aMlIraqHt21;at;eIi7yH;!n;e,iHy;gh;!nH;ti;iJleIo6piA;ta;en,n1t8;aHelG;!n1J;a01dje5eZgViTjRnKohito,toHya;inet8nH;el5ia;te;!aKeIiHmJ;e,ka;!mHtt7;ar4;!belIliHmU;sa;!l1;a,eliH;ca;ka,sHta;a,sa;elHie;a,iH;a,ca,n1qH;ue;!tH;a,te;!bImHstasiMya;ar3;el;aLberKeliJiHy;e,l3naH;!ta;a,ja;!ly;hGiIl3nB;da;a,ra;le;aWba,ePiMlKthJyH;a,c3sH;a,on,sa;ea;iHys0N;e,s0M;a,cIn1sHza;a,e,ha,on,sa;e,ia,ja;c3is6jaKksaKna,sJxH;aHia;!nd2;ia,saH;nd2;ra;ia;i0nIyH;ah,na;a,is,naCoud;la;c6da,leEmNnLsH;haClH;inHyY;g,n;!h;a,o,slH;ey;ee;en;at6g4nIusH;ti0;es;ie;aWdiTelMrH;eJiH;anMenH;a,e,ne;an0;na;!aLeKiIyH;nn;a,n1;a,e;!ne;!iH;de;e,lDsH;on;yn;!lH;i9yn;ne;aKbIiHrL;!e,gaK;ey,i7y;!e;gaH;il;dKliyJradhIs6;ha;ya;ah;a,ya",
    Honorific:
      "true¦director1field marsh2lieutenant1rear0sergeant major,vice0; admir1; gener0;al",
    "Adj|Gerund":
      "true¦0:3F;1:3H;2:31;3:2X;4:35;5:33;6:3C;7:2Z;8:36;9:29;a33b2Tc2Bd1Te1If19g12h0Zi0Rl0Nm0Gnu0Fo0Ap04rYsKtEuBvAw1Ayiel3;ar6e08;nBpA;l1Rs0B;fol3n1Zsett2;aEeDhrBi4ouc7rAwis0;e0Bif2oub2us0yi1;ea1SiA;l2vi1;l2mp0rr1J;nt1Vxi1;aMcreec7enten2NhLkyrocke0lo0Vmi2oJpHtDuBweA;e0Ul2;pp2ArA;gi1pri5roun3;aBea8iAri2Hun9;mula0r4;gge4rA;t2vi1;ark2eAraw2;e3llb2F;aAot7;ki1ri1;i9oc29;dYtisf6;aEeBive0oAus7;a4l2;assu4defi9fres7ig9juve07mai9s0vAwar3;ea2italiAol1G;si1zi1;gi1ll6mb2vi1;a6eDier23lun1VrAun2C;eBoA;mi5vo1Z;ce3s5vai2;n3rpleA;xi1;ffCpWutBverAwi1;arc7lap04p0Pri3whel8;goi1l6st1J;en3sA;et0;m2Jrtu4;aEeDiCoBuAyst0L;mb2;t1Jvi1;s5tiga0;an1Rl0n3smeri26;dAtu4;de9;aCeaBiAo0U;fesa0Tvi1;di1ni1;c1Fg19s0;llumiGmFnArri0R;cDfurHsCtBviA;go23ti1;e1Oimi21oxica0rig0V;pi4ul0;orpo20r0K;po5;na0;eaBorr02umilA;ia0;li1rtwar8;lFrA;atiDipCoBuelA;i1li1;undbrea10wi1;pi1;f6ng;a4ea8;a3etc7it0lEoCrBulfA;il2;ee1FighXust1L;rAun3;ebo3thco8;aCoA;a0wA;e4i1;mi1tte4;lectrJmHnExA;aCci0hBis0pA;an3lo3;aOila1B;c0spe1A;ab2coura0CdBergi13ga0Clive9ric7s02tA;hral2i0J;ea4u4;barras5er09pA;owe4;if6;aQeIiBrA;if0;sAzz6;aEgDhearCsen0tA;rAur11;ac0es5;te9;us0;ppoin0r8;biliGcDfi9gra3ligh0mBpres5sAvasG;erE;an3ea9orA;ali0L;a6eiBli9rA;ea5;vi1;ta0;maPri1s7un0zz2;aPhMlo5oAripp2ut0;mGnArrespon3;cer9fDspi4tA;inBrA;as0ibu0ol2;ui1;lic0u5;ni1;fDmCpA;eAromi5;l2ti1;an3;or0;aAil2;llenAnAr8;gi1;l8ptAri1;iva0;aff2eGin3lFoDrBuA;d3st2;eathtaAui5;ki1;gg2i2o8ri1unA;ci1;in3;co8wiA;lAtc7;de4;bsorVcOgonMlJmHnno6ppea2rFsA;pi4su4toA;nBun3;di1;is7;hi1;res0;li1;aFu5;si1;ar8lu4;ri1;mi1;iAzi1;zi1;cAhi1;eleDomA;moBpan6;yi1;da0;ra0;ti1;bi1;ng",
    Comparable:
      "true¦0:3C;1:3Q;2:3F;a3Tb3Cc33d2Te2Mf2Ag1Wh1Li1Fj1Ek1Bl13m0Xn0So0Rp0Iqu0Gr07sHtCug0vAw4y3za0Q;el10ouN;ary,e6hi5i3ry;ck0Cde,l3n1ry,se;d,y;ny,te;a3i3R;k,ry;a3erda2ulgar;gue,in,st;a6en2Xhi5i4ouZr3;anqu2Cen1ue;dy,g36me0ny;ck,rs28;ll,me,rt,wd3I;aRcaPeOhMiLkin0BlImGoEpDt6u4w3;eet,ift;b3dd0Wperfi21rre28;sta26t21;a8e7iff,r4u3;pUr1;a4ict,o3;ng;ig2Vn0N;a1ep,rn;le,rk,te0;e1Si2Vright0;ci1Yft,l3on,re;emn,id;a3el0;ll,rt;e4i3y;g2Mm0Z;ek,nd2T;ck24l0mp1L;a3iRrill,y;dy,l01rp;ve0Jxy;n1Jr3;ce,y;d,fe,int0l1Hv0V;a8e6i5o3ude;mantic,o19sy,u3;gh;pe,t1P;a3d,mo0A;dy,l;gg4iFndom,p3re,w;id;ed;ai2i3;ck,et;hoAi1Fl9o8r5u3;ny,r3;e,p11;egna2ic4o3;fouSud;ey,k0;liXor;ain,easa2;ny;dd,i0ld,ranL;aive,e5i4o3u14;b0Sisy,rm0Ysy;bb0ce,mb0R;a3r1w;r,t;ad,e5ild,o4u3;nda12te;ist,o1;a4ek,l3;low;s0ty;a8e7i6o3ucky;f0Jn4o15u3ve0w10y0N;d,sy;e0g;ke0l,mp,tt0Eve0;e1Qwd;me,r3te;ge;e4i3;nd;en;ol0ui19;cy,ll,n3;secu6t3;e3ima4;llege2rmedia3;te;re;aAe7i6o5u3;ge,m3ng1C;bYid;me0t;gh,l0;a3fXsita2;dy,rWv3;en0y;nd13ppy,r3;d3sh;!y;aFenEhCiBlAoofy,r3;a8e6i5o3ue0Z;o3ss;vy;m,s0;at,e3y;dy,n;nd,y;ad,ib,ooD;a2d1;a3o3;st0;tDuiS;u1y;aCeebBi9l8o6r5u3;ll,n3r0N;!ny;aCesh,iend0;a3nd,rmD;my;at,ir7;erce,nan3;ci9;le;r,ul3;ty;a6erie,sse4v3xtre0B;il;nti3;al;r4s3;tern,y;ly,th0;appZe9i5ru4u3;mb;nk;r5vi4z3;zy;ne;e,ty;a3ep,n9;d3f,r;!ly;agey,h8l7o5r4u3;dd0r0te;isp,uel;ar3ld,mmon,st0ward0zy;se;evKou1;e3il0;ap,e3;sy;aHiFlCoAr5u3;ff,r0sy;ly;a6i3oad;g4llia2;nt;ht;sh,ve;ld,un3;cy;a4o3ue;nd,o1;ck,nd;g,tt3;er;d,ld,w1;dy;bsu6ng5we3;so3;me;ry;rd",
    Adverb:
      "true¦a08b05d00eYfSheQinPjustOkinda,likewiZmMnJoEpCquite,r9s5t2u0very,well;ltima01p0; to,wards5;h1iny bit,o0wiO;o,t6;en,us;eldom,o0uch;!me1rt0; of;how,times,w0C;a1e0;alS;ndomRth05;ar excellenEer0oint blank; Lhaps;f3n0utright;ce0ly;! 0;ag05moX; courGten;ewJo0; longWt 0;onHwithstand9;aybe,eanwhiNore0;!ovT;! aboX;deed,steY;lla,n0;ce;or3u0;ck1l9rther0;!moK;ing; 0evK;exampCgood,suH;n mas0vI;se;e0irect2; 2fini0;te0;ly;juAtrop;ackward,y 0;far,no0; means,w; GbroFd nauseam,gEl7ny5part,s4t 2w0;ay,hi0;le;be7l0mo7wor7;arge,ea6; soon,i4;mo0way;re;l 3mo2ongsi1ready,so,togeth0ways;er;de;st;b1t0;hat;ut;ain;ad;lot,posteriori",
    Conjunction:
      "true¦aXbTcReNhowMiEjust00noBo9p8supposing,t5wh0yet;e1il0o3;e,st;n1re0thN; if,by,vM;evL;h0il,o;erefOo0;!uU;lus,rovided th9;r0therwiM;! not; mattEr,w0;! 0;since,th4w7;f4n0; 0asmuch;as mIcaForder t0;h0o;at;! 0;only,t0w0;hen;!ev3;ith2ven0;! 0;if,tB;er;o0uz;s,z;e0ut,y the time;cau1f0;ore;se;lt3nd,s 0;far1if,m0soon1t2;uch0; as;hou0;gh",
    Currency:
      "true¦$,aud,bQcOdJeurIfHgbp,hkd,iGjpy,kElDp8r7s3usd,x2y1z0¢,£,¥,ден,лв,руб,฿,₡,₨,€,₭,﷼;lotyQł;en,uanP;af,of;h0t5;e0il5;k0q0;elK;oubleJp,upeeJ;e2ound st0;er0;lingG;n0soF;ceEnies;empi7i7;n,r0wanzaCyatC;!onaBw;ls,nr;ori7ranc9;!os;en3i2kk,o0;b0ll2;ra5;me4n0rham4;ar3;e0ny;nt1;aht,itcoin0;!s",
    Determiner:
      "true¦aBboth,d9e6few,le5mu8neiDplenty,s4th2various,wh0;at0ich0;evC;a0e4is,ose;!t;everal,ome;!ast,s;a1l0very;!se;ch;e0u;!s;!n0;!o0y;th0;er",
    "Adj|Present":
      "true¦a07b04cVdQeNfJhollIidRlEmCnarrIoBp9qua8r7s3t2uttFw0;aKet,ro0;ng,u08;endChin;e2hort,l1mooth,our,pa9tray,u0;re,speU;i2ow;cu6da02leSpaN;eplica01i02;ck;aHerfePr0;eseUime,omV;bscu1pen,wn;atu0e3odeH;re;a2e1ive,ow0;er;an;st,y;ow;a2i1oul,r0;ee,inge;rm;iIke,ncy,st;l1mpty,x0;emHpress;abo4ic7;amp,e2i1oub0ry,ull;le;ffu9re6;fu8libe0;raE;alm,l5o0;mpleCn3ol,rr1unterfe0;it;e0u7;ct;juga8sum7;ea1o0;se;n,r;ankru1lu0;nt;pt;li2pproxi0rticula1;ma0;te;ght",
    "Person|Adj":
      "true¦b3du2earnest,frank,mi2r0san1woo1;an0ich,u1;dy;sty;ella,rown",
    Modal:
      "true¦c5lets,m4ought3sh1w0;ill,o5;a0o4;ll,nt;! to,a;ight,ust;an,o0;uld",
    Verb: "true¦born,cannot,gonna,has,keep tabs,msg",
    "Person|Verb":
      "true¦b8ch7dr6foster,gra5ja9lan4ma2ni9ollie,p1rob,s0wade;kip,pike,t5ue;at,eg,ier2;ck,r0;k,shal;ce;ce,nt;ew;ase,u1;iff,l1ob,u0;ck;aze,ossom",
    "Person|Date": "true¦a2j0sep;an0une;!uary;p0ugust,v0;ril",
  },
  xo = 36,
  Yu = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
  Sm = Yu.split("").reduce(function (e, n, o) {
    return (e[n] = o), e;
  }, {}),
  RB = function (e) {
    if (Yu[e] !== void 0) return Yu[e];
    let n = 1,
      o = xo,
      t = "";
    for (; e >= o; e -= o, n++, o *= xo);
    for (; n--; ) {
      const l = e % xo;
      (t = String.fromCharCode((l < 10 ? 48 : 55) + l) + t), (e = (e - l) / xo);
    }
    return t;
  },
  NB = function (e) {
    if (Sm[e] !== void 0) return Sm[e];
    let n = 0,
      o = 1,
      t = xo,
      l = 1;
    for (; o < e.length; n += t, o++, t *= xo);
    for (let s = e.length - 1; s >= 0; s--, l *= xo) {
      let d = e.charCodeAt(s) - 48;
      d > 10 && (d -= 7), (n += d * l);
    }
    return n;
  },
  Qu = { toAlphaCode: RB, fromAlphaCode: NB },
  EB = function (e) {
    const n = new RegExp("([0-9A-Z]+):([0-9A-Z]+)");
    for (let o = 0; o < e.nodes.length; o++) {
      const t = n.exec(e.nodes[o]);
      if (!t) {
        e.symCount = o;
        break;
      }
      e.syms[Qu.fromAlphaCode(t[1])] = Qu.fromAlphaCode(t[2]);
    }
    e.nodes = e.nodes.slice(e.symCount, e.nodes.length);
  },
  FB = function (e, n, o) {
    const t = Qu.fromAlphaCode(n);
    return t < e.symCount ? e.syms[t] : o + t + 1 - e.symCount;
  },
  DB = function (e) {
    const n = [],
      o = (t, l) => {
        let s = e.nodes[t];
        s[0] === "!" && (n.push(l), (s = s.slice(1)));
        const d = s.split(/([A-Z0-9,]+)/g);
        for (let g = 0; g < d.length; g += 2) {
          const m = d[g],
            y = d[g + 1];
          if (!m) continue;
          const f = l + m;
          if (y === "," || y === void 0) {
            n.push(f);
            continue;
          }
          const v = FB(e, y, t);
          o(v, f);
        }
      };
    return o(0, ""), n;
  },
  TB = function (e) {
    const n = { nodes: e.split(";"), syms: [], symCount: 0 };
    return e.match(":") && EB(n), DB(n);
  },
  OB = function (e) {
    if (!e) return {};
    const n = e.split("|").reduce((t, l) => {
        const s = l.split("¦");
        return (t[s[0]] = s[1]), t;
      }, {}),
      o = {};
    return (
      Object.keys(n).forEach(function (t) {
        const l = TB(n[t]);
        t === "true" && (t = !0);
        for (let s = 0; s < l.length; s++) {
          const d = l[s];
          o.hasOwnProperty(d) === !0
            ? Array.isArray(o[d]) === !1
              ? (o[d] = [o[d], t])
              : o[d].push(t)
            : (o[d] = t);
        }
      }),
      o
    );
  },
  ua = ["Possessive", "Pronoun"];
let xB = {
  "20th century fox": "Organization",
  "7 eleven": "Organization",
  "motel 6": "Organization",
  g8: "Organization",
  vh1: "Organization",
  "76ers": "SportsTeam",
  "49ers": "SportsTeam",
  q1: "Date",
  q2: "Date",
  q3: "Date",
  q4: "Date",
  km2: "Unit",
  m2: "Unit",
  dm2: "Unit",
  cm2: "Unit",
  mm2: "Unit",
  mile2: "Unit",
  in2: "Unit",
  yd2: "Unit",
  ft2: "Unit",
  m3: "Unit",
  dm3: "Unit",
  cm3: "Unit",
  in3: "Unit",
  ft3: "Unit",
  yd3: "Unit",
  "at&t": "Organization",
  "black & decker": "Organization",
  "h & m": "Organization",
  "johnson & johnson": "Organization",
  "procter & gamble": "Organization",
  "ben & jerry's": "Organization",
  "&": "Conjunction",
  i: ["Pronoun", "Singular"],
  he: ["Pronoun", "Singular"],
  she: ["Pronoun", "Singular"],
  it: ["Pronoun", "Singular"],
  they: ["Pronoun", "Plural"],
  we: ["Pronoun", "Plural"],
  was: ["Copula", "PastTense"],
  is: ["Copula", "PresentTense"],
  are: ["Copula", "PresentTense"],
  am: ["Copula", "PresentTense"],
  were: ["Copula", "PastTense"],
  her: ua,
  his: ua,
  hers: ua,
  their: ua,
  theirs: ua,
  themselves: ua,
  your: ua,
  our: ua,
  ours: ua,
  my: ua,
  its: ua,
  vs: ["Conjunction", "Abbreviation"],
  if: ["Condition", "Preposition"],
  closer: "Comparative",
  closest: "Superlative",
  much: "Adverb",
  may: "Modal",
  babysat: "PastTense",
  blew: "PastTense",
  drank: "PastTense",
  drove: "PastTense",
  forgave: "PastTense",
  skiied: "PastTense",
  spilt: "PastTense",
  stung: "PastTense",
  swam: "PastTense",
  swung: "PastTense",
  guaranteed: "PastTense",
  shrunk: "PastTense",
  nears: "PresentTense",
  nearing: "Gerund",
  neared: "PastTense",
  no: ["Negative", "Expression"],
};
const VB = {
    "20th century fox": "Organization",
    "7 eleven": "Organization",
    "motel 6": "Organization",
    "excuse me": "Expression",
    "financial times": "Organization",
    "guns n roses": "Organization",
    "la z boy": "Organization",
    "labour party": "Organization",
    "new kids on the block": "Organization",
    "new york times": "Organization",
    "the guess who": "Organization",
    "thin lizzy": "Organization",
    "prime minister": "Actor",
    "free market": "Singular",
    "lay up": "Singular",
    "living room": "Singular",
    "living rooms": "Plural",
    "spin off": "Singular",
    "appeal court": "Uncountable",
    "cold war": "Uncountable",
    "gene pool": "Uncountable",
    "machine learning": "Uncountable",
    "nail polish": "Uncountable",
    "time off": "Uncountable",
    "take part": "Infinitive",
    "bill gates": "Person",
    "doctor who": "Person",
    "dr who": "Person",
    "he man": "Person",
    "iron man": "Person",
    "kid cudi": "Person",
    "run dmc": "Person",
    "rush limbaugh": "Person",
    "snow white": "Person",
    "tiger woods": "Person",
    "brand new": "Adjective",
    "en route": "Adjective",
    "left wing": "Adjective",
    "off guard": "Adjective",
    "on board": "Adjective",
    "part time": "Adjective",
    "right wing": "Adjective",
    "so called": "Adjective",
    "spot on": "Adjective",
    "straight forward": "Adjective",
    "super duper": "Adjective",
    "tip top": "Adjective",
    "top notch": "Adjective",
    "up to date": "Adjective",
    "win win": "Adjective",
    "brooklyn nets": "SportsTeam",
    "chicago bears": "SportsTeam",
    "houston astros": "SportsTeam",
    "houston dynamo": "SportsTeam",
    "houston rockets": "SportsTeam",
    "houston texans": "SportsTeam",
    "minnesota twins": "SportsTeam",
    "orlando magic": "SportsTeam",
    "san antonio spurs": "SportsTeam",
    "san diego chargers": "SportsTeam",
    "san diego padres": "SportsTeam",
    "iron maiden": "ProperNoun",
    "isle of man": "Country",
    "united states": "Country",
    "united states of america": "Country",
    "prince edward island": "Region",
    "cedar breaks": "Place",
    "cedar falls": "Place",
    "point blank": "Adverb",
    "tiny bit": "Adverb",
    "by the time": "Conjunction",
    "no matter": "Conjunction",
    "civil wars": "Plural",
    "credit cards": "Plural",
    "default rates": "Plural",
    "free markets": "Plural",
    "head starts": "Plural",
    "home runs": "Plural",
    "lay ups": "Plural",
    "phone calls": "Plural",
    "press releases": "Plural",
    "record labels": "Plural",
    "soft serves": "Plural",
    "student loans": "Plural",
    "tax returns": "Plural",
    "tv shows": "Plural",
    "video games": "Plural",
    "took part": "PastTense",
    "takes part": "PresentTense",
    "taking part": "Gerund",
    "taken part": "Participle",
    "light bulb": "Noun",
    "rush hour": "Noun",
    "fluid ounce": "Unit",
    "the rolling stones": "Organization",
  },
  IB = [
    ":(",
    ":)",
    ":P",
    ":p",
    ":O",
    ";(",
    ";)",
    ";P",
    ";p",
    ";O",
    ":3",
    ":|",
    ":/",
    ":\\",
    ":$",
    ":*",
    ":@",
    ":-(",
    ":-)",
    ":-P",
    ":-p",
    ":-O",
    ":-3",
    ":-|",
    ":-/",
    ":-\\",
    ":-$",
    ":-*",
    ":-@",
    ":^(",
    ":^)",
    ":^P",
    ":^p",
    ":^O",
    ":^3",
    ":^|",
    ":^/",
    ":^\\",
    ":^$",
    ":^*",
    ":^@",
    "):",
    "(:",
    "$:",
    "*:",
    ")-:",
    "(-:",
    "$-:",
    "*-:",
    ")^:",
    "(^:",
    "$^:",
    "*^:",
    "<3",
    "</3",
    "<\\3",
    "=(",
  ],
  Kl = {
    a: [
      [/(antenn|formul|nebul|vertebr|vit)a$/i, "$1ae"],
      [/ia$/i, "ia"],
    ],
    e: [
      [/(kn|l|w)ife$/i, "$1ives"],
      [/(hive)$/i, "$1s"],
      [/([m|l])ouse$/i, "$1ice"],
      [/([m|l])ice$/i, "$1ice"],
    ],
    f: [
      [/^(dwar|handkerchie|hoo|scar|whar)f$/i, "$1ves"],
      [
        /^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)f$/i,
        "$1ves",
      ],
    ],
    i: [[/(octop|vir)i$/i, "$1i"]],
    m: [[/([ti])um$/i, "$1a"]],
    n: [[/^(oxen)$/i, "$1"]],
    o: [[/(al|ad|at|er|et|ed)o$/i, "$1oes"]],
    s: [
      [/(ax|test)is$/i, "$1es"],
      [/(alias|status)$/i, "$1es"],
      [/sis$/i, "ses"],
      [/(bu)s$/i, "$1ses"],
      [/(sis)$/i, "ses"],
      [/^(?!talis|.*hu)(.*)man$/i, "$1men"],
      [/(octop|vir|radi|nucle|fung|cact|stimul)us$/i, "$1i"],
    ],
    x: [
      [/(matr|vert|ind|cort)(ix|ex)$/i, "$1ices"],
      [/^(ox)$/i, "$1en"],
    ],
    y: [[/([^aeiouy]|qu)y$/i, "$1ies"]],
    z: [[/(quiz)$/i, "$1zes"]],
  },
  _B = /([xsz]|ch|sh)$/,
  KB = function (e) {
    let n = e[e.length - 1];
    if (Kl.hasOwnProperty(n) === !0)
      for (let o = 0; o < Kl[n].length; o += 1) {
        let t = Kl[n][o][0];
        if (t.test(e) === !0) return e.replace(t, Kl[n][o][1]);
      }
    return null;
  },
  fi = function (e = "", n) {
    let { irregularPlurals: o, uncountable: t } = n.two;
    if (t.hasOwnProperty(e)) return e;
    if (o.hasOwnProperty(e)) return o[e];
    let l = KB(e);
    return l !== null ? l : _B.test(e) ? e + "es" : e + "s";
  },
  JB = /\|/;
let Hr = xB,
  Zu = {};
const zB = { two: { irregularPlurals: wy, uncountable: {} } };
Object.keys(wm).forEach((e) => {
  let n = OB(wm[e]);
  if (!JB.test(e)) {
    Object.keys(n).forEach((o) => {
      Hr[o] = e;
    });
    return;
  }
  Object.keys(n).forEach((o) => {
    if (((Zu[o] = e), e === "Noun|Verb")) {
      let t = fi(o, zB);
      Zu[t] = "Plural|Verb";
    }
  });
});
IB.forEach((e) => (Hr[e] = "Emoticon"));
delete Hr[""];
delete Hr[null];
delete Hr[" "];
const H = "Singular",
  Le = {
    beforeTags: {
      Determiner: H,
      Possessive: H,
      Acronym: H,
      Noun: H,
      Adjective: H,
      PresentTense: H,
      Gerund: H,
      PastTense: H,
      Infinitive: H,
      Date: H,
      Ordinal: H,
      Demonym: H,
    },
    afterTags: {
      Value: H,
      Modal: H,
      Copula: H,
      PresentTense: H,
      PastTense: H,
      Demonym: H,
      Actor: H,
    },
    beforeWords: {
      the: H,
      with: H,
      without: H,
      of: H,
      for: H,
      any: H,
      all: H,
      on: H,
      cut: H,
      cuts: H,
      increase: H,
      decrease: H,
      raise: H,
      drop: H,
      save: H,
      saved: H,
      saves: H,
      make: H,
      makes: H,
      made: H,
      minus: H,
      plus: H,
      than: H,
      another: H,
      versus: H,
      neither: H,
      about: H,
      favorite: H,
      best: H,
      daily: H,
      weekly: H,
      linear: H,
      binary: H,
      mobile: H,
      lexical: H,
      technical: H,
      computer: H,
      scientific: H,
      security: H,
      government: H,
      popular: H,
      formal: H,
      no: H,
      more: H,
      one: H,
      let: H,
      her: H,
      his: H,
      their: H,
      our: H,
      us: H,
      sheer: H,
      monthly: H,
      yearly: H,
      current: H,
      previous: H,
      upcoming: H,
      last: H,
      next: H,
      main: H,
      initial: H,
      final: H,
      beginning: H,
      end: H,
      top: H,
      bottom: H,
      future: H,
      past: H,
      major: H,
      minor: H,
      side: H,
      central: H,
      peripheral: H,
      public: H,
      private: H,
    },
    afterWords: {
      of: H,
      system: H,
      aid: H,
      method: H,
      utility: H,
      tool: H,
      reform: H,
      therapy: H,
      philosophy: H,
      room: H,
      authority: H,
      says: H,
      said: H,
      wants: H,
      wanted: H,
      is: H,
      did: H,
      do: H,
      can: H,
      wise: H,
    },
  },
  N = "Infinitive",
  yn = {
    beforeTags: { Modal: N, Adverb: N, Negative: N, Plural: N },
    afterTags: {
      Determiner: N,
      Adverb: N,
      Possessive: N,
      Reflexive: N,
      Preposition: N,
      Cardinal: N,
      Comparative: N,
      Superlative: N,
    },
    beforeWords: {
      i: N,
      we: N,
      you: N,
      they: N,
      to: N,
      please: N,
      will: N,
      have: N,
      had: N,
      would: N,
      could: N,
      should: N,
      do: N,
      did: N,
      does: N,
      can: N,
      must: N,
      us: N,
      me: N,
      let: N,
      even: N,
      when: N,
      help: N,
      he: N,
      she: N,
      it: N,
      being: N,
      bi: N,
      co: N,
      contra: N,
      de: N,
      inter: N,
      intra: N,
      mis: N,
      pre: N,
      out: N,
      counter: N,
      nobody: N,
      somebody: N,
      anybody: N,
      everybody: N,
    },
    afterWords: {
      the: N,
      me: N,
      you: N,
      him: N,
      us: N,
      her: N,
      his: N,
      them: N,
      they: N,
      it: N,
      himself: N,
      herself: N,
      itself: N,
      myself: N,
      ourselves: N,
      themselves: N,
      something: N,
      anything: N,
      a: N,
      an: N,
      up: N,
      down: N,
      by: N,
      out: N,
      off: N,
      under: N,
      what: N,
      all: N,
      to: N,
      because: N,
      although: N,
      how: N,
      otherwise: N,
      together: N,
      though: N,
      into: N,
      yet: N,
      more: N,
      here: N,
      there: N,
      away: N,
    },
  },
  jB = {
    beforeTags: Object.assign({}, yn.beforeTags, Le.beforeTags, {}),
    afterTags: Object.assign({}, yn.afterTags, Le.afterTags, {}),
    beforeWords: Object.assign({}, yn.beforeWords, Le.beforeWords, {}),
    afterWords: Object.assign({}, yn.afterWords, Le.afterWords, {}),
  },
  F = "Adjective",
  Ie = {
    beforeTags: { Determiner: F, Possessive: F, Hyphenated: F },
    afterTags: { Adjective: F },
    beforeWords: {
      seem: F,
      seemed: F,
      seems: F,
      feel: F,
      feels: F,
      felt: F,
      stay: F,
      appear: F,
      appears: F,
      appeared: F,
      also: F,
      over: F,
      under: F,
      too: F,
      it: F,
      but: F,
      still: F,
      really: F,
      quite: F,
      well: F,
      very: F,
      truly: F,
      how: F,
      deeply: F,
      hella: F,
      profoundly: F,
      extremely: F,
      so: F,
      badly: F,
      mostly: F,
      totally: F,
      awfully: F,
      rather: F,
      nothing: F,
      something: F,
      anything: F,
      not: F,
      me: F,
      is: F,
      face: F,
      faces: F,
      faced: F,
      look: F,
      looks: F,
      looked: F,
      reveal: F,
      reveals: F,
      revealed: F,
      sound: F,
      sounded: F,
      sounds: F,
      remains: F,
      remained: F,
      prove: F,
      proves: F,
      proved: F,
      becomes: F,
      stays: F,
      tastes: F,
      taste: F,
      smells: F,
      smell: F,
      gets: F,
      grows: F,
      as: F,
      rings: F,
      radiates: F,
      conveys: F,
      convey: F,
      conveyed: F,
      of: F,
    },
    afterWords: { too: F, also: F, or: F, enough: F, as: F },
  },
  j = "Gerund",
  yo = {
    beforeTags: { Adverb: j, Preposition: j, Conjunction: j },
    afterTags: {
      Adverb: j,
      Possessive: j,
      Person: j,
      Pronoun: j,
      Determiner: j,
      Copula: j,
      Preposition: j,
      Conjunction: j,
      Comparative: j,
    },
    beforeWords: {
      been: j,
      keep: j,
      continue: j,
      stop: j,
      am: j,
      be: j,
      me: j,
      began: j,
      start: j,
      starts: j,
      started: j,
      stops: j,
      stopped: j,
      help: j,
      helps: j,
      avoid: j,
      avoids: j,
      love: j,
      loves: j,
      loved: j,
      hate: j,
      hates: j,
      hated: j,
    },
    afterWords: {
      you: j,
      me: j,
      her: j,
      him: j,
      his: j,
      them: j,
      their: j,
      it: j,
      this: j,
      there: j,
      on: j,
      about: j,
      for: j,
      up: j,
      down: j,
    },
  },
  ce = "Gerund",
  uo = "Adjective",
  $B = {
    beforeTags: Object.assign({}, Ie.beforeTags, yo.beforeTags, {
      Imperative: ce,
      Infinitive: uo,
      Plural: ce,
    }),
    afterTags: Object.assign({}, Ie.afterTags, yo.afterTags, { Noun: uo }),
    beforeWords: Object.assign({}, Ie.beforeWords, yo.beforeWords, {
      is: uo,
      are: ce,
      was: uo,
      of: uo,
      suggest: ce,
      suggests: ce,
      suggested: ce,
      recommend: ce,
      recommends: ce,
      recommended: ce,
      imagine: ce,
      imagines: ce,
      imagined: ce,
      consider: ce,
      considered: ce,
      considering: ce,
      resist: ce,
      resists: ce,
      resisted: ce,
      avoid: ce,
      avoided: ce,
      avoiding: ce,
      except: uo,
      accept: uo,
      assess: ce,
      explore: ce,
      fear: ce,
      fears: ce,
      appreciate: ce,
      question: ce,
      help: ce,
      embrace: ce,
      with: uo,
    }),
    afterWords: Object.assign({}, Ie.afterWords, yo.afterWords, {
      to: ce,
      not: ce,
      the: ce,
    }),
  },
  bm = {
    beforeTags: {
      Determiner: void 0,
      Cardinal: "Noun",
      PhrasalVerb: "Adjective",
    },
    afterTags: {},
  },
  UB = {
    beforeTags: Object.assign({}, Ie.beforeTags, Le.beforeTags, bm.beforeTags),
    afterTags: Object.assign({}, Ie.afterTags, Le.afterTags, bm.afterTags),
    beforeWords: Object.assign({}, Ie.beforeWords, Le.beforeWords, {
      are: "Adjective",
      is: "Adjective",
      was: "Adjective",
      be: "Adjective",
      off: "Adjective",
      out: "Adjective",
    }),
    afterWords: Object.assign({}, Ie.afterWords, Le.afterWords),
  };
let Z = "PastTense",
  yt = "Adjective";
const Jl = {
    beforeTags: { Adverb: Z, Pronoun: Z, ProperNoun: Z, Auxiliary: Z, Noun: Z },
    afterTags: {
      Possessive: Z,
      Pronoun: Z,
      Determiner: Z,
      Adverb: Z,
      Comparative: Z,
      Date: Z,
      Gerund: Z,
    },
    beforeWords: {
      be: Z,
      who: Z,
      get: yt,
      had: Z,
      has: Z,
      have: Z,
      been: Z,
      it: Z,
      as: Z,
      for: yt,
      more: yt,
      always: yt,
    },
    afterWords: {
      by: Z,
      back: Z,
      out: Z,
      in: Z,
      up: Z,
      down: Z,
      before: Z,
      after: Z,
      for: Z,
      the: Z,
      with: Z,
      as: Z,
      on: Z,
      at: Z,
      between: Z,
      to: Z,
      into: Z,
      us: Z,
      them: Z,
      his: Z,
      her: Z,
      their: Z,
      our: Z,
      me: Z,
      about: yt,
    },
  },
  qB = {
    beforeTags: Object.assign({}, Ie.beforeTags, Jl.beforeTags),
    afterTags: Object.assign({}, Ie.afterTags, Jl.afterTags),
    beforeWords: Object.assign({}, Ie.beforeWords, Jl.beforeWords),
    afterWords: Object.assign({}, Ie.afterWords, Jl.afterWords),
  },
  YB = { afterTags: { Noun: "Adjective", Conjunction: void 0 } },
  QB = {
    beforeTags: Object.assign({}, Ie.beforeTags, yn.beforeTags, {
      Adverb: void 0,
      Negative: void 0,
    }),
    afterTags: Object.assign({}, Ie.afterTags, yn.afterTags, YB.afterTags),
    beforeWords: Object.assign({}, Ie.beforeWords, yn.beforeWords, {
      have: void 0,
      had: void 0,
      not: void 0,
      went: "Adjective",
      goes: "Adjective",
      got: "Adjective",
      be: "Adjective",
    }),
    afterWords: Object.assign({}, Ie.afterWords, yn.afterWords, {
      to: void 0,
      as: "Adjective",
    }),
  },
  zl = {
    beforeTags: {
      Copula: "Gerund",
      PastTense: "Gerund",
      PresentTense: "Gerund",
      Infinitive: "Gerund",
    },
    afterTags: { Value: "Gerund" },
    beforeWords: {
      are: "Gerund",
      were: "Gerund",
      be: "Gerund",
      no: "Gerund",
      without: "Gerund",
      you: "Gerund",
      we: "Gerund",
      they: "Gerund",
      he: "Gerund",
      she: "Gerund",
      us: "Gerund",
      them: "Gerund",
    },
    afterWords: {
      the: "Gerund",
      this: "Gerund",
      that: "Gerund",
      me: "Gerund",
      us: "Gerund",
      them: "Gerund",
    },
  },
  ZB = {
    beforeTags: Object.assign({}, yo.beforeTags, Le.beforeTags, zl.beforeTags),
    afterTags: Object.assign({}, yo.afterTags, Le.afterTags, zl.afterTags),
    beforeWords: Object.assign(
      {},
      yo.beforeWords,
      Le.beforeWords,
      zl.beforeWords
    ),
    afterWords: Object.assign({}, yo.afterWords, Le.afterWords, zl.afterWords),
  },
  yr = "Singular",
  Ro = "Infinitive",
  XB = {
    beforeTags: Object.assign({}, yn.beforeTags, Le.beforeTags, {
      Adjective: yr,
      Particle: yr,
    }),
    afterTags: Object.assign({}, yn.afterTags, Le.afterTags, {
      ProperNoun: Ro,
      Gerund: Ro,
      Adjective: Ro,
      Copula: yr,
    }),
    beforeWords: Object.assign({}, yn.beforeWords, Le.beforeWords, {
      is: yr,
      was: yr,
      of: yr,
      have: null,
    }),
    afterWords: Object.assign({}, yn.afterWords, Le.afterWords, {
      instead: Ro,
      about: Ro,
      his: Ro,
      her: Ro,
      to: null,
      by: null,
      in: null,
    }),
  },
  he = "Person",
  _e = {
    beforeTags: { Honorific: he, Person: he },
    afterTags: { Person: he, ProperNoun: he, Verb: he },
    ownTags: { ProperNoun: he },
    beforeWords: { hi: he, hey: he, yo: he, dear: he, hello: he },
    afterWords: {
      said: he,
      says: he,
      told: he,
      tells: he,
      feels: he,
      felt: he,
      seems: he,
      thinks: he,
      thought: he,
      spends: he,
      spendt: he,
      plays: he,
      played: he,
      sing: he,
      sang: he,
      learn: he,
      learned: he,
      wants: he,
      wanted: he,
    },
  },
  Me = "Month",
  eP = "Person",
  jl = {
    beforeTags: { Date: Me, Value: Me },
    afterTags: { Date: Me, Value: Me },
    beforeWords: {
      by: Me,
      in: Me,
      on: Me,
      during: Me,
      after: Me,
      before: Me,
      between: Me,
      until: Me,
      til: Me,
      sometime: Me,
      of: Me,
      this: Me,
      next: Me,
      last: Me,
      previous: Me,
      following: Me,
      with: eP,
    },
    afterWords: { sometime: Me, in: Me, of: Me, until: Me, the: Me },
  },
  nP = {
    beforeTags: Object.assign({}, _e.beforeTags, jl.beforeTags),
    afterTags: Object.assign({}, _e.afterTags, jl.afterTags),
    beforeWords: Object.assign({}, _e.beforeWords, jl.beforeWords),
    afterWords: Object.assign({}, _e.afterWords, jl.afterWords),
  },
  aP = {
    beforeTags: Object.assign({}, Le.beforeTags, _e.beforeTags),
    afterTags: Object.assign({}, Le.afterTags, _e.afterTags),
    beforeWords: Object.assign({}, Le.beforeWords, _e.beforeWords, {
      i: "Infinitive",
      we: "Infinitive",
    }),
    afterWords: Object.assign({}, Le.afterWords, _e.afterWords),
  },
  oP = {
    beforeTags: Object.assign({}, Le.beforeTags, _e.beforeTags, yn.beforeTags),
    afterTags: Object.assign({}, Le.afterTags, _e.afterTags, yn.afterTags),
    beforeWords: Object.assign(
      {},
      Le.beforeWords,
      _e.beforeWords,
      yn.beforeWords
    ),
    afterWords: Object.assign({}, Le.afterWords, _e.afterWords, yn.afterWords),
  },
  rn = "Place",
  $l = {
    beforeTags: { Place: rn },
    afterTags: { Place: rn, Abbreviation: rn },
    beforeWords: { in: rn, by: rn, near: rn, from: rn, to: rn },
    afterWords: {
      in: rn,
      by: rn,
      near: rn,
      from: rn,
      to: rn,
      government: rn,
      council: rn,
      region: rn,
      city: rn,
    },
  },
  rP = {
    beforeTags: Object.assign({}, $l.beforeTags, _e.beforeTags),
    afterTags: Object.assign({}, $l.afterTags, _e.afterTags),
    beforeWords: Object.assign({}, $l.beforeWords, _e.beforeWords),
    afterWords: Object.assign({}, $l.afterWords, _e.afterWords),
  },
  tP = {
    beforeTags: Object.assign({}, _e.beforeTags, Ie.beforeTags),
    afterTags: Object.assign({}, _e.afterTags, Ie.afterTags),
    beforeWords: Object.assign({}, _e.beforeWords, Ie.beforeWords),
    afterWords: Object.assign({}, _e.afterWords, Ie.afterWords),
  };
let Xn = "Unit";
const lP = {
    beforeTags: { Value: Xn },
    afterTags: {},
    beforeWords: {
      per: Xn,
      every: Xn,
      each: Xn,
      square: Xn,
      cubic: Xn,
      sq: Xn,
      metric: Xn,
    },
    afterWords: { per: Xn, squared: Xn, cubed: Xn, long: Xn },
  },
  Mr = {
    "Actor|Verb": jB,
    "Adj|Gerund": $B,
    "Adj|Noun": UB,
    "Adj|Past": qB,
    "Adj|Present": QB,
    "Noun|Verb": XB,
    "Noun|Gerund": ZB,
    "Person|Noun": aP,
    "Person|Date": nP,
    "Person|Verb": oP,
    "Person|Place": rP,
    "Person|Adj": tP,
    "Unit|Noun": lP,
  },
  Ul = (e, n) => {
    let o = Object.keys(e).reduce(
      (t, l) => ((t[l] = e[l] === "Infinitive" ? "PresentTense" : "Plural"), t),
      {}
    );
    return Object.assign(o, n);
  };
Mr["Plural|Verb"] = {
  beforeWords: Ul(Mr["Noun|Verb"].beforeWords, {
    had: "Plural",
    have: "Plural",
  }),
  afterWords: Ul(Mr["Noun|Verb"].afterWords, {
    his: "PresentTense",
    her: "PresentTense",
    its: "PresentTense",
    in: null,
    to: null,
    is: "PresentTense",
    by: "PresentTense",
  }),
  beforeTags: Ul(Mr["Noun|Verb"].beforeTags, {
    Conjunction: "PresentTense",
    Noun: void 0,
    ProperNoun: "PresentTense",
  }),
  afterTags: Ul(Mr["Noun|Verb"].afterTags, {
    Gerund: "Plural",
    Noun: "PresentTense",
    Value: "PresentTense",
  }),
};
const ge = "Adjective",
  Ye = "Infinitive",
  No = "PresentTense",
  ee = "Singular",
  Qe = "PastTense",
  fr = "Adverb",
  xn = "Plural",
  Re = "Actor",
  ql = "Verb",
  mn = "Noun",
  iP = "ProperNoun",
  da = "LastName",
  Mm = "Modal",
  ye = "Place",
  bu = "Participle",
  sP = [
    null,
    null,
    { ea: ee, ia: mn, ic: ge, ly: fr, "'n": ql, "'t": ql },
    {
      oed: Qe,
      ued: Qe,
      xed: Qe,
      " so": fr,
      "'ll": Mm,
      "'re": "Copula",
      azy: ge,
      eer: mn,
      end: ql,
      ped: Qe,
      ffy: ge,
      ify: Ye,
      ing: "Gerund",
      ize: Ye,
      ibe: Ye,
      lar: ge,
      mum: ge,
      nes: No,
      nny: ge,
      ous: ge,
      que: ge,
      ger: mn,
      ber: mn,
      rol: ee,
      sis: ee,
      ogy: ee,
      oid: ee,
      ian: ee,
      zes: No,
      eld: Qe,
      ken: bu,
      ven: bu,
      ten: bu,
      ect: Ye,
      ict: Ye,
      ign: Ye,
      oze: Ye,
      ful: ge,
      bal: ge,
      ton: mn,
      pur: ye,
    },
    {
      amed: Qe,
      aped: Qe,
      ched: Qe,
      lked: Qe,
      rked: Qe,
      reed: Qe,
      nded: Qe,
      mned: ge,
      cted: Qe,
      dged: Qe,
      ield: ee,
      akis: da,
      cede: Ye,
      chuk: da,
      czyk: da,
      ects: No,
      iend: ee,
      ends: ql,
      enko: da,
      ette: ee,
      iary: ee,
      wner: ee,
      fies: No,
      fore: fr,
      gate: Ye,
      gone: ge,
      ices: xn,
      ints: xn,
      ruct: Ye,
      ines: xn,
      ions: xn,
      ners: xn,
      pers: xn,
      lers: xn,
      less: ge,
      llen: ge,
      made: ge,
      nsen: da,
      oses: No,
      ould: Mm,
      some: ge,
      sson: da,
      ians: xn,
      tion: ee,
      tage: mn,
      ique: ee,
      tive: ge,
      tors: mn,
      vice: ee,
      lier: ee,
      fier: ee,
      wned: Qe,
      gent: ee,
      tist: Re,
      pist: Re,
      rist: Re,
      mist: Re,
      yist: Re,
      vist: Re,
      ists: Re,
      lite: ee,
      site: ee,
      rite: ee,
      mite: ee,
      bite: ee,
      mate: ee,
      date: ee,
      ndal: ee,
      vent: ee,
      uist: Re,
      gist: Re,
      note: ee,
      cide: ee,
      ence: ee,
      wide: ge,
      vide: Ye,
      ract: Ye,
      duce: Ye,
      pose: Ye,
      eive: Ye,
      lyze: Ye,
      lyse: Ye,
      iant: ge,
      nary: ge,
      ghty: ge,
      uent: ge,
      erer: Re,
      bury: ye,
      dorf: mn,
      esty: mn,
      wych: ye,
      dale: ye,
      folk: ye,
      vale: ye,
      abad: ye,
      sham: ye,
      wick: ye,
      view: ye,
    },
    {
      elist: Re,
      holic: ee,
      phite: ee,
      tized: Qe,
      urned: Qe,
      eased: Qe,
      ances: xn,
      bound: ge,
      ettes: xn,
      fully: fr,
      ishes: No,
      ities: xn,
      marek: da,
      nssen: da,
      ology: mn,
      osome: ee,
      tment: ee,
      ports: xn,
      rough: ge,
      tches: No,
      tieth: "Ordinal",
      tures: xn,
      wards: fr,
      where: fr,
      archy: mn,
      pathy: mn,
      opoly: mn,
      embly: mn,
      phate: mn,
      ndent: ee,
      scent: ee,
      onist: Re,
      anist: Re,
      alist: Re,
      olist: Re,
      icist: Re,
      ounce: Ye,
      iable: ge,
      borne: ge,
      gnant: ge,
      inant: ge,
      igent: ge,
      atory: ge,
      rient: ee,
      dient: ee,
      maker: Re,
      burgh: ye,
      mouth: ye,
      ceter: ye,
      ville: ye,
      hurst: ye,
      stead: ye,
      endon: ye,
      brook: ye,
      shire: ye,
      worth: mn,
      field: iP,
      ridge: ye,
    },
    {
      auskas: da,
      parent: ee,
      cedent: ee,
      ionary: ee,
      cklist: ee,
      brooke: ye,
      keeper: Re,
      logist: Re,
      teenth: "Value",
      worker: Re,
      master: Re,
      writer: Re,
      brough: ye,
      cester: ye,
      ington: ye,
      cliffe: ye,
      ingham: ye,
    },
    { chester: ye, logists: Re, opoulos: da, borough: ye, sdottir: da },
  ],
  Vn = "Adjective",
  fe = "Noun",
  ft = "Verb",
  uP = [
    null,
    null,
    {},
    { neo: fe, bio: fe, "de-": ft, "re-": ft, "un-": ft, "ex-": fe },
    {
      anti: fe,
      auto: fe,
      faux: Vn,
      hexa: fe,
      kilo: fe,
      mono: fe,
      nano: fe,
      octa: fe,
      poly: fe,
      semi: Vn,
      tele: fe,
      "pro-": Vn,
      "mis-": ft,
      "dis-": ft,
      "pre-": Vn,
    },
    {
      anglo: fe,
      centi: fe,
      ethno: fe,
      ferro: fe,
      grand: fe,
      hepta: fe,
      hydro: fe,
      intro: fe,
      macro: fe,
      micro: fe,
      milli: fe,
      nitro: fe,
      penta: fe,
      quasi: Vn,
      radio: fe,
      tetra: fe,
      "omni-": Vn,
      "post-": Vn,
    },
    {
      pseudo: Vn,
      "extra-": Vn,
      "hyper-": Vn,
      "inter-": Vn,
      "intra-": Vn,
      "deca-": Vn,
    },
    { electro: fe },
  ],
  He = "Adjective",
  Yl = "Infinitive",
  Ql = "PresentTense",
  Na = "Singular",
  kn = "PastTense",
  Bm = "Adverb",
  Ea = "Expression",
  Pm = "Actor",
  Hm = "Verb",
  Lm = "Noun",
  Zl = "LastName",
  dP = {
    a: [
      [/.[aeiou]na$/, Lm, "tuna"],
      [/.[oau][wvl]ska$/, Zl],
      [/.[^aeiou]ica$/, Na, "harmonica"],
      [/^([hyj]a+)+$/, Ea, "haha"],
    ],
    c: [[/.[^aeiou]ic$/, He]],
    d: [
      [/[aeiou](pp|ll|ss|ff|gg|tt|rr|bb|nn|mm)ed$/, kn, "popped"],
      [/.[aeo]{2}[bdgmnprvz]ed$/, kn, "rammed"],
      [/.[aeiou][sg]hed$/, kn, "gushed"],
      [/.[aeiou]red$/, kn, "hired"],
      [/.[aeiou]r?ried$/, kn, "hurried"],
      [/[^aeiou]ard$/, Na, "steward"],
      [/[aeiou][^aeiou]id$/, He, ""],
      [/.[vrl]id$/, He, "livid"],
      [/..led$/, kn, "hurled"],
      [/.[iao]sed$/, kn, ""],
      [/[aeiou]n?[cs]ed$/, kn, ""],
      [/[aeiou][rl]?[mnf]ed$/, kn, ""],
      [/[aeiou][ns]?c?ked$/, kn, "bunked"],
      [/[aeiou]gned$/, kn],
      [/[aeiou][nl]?ged$/, kn],
      [/.[tdbwxyz]ed$/, kn],
      [/[^aeiou][aeiou][tvx]ed$/, kn],
      [/.[cdflmnprstv]ied$/, kn, "emptied"],
    ],
    e: [
      [/.[lnr]ize$/, Yl, "antagonize"],
      [/.[^aeiou]ise$/, Yl, "antagonise"],
      [/.[aeiou]te$/, Yl, "bite"],
      [/.[^aeiou][ai]ble$/, He, "fixable"],
      [/.[^aeiou]eable$/, He, "maleable"],
      [/.[ts]ive$/, He, "festive"],
      [/[a-z]-like$/, He, "woman-like"],
    ],
    h: [
      [/.[^aeiouf]ish$/, He, "cornish"],
      [/.v[iy]ch$/, Zl, "..ovich"],
      [/^ug?h+$/, Ea, "ughh"],
      [/^uh[ -]?oh$/, Ea, "uhoh"],
      [/[a-z]-ish$/, He, "cartoon-ish"],
    ],
    i: [[/.[oau][wvl]ski$/, Zl, "polish-male"]],
    k: [[/^(k){2}$/, Ea, "kkkk"]],
    l: [
      [/.[gl]ial$/, He, "familial"],
      [/.[^aeiou]ful$/, He, "fitful"],
      [/.[nrtumcd]al$/, He, "natal"],
      [/.[^aeiou][ei]al$/, He, "familial"],
    ],
    m: [
      [/.[^aeiou]ium$/, Na, "magnesium"],
      [/[^aeiou]ism$/, Na, "schism"],
      [/^[hu]m+$/, Ea, "hmm"],
      [/^\d+ ?[ap]m$/, "Date", "3am"],
    ],
    n: [
      [/.[lsrnpb]ian$/, He, "republican"],
      [/[^aeiou]ician$/, Pm, "musician"],
      [/[aeiou][ktrp]in'$/, "Gerund", "cookin'"],
    ],
    o: [
      [/^no+$/, Ea, "noooo"],
      [/^(yo)+$/, Ea, "yoo"],
      [/^wo{2,}[pt]?$/, Ea, "woop"],
    ],
    r: [
      [/.[bdfklmst]ler$/, "Noun"],
      [/[aeiou][pns]er$/, Na],
      [/[^i]fer$/, Yl],
      [/.[^aeiou][ao]pher$/, Pm],
      [/.[lk]er$/, "Noun"],
      [/.ier$/, "Comparative"],
    ],
    t: [
      [/.[di]est$/, "Superlative"],
      [/.[icldtgrv]ent$/, He],
      [/[aeiou].*ist$/, He],
      [/^[a-z]et$/, Hm],
    ],
    s: [
      [/.[^aeiou]ises$/, Ql],
      [/.[rln]ates$/, Ql],
      [/.[^z]ens$/, Hm],
      [/.[lstrn]us$/, Na],
      [/.[aeiou]sks$/, Ql],
      [/.[aeiou]kes$/, Ql],
      [/[aeiou][^aeiou]is$/, Na],
      [/[a-z]'s$/, Lm],
      [/^yes+$/, Ea],
    ],
    v: [[/.[^aeiou][ai][kln]ov$/, Zl]],
    y: [
      [/.[cts]hy$/, He],
      [/.[st]ty$/, He],
      [/.[tnl]ary$/, He],
      [/.[oe]ry$/, Na],
      [/[rdntkbhs]ly$/, Bm],
      [/.(gg|bb|zz)ly$/, He],
      [/...lly$/, Bm],
      [/.[gk]y$/, He],
      [/[bszmp]{2}y$/, He],
      [/.[ai]my$/, He],
      [/[ea]{2}zy$/, He],
      [/.[^aeiou]ity$/, Na],
    ],
  },
  pn = "Verb",
  ke = "Noun",
  cP = {
    leftTags: [
      ["Adjective", ke],
      ["Possessive", ke],
      ["Determiner", ke],
      ["Adverb", pn],
      ["Pronoun", pn],
      ["Value", ke],
      ["Ordinal", ke],
      ["Modal", pn],
      ["Superlative", ke],
      ["Demonym", ke],
      ["Honorific", "Person"],
    ],
    leftWords: [
      ["i", pn],
      ["first", ke],
      ["it", pn],
      ["there", pn],
      ["not", pn],
      ["because", ke],
      ["if", ke],
      ["but", ke],
      ["who", pn],
      ["this", ke],
      ["his", ke],
      ["when", ke],
      ["you", pn],
      ["very", "Adjective"],
      ["old", ke],
      ["never", pn],
      ["before", ke],
      ["a", ke],
      ["the", ke],
      ["been", pn],
    ],
    rightTags: [
      ["Copula", ke],
      ["PastTense", ke],
      ["Conjunction", ke],
      ["Modal", ke],
    ],
    rightWords: [
      ["there", pn],
      ["me", pn],
      ["man", "Adjective"],
      ["him", pn],
      ["it", pn],
      ["were", ke],
      ["took", ke],
      ["himself", pn],
      ["went", ke],
      ["who", ke],
      ["jr", "Person"],
    ],
  },
  _o = {
    Comparative: {
      fwd: "3:ser,ier¦1er:h,t,f,l,n¦1r:e¦2er:ss,or,om",
      both: "3er:ver,ear,alm¦3ner:hin¦3ter:lat¦2mer:im¦2er:ng,rm,mb¦2ber:ib¦2ger:ig¦1er:w,p,k,d¦ier:y",
      rev: "1:tter,yer¦2:uer,ver,ffer,oner,eler,ller,iler,ster,cer,uler,sher,ener,gher,aner,adder,nter,eter,rter,hter,rner,fter¦3:oser,ooler,eafer,user,airer,bler,maler,tler,eater,uger,rger,ainer,urer,ealer,icher,pler,emner,icter,nser,iser¦4:arser,viner,ucher,rosser,somer,ndomer,moter,oother,uarer,hiter¦5:nuiner,esser,emier¦ar:urther",
      ex: "worse:bad¦better:good¦4er:fair,gray,poor¦1urther:far¦3ter:fat,hot,wet¦3der:mad,sad¦3er:shy,fun¦4der:glad¦:¦4r:cute,dire,fake,fine,free,lame,late,pale,rare,ripe,rude,safe,sore,tame,wide¦5r:eerie,stale",
    },
    Gerund: {
      fwd: "1:nning,tting,rring,pping,eing,mming,gging,dding,bbing,kking¦2:eking,oling,eling,eming¦3:velling,siting,uiting,fiting,loting,geting,ialing,celling¦4:graming",
      both: "1:aing,iing,fing,xing,ying,oing,hing,wing¦2:tzing,rping,izzing,bting,mning,sping,wling,rling,wding,rbing,uping,lming,wning,mping,oning,lting,mbing,lking,fting,hting,sking,gning,pting,cking,ening,nking,iling,eping,ering,rting,rming,cting,lping,ssing,nting,nding,lding,sting,rning,rding,rking¦3:belling,siping,toming,yaking,uaking,oaning,auling,ooping,aiding,naping,euring,tolling,uzzing,ganing,haning,ualing,halling,iasing,auding,ieting,ceting,ouling,voring,ralling,garing,joring,oaming,oaking,roring,nelling,ooring,uelling,eaming,ooding,eaping,eeting,ooting,ooming,xiting,keting,ooking,ulling,airing,oaring,biting,outing,oiting,earing,naling,oading,eeding,ouring,eaking,aiming,illing,oining,eaning,onging,ealing,aining,eading¦4:thoming,melling,aboring,ivoting,weating,dfilling,onoring,eriting,imiting,tialling,rgining,otoring,linging,winging,lleting,louding,spelling,mpelling,heating,feating,opelling,choring,welling,ymaking,ctoring,calling,peating,iloring,laiting,utoring,uditing,mmaking,loating,iciting,waiting,mbating,voiding,otalling,nsoring,nselling,ocusing,itoring,eloping¦5:rselling,umpeting,atrolling,treating,tselling,rpreting,pringing,ummeting,ossoming,elmaking,eselling,rediting,totyping,onmaking,rfeiting,ntrolling¦5e:chmaking,dkeeping,severing,erouting,ecreting,ephoning,uthoring,ravening,reathing,pediting,erfering,eotyping,fringing,entoring,ombining,ompeting¦4e:emaking,eething,twining,rruling,chuting,xciting,rseding,scoping,edoring,pinging,lunging,agining,craping,pleting,eleting,nciting,nfining,ncoding,tponing,ecoding,writing,esaling,nvening,gnoring,evoting,mpeding,rvening,dhering,mpiling,storing,nviting,ploring¦3e:tining,nuring,saking,miring,haling,ceding,xuding,rining,nuting,laring,caring,miling,riding,hoking,piring,lading,curing,uading,noting,taping,futing,paring,hading,loding,siring,guring,vading,voking,during,niting,laning,caping,luting,muting,ruding,ciding,juring,laming,caling,hining,uoting,liding,ciling,duling,tuting,puting,cuting,coring,uiding,tiring,turing,siding,rading,enging,haping,buting,lining,taking,anging,haring,uiring,coming,mining,moting,suring,viding,luding¦2e:tring,zling,uging,oging,gling,iging,vring,fling,lging,obing,psing,pling,ubing,cling,dling,wsing,iking,rsing,dging,kling,ysing,tling,rging,eging,nsing,uning,osing,uming,using,ibing,bling,aging,ising,asing,ating¦2ie:rlying¦1e:zing,uing,cing,ving",
      rev: "ying:ie¦1ing:se,ke,te,we,ne,re,de,pe,me,le,c,he¦2ing:ll,ng,dd,ee,ye,oe,rg,us¦2ning:un¦2ging:og,ag,ug,ig,eg¦2ming:um¦2bing:ub,ab,eb,ob¦3ning:lan,can,hin,pin,win¦3ring:cur,lur,tir,tar,pur,car¦3ing:ait,del,eel,fin,eat,oat,eem,lel,ool,ein,uin¦3ping:rop,rap,top,uip,wap,hip,hop,lap,rip,cap¦3ming:tem,wim,rim,kim,lim¦3ting:mat,cut,pot,lit,lot,hat,set,pit,put¦3ding:hed,bed,bid¦3king:rek¦3ling:cil,pel¦3bing:rib¦4ning:egin¦4ing:isit,ruit,ilot,nsit,dget,rkel,ival,rcel¦4ring:efer,nfer¦4ting:rmit,mmit,ysit,dmit,emit,bmit,tfit,gret¦4ling:evel,xcel,ivel¦4ding:hred¦5ing:arget,posit,rofit¦5ring:nsfer¦5ting:nsmit,orget,cquit¦5ling:ancel,istil",
      ex: "3:adding,eating,aiming,aiding,airing,outing,gassing,setting,getting,putting,cutting,winning,sitting,betting,mapping,tapping,letting,bidding,hitting,tanning,netting,popping,fitting,capping,lapping,barring,banning,vetting,topping,rotting,tipping,potting,wetting,pitting,dipping,budding,hemming,pinning,jetting,kidding,padding,podding,sipping,wedding,bedding,donning,warring,penning,gutting,cueing,wadding,petting,ripping,napping,matting,tinning,binning,dimming,hopping,mopping,nodding,panning,rapping,ridding,sinning¦4:selling,falling,calling,waiting,editing,telling,rolling,heating,boating,hanging,beating,coating,singing,tolling,felling,polling,discing,seating,voiding,gelling,yelling,baiting,reining,ruining,seeking,spanning,stepping,knitting,emitting,slipping,quitting,dialing,omitting,clipping,shutting,skinning,abutting,flipping,trotting,cramming,fretting,suiting¦5:bringing,treating,spelling,stalling,trolling,expelling,rivaling,wringing,deterring,singeing,befitting,refitting¦6:enrolling,distilling,scrolling,strolling,caucusing,travelling¦7:installing,redefining,stencilling,recharging,overeating,benefiting,unraveling,programing¦9:reprogramming¦is:being¦2e:using,aging,owing¦3e:making,taking,coming,noting,hiring,filing,coding,citing,doping,baking,coping,hoping,lading,caring,naming,voting,riding,mining,curing,lining,ruling,typing,boring,dining,firing,hiding,piling,taping,waning,baling,boning,faring,honing,wiping,luring,timing,wading,piping,fading,biting,zoning,daring,waking,gaming,raking,ceding,tiring,coking,wining,joking,paring,gaping,poking,pining,coring,liming,toting,roping,wiring,aching¦4e:writing,storing,eroding,framing,smoking,tasting,wasting,phoning,shaking,abiding,braking,flaking,pasting,priming,shoring,sloping,withing,hinging¦5e:defining,refining,renaming,swathing,fringing,reciting¦1ie:dying,tying,lying,vying¦7e:sunbathing",
    },
    Participle: {
      fwd: "1:mt¦2:llen¦3:iven,aken¦:ne¦y:in",
      both: "1:wn¦2:me,aten¦3:seen,bidden,isen¦4:roven,asten¦3l:pilt¦3d:uilt¦2e:itten¦1im:wum¦1eak:poken¦1ine:hone¦1ose:osen¦1in:gun¦1ake:woken¦ear:orn¦eal:olen¦eeze:ozen¦et:otten¦ink:unk¦ing:ung",
      rev: "2:un¦oken:eak¦ought:eek¦oven:eave¦1ne:o¦1own:ly¦1den:de¦1in:ay¦2t:am¦2n:ee¦3en:all¦4n:rive,sake,take¦5n:rgive",
      ex: "2:been¦3:seen,run¦4:given,taken¦5:shaken¦2eak:broken¦1ive:dove¦2y:flown¦3e:hidden,ridden¦1eek:sought¦1ake:woken¦1eave:woven",
    },
    PastTense: {
      fwd: "1:tted,wed,gged,nned,een,rred,pped,yed,bbed,oed,dded,rd,wn,mmed¦2:eed,nded,et,hted,st,oled,ut,emed,eled,lded,ken,rt,nked,apt,ant,eped,eked¦3:eared,eat,eaded,nelled,ealt,eeded,ooted,eaked,eaned,eeted,mited,bid,uit,ead,uited,ealed,geted,velled,ialed,belled¦4:ebuted,hined,comed¦y:ied¦ome:ame¦ear:ore¦ind:ound¦ing:ung,ang¦ep:pt¦ink:ank,unk¦ig:ug¦all:ell¦ee:aw¦ive:ave¦eeze:oze¦old:eld¦ave:ft¦ake:ook¦ell:old¦ite:ote¦ide:ode¦ine:one¦in:un,on¦eal:ole¦im:am¦ie:ay¦and:ood¦1ise:rose¦1eak:roke¦1ing:rought¦1ive:rove¦1el:elt¦1id:bade¦1et:got¦1y:aid¦1it:sat¦3e:lid¦3d:pent",
      both: "1:aed,fed,xed,hed¦2:sged,xted,wled,rped,lked,kied,lmed,lped,uped,bted,rbed,rked,wned,rled,mped,fted,mned,mbed,zzed,omed,ened,cked,gned,lted,sked,ued,zed,nted,ered,rted,rmed,ced,sted,rned,ssed,rded,pted,ved,cted¦3:cled,eined,siped,ooned,uked,ymed,jored,ouded,ioted,oaned,lged,asped,iged,mured,oided,eiled,yped,taled,moned,yled,lit,kled,oaked,gled,naled,fled,uined,oared,valled,koned,soned,aided,obed,ibed,meted,nicked,rored,micked,keted,vred,ooped,oaded,rited,aired,auled,filled,ouled,ooded,ceted,tolled,oited,bited,aped,tled,vored,dled,eamed,nsed,rsed,sited,owded,pled,sored,rged,osed,pelled,oured,psed,oated,loned,aimed,illed,eured,tred,ioned,celled,bled,wsed,ooked,oiled,itzed,iked,iased,onged,ased,ailed,uned,umed,ained,auded,nulled,ysed,eged,ised,aged,oined,ated,used,dged,doned¦4:ntied,efited,uaked,caded,fired,roped,halled,roked,himed,culed,tared,lared,tuted,uared,routed,pited,naked,miled,houted,helled,hared,cored,caled,tired,peated,futed,ciled,called,tined,moted,filed,sided,poned,iloted,honed,lleted,huted,ruled,cured,named,preted,vaded,sured,talled,haled,peded,gined,nited,uided,ramed,feited,laked,gured,ctored,unged,pired,cuted,voked,eloped,ralled,rined,coded,icited,vided,uaded,voted,mined,sired,noted,lined,nselled,luted,jured,fided,puted,piled,pared,olored,cided,hoked,enged,tured,geoned,cotted,lamed,uiled,waited,udited,anged,luded,mired,uired,raded¦5:modelled,izzled,eleted,umpeted,ailored,rseded,treated,eduled,ecited,rammed,eceded,atrolled,nitored,basted,twined,itialled,ncited,gnored,ploded,xcited,nrolled,namelled,plored,efeated,redited,ntrolled,nfined,pleted,llided,lcined,eathed,ibuted,lloted,dhered,cceded¦3ad:sled¦2aw:drew¦2ot:hot¦2ke:made¦2ow:hrew,grew¦2ose:hose¦2d:ilt¦2in:egan¦1un:ran¦1ink:hought¦1ick:tuck¦1ike:ruck¦1eak:poke,nuck¦1it:pat¦1o:did¦1ow:new¦1ake:woke¦go:went",
      rev: "3:rst,hed,hut,cut,set¦4:tbid¦5:dcast,eread,pread,erbid¦ought:uy,eek¦1ied:ny,ly,dy,ry,fy,py,vy,by,ty,cy¦1ung:ling,ting,wing¦1pt:eep¦1ank:rink¦1ore:bear,wear¦1ave:give¦1oze:reeze¦1ound:rind,wind¦1ook:take,hake¦1aw:see¦1old:sell¦1ote:rite¦1ole:teal¦1unk:tink¦1am:wim¦1ay:lie¦1ood:tand¦1eld:hold¦2d:he,ge,re,le,leed,ne,reed,be,ye,lee,pe,we¦2ed:dd,oy,or,ey,gg,rr,us,ew,to¦2ame:ecome,rcome¦2ped:ap¦2ged:ag,og,ug,eg¦2bed:ub,ab,ib,ob¦2lt:neel¦2id:pay¦2ang:pring¦2ove:trive¦2med:um¦2ode:rride¦2at:ysit¦3ted:mit,hat,mat,lat,pot,rot,bat¦3ed:low,end,tow,und,ond,eem,lay,cho,dow,xit,eld,ald,uld,law,lel,eat,oll,ray,ank,fin,oam,out,how,iek,tay,haw,ait,vet,say,cay,bow¦3d:ste,ede,ode,ete,ree,ude,ame,oke,ote,ime,ute,ade¦3red:lur,cur,pur,car¦3ped:hop,rop,uip,rip,lip,tep,top¦3ded:bed,rod,kid¦3ade:orbid¦3led:uel¦3ned:lan,can,kin,pan,tun¦3med:rim,lim¦4ted:quit,llot¦4ed:pear,rrow,rand,lean,mand,anel,pand,reet,link,abel,evel,imit,ceed,ruit,mind,peal,veal,hool,head,pell,well,mell,uell,band,hear,weak¦4led:nnel,qual,ebel,ivel¦4red:nfer,efer,sfer¦4n:sake,trew¦4d:ntee¦4ded:hred¦4ned:rpin¦5ed:light,nceal,right,ndear,arget,hread,eight,rtial,eboot¦5d:edite,nvite¦5ted:egret¦5led:ravel",
      ex: "2:been,upped¦3:added,aged,aided,aimed,aired,bid,died,dyed,egged,erred,eyed,fit,gassed,hit,lied,owed,pent,pied,tied,used,vied,oiled,outed,banned,barred,bet,canned,cut,dipped,donned,ended,feed,inked,jarred,let,manned,mowed,netted,padded,panned,pitted,popped,potted,put,set,sewn,sowed,tanned,tipped,topped,vowed,weed,bowed,jammed,binned,dimmed,hopped,mopped,nodded,pinned,rigged,sinned,towed,vetted¦4:ached,baked,baled,boned,bored,called,caned,cared,ceded,cited,coded,cored,cubed,cured,dared,dined,edited,exited,faked,fared,filed,fined,fired,fuelled,gamed,gelled,hired,hoped,joked,lined,mined,named,noted,piled,poked,polled,pored,pulled,reaped,roamed,rolled,ruled,seated,shed,sided,timed,tolled,toned,voted,waited,walled,waned,winged,wiped,wired,zoned,yelled,tamed,lubed,roped,faded,mired,caked,honed,banged,culled,heated,raked,welled,banded,beat,cast,cooled,cost,dealt,feared,folded,footed,handed,headed,heard,hurt,knitted,landed,leaked,leapt,linked,meant,minded,molded,neared,needed,peaked,plodded,plotted,pooled,quit,read,rooted,sealed,seeded,seeped,shipped,shunned,skimmed,slammed,sparred,stemmed,stirred,suited,thinned,twinned,swayed,winked,dialed,abutted,blotted,fretted,healed,heeded,peeled,reeled¦5:basted,cheated,equalled,eroded,exiled,focused,opined,pleated,primed,quoted,scouted,shored,sloped,smoked,sniped,spelled,spouted,routed,staked,stored,swelled,tasted,treated,wasted,smelled,dwelled,honored,prided,quelled,eloped,scared,coveted,sweated,breaded,cleared,debuted,deterred,freaked,modeled,pleaded,rebutted,speeded¦6:anchored,defined,endured,impaled,invited,refined,revered,strolled,cringed,recast,thrust,unfolded¦7:authored,combined,competed,conceded,convened,excreted,extruded,redefined,restored,secreted,rescinded,welcomed¦8:expedited,infringed¦9:interfered,intervened,persevered¦10:contravened¦eat:ate¦is:was¦go:went¦are:were¦3d:bent,lent,rent,sent¦3e:bit,fled,hid,lost¦3ed:bled,bred¦2ow:blew,grew¦1uy:bought¦2tch:caught¦1o:did¦1ive:dove,gave¦2aw:drew¦2ed:fed¦2y:flew,laid,paid,said¦1ight:fought¦1et:got¦2ve:had¦1ang:hung¦2ad:led¦2ght:lit¦2ke:made¦2et:met¦1un:ran¦1ise:rose¦1it:sat¦1eek:sought¦1each:taught¦1ake:woke,took¦1eave:wove¦2ise:arose¦1ear:bore,tore,wore¦1ind:bound,found,wound¦2eak:broke¦2ing:brought,wrung¦1ome:came¦2ive:drove¦1ig:dug¦1all:fell¦2el:felt¦4et:forgot¦1old:held¦2ave:left¦1ing:rang,sang¦1ide:rode¦1ink:sank¦1ee:saw¦2ine:shone¦4e:slid¦1ell:sold,told¦4d:spent¦2in:spun¦1in:won",
    },
    PresentTense: {
      fwd: "1:oes¦1ve:as",
      both: "1:xes¦2:zzes,ches,shes,sses¦3:iases¦2y:llies,plies¦1y:cies,bies,ties,vies,nies,pies,dies,ries,fies¦:s",
      rev: "1ies:ly¦2es:us,go,do¦3es:cho,eto",
      ex: "2:does,goes¦3:gasses¦5:focuses¦is:are¦3y:relies¦2y:flies¦2ve:has",
    },
    Superlative: {
      fwd: "1st:e¦1est:l,m,f,s¦1iest:cey¦2est:or,ir¦3est:ver",
      both: "4:east¦5:hwest¦5lest:erful¦4est:weet,lgar,tter,oung¦4most:uter¦3est:ger,der,rey,iet,ong,ear¦3test:lat¦3most:ner¦2est:pt,ft,nt,ct,rt,ht¦2test:it¦2gest:ig¦1est:b,k,n,p,h,d,w¦iest:y",
      rev: "1:ttest,nnest,yest¦2:sest,stest,rmest,cest,vest,lmest,olest,ilest,ulest,ssest,imest,uest¦3:rgest,eatest,oorest,plest,allest,urest,iefest,uelest,blest,ugest,amest,yalest,ealest,illest,tlest,itest¦4:cerest,eriest,somest,rmalest,ndomest,motest,uarest,tiffest¦5:leverest,rangest¦ar:urthest¦3ey:riciest",
      ex: "best:good¦worst:bad¦5est:great¦4est:fast,full,fair,dull¦3test:hot,wet,fat¦4nest:thin¦1urthest:far¦3est:gay,shy,ill¦4test:neat¦4st:late,wide,fine,safe,cute,fake,pale,rare,rude,sore,ripe,dire¦6st:severe",
    },
    AdjToNoun: {
      fwd: "1:tistic,eable,lful,sful,ting,tty¦2:onate,rtable,geous,ced,seful,ctful¦3:ortive,ented¦arity:ear¦y:etic¦fulness:begone¦1ity:re¦1y:tiful,gic¦2ity:ile,imous,ilous,ime¦2ion:ated¦2eness:iving¦2y:trious¦2ation:iring¦2tion:vant¦3ion:ect¦3ce:mant,mantic¦3tion:irable¦3y:est,estic¦3m:mistic,listic¦3ess:ning¦4n:utious¦4on:rative,native,vative,ective¦4ce:erant",
      both: "1:king,wing¦2:alous,ltuous,oyful,rdous¦3:gorous,ectable,werful,amatic¦4:oised,usical,agical,raceful,ocused,lined,ightful¦5ness:stful,lding,itous,nuous,ulous,otous,nable,gious,ayful,rvous,ntous,lsive,peful,entle,ciful,osive,leful,isive,ncise,reful,mious¦5ty:ivacious¦5ties:ubtle¦5ce:ilient,adiant,atient¦5cy:icient¦5sm:gmatic¦5on:sessive,dictive¦5ity:pular,sonal,eative,entic¦5sity:uminous¦5ism:conic¦5nce:mperate¦5ility:mitable¦5ment:xcited¦5n:bitious¦4cy:brant,etent,curate¦4ility:erable,acable,icable,ptable¦4ty:nacious,aive,oyal,dacious¦4n:icious¦4ce:vient,erent,stent,ndent,dient,quent,ident¦4ness:adic,ound,hing,pant,sant,oing,oist,tute¦4icity:imple¦4ment:fined,mused¦4ism:otic¦4ry:dantic¦4ity:tund,eral¦4edness:hand¦4on:uitive¦4lity:pitable¦4sm:eroic,namic¦4sity:nerous¦3th:arm¦3ility:pable,bable,dable,iable¦3cy:hant,nant,icate¦3ness:red,hin,nse,ict,iet,ite,oud,ind,ied,rce¦3ion:lute¦3ity:ual,gal,volous,ial¦3ce:sent,fensive,lant,gant,gent,lent,dant¦3on:asive¦3m:fist,sistic,iastic¦3y:terious,xurious,ronic,tastic¦3ur:amorous¦3e:tunate¦3ation:mined¦3sy:rteous¦3ty:ain¦3ry:ave¦3ment:azed¦2ness:de,on,ue,rn,ur,ft,rp,pe,om,ge,rd,od,ay,ss,er,ll,oy,ap,ht,ld,ad,rt¦2inousness:umous¦2ity:neous,ene,id,ane¦2cy:bate,late¦2ation:ized¦2ility:oble,ible¦2y:odic¦2e:oving,aring¦2s:ost¦2itude:pt¦2dom:ee¦2ance:uring¦2tion:reet¦2ion:oted¦2sion:ending¦2liness:an¦2or:rdent¦1th:ung¦1e:uable¦1ness:w,h,k,f¦1ility:mble¦1or:vent¦1ement:ging¦1tiquity:ncient¦1ment:hed¦verty:or¦ength:ong¦eat:ot¦pth:ep¦iness:y",
      rev: "",
      ex: "5:forceful,humorous¦8:charismatic¦13:understanding¦5ity:active¦11ness:adventurous,inquisitive,resourceful¦8on:aggressive,automatic,perceptive¦7ness:amorous,fatuous,furtive,ominous,serious¦5ness:ample,sweet¦12ness:apprehensive,cantankerous,contemptuous,ostentatious¦13ness:argumentative,conscientious¦9ness:assertive,facetious,imperious,inventive,oblivious,rapacious,receptive,seditious,whimsical¦10ness:attractive,expressive,impressive,loquacious,salubrious,thoughtful¦3edom:boring¦4ness:calm,fast,keen,tame¦8ness:cheerful,gracious,specious,spurious,timorous,unctuous¦5sity:curious¦9ion:deliberate¦8ion:desperate¦6e:expensive¦7ce:fragrant¦3y:furious¦9ility:ineluctable¦6ism:mystical¦8ity:physical,proactive,sensitive,vertical¦5cy:pliant¦7ity:positive¦9ity:practical¦12ism:professional¦6ce:prudent¦3ness:red¦6cy:vagrant¦3dom:wise",
    },
  },
  hP = function (e, n = {}) {
    return n.hasOwnProperty(e) ? n[e] : null;
  },
  gP = function (e, n = []) {
    for (let o = 0; o < n.length; o += 1) if (e.endsWith(n[o])) return e;
    return null;
  },
  mP = function (e, n, o = {}) {
    n = n || {};
    let t = e.length - 1;
    for (let l = t; l >= 1; l -= 1) {
      let s = e.length - l,
        d = e.substring(s, e.length);
      if (n.hasOwnProperty(d) === !0) return e.slice(0, s) + n[d];
      if (o.hasOwnProperty(d) === !0) return e.slice(0, s) + o[d];
    }
    return n.hasOwnProperty("")
      ? (e += n[""])
      : o.hasOwnProperty("")
      ? (e += o[""])
      : null;
  },
  Kn = function (e = "", n = {}) {
    let o = hP(e, n.ex);
    return (
      (o = o || gP(e, n.same)), (o = o || mP(e, n.fwd, n.both)), (o = o || e), o
    );
  },
  Wm = function (e) {
    return Object.entries(e).reduce((n, o) => ((n[o[1]] = o[0]), n), {});
  },
  Lr = function (e = {}) {
    return { reversed: !0, both: Wm(e.both), ex: Wm(e.ex), fwd: e.rev || {} };
  },
  Am = /^([0-9]+)/,
  pP = function (e) {
    let n = {};
    return (
      e.split("¦").forEach((o) => {
        let [t, l] = o.split(":");
        (l = (l || "").split(",")),
          l.forEach((s) => {
            n[s] = t;
          });
      }),
      n
    );
  },
  yP = function (e = "", n = "") {
    n = String(n);
    let o = n.match(Am);
    if (o === null) return n;
    let t = Number(o[1]) || 0;
    return e.substring(0, t) + n.replace(Am, "");
  },
  Xl = function (e) {
    let n = pP(e);
    return Object.keys(n).reduce((o, t) => ((o[t] = yP(t, n[t])), o), {});
  },
  Ko = function (e = {}) {
    return (
      typeof e == "string" && (e = JSON.parse(e)),
      (e.fwd = Xl(e.fwd || "")),
      (e.both = Xl(e.both || "")),
      (e.rev = Xl(e.rev || "")),
      (e.ex = Xl(e.ex || "")),
      e
    );
  },
  Sy = Ko(_o.PastTense),
  by = Ko(_o.PresentTense),
  My = Ko(_o.Gerund),
  By = Ko(_o.Participle),
  fP = Lr(Sy),
  vP = Lr(by),
  CP = Lr(My),
  kP = Lr(By),
  Py = Ko(_o.Comparative),
  Hy = Ko(_o.Superlative),
  wP = Lr(Py),
  SP = Lr(Hy),
  bP = Ko(_o.AdjToNoun),
  Ly = {
    fromPast: Sy,
    fromPresent: by,
    fromGerund: My,
    fromParticiple: By,
    toPast: fP,
    toPresent: vP,
    toGerund: CP,
    toParticiple: kP,
    toComparative: Py,
    toSuperlative: Hy,
    fromComparative: wP,
    fromSuperlative: SP,
    adjToNoun: bP,
  },
  MP = [
    [/^[\w.]+@[\w.]+\.[a-z]{2,3}$/, "Email"],
    [/^(https?:\/\/|www\.)+\w+\.[a-z]{2,3}/, "Url", "http.."],
    [
      /^[a-z0-9./].+\.(com|net|gov|org|ly|edu|info|biz|dev|ru|jp|de|in|uk|br|io|ai)/,
      "Url",
      ".com",
    ],
    [/^[PMCE]ST$/, "Timezone", "EST"],
    [/^ma?c'[a-z]{3}/, "LastName", "mc'neil"],
    [/^o'[a-z]{3}/, "LastName", "o'connor"],
    [/^ma?cd[aeiou][a-z]{3}/, "LastName", "mcdonald"],
    [/^(lol)+[sz]$/, "Expression", "lol"],
    [/^wo{2,}a*h?$/, "Expression", "wooah"],
    [/^(hee?){2,}h?$/, "Expression", "hehe"],
    [/^(un|de|re)\\-[a-z\u00C0-\u00FF]{2}/, "Verb", "un-vite"],
    [/^(m|k|cm|km)\/(s|h|hr)$/, "Unit", "5 k/m"],
    [/^(ug|ng|mg)\/(l|m3|ft3)$/, "Unit", "ug/L"],
    [new RegExp("[^:/]\\/\\p{Letter}", "u"), "SlashedTerm", "love/hate"],
  ],
  BP = [
    [new RegExp("^#[\\p{Number}_]*\\p{Letter}", "u"), "HashTag"],
    [/^@\w{2,}$/, "AtMention"],
    [/^([A-Z]\.){2}[A-Z]?/i, ["Acronym", "Noun"], "F.B.I"],
    [/.{3}[lkmnp]in['‘’‛‵′`´]$/, "Gerund", "chillin'"],
    [/.{4}s['‘’‛‵′`´]$/, "Possessive", "flanders'"],
    [
      /^[\p{Emoji_Presentation}\p{Extended_Pictographic}]/u,
      "Emoji",
      "emoji-class",
    ],
  ],
  PP = [
    [/^@1?[0-9](am|pm)$/i, "Time", "3pm"],
    [/^@1?[0-9]:[0-9]{2}(am|pm)?$/i, "Time", "3:30pm"],
    [/^'[0-9]{2}$/, "Year"],
    [/^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])$/, "Time", "3:12:31"],
    [/^[012]?[0-9](:[0-5][0-9])?(:[0-5][0-9])? ?(am|pm)$/i, "Time", "1:12pm"],
    [
      /^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])? ?(am|pm)?$/i,
      "Time",
      "1:12:31pm",
    ],
    [/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}/i, "Date", "iso-date"],
    [/^[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,4}$/, "Date", "iso-dash"],
    [/^[0-9]{1,4}\/[0-9]{1,2}\/([0-9]{4}|[0-9]{2})$/, "Date", "iso-slash"],
    [/^[0-9]{1,4}\.[0-9]{1,2}\.[0-9]{1,4}$/, "Date", "iso-dot"],
    [/^[0-9]{1,4}-[a-z]{2,9}-[0-9]{1,4}$/i, "Date", "12-dec-2019"],
    [/^utc ?[+-]?[0-9]+$/, "Timezone", "utc-9"],
    [/^(gmt|utc)[+-][0-9]{1,2}$/i, "Timezone", "gmt-3"],
    [/^[0-9]{3}-[0-9]{4}$/, "PhoneNumber", "421-0029"],
    [
      /^(\+?[0-9][ -])?[0-9]{3}[ -]?[0-9]{3}-[0-9]{4}$/,
      "PhoneNumber",
      "1-800-",
    ],
    [
      new RegExp(
        "^[-+]?\\p{Currency_Symbol}[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?([kmb]|bn)?\\+?$",
        "u"
      ),
      ["Money", "Value"],
      "$5.30",
    ],
    [
      new RegExp(
        "^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?\\p{Currency_Symbol}\\+?$",
        "u"
      ),
      ["Money", "Value"],
      "5.30£",
    ],
    [
      /^[-+]?[$£]?[0-9]([0-9,.])+(usd|eur|jpy|gbp|cad|aud|chf|cny|hkd|nzd|kr|rub)$/i,
      ["Money", "Value"],
      "$400usd",
    ],
    [
      /^[-+]?[0-9]+(,[0-9]{3})*(\.[0-9]+)?\+?$/,
      ["Cardinal", "NumericValue"],
      "5,999",
    ],
    [
      /^[-+]?[0-9]+(,[0-9]{3})*(\.[0-9]+)?(st|nd|rd|r?th)$/,
      ["Ordinal", "NumericValue"],
      "53rd",
    ],
    [/^\.[0-9]+\+?$/, ["Cardinal", "NumericValue"], ".73th"],
    [
      /^[-+]?[0-9]+(,[0-9]{3})*(\.[0-9]+)?%\+?$/,
      ["Percent", "Cardinal", "NumericValue"],
      "-4%",
    ],
    [/^\.[0-9]+%$/, ["Percent", "Cardinal", "NumericValue"], ".3%"],
    [
      /^[0-9]{1,4}\/[0-9]{1,4}(st|nd|rd|th)?s?$/,
      ["Fraction", "NumericValue"],
      "2/3rds",
    ],
    [
      /^[0-9.]{1,3}[a-z]{0,2}[-–—][0-9]{1,3}[a-z]{0,2}$/,
      ["Value", "NumberRange"],
      "3-4",
    ],
    [
      /^[0-9]{1,2}(:[0-9][0-9])?(am|pm)? ?[-–—] ?[0-9]{1,2}(:[0-9][0-9])?(am|pm)$/,
      ["Time", "NumberRange"],
      "3-4pm",
    ],
    [/^[0-9.]+([a-z°]{1,4})$/, "NumericValue", "9km"],
  ],
  HP = [
    "academy",
    "administration",
    "agence",
    "agences",
    "agencies",
    "agency",
    "airlines",
    "airways",
    "army",
    "assoc",
    "associates",
    "association",
    "assurance",
    "authority",
    "autorite",
    "aviation",
    "bank",
    "banque",
    "board",
    "boys",
    "brands",
    "brewery",
    "brotherhood",
    "brothers",
    "bureau",
    "cafe",
    "co",
    "caisse",
    "capital",
    "care",
    "cathedral",
    "center",
    "centre",
    "chemicals",
    "choir",
    "chronicle",
    "church",
    "circus",
    "clinic",
    "clinique",
    "club",
    "co",
    "coalition",
    "coffee",
    "collective",
    "college",
    "commission",
    "committee",
    "communications",
    "community",
    "company",
    "comprehensive",
    "computers",
    "confederation",
    "conference",
    "conseil",
    "consulting",
    "containers",
    "corporation",
    "corps",
    "corp",
    "council",
    "crew",
    "data",
    "departement",
    "department",
    "departments",
    "design",
    "development",
    "directorate",
    "division",
    "drilling",
    "education",
    "eglise",
    "electric",
    "electricity",
    "energy",
    "ensemble",
    "enterprise",
    "enterprises",
    "entertainment",
    "estate",
    "etat",
    "faculty",
    "faction",
    "federation",
    "financial",
    "fm",
    "foundation",
    "fund",
    "gas",
    "gazette",
    "girls",
    "government",
    "group",
    "guild",
    "herald",
    "holdings",
    "hospital",
    "hotel",
    "hotels",
    "inc",
    "industries",
    "institut",
    "institute",
    "institutes",
    "insurance",
    "international",
    "interstate",
    "investment",
    "investments",
    "investors",
    "journal",
    "laboratory",
    "labs",
    "llc",
    "ltd",
    "limited",
    "machines",
    "magazine",
    "management",
    "marine",
    "marketing",
    "markets",
    "media",
    "memorial",
    "ministere",
    "ministry",
    "military",
    "mobile",
    "motor",
    "motors",
    "musee",
    "museum",
    "news",
    "observatory",
    "office",
    "oil",
    "optical",
    "orchestra",
    "organization",
    "partners",
    "partnership",
    "petrol",
    "petroleum",
    "pharmacare",
    "pharmaceutical",
    "pharmaceuticals",
    "pizza",
    "plc",
    "police",
    "politburo",
    "polytechnic",
    "post",
    "power",
    "press",
    "productions",
    "quartet",
    "radio",
    "reserve",
    "resources",
    "restaurant",
    "restaurants",
    "savings",
    "school",
    "securities",
    "service",
    "services",
    "societe",
    "subsidiary",
    "society",
    "sons",
    "subcommittee",
    "syndicat",
    "systems",
    "telecommunications",
    "telegraph",
    "television",
    "times",
    "tribunal",
    "tv",
    "union",
    "university",
    "utilities",
    "workers",
  ].reduce((e, n) => ((e[n] = !0), e), {}),
  LP = [
    "atoll",
    "basin",
    "bay",
    "beach",
    "bluff",
    "bog",
    "camp",
    "canyon",
    "canyons",
    "cape",
    "cave",
    "caves",
    "cliffs",
    "coast",
    "cove",
    "coves",
    "crater",
    "crossing",
    "creek",
    "desert",
    "dune",
    "dunes",
    "downs",
    "estates",
    "escarpment",
    "estuary",
    "falls",
    "fjord",
    "fjords",
    "forest",
    "forests",
    "glacier",
    "gorge",
    "gorges",
    "grove",
    "gulf",
    "gully",
    "highland",
    "heights",
    "hollow",
    "hill",
    "hills",
    "inlet",
    "island",
    "islands",
    "isthmus",
    "junction",
    "knoll",
    "lagoon",
    "lake",
    "lakeshore",
    "marsh",
    "marshes",
    "mount",
    "mountain",
    "mountains",
    "narrows",
    "peninsula",
    "plains",
    "plateau",
    "pond",
    "rapids",
    "ravine",
    "reef",
    "reefs",
    "ridge",
    "river",
    "rivers",
    "sandhill",
    "shoal",
    "shore",
    "shoreline",
    "shores",
    "strait",
    "straits",
    "springs",
    "stream",
    "swamp",
    "tombolo",
    "trail",
    "trails",
    "trench",
    "valley",
    "vallies",
    "village",
    "volcano",
    "waterfall",
    "watershed",
    "wetland",
    "woods",
    "acres",
    "burough",
    "county",
    "district",
    "municipality",
    "prefecture",
    "province",
    "region",
    "reservation",
    "state",
    "territory",
    "borough",
    "metropolis",
    "downtown",
    "uptown",
    "midtown",
    "city",
    "town",
    "township",
    "hamlet",
    "country",
    "kingdom",
    "enclave",
    "neighbourhood",
    "neighborhood",
    "kingdom",
    "ward",
    "zone",
    "airport",
    "amphitheater",
    "arch",
    "arena",
    "auditorium",
    "bar",
    "barn",
    "basilica",
    "battlefield",
    "bridge",
    "building",
    "castle",
    "centre",
    "coliseum",
    "cineplex",
    "complex",
    "dam",
    "farm",
    "field",
    "fort",
    "garden",
    "gardens",
    "gymnasium",
    "hall",
    "house",
    "levee",
    "library",
    "manor",
    "memorial",
    "monument",
    "museum",
    "gallery",
    "palace",
    "pillar",
    "pits",
    "plantation",
    "playhouse",
    "quarry",
    "sportsfield",
    "sportsplex",
    "stadium",
    "terrace",
    "terraces",
    "theater",
    "tower",
    "park",
    "parks",
    "site",
    "ranch",
    "raceway",
    "sportsplex",
    "ave",
    "st",
    "street",
    "rd",
    "road",
    "lane",
    "landing",
    "crescent",
    "cr",
    "way",
    "tr",
    "terrace",
    "avenue",
  ].reduce((e, n) => ((e[n] = !0), e), {}),
  ei = [
    [/([^v])ies$/i, "$1y"],
    [/(ise)s$/i, "$1"],
    [/(kn|[^o]l|w)ives$/i, "$1ife"],
    [
      /^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)ves$/i,
      "$1f",
    ],
    [/^(dwar|handkerchie|hoo|scar|whar)ves$/i, "$1f"],
    [/(antenn|formul|nebul|vertebr|vit)ae$/i, "$1a"],
    [/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, "$1us"],
    [/(buffal|tomat|tornad)(oes)$/i, "$1o"],
    [/(ause)s$/i, "$1"],
    [/(ease)s$/i, "$1"],
    [/(ious)es$/i, "$1"],
    [/(ouse)s$/i, "$1"],
    [/(ose)s$/i, "$1"],
    [/(..ase)s$/i, "$1"],
    [/(..[aeiu]s)es$/i, "$1"],
    [/(vert|ind|cort)(ices)$/i, "$1ex"],
    [/(matr|append)(ices)$/i, "$1ix"],
    [/([xo]|ch|ss|sh)es$/i, "$1"],
    [/men$/i, "man"],
    [/(n)ews$/i, "$1ews"],
    [/([ti])a$/i, "$1um"],
    [/([^aeiouy]|qu)ies$/i, "$1y"],
    [/(s)eries$/i, "$1eries"],
    [/(m)ovies$/i, "$1ovie"],
    [/(cris|ax|test)es$/i, "$1is"],
    [/(alias|status)es$/i, "$1"],
    [/(ss)$/i, "$1"],
    [/(ic)s$/i, "$1"],
    [/s$/i, ""],
  ],
  WP = function (e) {
    return Object.keys(e).reduce((n, o) => ((n[e[o]] = o), n), {});
  },
  Wy = function (e, n) {
    const { irregularPlurals: o } = n.two;
    let t = WP(o);
    if (t.hasOwnProperty(e)) return t[e];
    for (let l = 0; l < ei.length; l++)
      if (ei[l][0].test(e) === !0)
        return (e = e.replace(ei[l][0], ei[l][1])), e;
    return e;
  },
  AP = function (e, n) {
    let o = [e],
      t = fi(e, n);
    t !== e && o.push(t);
    let l = Wy(e, n);
    return l !== e && o.push(l), o;
  },
  GP = { toPlural: fi, toSingular: Wy, all: AP };
let Vo = {
  Gerund: ["ing"],
  Actor: ["erer"],
  Infinitive: [
    "ate",
    "ize",
    "tion",
    "rify",
    "then",
    "ress",
    "ify",
    "age",
    "nce",
    "ect",
    "ise",
    "ine",
    "ish",
    "ace",
    "ash",
    "ure",
    "tch",
    "end",
    "ack",
    "and",
    "ute",
    "ade",
    "ock",
    "ite",
    "ase",
    "ose",
    "use",
    "ive",
    "int",
    "nge",
    "lay",
    "est",
    "ain",
    "ant",
    "ent",
    "eed",
    "er",
    "le",
    "unk",
    "ung",
    "upt",
    "en",
  ],
  PastTense: ["ept", "ed", "lt", "nt", "ew", "ld"],
  PresentTense: [
    "rks",
    "cks",
    "nks",
    "ngs",
    "mps",
    "tes",
    "zes",
    "ers",
    "les",
    "acks",
    "ends",
    "ands",
    "ocks",
    "lays",
    "eads",
    "lls",
    "els",
    "ils",
    "ows",
    "nds",
    "ays",
    "ams",
    "ars",
    "ops",
    "ffs",
    "als",
    "urs",
    "lds",
    "ews",
    "ips",
    "es",
    "ts",
    "ns",
  ],
  Participle: ["ken", "wn"],
};
Vo = Object.keys(Vo).reduce(
  (e, n) => (Vo[n].forEach((o) => (e[o] = n)), e),
  {}
);
const Ay = function (e) {
    let n = e.substring(e.length - 3);
    if (Vo.hasOwnProperty(n) === !0) return Vo[n];
    let o = e.substring(e.length - 2);
    return Vo.hasOwnProperty(o) === !0
      ? Vo[o]
      : e.substring(e.length - 1) === "s"
      ? "PresentTense"
      : null;
  },
  RP = function (e, n) {
    let o = "",
      t = {};
    n.one && n.one.prefixes && (t = n.one.prefixes);
    let [l, s] = e.split(/ /);
    return (
      s && t[l] === !0 && ((o = l), (l = s), (s = "")),
      { prefix: o, verb: l, particle: s }
    );
  },
  Gm = {
    are: "be",
    were: "be",
    been: "be",
    is: "be",
    am: "be",
    was: "be",
    be: "be",
    being: "be",
  },
  Xu = function (e, n, o) {
    const {
      fromPast: t,
      fromPresent: l,
      fromGerund: s,
      fromParticiple: d,
    } = n.two.models;
    let { prefix: g, verb: m, particle: y } = RP(e, n),
      f = "";
    if ((o || (o = Ay(e)), Gm.hasOwnProperty(e))) f = Gm[e];
    else if (o === "Participle") f = Kn(m, d);
    else if (o === "PastTense") f = Kn(m, t);
    else if (o === "PresentTense") f = Kn(m, l);
    else if (o === "Gerund") f = Kn(m, s);
    else return e;
    return y && (f += " " + y), g && (f = g + " " + f), f;
  },
  NP = (e) => (/ /.test(e) ? e.split(/ /) : [e, ""]),
  vd = function (e, n) {
    const {
      toPast: o,
      toPresent: t,
      toGerund: l,
      toParticiple: s,
    } = n.two.models;
    if (e === "be")
      return {
        Infinitive: e,
        Gerund: "being",
        PastTense: "was",
        PresentTense: "is",
      };
    let [d, g] = NP(e),
      m = {
        Infinitive: d,
        PastTense: Kn(d, o),
        PresentTense: Kn(d, t),
        Gerund: Kn(d, l),
        FutureTense: "will " + d,
      },
      y = Kn(d, s);
    if (y !== e && y !== m.PastTense) {
      let f = n.one.lexicon || {};
      (f[y] === "Participle" || f[y] === "Adjective") &&
        (e === "play" && (y = "played"), (m.Participle = y));
    }
    return (
      g &&
        Object.keys(m).forEach((f) => {
          m[f] += " " + g;
        }),
      m
    );
  },
  EP = function (e, n) {
    let o = vd(e, n);
    return delete o.FutureTense, Object.values(o).filter((t) => t);
  },
  FP = { toInfinitive: Xu, conjugate: vd, all: EP },
  Cd = function (e, n) {
    const o = n.two.models.toSuperlative;
    return Kn(e, o);
  },
  kd = function (e, n) {
    const o = n.two.models.toComparative;
    return Kn(e, o);
  },
  DP = function (e, n) {
    const o = n.two.models.fromComparative;
    return Kn(e, o);
  },
  TP = function (e, n) {
    const o = n.two.models.fromSuperlative;
    return Kn(e, o);
  },
  OP = function (e, n) {
    const o = n.two.models.adjToNoun;
    return Kn(e, o);
  },
  Gy = function (e = "", n = []) {
    const o = e.length;
    let t = o <= 6 ? o - 1 : 6;
    for (let l = t; l >= 1; l -= 1) {
      let s = e.substring(o - l, e.length);
      if (n[s.length].hasOwnProperty(s) === !0) {
        let d = e.slice(0, o - l),
          g = n[s.length][s];
        return d + g;
      }
    }
    return null;
  },
  ie = "ically",
  xP = new Set([
    "analyt" + ie,
    "chem" + ie,
    "class" + ie,
    "clin" + ie,
    "crit" + ie,
    "ecolog" + ie,
    "electr" + ie,
    "empir" + ie,
    "frant" + ie,
    "grammat" + ie,
    "ident" + ie,
    "ideolog" + ie,
    "log" + ie,
    "mag" + ie,
    "mathemat" + ie,
    "mechan" + ie,
    "med" + ie,
    "method" + ie,
    "method" + ie,
    "mus" + ie,
    "phys" + ie,
    "phys" + ie,
    "polit" + ie,
    "pract" + ie,
    "rad" + ie,
    "satir" + ie,
    "statist" + ie,
    "techn" + ie,
    "technolog" + ie,
    "theoret" + ie,
    "typ" + ie,
    "vert" + ie,
    "whims" + ie,
  ]),
  VP = [
    null,
    {},
    { ly: "" },
    { ily: "y", bly: "ble", ply: "ple" },
    { ally: "al", rply: "rp" },
    {
      ually: "ual",
      ially: "ial",
      cally: "cal",
      eally: "eal",
      rally: "ral",
      nally: "nal",
      mally: "mal",
      eeply: "eep",
      eaply: "eap",
    },
    { ically: "ic" },
  ],
  IP = new Set([
    "early",
    "only",
    "hourly",
    "daily",
    "weekly",
    "monthly",
    "yearly",
    "mostly",
    "duly",
    "unduly",
    "especially",
    "undoubtedly",
    "conversely",
    "namely",
    "exceedingly",
    "presumably",
    "accordingly",
    "overly",
    "best",
    "latter",
    "little",
    "long",
    "low",
  ]),
  Rm = {
    wholly: "whole",
    fully: "full",
    truly: "true",
    gently: "gentle",
    singly: "single",
    customarily: "customary",
    idly: "idle",
    publically: "public",
    quickly: "quick",
    superbly: "superb",
    cynically: "cynical",
    well: "good",
  },
  _P = function (e) {
    return e.endsWith("ly")
      ? xP.has(e)
        ? e.replace(/ically/, "ical")
        : IP.has(e)
        ? null
        : Rm.hasOwnProperty(e)
        ? Rm[e]
        : Gy(e, VP) || e
      : null;
  },
  KP = [
    null,
    { y: "ily" },
    { ly: "ly", ic: "ically" },
    {
      ial: "ially",
      ual: "ually",
      tle: "tly",
      ble: "bly",
      ple: "ply",
      ary: "arily",
    },
    {},
    {},
    {},
  ],
  Nm = {
    cool: "cooly",
    whole: "wholly",
    full: "fully",
    good: "well",
    idle: "idly",
    public: "publicly",
    single: "singly",
    special: "especially",
  },
  Ry = function (e) {
    if (Nm.hasOwnProperty(e)) return Nm[e];
    let n = Gy(e, KP);
    return n || (n = e + "ly"), n;
  },
  JP = function (e, n) {
    let o = [e];
    return (
      o.push(Cd(e, n)),
      o.push(kd(e, n)),
      o.push(Ry(e)),
      (o = o.filter((t) => t)),
      (o = new Set(o)),
      Array.from(o)
    );
  },
  zP = {
    toSuperlative: Cd,
    toComparative: kd,
    toAdverb: Ry,
    toNoun: OP,
    fromAdverb: _P,
    fromSuperlative: TP,
    fromComparative: DP,
    all: JP,
  },
  jP = { noun: GP, verb: FP, adjective: zP },
  Em = {
    Singular: (e, n, o, t) => {
      let l = t.one.lexicon,
        s = o.two.transform.noun.toPlural(e, t);
      l[s] || (n[s] = n[s] || "Plural");
    },
    Actor: (e, n, o, t) => {
      let l = t.one.lexicon,
        s = o.two.transform.noun.toPlural(e, t);
      l[s] || (n[s] = n[s] || ["Plural", "Actor"]);
    },
    Comparable: (e, n, o, t) => {
      let l = t.one.lexicon,
        { toSuperlative: s, toComparative: d } = o.two.transform.adjective,
        g = s(e, t);
      l[g] || (n[g] = n[g] || "Superlative");
      let m = d(e, t);
      l[m] || (n[m] = n[m] || "Comparative"), (n[e] = "Adjective");
    },
    Demonym: (e, n, o, t) => {
      let l = o.two.transform.noun.toPlural(e, t);
      n[l] = n[l] || ["Demonym", "Plural"];
    },
    Infinitive: (e, n, o, t) => {
      let l = t.one.lexicon,
        s = o.two.transform.verb.conjugate(e, t);
      Object.entries(s).forEach((d) => {
        !l[d[1]] && !n[d[1]] && d[0] !== "FutureTense" && (n[d[1]] = d[0]);
      });
    },
    PhrasalVerb: (e, n, o, t) => {
      let l = t.one.lexicon;
      n[e] = ["PhrasalVerb", "Infinitive"];
      let s = t.one._multiCache,
        [d, g] = e.split(" ");
      l[d] || (n[d] = n[d] || "Infinitive");
      let m = o.two.transform.verb.conjugate(d, t);
      delete m.FutureTense,
        Object.entries(m).forEach((y) => {
          if (y[0] === "Actor" || y[1] === "") return;
          !n[y[1]] && !l[y[1]] && (n[y[1]] = y[0]), (s[y[1]] = 2);
          let f = y[1] + " " + g;
          n[f] = n[f] || [y[0], "PhrasalVerb"];
        });
    },
    Multiple: (e, n) => {
      (n[e] = ["Multiple", "Cardinal"]),
        (n[e + "th"] = ["Multiple", "Ordinal"]),
        (n[e + "ths"] = ["Multiple", "Fraction"]);
    },
    Cardinal: (e, n) => {
      n[e] = ["TextValue", "Cardinal"];
    },
    Ordinal: (e, n) => {
      (n[e] = ["TextValue", "Ordinal"]),
        (n[e + "s"] = ["TextValue", "Fraction"]);
    },
    Place: (e, n) => {
      n[e] = ["Place", "ProperNoun"];
    },
    Region: (e, n) => {
      n[e] = ["Region", "ProperNoun"];
    },
  },
  $P = function (e, n) {
    const { methods: o, model: t } = n;
    let l = {},
      s = {};
    return (
      Object.keys(e).forEach((d) => {
        let g = e[d];
        (d = d.toLowerCase().trim()), (d = d.replace(/'s\b/, ""));
        let m = d.split(/ /);
        m.length > 1 &&
          (s[m[0]] === void 0 || m.length > s[m[0]]) &&
          (s[m[0]] = m.length),
          Em.hasOwnProperty(g) === !0 && Em[g](d, l, o, t),
          (l[d] = l[d] || g);
      }),
      delete l[""],
      delete l[null],
      delete l[" "],
      { lex: l, _multi: s }
    );
  },
  UP = function (e, n) {
    const o = /^[0-9]+$/;
    let t = e[n];
    if (!t) return !1;
    const l = new Set(["may", "april", "august", "jan"]);
    if (
      t.normal === "like" ||
      l.has(t.normal) ||
      t.tags.has("Place") ||
      t.tags.has("Date")
    )
      return !1;
    if (e[n - 1]) {
      let d = e[n - 1];
      if (
        d.tags.has("Date") ||
        l.has(d.normal) ||
        d.tags.has("Adjective") ||
        t.tags.has("Adjective")
      )
        return !1;
    }
    let s = t.normal;
    return !((s.length === 1 || s.length === 2 || s.length === 4) && o.test(s));
  },
  qP = function (e) {
    const n = /[,:;]/;
    let o = [];
    return (
      e.forEach((t) => {
        let l = 0;
        t.forEach((s, d) => {
          n.test(s.post) &&
            UP(t, d + 1) &&
            (o.push(t.slice(l, d + 1)), (l = d + 1));
        }),
          l < t.length && o.push(t.slice(l, t.length));
      }),
      o
    );
  },
  Fm = {
    e: [
      "mice",
      "louse",
      "antennae",
      "formulae",
      "nebulae",
      "vertebrae",
      "vitae",
    ],
    i: [
      "tia",
      "octopi",
      "viri",
      "radii",
      "nuclei",
      "fungi",
      "cacti",
      "stimuli",
    ],
    n: ["men"],
    t: ["feet"],
  },
  YP = new Set(["israelis", "menus", "logos"]),
  QP = [
    "bus",
    "mas",
    "was",
    "ias",
    "xas",
    "vas",
    "cis",
    "lis",
    "nis",
    "ois",
    "ris",
    "sis",
    "tis",
    "xis",
    "aus",
    "cus",
    "eus",
    "fus",
    "gus",
    "ius",
    "lus",
    "nus",
    "das",
    "ous",
    "pus",
    "rus",
    "sus",
    "tus",
    "xus",
    "aos",
    "igos",
    "ados",
    "ogos",
    "'s",
    "ss",
  ],
  Ny = function (e) {
    if (!e || e.length <= 3) return !1;
    if (YP.has(e)) return !0;
    let n = e[e.length - 1];
    return Fm.hasOwnProperty(n)
      ? Fm[n].find((o) => e.endsWith(o))
      : !(n !== "s" || QP.find((o) => e.endsWith(o)));
  },
  ed = {
    two: { quickSplit: qP, expandLexicon: $P, transform: jP, looksPlural: Ny },
  },
  ZP = function (e) {
    const { irregularPlurals: n } = e.two,
      { lexicon: o } = e.one;
    return (
      Object.entries(n).forEach((t) => {
        (o[t[0]] = o[t[0]] || "Singular"), (o[t[1]] = o[t[1]] || "Plural");
      }),
      e
    );
  };
let nd = { one: { lexicon: {} }, two: { models: Ly } };
const XP = {
    "Actor|Verb": "Actor",
    "Adj|Gerund": "Adjective",
    "Adj|Noun": "Adjective",
    "Adj|Past": "Adjective",
    "Adj|Present": "Adjective",
    "Noun|Verb": "Singular",
    "Noun|Gerund": "Gerund",
    "Person|Noun": "Noun",
    "Person|Date": "Month",
    "Person|Verb": "FirstName",
    "Person|Place": "Person",
    "Person|Adj": "Comparative",
    "Plural|Verb": "Plural",
    "Unit|Noun": "Noun",
  },
  Ey = function (e, n) {
    const o = { model: n, methods: ed };
    let { lex: t, _multi: l } = ed.two.expandLexicon(e, o);
    return (
      Object.assign(n.one.lexicon, t), Object.assign(n.one._multiCache, l), n
    );
  },
  eH = function (e, n) {
    return (
      Object.keys(e).forEach((o) => {
        e[o] === "Uncountable" &&
          ((n.two.uncountable[o] = !0), (e[o] = "Uncountable"));
      }),
      n
    );
  },
  Dm = function (e, n, o) {
    let t = vd(e, nd);
    (n[t.PastTense] = n[t.PastTense] || "PastTense"),
      (n[t.Gerund] = n[t.Gerund] || "Gerund"),
      o === !0 && (n[t.PresentTense] = n[t.PresentTense] || "PresentTense");
  },
  Tm = function (e, n, o) {
    let t = Cd(e, o);
    n[t] = n[t] || "Superlative";
    let l = kd(e, o);
    n[l] = n[l] || "Comparative";
  },
  nH = function (e, n, o) {
    let t = fi(e, o);
    n[t] = n[t] || "Plural";
  },
  aH = function (e, n) {
    let o = {};
    const t = n.one.lexicon;
    return (
      Object.keys(e).forEach((l) => {
        const s = e[l];
        if (
          ((o[l] = XP[s]),
          (s === "Noun|Verb" || s === "Person|Verb" || s === "Actor|Verb") &&
            Dm(l, t, !1),
          s === "Adj|Present" && (Dm(l, t, !0), Tm(l, t, n)),
          s === "Person|Adj" && Tm(l, t, n),
          s === "Adj|Gerund" || s === "Noun|Gerund")
        ) {
          let d = Xu(l, nd, "Gerund");
          t[d] || (o[d] = "Infinitive");
        }
        if (
          ((s === "Noun|Gerund" || s === "Adj|Noun" || s === "Person|Noun") &&
            nH(l, t, n),
          s === "Adj|Past")
        ) {
          let d = Xu(l, nd, "PastTense");
          t[d] || (o[d] = "Infinitive");
        }
      }),
      (n = Ey(o, n)),
      n
    );
  },
  oH = function (e) {
    return (
      (e = Ey(e.one.lexicon, e)),
      (e = eH(e.one.lexicon, e)),
      (e = aH(e.two.switches, e)),
      (e = ZP(e)),
      e
    );
  };
let ad = {
  one: { _multiCache: {}, lexicon: Hr, frozenLex: VB },
  two: {
    irregularPlurals: wy,
    models: Ly,
    suffixPatterns: sP,
    prefixPatterns: uP,
    endsWith: dP,
    neighbours: cP,
    regexNormal: MP,
    regexText: BP,
    regexNumbers: PP,
    switches: Zu,
    clues: Mr,
    uncountable: {},
    orgWords: HP,
    placeWords: LP,
  },
};
ad = oH(ad);
const rH = function (e, n, o, t) {
    const l = t.methods.one.setTag;
    if (e.length >= 3) {
      const s = /:/;
      if (e[0].post.match(s)) {
        let g = e[1];
        if (
          g.tags.has("Value") ||
          g.tags.has("Email") ||
          g.tags.has("PhoneNumber")
        )
          return;
        l([e[0]], "Expression", t, null, "2-punct-colon''");
      }
    }
  },
  tH = function (e, n, o, t) {
    const l = t.methods.one.setTag;
    e[n].post === "-" &&
      e[n + 1] &&
      l([e[n], e[n + 1]], "Hyphenated", t, null, "1-punct-hyphen''");
  },
  Om = /^(under|over|mis|re|un|dis|semi)-?/,
  lH = function (e, n, o) {
    const t = o.two.switches;
    let l = e[n];
    if (t.hasOwnProperty(l.normal)) {
      l.switch = t[l.normal];
      return;
    }
    if (Om.test(l.normal)) {
      let s = l.normal.replace(Om, "");
      s.length > 3 && t.hasOwnProperty(s) && (l.switch = t[s]);
    }
  };
var xm = {};
const iH = (e, n, o = "") => {
    const t = (d) => "\x1B[33m\x1B[3m" + d + "\x1B[0m",
      l = (d) => "\x1B[3m" + d + "\x1B[0m";
    let s = e.text || "[" + e.implicit + "]";
    typeof n != "string" &&
      n.length > 2 &&
      (n = n.slice(0, 2).join(", #") + " +"),
      (n = typeof n != "string" ? n.join(", #") : n),
      console.log(
        ` ${t(s).padEnd(24)} \x1B[32m→\x1B[0m #${n.padEnd(22)}  ${l(o)}`
      );
  },
  Te = function (e, n, o) {
    if (!n || n.length === 0 || e.frozen === !0) return;
    const t = typeof process == "undefined" || !xm ? self.env || {} : xm;
    t && t.DEBUG_TAGS && iH(e, n, o),
      (e.tags = e.tags || new Set()),
      typeof n == "string" ? e.tags.add(n) : n.forEach((l) => e.tags.add(l));
  },
  sH = [
    "Acronym",
    "Abbreviation",
    "ProperNoun",
    "Uncountable",
    "Possessive",
    "Pronoun",
    "Activity",
    "Honorific",
    "Month",
  ],
  uH = function (e) {
    !e.tags.has("Noun") ||
      e.tags.has("Plural") ||
      e.tags.has("Singular") ||
      sH.find((n) => e.tags.has(n)) ||
      (Ny(e.normal)
        ? Te(e, "Plural", "3-plural-guess")
        : Te(e, "Singular", "3-singular-guess"));
  },
  dH = function (e) {
    let n = e.tags;
    if (n.has("Verb") && n.size === 1) {
      let o = Ay(e.normal);
      o && Te(e, o, "3-verb-tense-guess");
    }
  },
  At = function (e, n, o) {
    let t = e[n],
      l = Array.from(t.tags);
    for (let s = 0; s < l.length; s += 1)
      if (o.one.tagSet[l[s]]) {
        let d = o.one.tagSet[l[s]].parents;
        Te(t, d, ` -inferred by #${l[s]}`);
      }
    uH(t), dH(t);
  },
  cH = new RegExp("^\\p{Lu}[\\p{Ll}'’]", "u"),
  hH = /[0-9]/,
  gH = ["Date", "Month", "WeekDay", "Unit", "Expression"],
  mH = /[IVX]/,
  pH = /^[IVXLCDM]{2,}$/,
  yH = /^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/,
  fH = { li: !0, dc: !0, md: !0, dm: !0, ml: !0 },
  vH = function (e, n, o) {
    let t = e[n];
    t.index = t.index || [0, 0];
    let l = t.index[1],
      s = t.text || "";
    return l !== 0 && cH.test(s) === !0 && hH.test(s) === !1
      ? gH.find((d) => t.tags.has(d)) ||
        t.pre.match(/["']$/) ||
        t.normal === "the"
        ? null
        : (At(e, n, o),
          !t.tags.has("Noun") && !t.frozen && t.tags.clear(),
          Te(t, "ProperNoun", "2-titlecase"),
          !0)
      : s.length >= 2 && pH.test(s) && mH.test(s) && yH.test(s) && !fH[t.normal]
      ? (Te(t, "RomanNumeral", "2-xvii"), !0)
      : null;
  },
  Vm = function (e = "", n = []) {
    const o = e.length;
    let t = 7;
    o <= t && (t = o - 1);
    for (let l = t; l > 1; l -= 1) {
      let s = e.substring(o - l, o);
      if (n[s.length].hasOwnProperty(s) === !0) return n[s.length][s];
    }
    return null;
  },
  CH = function (e, n, o) {
    let t = e[n];
    if (t.tags.size === 0) {
      let l = Vm(t.normal, o.two.suffixPatterns);
      if (l !== null) return Te(t, l, "2-suffix"), (t.confidence = 0.7), !0;
      if (
        t.implicit &&
        ((l = Vm(t.implicit, o.two.suffixPatterns)), l !== null)
      )
        return Te(t, l, "2-implicit-suffix"), (t.confidence = 0.7), !0;
    }
    return null;
  },
  Im = /['‘’‛‵′`´]/,
  Mu = function (e, n) {
    for (let o = 0; o < n.length; o += 1)
      if (n[o][0].test(e) === !0) return n[o];
    return null;
  },
  kH = function (e = "", n) {
    let o = e[e.length - 1];
    if (n.hasOwnProperty(o) === !0) {
      let t = n[o] || [];
      for (let l = 0; l < t.length; l += 1)
        if (t[l][0].test(e) === !0) return t[l];
    }
    return null;
  },
  wH = function (e, n, o, t) {
    const l = t.methods.one.setTag;
    let { regexText: s, regexNormal: d, regexNumbers: g, endsWith: m } = o.two,
      y = e[n],
      f = y.machine || y.normal,
      v = y.text;
    Im.test(y.post) && !Im.test(y.pre) && (v += y.post.trim());
    let M = Mu(v, s) || Mu(f, d);
    return (
      !M && /[0-9]/.test(f) && (M = Mu(f, g)),
      !M && y.tags.size === 0 && (M = kH(f, m)),
      M
        ? (l([y], M[1], t, null, `2-regex-'${M[2] || M[0]}'`),
          (y.confidence = 0.6),
          !0)
        : null
    );
  },
  SH = function (e = "", n = []) {
    const o = e.length;
    let t = 7;
    t > o - 3 && (t = o - 3);
    for (let l = t; l > 2; l -= 1) {
      let s = e.substring(0, l);
      if (n[s.length].hasOwnProperty(s) === !0) return n[s.length][s];
    }
    return null;
  },
  bH = function (e, n, o) {
    let t = e[n];
    if (t.tags.size === 0) {
      let l = SH(t.normal, o.two.prefixPatterns);
      if (l !== null) return Te(t, l, "2-prefix"), (t.confidence = 0.5), !0;
    }
    return null;
  },
  MH = 1400,
  BH = 2100,
  PH = new Set([
    "in",
    "on",
    "by",
    "until",
    "for",
    "to",
    "during",
    "throughout",
    "through",
    "within",
    "before",
    "after",
    "of",
    "this",
    "next",
    "last",
    "circa",
    "around",
    "post",
    "pre",
    "budget",
    "classic",
    "plan",
    "may",
  ]),
  _m = function (e) {
    if (!e) return !1;
    let n = e.normal || e.implicit;
    return !!(
      PH.has(n) ||
      e.tags.has("Date") ||
      e.tags.has("Month") ||
      e.tags.has("WeekDay") ||
      e.tags.has("Year") ||
      e.tags.has("ProperNoun")
    );
  },
  Km = function (e) {
    return e
      ? !!(
          e.tags.has("Ordinal") ||
          (e.tags.has("Cardinal") && e.normal.length < 3) ||
          e.normal === "is" ||
          e.normal === "was"
        )
      : !1;
  },
  Jm = function (e) {
    return (
      e &&
      (e.tags.has("Date") ||
        e.tags.has("Month") ||
        e.tags.has("WeekDay") ||
        e.tags.has("Year"))
    );
  },
  HH = function (e, n) {
    const o = e[n];
    if (
      o.tags.has("NumericValue") &&
      o.tags.has("Cardinal") &&
      o.normal.length === 4
    ) {
      let t = Number(o.normal);
      if (t && !isNaN(t) && t > MH && t < BH) {
        let l = e[n - 1],
          s = e[n + 1];
        if (_m(l) || _m(s)) return Te(o, "Year", "2-tagYear");
        if (t >= 1920 && t < 2025) {
          if (Km(l) || Km(s)) return Te(o, "Year", "2-tagYear-close");
          if (Jm(e[n - 2]) || Jm(e[n + 2]))
            return Te(o, "Year", "2-tagYear-far");
          if (
            l &&
            (l.tags.has("Determiner") || l.tags.has("Possessive")) &&
            s &&
            s.tags.has("Noun") &&
            !s.tags.has("Plural")
          )
            return Te(o, "Year", "2-tagYear-noun");
        }
      }
    }
    return null;
  },
  LH = function (e, n, o, t) {
    const l = t.methods.one.setTag,
      s = e[n],
      d = ["PastTense", "PresentTense", "Auxiliary", "Modal", "Particle"];
    s.tags.has("Verb") &&
      (d.find((m) => s.tags.has(m)) ||
        l([s], "Infinitive", t, null, "2-verb-type''"));
  },
  Fy = /^[A-Z]('s|,)?$/,
  Dy = /^[A-Z-]+$/,
  Ty = /^[A-Z]+s$/,
  WH = /([A-Z]\.)+[A-Z]?,?$/,
  AH = /[A-Z]{2,}('s|,)?$/,
  GH = /([a-z]\.)+[a-z]\.?$/,
  Oy = { I: !0, A: !0 },
  RH = { la: !0, ny: !0, us: !0, dc: !0, gb: !0 },
  NH = function (e, n) {
    let o = e.text;
    if (Dy.test(o) === !1)
      if (o.length > 3 && Ty.test(o) === !0) o = o.replace(/s$/, "");
      else return !1;
    return o.length > 5 ||
      Oy.hasOwnProperty(o) ||
      n.one.lexicon.hasOwnProperty(e.normal)
      ? !1
      : WH.test(o) === !0 ||
          GH.test(o) === !0 ||
          Fy.test(o) === !0 ||
          AH.test(o) === !0;
  },
  EH = function (e, n, o) {
    let t = e[n];
    return t.tags.has("RomanNumeral") || t.tags.has("Acronym") || t.frozen
      ? null
      : NH(t, o)
      ? (t.tags.clear(),
        Te(t, ["Acronym", "Noun"], "3-no-period-acronym"),
        RH[t.normal] === !0 && Te(t, "Place", "3-place-acronym"),
        Ty.test(t.text) === !0 && Te(t, "Plural", "3-plural-acronym"),
        !0)
      : !Oy.hasOwnProperty(t.text) && Fy.test(t.text)
      ? (t.tags.clear(), Te(t, ["Acronym", "Noun"], "3-one-letter-acronym"), !0)
      : t.tags.has("Organization") && t.text.length <= 3
      ? (Te(t, "Acronym", "3-org-acronym"), !0)
      : t.tags.has("Organization") && Dy.test(t.text) && t.text.length <= 6
      ? (Te(t, "Acronym", "3-titlecase-acronym"), !0)
      : null;
  },
  zm = function (e, n) {
    if (!e) return null;
    let o = n.find((t) => e.normal === t[0]);
    return o ? o[1] : null;
  },
  jm = function (e, n) {
    if (!e) return null;
    let o = n.find((t) => e.tags.has(t[0]));
    return o ? o[1] : null;
  },
  FH = function (e, n, o) {
    const {
      leftTags: t,
      leftWords: l,
      rightWords: s,
      rightTags: d,
    } = o.two.neighbours;
    let g = e[n];
    if (g.tags.size === 0) {
      let m = null;
      if (
        ((m = m || zm(e[n - 1], l)),
        (m = m || zm(e[n + 1], s)),
        (m = m || jm(e[n - 1], t)),
        (m = m || jm(e[n + 1], d)),
        m)
      )
        return (
          Te(g, m, "3-[neighbour]"), At(e, n, o), (e[n].confidence = 0.2), !0
        );
    }
    return null;
  },
  DH = (e) => new RegExp("^\\p{Lu}[\\p{Ll}'’]", "u").test(e),
  $m = function (e, n, o) {
    return !e || e.tags.has("FirstName") || e.tags.has("Place")
      ? !1
      : e.tags.has("ProperNoun") ||
        e.tags.has("Organization") ||
        e.tags.has("Acronym")
      ? !0
      : !o && DH(e.text)
      ? n === 0
        ? e.tags.has("Singular")
        : !0
      : !1;
  },
  TH = function (e, n, o, t) {
    const l = o.model.two.orgWords,
      s = o.methods.one.setTag;
    let d = e[n],
      g = d.machine || d.normal;
    if (l[g] === !0 && $m(e[n - 1], n - 1, t)) {
      s([e[n]], "Organization", o, null, "3-[org-word]");
      for (let m = n; m >= 0 && $m(e[m], m, t); m -= 1)
        s([e[m]], "Organization", o, null, "3-[org-word]");
    }
    return null;
  },
  OH = (e) => new RegExp("^\\p{Lu}[\\p{Ll}'’]", "u").test(e),
  xH = /'s$/,
  Um = new Set([
    "athletic",
    "city",
    "community",
    "eastern",
    "federal",
    "financial",
    "great",
    "historic",
    "historical",
    "local",
    "memorial",
    "municipal",
    "national",
    "northern",
    "provincial",
    "southern",
    "state",
    "western",
    "spring",
    "pine",
    "sunset",
    "view",
    "oak",
    "maple",
    "spruce",
    "cedar",
    "willow",
  ]),
  VH = new Set([
    "center",
    "centre",
    "way",
    "range",
    "bar",
    "bridge",
    "field",
    "pit",
  ]),
  qm = function (e, n, o) {
    if (!e) return !1;
    let t = e.tags;
    return t.has("Organization") || t.has("Possessive") || xH.test(e.normal)
      ? !1
      : t.has("ProperNoun") || t.has("Place")
      ? !0
      : !o && OH(e.text)
      ? n === 0
        ? t.has("Singular")
        : !0
      : !1;
  },
  IH = function (e, n, o, t) {
    const l = o.model.two.placeWords,
      s = o.methods.one.setTag;
    let d = e[n],
      g = d.machine || d.normal;
    if (l[g] === !0) {
      for (let m = n - 1; m >= 0; m -= 1)
        if (!Um.has(e[m].normal)) {
          if (qm(e[m], m, t)) {
            s(e.slice(m, n + 1), "Place", o, null, "3-[place-of-foo]");
            continue;
          }
          break;
        }
      if (VH.has(g)) return !1;
      for (let m = n + 1; m < e.length; m += 1) {
        if (qm(e[m], m, t))
          return s(e.slice(n, m + 1), "Place", o, null, "3-[foo-place]"), !0;
        if (!(e[m].normal === "of" || Um.has(e[m].normal))) break;
      }
    }
    return null;
  },
  _H = function (e, n, o) {
    let t = !1,
      l = e[n].tags;
    (l.size === 0 ||
      (l.size === 1 &&
        (l.has("Hyphenated") ||
          l.has("HashTag") ||
          l.has("Prefix") ||
          l.has("SlashedTerm")))) &&
      (t = !0),
      t &&
        (Te(e[n], "Noun", "3-[fallback]"),
        At(e, n, o),
        (e[n].confidence = 0.1));
  },
  KH = /^[A-Z][a-z]/,
  ca = (e, n) =>
    e[n].tags.has("ProperNoun") && KH.test(e[n].text) ? "Noun" : null,
  Ym = (e, n, o) => (n === 0 && !e[1] ? o : null),
  JH = function (e, n) {
    return !e[n + 1] && e[n - 1] && e[n - 1].tags.has("Determiner")
      ? "Noun"
      : null;
  },
  zH = function (e, n, o) {
    return n === 0 && e.length > 3 ? o : null;
  },
  Qm = {
    "Adj|Gerund": (e, n) => ca(e, n),
    "Adj|Noun": (e, n) => ca(e, n) || JH(e, n),
    "Actor|Verb": (e, n) => ca(e, n),
    "Adj|Past": (e, n) => ca(e, n),
    "Adj|Present": (e, n) => ca(e, n),
    "Noun|Gerund": (e, n) => ca(e, n),
    "Noun|Verb": (e, n) => (n > 0 && ca(e, n)) || Ym(e, n, "Infinitive"),
    "Plural|Verb": (e, n) =>
      ca(e, n) || Ym(e, n, "PresentTense") || zH(e, n, "Plural"),
    "Person|Noun": (e, n) => ca(e, n),
    "Person|Verb": (e, n) => (n !== 0 ? ca(e, n) : null),
    "Person|Adj": (e, n) =>
      (n === 0 && e.length > 1) || ca(e, n) ? "Person" : null,
  };
var Zm = {};
const wd = typeof process == "undefined" || !Zm ? self.env || {} : Zm,
  Xm = /^(under|over|mis|re|un|dis|semi)-?/,
  ep = (e, n) => {
    if (!e || !n) return null;
    let o = e.normal || e.implicit,
      t = null;
    return (
      n.hasOwnProperty(o) && (t = n[o]),
      t &&
        wd.DEBUG_TAGS &&
        console.log(`
  \x1B[2m\x1B[3m     ↓ - '${o}' \x1B[0m`),
      t
    );
  },
  np = (e, n = {}, o) => {
    if (!e || !n) return null;
    let l = Array.from(e.tags)
      .sort((s, d) => {
        let g = o[s] ? o[s].parents.length : 0,
          m = o[d] ? o[d].parents.length : 0;
        return g > m ? -1 : 1;
      })
      .find((s) => n[s]);
    return (
      l &&
        wd.DEBUG_TAGS &&
        console.log(
          `  \x1B[2m\x1B[3m      ↓ - '${
            e.normal || e.implicit
          }' (#${l})  \x1B[0m`
        ),
      (l = n[l]),
      l
    );
  },
  jH = function (e, n, o, t) {
    var g;
    if (!o) return null;
    const l =
        ((g = e[n - 1]) == null ? void 0 : g.text) !== "also"
          ? n - 1
          : Math.max(0, n - 2),
      s = t.one.tagSet;
    let d = ep(e[n + 1], o.afterWords);
    return (
      (d = d || ep(e[l], o.beforeWords)),
      (d = d || np(e[l], o.beforeTags, s)),
      (d = d || np(e[n + 1], o.afterTags, s)),
      d
    );
  },
  $H = function (e, n, o) {
    const t = o.model,
      l = o.methods.one.setTag,
      { switches: s, clues: d } = t.two,
      g = e[n];
    let m = g.normal || g.implicit || "";
    if ((Xm.test(m) && !s[m] && (m = m.replace(Xm, "")), g.switch)) {
      let y = g.switch;
      if (g.tags.has("Acronym") || g.tags.has("PhrasalVerb")) return;
      let f = jH(e, n, d[y], t);
      Qm[y] && (f = Qm[y](e, n) || f),
        f
          ? (l([g], f, o, null, `3-[switch] (${y})`), At(e, n, t))
          : wd.DEBUG_TAGS &&
            console.log(`
 -> X  - '${m}'  : (${y})  `);
    }
  },
  UH = { there: !0, this: !0, it: !0, him: !0, her: !0, us: !0 },
  qH = function (e, n) {
    const o = n.methods.one.setTag,
      t = n.model.one._multiCache || {};
    let l = e[0];
    if (
      (l.switch === "Noun|Verb" || l.tags.has("Infinitive")) &&
      e.length >= 2
    ) {
      if (
        (e.length < 4 && !UH[e[1].normal]) ||
        (!l.tags.has("PhrasalVerb") && t.hasOwnProperty(l.normal))
      )
        return;
      (e[1].tags.has("Noun") || e[1].tags.has("Determiner")) &&
        (!e.slice(1, 3).some((m) => m.tags.has("Verb")) ||
          l.tags.has("#PhrasalVerb")) &&
        o([l], "Imperative", n, null, "3-[imperative]");
    }
  },
  YH = function (e) {
    if (e.filter((o) => !o.tags.has("ProperNoun")).length <= 3) return !1;
    const n = /^[a-z]/;
    return e.every((o) => !n.test(o.text));
  },
  QH = function (e, n, o) {
    e.forEach((t) => {
      rH(t, 0, n, o);
    });
  },
  ZH = function (e, n, o, t) {
    for (let l = 0; l < e.length; l += 1)
      e[l].frozen !== !0 &&
        (lH(e, l, n),
        t === !1 && vH(e, l, n),
        CH(e, l, n),
        wH(e, l, n, o),
        bH(e, l, n),
        HH(e, l));
  },
  XH = function (e, n, o, t) {
    for (let l = 0; l < e.length; l += 1) {
      let s = EH(e, l, n);
      At(e, l, n), (s = s || FH(e, l, n)), (s = s || _H(e, l, n));
    }
    for (let l = 0; l < e.length; l += 1)
      e[l].frozen !== !0 &&
        (TH(e, l, o, t),
        IH(e, l, o, t),
        $H(e, l, o),
        LH(e, l, n, o),
        tH(e, l, n, o));
    qH(e, o);
  },
  eL = function (e) {
    const { methods: n, model: o, world: t } = e;
    let l = e.docs;
    QH(l, o, t);
    let s = n.two.quickSplit(l);
    for (let d = 0; d < s.length; d += 1) {
      let g = s[d];
      const m = YH(g);
      ZH(g, o, t, m), XH(g, o, t, m);
    }
    return s;
  },
  ap = {
    Possessive: (e) => {
      let n = e.machine || e.normal || e.text;
      return (n = n.replace(/'s$/, "")), n;
    },
    Plural: (e, n) => {
      let o = e.machine || e.normal || e.text;
      return n.methods.two.transform.noun.toSingular(o, n.model);
    },
    Copula: () => "is",
    PastTense: (e, n) => {
      let o = e.machine || e.normal || e.text;
      return n.methods.two.transform.verb.toInfinitive(o, n.model, "PastTense");
    },
    Gerund: (e, n) => {
      let o = e.machine || e.normal || e.text;
      return n.methods.two.transform.verb.toInfinitive(o, n.model, "Gerund");
    },
    PresentTense: (e, n) => {
      let o = e.machine || e.normal || e.text;
      return e.tags.has("Infinitive")
        ? o
        : n.methods.two.transform.verb.toInfinitive(o, n.model, "PresentTense");
    },
    Comparative: (e, n) => {
      let o = e.machine || e.normal || e.text;
      return n.methods.two.transform.adjective.fromComparative(o, n.model);
    },
    Superlative: (e, n) => {
      let o = e.machine || e.normal || e.text;
      return n.methods.two.transform.adjective.fromSuperlative(o, n.model);
    },
    Adverb: (e, n) => {
      const { fromAdverb: o } = n.methods.two.transform.adjective;
      let t = e.machine || e.normal || e.text;
      return o(t);
    },
  },
  nL = function (e) {
    const n = e.world,
      o = Object.keys(ap);
    e.docs.forEach((t) => {
      for (let l = 0; l < t.length; l += 1) {
        const s = t[l];
        for (let d = 0; d < o.length; d += 1)
          if (s.tags.has(o[d])) {
            const g = ap[o[d]];
            let m = g(s, n);
            s.normal !== m && (s.root = m);
            break;
          }
      }
    });
  },
  op = {
    Adverb: "RB",
    Comparative: "JJR",
    Superlative: "JJS",
    Adjective: "JJ",
    TO: "Conjunction",
    Modal: "MD",
    Auxiliary: "MD",
    Gerund: "VBG",
    PastTense: "VBD",
    Participle: "VBN",
    PresentTense: "VBZ",
    Infinitive: "VB",
    Particle: "RP",
    Verb: "VB",
    Pronoun: "PRP",
    Cardinal: "CD",
    Conjunction: "CC",
    Determiner: "DT",
    Preposition: "IN",
    QuestionWord: "WP",
    Expression: "UH",
    Possessive: "POS",
    ProperNoun: "NNP",
    Person: "NNP",
    Place: "NNP",
    Organization: "NNP",
    Singular: "NN",
    Plural: "NNS",
    Noun: "NN",
    There: "EX",
  },
  aL = function (e) {
    if (e.tags.has("ProperNoun") && e.tags.has("Plural")) return "NNPS";
    if (e.tags.has("Possessive") && e.tags.has("Pronoun")) return "PRP$";
    if (e.normal === "there") return "EX";
    if (e.normal === "to") return "TO";
    let n = e.tagRank || [];
    for (let o = 0; o < n.length; o += 1)
      if (op.hasOwnProperty(n[o])) return op[n[o]];
    return null;
  },
  oL = function (e) {
    e.compute("tagRank"),
      e.docs.forEach((n) => {
        n.forEach((o) => {
          o.penn = aL(o);
        });
      });
  },
  rL = { preTagger: eL, root: nL, penn: oL },
  Bu = ["Person", "Place", "Organization"],
  tL = {
    Noun: { not: ["Verb", "Adjective", "Adverb", "Value", "Determiner"] },
    Singular: { is: "Noun", not: ["Plural", "Uncountable"] },
    ProperNoun: { is: "Noun" },
    Person: {
      is: "Singular",
      also: ["ProperNoun"],
      not: ["Place", "Organization", "Date"],
    },
    FirstName: { is: "Person" },
    MaleName: { is: "FirstName", not: ["FemaleName", "LastName"] },
    FemaleName: { is: "FirstName", not: ["MaleName", "LastName"] },
    LastName: { is: "Person", not: ["FirstName"] },
    Honorific: { is: "Person", not: ["FirstName", "LastName", "Value"] },
    Place: { is: "Singular", not: ["Person", "Organization"] },
    Country: { is: "Place", also: ["ProperNoun"], not: ["City"] },
    City: { is: "Place", also: ["ProperNoun"], not: ["Country"] },
    Region: { is: "Place", also: ["ProperNoun"] },
    Address: {},
    Organization: { is: "ProperNoun", not: ["Person", "Place"] },
    SportsTeam: { is: "Organization" },
    School: { is: "Organization" },
    Company: { is: "Organization" },
    Plural: { is: "Noun", not: ["Singular", "Uncountable"] },
    Uncountable: { is: "Noun" },
    Pronoun: { is: "Noun", not: Bu },
    Actor: { is: "Noun", not: ["Place", "Organization"] },
    Activity: { is: "Noun", not: ["Person", "Place"] },
    Unit: { is: "Noun", not: Bu },
    Demonym: { is: "Noun", also: ["ProperNoun"], not: Bu },
    Possessive: { is: "Noun" },
    Reflexive: { is: "Pronoun" },
  },
  lL = {
    Verb: { not: ["Noun", "Adjective", "Adverb", "Value", "Expression"] },
    PresentTense: { is: "Verb", not: ["PastTense", "FutureTense"] },
    Infinitive: { is: "PresentTense", not: ["Gerund"] },
    Imperative: { is: "Verb", not: ["PastTense", "Gerund", "Copula"] },
    Gerund: { is: "PresentTense", not: ["Copula"] },
    PastTense: { is: "Verb", not: ["PresentTense", "Gerund", "FutureTense"] },
    FutureTense: { is: "Verb", not: ["PresentTense", "PastTense"] },
    Copula: { is: "Verb" },
    Modal: { is: "Verb", not: ["Infinitive"] },
    Participle: { is: "PastTense" },
    Auxiliary: {
      is: "Verb",
      not: ["PastTense", "PresentTense", "Gerund", "Conjunction"],
    },
    PhrasalVerb: { is: "Verb" },
    Particle: {
      is: "PhrasalVerb",
      not: ["PastTense", "PresentTense", "Copula", "Gerund"],
    },
    Passive: { is: "Verb" },
  },
  iL = {
    Value: { not: ["Verb", "Adjective", "Adverb"] },
    Ordinal: { is: "Value", not: ["Cardinal"] },
    Cardinal: { is: "Value", not: ["Ordinal"] },
    Fraction: { is: "Value", not: ["Noun"] },
    Multiple: { is: "TextValue" },
    RomanNumeral: { is: "Cardinal", not: ["TextValue"] },
    TextValue: { is: "Value", not: ["NumericValue"] },
    NumericValue: { is: "Value", not: ["TextValue"] },
    Money: { is: "Cardinal" },
    Percent: { is: "Value" },
  },
  sL = {
    Date: { not: ["Verb", "Adverb", "Adjective"] },
    Month: { is: "Date", also: ["Noun"], not: ["Year", "WeekDay", "Time"] },
    WeekDay: { is: "Date", also: ["Noun"] },
    Year: { is: "Date", not: ["RomanNumeral"] },
    FinancialQuarter: { is: "Date", not: "Fraction" },
    Holiday: { is: "Date", also: ["Noun"] },
    Season: { is: "Date" },
    Timezone: { is: "Date", also: ["Noun"], not: ["ProperNoun"] },
    Time: { is: "Date", not: ["AtMention"] },
    Duration: { is: "Date", also: ["Noun"] },
  },
  uL = ["Noun", "Verb", "Adjective", "Adverb", "Value", "QuestionWord"],
  dL = {
    Adjective: { not: ["Noun", "Verb", "Adverb", "Value"] },
    Comparable: { is: "Adjective" },
    Comparative: { is: "Adjective" },
    Superlative: { is: "Adjective", not: ["Comparative"] },
    NumberRange: {},
    Adverb: { not: ["Noun", "Verb", "Adjective", "Value"] },
    Determiner: {
      not: [
        "Noun",
        "Verb",
        "Adjective",
        "Adverb",
        "QuestionWord",
        "Conjunction",
      ],
    },
    Conjunction: { not: uL },
    Preposition: {
      not: [
        "Noun",
        "Verb",
        "Adjective",
        "Adverb",
        "QuestionWord",
        "Determiner",
      ],
    },
    QuestionWord: { not: ["Determiner"] },
    Currency: { is: "Noun" },
    Expression: { not: ["Noun", "Adjective", "Verb", "Adverb"] },
    Abbreviation: {},
    Url: {
      not: [
        "HashTag",
        "PhoneNumber",
        "Verb",
        "Adjective",
        "Value",
        "AtMention",
        "Email",
        "SlashedTerm",
      ],
    },
    PhoneNumber: {
      not: ["HashTag", "Verb", "Adjective", "Value", "AtMention", "Email"],
    },
    HashTag: {},
    AtMention: { is: "Noun", not: ["HashTag", "Email"] },
    Emoji: { not: ["HashTag", "Verb", "Adjective", "Value", "AtMention"] },
    Emoticon: {
      not: [
        "HashTag",
        "Verb",
        "Adjective",
        "Value",
        "AtMention",
        "SlashedTerm",
      ],
    },
    SlashedTerm: { not: ["Emoticon", "Url", "Value"] },
    Email: { not: ["HashTag", "Verb", "Adjective", "Value", "AtMention"] },
    Acronym: { not: ["Plural", "RomanNumeral", "Pronoun", "Date"] },
    Negative: { not: ["Noun", "Adjective", "Value", "Expression"] },
    Condition: { not: ["Verb", "Adjective", "Noun", "Value"] },
    There: {
      not: ["Verb", "Adjective", "Noun", "Value", "Conjunction", "Preposition"],
    },
    Prefix: { not: ["Abbreviation", "Acronym", "ProperNoun"] },
    Hyphenated: {},
  };
let cL = Object.assign({}, tL, lL, iL, sL, dL);
const hL = {
    compute: rL,
    methods: ed,
    model: ad,
    tags: cL,
    hooks: ["preTagger"],
  },
  gL = /[,)"';:\-–—.…]/,
  Fa = function (e, n) {
    if (!e.found) return;
    let o = e.termList();
    for (let t = 0; t < o.length - 1; t++) {
      const l = o[t];
      if (gL.test(l.post)) return;
    }
    (o[0].implicit = o[0].normal),
      (o[0].text += n),
      (o[0].normal += n),
      o.slice(1).forEach((t) => {
        (t.implicit = t.normal), (t.text = ""), (t.normal = "");
      });
    for (let t = 0; t < o.length - 1; t++)
      o[t].post = o[t].post.replace(/ /, "");
  },
  mL = function () {
    let e = this.not("@hasContraction"),
      n = e.match("(we|they|you) are");
    return (
      Fa(n, "'re"),
      (n = e.match("(he|she|they|it|we|you) will")),
      Fa(n, "'ll"),
      (n = e.match("(he|she|they|it|we) is")),
      Fa(n, "'s"),
      (n = e.match("#Person is")),
      Fa(n, "'s"),
      (n = e.match("#Person would")),
      Fa(n, "'d"),
      (n = e.match("(is|was|had|would|should|could|do|does|have|has|can) not")),
      Fa(n, "n't"),
      (n = e.match("(i|we|they) have")),
      Fa(n, "'ve"),
      (n = e.match("(would|should|could) have")),
      Fa(n, "'ve"),
      (n = e.match("i am")),
      Fa(n, "'m"),
      (n = e.match("going to")),
      this
    );
  },
  pL = new RegExp("^\\p{Lu}[\\p{Ll}'’]", "u"),
  yL = function (e = "") {
    return (e = e.replace(/^ *[a-z\u00C0-\u00FF]/, (n) => n.toUpperCase())), e;
  },
  fL = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Contraction");
      }
      expand() {
        return (
          this.docs.forEach((t) => {
            let l = pL.test(t[0].text);
            t.forEach((s, d) => {
              (s.text = s.implicit || ""),
                delete s.implicit,
                d < t.length - 1 && s.post === "" && (s.post += " "),
                (s.dirty = !0);
            }),
              l && (t[0].text = yL(t[0].text));
          }),
          this.compute("normal"),
          this
        );
      }
    }
    (e.prototype.contractions = function () {
      let o = this.match("@hasContraction+");
      return new n(this.document, o.pointer);
    }),
      (e.prototype.contract = mL);
  },
  vL = function (e, n, o) {
    let [t, l] = n;
    !o ||
      o.length === 0 ||
      ((o = o.map(
        (s, d) => (
          (s.implicit = s.text),
          (s.machine = s.text),
          (s.pre = ""),
          (s.post = ""),
          (s.text = ""),
          (s.normal = ""),
          (s.index = [t, l + d]),
          s
        )
      )),
      o[0] &&
        ((o[0].pre = e[t][l].pre),
        (o[o.length - 1].post = e[t][l].post),
        (o[0].text = e[t][l].text),
        (o[0].normal = e[t][l].normal)),
      e[t].splice(l, 1, ...o));
  },
  CL = /'/,
  kL = new Set(["been", "become"]),
  wL = new Set(["what", "how", "when", "if", "too"]);
let SL = new Set(["too", "also", "enough"]);
const bL = (e, n) => {
    for (let o = n + 1; o < e.length; o += 1) {
      let t = e[o];
      if (kL.has(t.normal)) return "has";
      if (
        wL.has(t.normal) ||
        t.tags.has("Gerund") ||
        t.tags.has("Determiner") ||
        t.tags.has("Adjective") ||
        (t.switch === "Adj|Past" &&
          e[o + 1] &&
          (SL.has(e[o + 1].normal) || e[o + 1].tags.has("Preposition")))
      )
        return "is";
      if (t.tags.has("PastTense"))
        return e[o + 1] && e[o + 1].normal === "for" ? "is" : "has";
    }
    return "is";
  },
  ML = function (e, n) {
    let o = e[n].normal.split(CL)[0];
    if (o === "let") return [o, "us"];
    if (o === "there") {
      let t = e[n + 1];
      if (t && t.tags.has("Plural")) return [o, "are"];
    }
    return bL(e, n) === "has" ? [o, "has"] : [o, "is"];
  },
  BL = /'/,
  PL = new Set(["better", "done", "before", "it", "had"]),
  HL = new Set(["have", "be"]),
  LL = (e, n) => {
    for (let o = n + 1; o < e.length; o += 1) {
      let t = e[o];
      if (PL.has(t.normal)) return "had";
      if (HL.has(t.normal)) return "would";
      if (t.tags.has("PastTense") || t.switch === "Adj|Past") return "had";
      if (t.tags.has("PresentTense") || t.tags.has("Infinitive"))
        return "would";
      if (t.tags.has("#Determiner")) return "had";
      if (t.tags.has("Adjective")) return "would";
    }
    return !1;
  },
  WL = function (e, n) {
    let o = e[n].normal.split(BL)[0];
    return o === "how" || o === "what"
      ? [o, "did"]
      : LL(e, n) === "had"
      ? [o, "had"]
      : [o, "would"];
  },
  AL = function (e, n) {
    for (let o = n - 1; o >= 0; o -= 1)
      if (
        e[o].tags.has("Noun") ||
        e[o].tags.has("Pronoun") ||
        e[o].tags.has("Plural") ||
        e[o].tags.has("Singular")
      )
        return e[o];
    return null;
  },
  GL = function (e, n) {
    if (e[n].normal === "ain't" || e[n].normal === "aint") {
      if (e[n + 1] && e[n + 1].normal === "never") return ["have"];
      let t = AL(e, n);
      if (t) {
        if (t.normal === "we" || t.normal === "they") return ["are", "not"];
        if (t.normal === "i") return ["am", "not"];
        if (t.tags && t.tags.has("Plural")) return ["are", "not"];
      }
      return ["is", "not"];
    }
    return [e[n].normal.replace(/n't/, ""), "not"];
  },
  RL = { that: !0, there: !0, let: !0, here: !0, everywhere: !0 },
  NL = { in: !0, by: !0, for: !0 };
let EL = new Set(["too", "also", "enough", "about"]),
  FL = new Set([
    "is",
    "are",
    "did",
    "were",
    "could",
    "should",
    "must",
    "had",
    "have",
  ]);
const DL = (e, n) => {
    let o = e[n];
    if (RL.hasOwnProperty(o.machine || o.normal)) return !1;
    if (o.tags.has("Possessive")) return !0;
    if (
      o.tags.has("QuestionWord") ||
      o.normal === "he's" ||
      o.normal === "she's"
    )
      return !1;
    let t = e[n + 1];
    if (!t) return !0;
    if (o.normal === "it's") return !!t.tags.has("#Noun");
    if (t.switch == "Noun|Gerund") {
      let l = e[n + 2];
      return l
        ? l.tags.has("Copula")
          ? !0
          : (l.normal === "on" || l.normal === "in", !1)
        : !!(o.tags.has("Actor") || o.tags.has("ProperNoun"));
    }
    if (t.tags.has("Verb"))
      return t.tags.has("Infinitive")
        ? !0
        : t.tags.has("Gerund")
        ? !1
        : !!t.tags.has("PresentTense");
    if (t.switch === "Adj|Noun") {
      let l = e[n + 2];
      if (!l) return !1;
      if (FL.has(l.normal)) return !0;
      if (EL.has(l.normal)) return !1;
    }
    if (t.tags.has("Noun")) {
      let l = t.machine || t.normal;
      return !(
        l === "here" ||
        l === "there" ||
        l === "everywhere" ||
        t.tags.has("Possessive") ||
        (t.tags.has("ProperNoun") && !o.tags.has("ProperNoun"))
      );
    }
    if (e[n - 1] && NL[e[n - 1].normal] === !0) return !0;
    if (t.tags.has("Adjective")) {
      let l = e[n + 2];
      if (!l) return !1;
      if (l.tags.has("Noun") && !l.tags.has("Pronoun")) {
        let s = t.normal;
        return !(s === "above" || s === "below" || s === "behind");
      }
      return l.switch === "Noun|Verb";
    }
    return !!t.tags.has("Value");
  },
  rp = /'/,
  TL = function (e) {
    e.forEach((n, o) => {
      n.index && (n.index[1] = o);
    });
  },
  OL = function (e, n, o, t) {
    let l = n.update();
    l.document = [e];
    let s = o + t;
    o > 0 && (o -= 1),
      e[s] && (s += 1),
      (l.ptrs = [[0, o, s]]),
      l.compute(["freeze", "lexicon", "preTagger", "unfreeze"]),
      TL(e);
  },
  tp = {
    d: (e, n) => WL(e, n),
    t: (e, n) => GL(e, n),
    s: (e, n, o) =>
      DL(e, n)
        ? o.methods.one.setTag([e[n]], "Possessive", o, null, "2-contraction")
        : ML(e, n),
  },
  xL = function (e, n) {
    let o = n.fromText(e.join(" "));
    return o.compute("id"), o.docs[0];
  },
  VL = (e) => {
    let { world: n, document: o } = e;
    o.forEach((t, l) => {
      for (let s = t.length - 1; s >= 0; s -= 1) {
        if (t[s].implicit) continue;
        let d = null;
        rp.test(t[s].normal) === !0 && (d = t[s].normal.split(rp)[1]);
        let g = null;
        if ((tp.hasOwnProperty(d) && (g = tp[d](t, s, n)), g)) {
          (g = xL(g, e)), vL(o, [l, s], g), OL(o[l], e, s, g.length);
          continue;
        }
      }
    });
  },
  IL = { contractionTwo: VL },
  _L = { compute: IL, api: fL, hooks: ["contractionTwo"] },
  KL = [
    {
      match: "[(all|both)] #Determiner #Noun",
      group: 0,
      tag: "Noun",
      reason: "all-noun",
    },
    {
      match: "#Copula [(just|alone)]$",
      group: 0,
      tag: "Adjective",
      reason: "not-adverb",
    },
    {
      match: "#Singular is #Adverb? [#PastTense$]",
      group: 0,
      tag: "Adjective",
      reason: "is-filled",
    },
    {
      match: "[#PastTense] #Singular is",
      group: 0,
      tag: "Adjective",
      reason: "smoked-poutine",
    },
    {
      match: "[#PastTense] #Plural are",
      group: 0,
      tag: "Adjective",
      reason: "baked-onions",
    },
    {
      match: "well [#PastTense]",
      group: 0,
      tag: "Adjective",
      reason: "well-made",
    },
    {
      match: "#Copula [fucked up?]",
      group: 0,
      tag: "Adjective",
      reason: "swears-adjective",
    },
    {
      match: "#Singular (seems|appears) #Adverb? [#PastTense$]",
      group: 0,
      tag: "Adjective",
      reason: "seems-filled",
    },
    {
      match: "#Copula #Adjective? [(out|in|through)]$",
      group: 0,
      tag: "Adjective",
      reason: "still-out",
    },
    {
      match: "^[#Adjective] (the|your) #Noun",
      group: 0,
      notIf: "(all|even)",
      tag: "Infinitive",
      reason: "shut-the",
    },
    {
      match: "the [said] #Noun",
      group: 0,
      tag: "Adjective",
      reason: "the-said-card",
    },
    {
      match: "[#Hyphenated (#Hyphenated && #PastTense)] (#Noun|#Conjunction)",
      group: 0,
      tag: "Adjective",
      notIf: "#Adverb",
      reason: "faith-based",
    },
    {
      match: "[#Hyphenated (#Hyphenated && #Gerund)] (#Noun|#Conjunction)",
      group: 0,
      tag: "Adjective",
      notIf: "#Adverb",
      reason: "self-driving",
    },
    {
      match: "[#PastTense (#Hyphenated && #PhrasalVerb)] (#Noun|#Conjunction)",
      group: 0,
      tag: "Adjective",
      reason: "dammed-up",
    },
    {
      match: "(#Hyphenated && #Value) fold",
      tag: "Adjective",
      reason: "two-fold",
    },
    {
      match: "must (#Hyphenated && #Infinitive)",
      tag: "Adjective",
      reason: "must-win",
    },
    {
      match: "(#Hyphenated && #Infinitive) #Hyphenated",
      tag: "Adjective",
      notIf: "#PhrasalVerb",
      reason: "vacuum-sealed",
    },
    { match: "too much", tag: "Adverb Adjective", reason: "bit-4" },
    {
      match: "a bit much",
      tag: "Determiner Adverb Adjective",
      reason: "bit-3",
    },
    {
      match:
        "[(un|contra|extra|inter|intra|macro|micro|mid|mis|mono|multi|pre|sub|tri|ex)] #Adjective",
      group: 0,
      tag: ["Adjective", "Prefix"],
      reason: "un-skilled",
    },
  ],
  JL =
    "(dark|bright|flat|light|soft|pale|dead|dim|faux|little|wee|sheer|most|near|good|extra|all)",
  lp = "(hard|fast|late|early|high|right|deep|close|direct)",
  zL = [
    {
      match: "#Adverb [#Adverb] (and|or|then)",
      group: 0,
      tag: "Adjective",
      reason: "kinda-sparkly-and",
    },
    {
      match: `[${JL}] #Adjective`,
      group: 0,
      tag: "Adverb",
      reason: "dark-green",
    },
    {
      match: "#Copula [far too] #Adjective",
      group: 0,
      tag: "Adverb",
      reason: "far-too",
    },
    {
      match: "#Copula [still] (in|#Gerund|#Adjective)",
      group: 0,
      tag: "Adverb",
      reason: "was-still-walking",
    },
    {
      match: `#Plural ${lp}`,
      tag: "#PresentTense #Adverb",
      reason: "studies-hard",
    },
    {
      match: `#Verb [${lp}] !#Noun?`,
      group: 0,
      notIf:
        "(#Copula|get|got|getting|become|became|becoming|feel|feels|feeling|#Determiner|#Preposition)",
      tag: "Adverb",
      reason: "shops-direct",
    },
    { match: "[#Plural] a lot", tag: "PresentTense", reason: "studies-a-lot" },
  ],
  jL = [
    {
      match: "as [#Gerund] as",
      group: 0,
      tag: "Adjective",
      reason: "as-gerund-as",
    },
    {
      match: "more [#Gerund] than",
      group: 0,
      tag: "Adjective",
      reason: "more-gerund-than",
    },
    {
      match: "(so|very|extremely) [#Gerund]",
      group: 0,
      tag: "Adjective",
      reason: "so-gerund",
    },
    {
      match: "(found|found) it #Adverb? [#Gerund]",
      group: 0,
      tag: "Adjective",
      reason: "found-it-gerund",
    },
    {
      match: "a (little|bit|wee) bit? [#Gerund]",
      group: 0,
      tag: "Adjective",
      reason: "a-bit-gerund",
    },
    {
      match: "#Gerund [#Gerund]",
      group: 0,
      tag: "Adjective",
      notIf: "(impersonating|practicing|considering|assuming)",
      reason: "looking-annoying",
    },
    {
      match: "(looked|look|looks) #Adverb? [%Adj|Gerund%]",
      group: 0,
      tag: "Adjective",
      notIf: "(impersonating|practicing|considering|assuming)",
      reason: "looked-amazing",
    },
    {
      match: "[%Adj|Gerund%] #Determiner",
      group: 0,
      tag: "Gerund",
      reason: "developing-a",
    },
    {
      match: "#Possessive [%Adj|Gerund%] #Noun",
      group: 0,
      tag: "Adjective",
      reason: "leading-manufacturer",
    },
    {
      match: "%Noun|Gerund% %Adj|Gerund%",
      tag: "Gerund #Adjective",
      reason: "meaning-alluring",
    },
    {
      match: "(face|embrace|reveal|stop|start|resume) %Adj|Gerund%",
      tag: "#PresentTense #Adjective",
      reason: "face-shocking",
    },
    {
      match: "(are|were) [%Adj|Gerund%] #Plural",
      group: 0,
      tag: "Adjective",
      reason: "are-enduring-symbols",
    },
  ],
  $L = [
    {
      match: "#Determiner [#Adjective] #Copula",
      group: 0,
      tag: "Noun",
      reason: "the-adj-is",
    },
    {
      match: "#Adjective [#Adjective] #Copula",
      group: 0,
      tag: "Noun",
      reason: "adj-adj-is",
    },
    {
      match: "(his|its) [%Adj|Noun%]",
      group: 0,
      tag: "Noun",
      notIf: "#Hyphenated",
      reason: "his-fine",
    },
    {
      match: "#Copula #Adverb? [all]",
      group: 0,
      tag: "Noun",
      reason: "is-all",
    },
    {
      match: "(have|had) [#Adjective] #Preposition .",
      group: 0,
      tag: "Noun",
      reason: "have-fun",
    },
    {
      match: "#Gerund (giant|capital|center|zone|application)",
      tag: "Noun",
      reason: "brewing-giant",
    },
    {
      match: "#Preposition (a|an) [#Adjective]$",
      group: 0,
      tag: "Noun",
      reason: "an-instant",
    },
    {
      match: "no [#Adjective] #Modal",
      group: 0,
      tag: "Noun",
      reason: "no-golden",
    },
    {
      match: "[brand #Gerund?] new",
      group: 0,
      tag: "Adverb",
      reason: "brand-new",
    },
    {
      match: "(#Determiner|#Comparative|new|different) [kind]",
      group: 0,
      tag: "Noun",
      reason: "some-kind",
    },
    {
      match: "#Possessive [%Adj|Noun%] #Noun",
      group: 0,
      tag: "Adjective",
      reason: "her-favourite",
    },
    { match: "must && #Hyphenated .", tag: "Adjective", reason: "must-win" },
    {
      match: "#Determiner [#Adjective]$",
      tag: "Noun",
      notIf: "(this|that|#Comparative|#Superlative)",
      reason: "the-south",
    },
    {
      match: "(#Noun && #Hyphenated) (#Adjective && #Hyphenated)",
      tag: "Adjective",
      notIf: "(this|that|#Comparative|#Superlative)",
      reason: "company-wide",
    },
    {
      match: "#Determiner [#Adjective] (#Copula|#Determiner)",
      notIf: "(#Comparative|#Superlative)",
      group: 0,
      tag: "Noun",
      reason: "the-poor",
    },
    {
      match: "[%Adj|Noun%] #Noun",
      notIf: "(#Pronoun|#ProperNoun)",
      group: 0,
      tag: "Adjective",
      reason: "stable-foundations",
    },
  ],
  UL = [
    {
      match: "(slowly|quickly) [#Adjective]",
      group: 0,
      tag: "Verb",
      reason: "slowly-adj",
    },
    {
      match: "does (#Adverb|not)? [#Adjective]",
      group: 0,
      tag: "PresentTense",
      reason: "does-mean",
    },
    {
      match: "[(fine|okay|cool|ok)] by me",
      group: 0,
      tag: "Adjective",
      reason: "okay-by-me",
    },
    {
      match: "i (#Adverb|do)? not? [mean]",
      group: 0,
      tag: "PresentTense",
      reason: "i-mean",
    },
    {
      match: "will #Adjective",
      tag: "Auxiliary Infinitive",
      reason: "will-adj",
    },
    {
      match: "#Pronoun [#Adjective] #Determiner #Adjective? #Noun",
      group: 0,
      tag: "Verb",
      reason: "he-adj-the",
    },
    {
      match: "#Copula [%Adj|Present%] to #Verb",
      group: 0,
      tag: "Verb",
      reason: "adj-to",
    },
    {
      match: "#Copula [#Adjective] (well|badly|quickly|slowly)",
      group: 0,
      tag: "Verb",
      reason: "done-well",
    },
    {
      match: "#Adjective and [#Gerund] !#Preposition?",
      group: 0,
      tag: "Adjective",
      reason: "rude-and-x",
    },
    {
      match: "#Copula #Adverb? (over|under) [#PastTense]",
      group: 0,
      tag: "Adjective",
      reason: "over-cooked",
    },
    {
      match: "#Copula #Adjective+ (and|or) [#PastTense]$",
      group: 0,
      tag: "Adjective",
      reason: "bland-and-overcooked",
    },
    {
      match: "got #Adverb? [#PastTense] of",
      group: 0,
      tag: "Adjective",
      reason: "got-tired-of",
    },
    {
      match:
        "(seem|seems|seemed|appear|appeared|appears|feel|feels|felt|sound|sounds|sounded) (#Adverb|#Adjective)? [#PastTense]",
      group: 0,
      tag: "Adjective",
      reason: "felt-loved",
    },
    {
      match: "(seem|feel|seemed|felt) [#PastTense #Particle?]",
      group: 0,
      tag: "Adjective",
      reason: "seem-confused",
    },
    {
      match: "a (bit|little|tad) [#PastTense #Particle?]",
      group: 0,
      tag: "Adjective",
      reason: "a-bit-confused",
    },
    {
      match: "not be [%Adj|Past% #Particle?]",
      group: 0,
      tag: "Adjective",
      reason: "do-not-be-confused",
    },
    {
      match: "#Copula just [%Adj|Past% #Particle?]",
      group: 0,
      tag: "Adjective",
      reason: "is-just-right",
    },
    {
      match: "as [#Infinitive] as",
      group: 0,
      tag: "Adjective",
      reason: "as-pale-as",
    },
    {
      match: "[%Adj|Past%] and #Adjective",
      group: 0,
      tag: "Adjective",
      reason: "faled-and-oppressive",
    },
    {
      match: "or [#PastTense] #Noun",
      group: 0,
      tag: "Adjective",
      notIf: "(#Copula|#Pronoun)",
      reason: "or-heightened-emotion",
    },
    {
      match: "(become|became|becoming|becomes) [#Verb]",
      group: 0,
      tag: "Adjective",
      reason: "become-verb",
    },
    {
      match: "#Possessive [#PastTense] #Noun",
      group: 0,
      tag: "Adjective",
      reason: "declared-intentions",
    },
    {
      match: "#Copula #Pronoun [%Adj|Present%]",
      group: 0,
      tag: "Adjective",
      reason: "is-he-cool",
    },
    {
      match: "#Copula [%Adj|Past%] with",
      group: 0,
      tag: "Adjective",
      notIf:
        "(associated|worn|baked|aged|armed|bound|fried|loaded|mixed|packed|pumped|filled|sealed)",
      reason: "is-crowded-with",
    },
    {
      match: "#Copula #Adverb? [%Adj|Present%]$",
      group: 0,
      tag: "Adjective",
      reason: "was-empty$",
    },
  ],
  qL = [
    {
      match: "[still] #Adjective",
      group: 0,
      tag: "Adverb",
      reason: "still-advb",
    },
    { match: "[still] #Verb", group: 0, tag: "Adverb", reason: "still-verb" },
    { match: "[so] #Adjective", group: 0, tag: "Adverb", reason: "so-adv" },
    { match: "[way] #Comparative", group: 0, tag: "Adverb", reason: "way-adj" },
    {
      match: "[way] #Adverb #Adjective",
      group: 0,
      tag: "Adverb",
      reason: "way-too-adj",
    },
    { match: "[all] #Verb", group: 0, tag: "Adverb", reason: "all-verb" },
    {
      match: "#Verb  [like]",
      group: 0,
      notIf: "(#Modal|#PhrasalVerb)",
      tag: "Adverb",
      reason: "verb-like",
    },
    { match: "(barely|hardly) even", tag: "Adverb", reason: "barely-even" },
    { match: "[even] #Verb", group: 0, tag: "Adverb", reason: "even-walk" },
    {
      match: "[even] #Comparative",
      group: 0,
      tag: "Adverb",
      reason: "even-worse",
    },
    {
      match: "[even] (#Determiner|#Possessive)",
      group: 0,
      tag: "#Adverb",
      reason: "even-the",
    },
    { match: "even left", tag: "#Adverb #Verb", reason: "even-left" },
    { match: "[way] #Adjective", group: 0, tag: "#Adverb", reason: "way-over" },
    {
      match: "#PresentTense [(hard|quick|bright|slow|fast|backwards|forwards)]",
      notIf: "#Copula",
      group: 0,
      tag: "Adverb",
      reason: "lazy-ly",
    },
    { match: "[much] #Adjective", group: 0, tag: "Adverb", reason: "bit-1" },
    {
      match: "#Copula [#Adverb]$",
      group: 0,
      tag: "Adjective",
      reason: "is-well",
    },
    {
      match: "a [(little|bit|wee) bit?] #Adjective",
      group: 0,
      tag: "Adverb",
      reason: "a-bit-cold",
    },
    {
      match: "[(super|pretty)] #Adjective",
      group: 0,
      tag: "Adverb",
      reason: "super-strong",
    },
    {
      match: "(become|fall|grow) #Adverb? [#PastTense]",
      group: 0,
      tag: "Adjective",
      reason: "overly-weakened",
    },
    {
      match: "(a|an) #Adverb [#Participle] #Noun",
      group: 0,
      tag: "Adjective",
      reason: "completely-beaten",
    },
    {
      match: "#Determiner #Adverb? [close]",
      group: 0,
      tag: "Adjective",
      reason: "a-close",
    },
    {
      match: "#Gerund #Adverb? [close]",
      group: 0,
      tag: "Adverb",
      notIf: "(getting|becoming|feeling)",
      reason: "being-close",
    },
    {
      match: "(the|those|these|a|an) [#Participle] #Noun",
      group: 0,
      tag: "Adjective",
      reason: "blown-motor",
    },
    {
      match: "(#PresentTense|#PastTense) [back]",
      group: 0,
      tag: "Adverb",
      notIf: "(#PhrasalVerb|#Copula)",
      reason: "charge-back",
    },
    {
      match: "#Verb [around]",
      group: 0,
      tag: "Adverb",
      notIf: "#PhrasalVerb",
      reason: "send-around",
    },
    {
      match: "[later] #PresentTense",
      group: 0,
      tag: "Adverb",
      reason: "later-say",
    },
    {
      match: "#Determiner [well] !#PastTense?",
      group: 0,
      tag: "Noun",
      reason: "the-well",
    },
    {
      match: "#Adjective [enough]",
      group: 0,
      tag: "Adverb",
      reason: "high-enough",
    },
  ],
  YL = [
    { match: "#Holiday (day|eve)", tag: "Holiday", reason: "holiday-day" },
    { match: "#Value of #Month", tag: "Date", reason: "value-of-month" },
    { match: "#Cardinal #Month", tag: "Date", reason: "cardinal-month" },
    { match: "#Month #Value to #Value", tag: "Date", reason: "value-to-value" },
    { match: "#Month the #Value", tag: "Date", reason: "month-the-value" },
    { match: "(#WeekDay|#Month) #Value", tag: "Date", reason: "date-value" },
    { match: "#Value (#WeekDay|#Month)", tag: "Date", reason: "value-date" },
    {
      match: "(#TextValue && #Date) #TextValue",
      tag: "Date",
      reason: "textvalue-date",
    },
    { match: "#Month #NumberRange", tag: "Date", reason: "aug 20-21" },
    { match: "#WeekDay #Month #Ordinal", tag: "Date", reason: "week mm-dd" },
    { match: "#Month #Ordinal #Cardinal", tag: "Date", reason: "mm-dd-yyy" },
    {
      match:
        "(#Place|#Demonmym|#Time) (standard|daylight|central|mountain)? time",
      tag: "Timezone",
      reason: "std-time",
    },
    {
      match:
        "(eastern|mountain|pacific|central|atlantic) (standard|daylight|summer)? time",
      tag: "Timezone",
      reason: "eastern-time",
    },
    {
      match: "#Time [(eastern|mountain|pacific|central|est|pst|gmt)]",
      group: 0,
      tag: "Timezone",
      reason: "5pm-central",
    },
    {
      match: "(central|western|eastern) european time",
      tag: "Timezone",
      reason: "cet",
    },
  ],
  QL = [
    { match: "[sun] the #Ordinal", tag: "WeekDay", reason: "sun-the-5th" },
    { match: "[sun] #Date", group: 0, tag: "WeekDay", reason: "sun-feb" },
    {
      match: "#Date (on|this|next|last|during)? [sun]",
      group: 0,
      tag: "WeekDay",
      reason: "1pm-sun",
    },
    {
      match: "(in|by|before|during|on|until|after|of|within|all) [sat]",
      group: 0,
      tag: "WeekDay",
      reason: "sat",
    },
    {
      match: "(in|by|before|during|on|until|after|of|within|all) [wed]",
      group: 0,
      tag: "WeekDay",
      reason: "wed",
    },
    {
      match: "(in|by|before|during|on|until|after|of|within|all) [march]",
      group: 0,
      tag: "Month",
      reason: "march",
    },
    { match: "[sat] #Date", group: 0, tag: "WeekDay", reason: "sat-feb" },
    {
      match: "#Preposition [(march|may)]",
      group: 0,
      tag: "Month",
      reason: "in-month",
    },
    {
      match: "(this|next|last) (march|may) !#Infinitive?",
      tag: "#Date #Month",
      reason: "this-month",
    },
    {
      match: "(march|may) the? #Value",
      tag: "#Month #Date #Date",
      reason: "march-5th",
    },
    {
      match: "#Value of? (march|may)",
      tag: "#Date #Date #Month",
      reason: "5th-of-march",
    },
    {
      match: "[(march|may)] .? #Date",
      group: 0,
      tag: "Month",
      reason: "march-and-feb",
    },
    {
      match: "#Date .? [(march|may)]",
      group: 0,
      tag: "Month",
      reason: "feb-and-march",
    },
    {
      match: "#Adverb [(march|may)]",
      group: 0,
      tag: "Verb",
      reason: "quickly-march",
    },
    {
      match: "[(march|may)] #Adverb",
      group: 0,
      tag: "Verb",
      reason: "march-quickly",
    },
    { match: "#Value (am|pm)", tag: "Time", reason: "2-am" },
  ],
  ZL =
    "(feel|sense|process|rush|side|bomb|bully|challenge|cover|crush|dump|exchange|flow|function|issue|lecture|limit|march|process)",
  XL = [
    {
      match: "(the|any) [more]",
      group: 0,
      tag: "Singular",
      reason: "more-noun",
    },
    { match: "[more] #Noun", group: 0, tag: "Adjective", reason: "more-noun" },
    { match: "(right|rights) of .", tag: "Noun", reason: "right-of" },
    { match: "a [bit]", group: 0, tag: "Singular", reason: "bit-2" },
    { match: "a [must]", group: 0, tag: "Singular", reason: "must-2" },
    { match: "(we|us) [all]", group: 0, tag: "Noun", reason: "we all" },
    { match: "due to [#Verb]", group: 0, tag: "Noun", reason: "due-to" },
    {
      match: "some [#Verb] #Plural",
      group: 0,
      tag: "Noun",
      reason: "determiner6",
    },
    {
      match: "#Possessive #Ordinal [#PastTense]",
      group: 0,
      tag: "Noun",
      reason: "first-thought",
    },
    {
      match: "(the|this|those|these) #Adjective [%Verb|Noun%]",
      group: 0,
      tag: "Noun",
      notIf: "#Copula",
      reason: "the-adj-verb",
    },
    {
      match: "(the|this|those|these) #Adverb #Adjective [#Verb]",
      group: 0,
      tag: "Noun",
      reason: "determiner4",
    },
    {
      match: "the [#Verb] #Preposition .",
      group: 0,
      tag: "Noun",
      reason: "determiner1",
    },
    {
      match: "(a|an|the) [#Verb] of",
      group: 0,
      tag: "Noun",
      reason: "the-verb-of",
    },
    {
      match: "#Determiner #Noun of [#Verb]",
      group: 0,
      tag: "Noun",
      notIf: "#Gerund",
      reason: "noun-of-noun",
    },
    {
      match: "#PastTense #Preposition [#PresentTense]",
      group: 0,
      notIf: "#Gerund",
      tag: "Noun",
      reason: "ended-in-ruins",
    },
    {
      match: "#Conjunction [u]",
      group: 0,
      tag: "Pronoun",
      reason: "u-pronoun-2",
    },
    { match: "[u] #Verb", group: 0, tag: "Pronoun", reason: "u-pronoun-1" },
    {
      match: "#Determiner [(western|eastern|northern|southern|central)] #Noun",
      group: 0,
      tag: "Noun",
      reason: "western-line",
    },
    {
      match: "(#Singular && @hasHyphen) #PresentTense",
      tag: "Noun",
      reason: "hyphen-verb",
    },
    { match: "is no [#Verb]", group: 0, tag: "Noun", reason: "is-no-verb" },
    { match: "do [so]", group: 0, tag: "Noun", reason: "so-noun" },
    {
      match: "#Determiner [(shit|damn|hell)]",
      group: 0,
      tag: "Noun",
      reason: "swears-noun",
    },
    { match: "to [(shit|hell)]", group: 0, tag: "Noun", reason: "to-swears" },
    {
      match: "(the|these) [#Singular] (were|are)",
      group: 0,
      tag: "Plural",
      reason: "singular-were",
    },
    {
      match: "a #Noun+ or #Adverb+? [#Verb]",
      group: 0,
      tag: "Noun",
      reason: "noun-or-noun",
    },
    {
      match: "(the|those|these|a|an) #Adjective? [#PresentTense #Particle?]",
      group: 0,
      tag: "Noun",
      notIf: "(seem|appear|include|#Gerund|#Copula)",
      reason: "det-inf",
    },
    {
      match: "#Noun #Actor",
      tag: "Actor",
      notIf: "(#Person|#Pronoun)",
      reason: "thing-doer",
    },
    { match: "#Gerund #Actor", tag: "Actor", reason: "gerund-doer" },
    { match: "co #Singular", tag: "Actor", reason: "co-noun" },
    {
      match: "[#Noun+] #Actor",
      group: 0,
      tag: "Actor",
      notIf: "(#Honorific|#Pronoun|#Possessive)",
      reason: "air-traffic-controller",
    },
    {
      match:
        "(urban|cardiac|cardiovascular|respiratory|medical|clinical|visual|graphic|creative|dental|exotic|fine|certified|registered|technical|virtual|professional|amateur|junior|senior|special|pharmaceutical|theoretical)+ #Noun? #Actor",
      tag: "Actor",
      reason: "fine-artist",
    },
    {
      match:
        "#Noun+ (coach|chef|king|engineer|fellow|personality|boy|girl|man|woman|master)",
      tag: "Actor",
      reason: "dance-coach",
    },
    { match: "chief . officer", tag: "Actor", reason: "chief-x-officer" },
    { match: "chief of #Noun+", tag: "Actor", reason: "chief-of-police" },
    {
      match: "senior? vice? president of #Noun+",
      tag: "Actor",
      reason: "president-of",
    },
    {
      match: "#Determiner [sun]",
      group: 0,
      tag: "Singular",
      reason: "the-sun",
    },
    {
      match: "#Verb (a|an) [#Value]$",
      group: 0,
      tag: "Singular",
      reason: "did-a-value",
    },
    {
      match: "the [(can|will|may)]",
      group: 0,
      tag: "Singular",
      reason: "the can",
    },
    {
      match: "#FirstName #Acronym? (#Possessive && #LastName)",
      tag: "Possessive",
      reason: "name-poss",
    },
    {
      match: "#Organization+ #Possessive",
      tag: "Possessive",
      reason: "org-possessive",
    },
    {
      match: "#Place+ #Possessive",
      tag: "Possessive",
      reason: "place-possessive",
    },
    {
      match: "#Possessive #PresentTense #Particle?",
      notIf: "(#Gerund|her)",
      tag: "Noun",
      reason: "possessive-verb",
    },
    {
      match: "(my|our|their|her|his|its) [(#Plural && #Actor)] #Noun",
      tag: "Possessive",
      reason: "my-dads",
    },
    {
      match: "#Value of a [second]",
      group: 0,
      unTag: "Value",
      tag: "Singular",
      reason: "10th-of-a-second",
    },
    {
      match: "#Value [seconds]",
      group: 0,
      unTag: "Value",
      tag: "Plural",
      reason: "10-seconds",
    },
    { match: "in [#Infinitive]", group: 0, tag: "Singular", reason: "in-age" },
    {
      match: "a [#Adjective] #Preposition",
      group: 0,
      tag: "Noun",
      reason: "a-minor-in",
    },
    {
      match: "#Determiner [#Singular] said",
      group: 0,
      tag: "Actor",
      reason: "the-actor-said",
    },
    {
      match: `#Determiner #Noun [${ZL}] !(#Preposition|to|#Adverb)?`,
      group: 0,
      tag: "Noun",
      reason: "the-noun-sense",
    },
    {
      match: "[#PresentTense] (of|by|for) (a|an|the) #Noun #Copula",
      group: 0,
      tag: "Plural",
      reason: "photographs-of",
    },
    {
      match: "#Infinitive and [%Noun|Verb%]",
      group: 0,
      tag: "Infinitive",
      reason: "fight and win",
    },
    {
      match: "#Noun and [#Verb] and #Noun",
      group: 0,
      tag: "Noun",
      reason: "peace-and-flowers",
    },
    {
      match: "the #Cardinal [%Adj|Noun%]",
      group: 0,
      tag: "Noun",
      reason: "the-1992-classic",
    },
    {
      match: "#Copula the [%Adj|Noun%] #Noun",
      group: 0,
      tag: "Adjective",
      reason: "the-premier-university",
    },
    {
      match: "i #Verb [me] #Noun",
      group: 0,
      tag: "Possessive",
      reason: "scottish-me",
    },
    {
      match:
        "[#PresentTense] (music|class|lesson|night|party|festival|league|ceremony)",
      group: 0,
      tag: "Noun",
      reason: "dance-music",
    },
    { match: "[wit] (me|it)", group: 0, tag: "Presposition", reason: "wit-me" },
    {
      match: "#PastTense #Possessive [#Verb]",
      group: 0,
      tag: "Noun",
      notIf: "(saw|made)",
      reason: "left-her-boots",
    },
    {
      match: "#Value [%Plural|Verb%]",
      group: 0,
      tag: "Plural",
      notIf: "(one|1|a|an)",
      reason: "35-signs",
    },
    {
      match: "had [#PresentTense]",
      group: 0,
      tag: "Noun",
      notIf: "(#Gerund|come|become)",
      reason: "had-time",
    },
    {
      match: "%Adj|Noun% %Noun|Verb%",
      tag: "#Adjective #Noun",
      notIf: "#ProperNoun #Noun",
      reason: "instant-access",
    },
    {
      match: "#Determiner [%Adj|Noun%] #Conjunction",
      group: 0,
      tag: "Noun",
      reason: "a-rep-to",
    },
    {
      match: "#Adjective #Noun [%Plural|Verb%]$",
      group: 0,
      tag: "Plural",
      notIf: "#Pronoun",
      reason: "near-death-experiences",
    },
    {
      match: "#Possessive #Noun [%Plural|Verb%]$",
      group: 0,
      tag: "Plural",
      reason: "your-guild-colors",
    },
  ],
  e0 = [
    {
      match: "(this|that|the|a|an) [#Gerund #Infinitive]",
      group: 0,
      tag: "Singular",
      reason: "the-planning-process",
    },
    {
      match: "(that|the) [#Gerund #PresentTense]",
      group: 0,
      ifNo: "#Copula",
      tag: "Plural",
      reason: "the-paving-stones",
    },
    {
      match: "#Determiner [#Gerund] #Noun",
      group: 0,
      tag: "Adjective",
      reason: "the-gerund-noun",
    },
    {
      match: "#Pronoun #Infinitive [#Gerund] #PresentTense",
      group: 0,
      tag: "Noun",
      reason: "tipping-sucks",
    },
    {
      match: "#Adjective [#Gerund]",
      group: 0,
      tag: "Noun",
      notIf: "(still|even|just)",
      reason: "early-warning",
    },
    {
      match: "[#Gerund] #Adverb? not? #Copula",
      group: 0,
      tag: "Activity",
      reason: "gerund-copula",
    },
    {
      match: "#Copula [(#Gerund|#Activity)] #Copula",
      group: 0,
      tag: "Gerund",
      reason: "are-doing-is",
    },
    {
      match: "[#Gerund] #Modal",
      group: 0,
      tag: "Activity",
      reason: "gerund-modal",
    },
    {
      match: "#Singular for [%Noun|Gerund%]",
      group: 0,
      tag: "Gerund",
      reason: "noun-for-gerund",
    },
    {
      match: "#Comparative (for|at) [%Noun|Gerund%]",
      group: 0,
      tag: "Gerund",
      reason: "better-for-gerund",
    },
    {
      match: "#PresentTense the [#Gerund]",
      group: 0,
      tag: "Noun",
      reason: "keep-the-touching",
    },
  ],
  n0 = [
    {
      match: "#Infinitive (this|that|the) [#Infinitive]",
      group: 0,
      tag: "Noun",
      reason: "do-this-dance",
    },
    {
      match: "#Gerund #Determiner [#Infinitive]",
      group: 0,
      tag: "Noun",
      reason: "running-a-show",
    },
    {
      match: "#Determiner (only|further|just|more|backward) [#Infinitive]",
      group: 0,
      tag: "Noun",
      reason: "the-only-reason",
    },
    {
      match: "(the|this|a|an) [#Infinitive] #Adverb? #Verb",
      group: 0,
      tag: "Noun",
      reason: "determiner5",
    },
    {
      match: "#Determiner #Adjective #Adjective? [#Infinitive]",
      group: 0,
      tag: "Noun",
      reason: "a-nice-inf",
    },
    {
      match: "#Determiner #Demonym [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "mexican-train",
    },
    {
      match: "#Adjective #Noun+ [#Infinitive] #Copula",
      group: 0,
      tag: "Noun",
      reason: "career-move",
    },
    {
      match: "at some [#Infinitive]",
      group: 0,
      tag: "Noun",
      reason: "at-some-inf",
    },
    {
      match: "(go|goes|went) to [#Infinitive]",
      group: 0,
      tag: "Noun",
      reason: "goes-to-verb",
    },
    {
      match: "(a|an) #Adjective? #Noun [#Infinitive] (#Preposition|#Noun)",
      group: 0,
      notIf: "from",
      tag: "Noun",
      reason: "a-noun-inf",
    },
    {
      match: "(a|an) #Noun [#Infinitive]$",
      group: 0,
      tag: "Noun",
      reason: "a-noun-inf2",
    },
    {
      match: "#Gerund #Adjective? for [#Infinitive]",
      group: 0,
      tag: "Noun",
      reason: "running-for",
    },
    {
      match: "about [#Infinitive]",
      group: 0,
      tag: "Singular",
      reason: "about-love",
    },
    {
      match: "#Plural on [#Infinitive]",
      group: 0,
      tag: "Noun",
      reason: "on-stage",
    },
    { match: "any [#Infinitive]", group: 0, tag: "Noun", reason: "any-charge" },
    { match: "no [#Infinitive]", group: 0, tag: "Noun", reason: "no-doubt" },
    {
      match: "number of [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "number-of-x",
    },
    {
      match: "(taught|teaches|learns|learned) [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "teaches-x",
    },
    {
      match: "(try|use|attempt|build|make) [#Verb #Particle?]",
      notIf: "(#Copula|#Noun|sure|fun|up)",
      group: 0,
      tag: "Noun",
      reason: "do-verb",
    },
    {
      match: "^[#Infinitive] (is|was)",
      group: 0,
      tag: "Noun",
      reason: "checkmate-is",
    },
    {
      match: "#Infinitive much [#Infinitive]",
      group: 0,
      tag: "Noun",
      reason: "get-much",
    },
    {
      match: "[cause] #Pronoun #Verb",
      group: 0,
      tag: "Conjunction",
      reason: "cause-cuz",
    },
    {
      match: "the #Singular [#Infinitive] #Noun",
      group: 0,
      tag: "Noun",
      notIf: "#Pronoun",
      reason: "cardio-dance",
    },
    {
      match: "#Determiner #Modal [#Noun]",
      group: 0,
      tag: "PresentTense",
      reason: "should-smoke",
    },
    {
      match: "this [#Plural]",
      group: 0,
      tag: "PresentTense",
      notIf: "(#Preposition|#Date)",
      reason: "this-verbs",
    },
    {
      match: "#Noun that [#Plural]",
      group: 0,
      tag: "PresentTense",
      notIf: "(#Preposition|#Pronoun|way)",
      reason: "voice-that-rocks",
    },
    {
      match: "that [#Plural] to",
      group: 0,
      tag: "PresentTense",
      notIf: "#Preposition",
      reason: "that-leads-to",
    },
    {
      match:
        "(let|make|made) (him|her|it|#Person|#Place|#Organization)+ [#Singular] (a|an|the|it)",
      group: 0,
      tag: "Infinitive",
      reason: "let-him-glue",
    },
    {
      match: "#Verb (all|every|each|most|some|no) [#PresentTense]",
      notIf: "#Modal",
      group: 0,
      tag: "Noun",
      reason: "all-presentTense",
    },
    {
      match: "(had|have|#PastTense) #Adjective [#PresentTense]",
      group: 0,
      tag: "Noun",
      notIf: "better",
      reason: "adj-presentTense",
    },
    {
      match: "#Value #Adjective [#PresentTense]",
      group: 0,
      tag: "Noun",
      notIf: "#Copula",
      reason: "one-big-reason",
    },
    {
      match: "#PastTense #Adjective+ [#PresentTense]",
      group: 0,
      tag: "Noun",
      notIf: "(#Copula|better)",
      reason: "won-wide-support",
    },
    {
      match: "(many|few|several|couple) [#PresentTense]",
      group: 0,
      tag: "Noun",
      notIf: "#Copula",
      reason: "many-poses",
    },
    {
      match: "#Determiner #Adverb #Adjective [%Noun|Verb%]",
      group: 0,
      tag: "Noun",
      notIf: "#Copula",
      reason: "very-big-dream",
    },
    {
      match: "from #Noun to [%Noun|Verb%]",
      group: 0,
      tag: "Noun",
      reason: "start-to-finish",
    },
    {
      match: "(for|with|of) #Noun (and|or|not) [%Noun|Verb%]",
      group: 0,
      tag: "Noun",
      notIf: "#Pronoun",
      reason: "for-food-and-gas",
    },
    {
      match: "#Adjective #Adjective [#PresentTense]",
      group: 0,
      tag: "Noun",
      notIf: "#Copula",
      reason: "adorable-little-store",
    },
    {
      match: "#Gerund #Adverb? #Comparative [#PresentTense]",
      group: 0,
      tag: "Noun",
      notIf: "#Copula",
      reason: "higher-costs",
    },
    {
      match: "(#Noun && @hasComma) #Noun (and|or) [#PresentTense]",
      group: 0,
      tag: "Noun",
      notIf: "#Copula",
      reason: "noun-list",
    },
    {
      match: "(many|any|some|several) [#PresentTense] for",
      group: 0,
      tag: "Noun",
      reason: "any-verbs-for",
    },
    {
      match: "to #PresentTense #Noun [#PresentTense] #Preposition",
      group: 0,
      tag: "Noun",
      reason: "gas-exchange",
    },
    {
      match: "#PastTense (until|as|through|without) [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "waited-until-release",
    },
    {
      match: "#Gerund like #Adjective? [#PresentTense]",
      group: 0,
      tag: "Plural",
      reason: "like-hot-cakes",
    },
    {
      match: "some #Adjective [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "some-reason",
    },
    {
      match: "for some [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "for-some-reason",
    },
    {
      match: "(same|some|the|that|a) kind of [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "some-kind-of",
    },
    {
      match: "(same|some|the|that|a) type of [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "some-type-of",
    },
    {
      match: "#Gerund #Adjective #Preposition [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "doing-better-for-x",
    },
    {
      match: "(get|got|have) #Comparative [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "got-better-aim",
    },
    {
      match: "whose [#PresentTense] #Copula",
      group: 0,
      tag: "Noun",
      reason: "whos-name-was",
    },
    {
      match: "#PhrasalVerb #Particle #Preposition [#PresentTense]",
      group: 0,
      tag: "Noun",
      reason: "given-up-on-x",
    },
    {
      match: "there (are|were) #Adjective? [#PresentTense]",
      group: 0,
      tag: "Plural",
      reason: "there-are",
    },
    {
      match: "#Value [#PresentTense] of",
      group: 0,
      notIf: "(one|1|#Copula|#Infinitive)",
      tag: "Plural",
      reason: "2-trains",
    },
    {
      match: "[#PresentTense] (are|were) #Adjective",
      group: 0,
      tag: "Plural",
      reason: "compromises-are-possible",
    },
    {
      match: "^[(hope|guess|thought|think)] #Pronoun #Verb",
      group: 0,
      tag: "Infinitive",
      reason: "suppose-i",
    },
    {
      match: "#Possessive #Adjective [#Verb]",
      group: 0,
      tag: "Noun",
      notIf: "#Copula",
      reason: "our-full-support",
    },
    {
      match: "[(tastes|smells)] #Adverb? #Adjective",
      group: 0,
      tag: "PresentTense",
      reason: "tastes-good",
    },
    {
      match: "#Copula #Gerund [#PresentTense] !by?",
      group: 0,
      tag: "Noun",
      notIf: "going",
      reason: "ignoring-commute",
    },
    {
      match: "#Determiner #Adjective? [(shed|thought|rose|bid|saw|spelt)]",
      group: 0,
      tag: "Noun",
      reason: "noun-past",
    },
    {
      match: "how to [%Noun|Verb%]",
      group: 0,
      tag: "Infinitive",
      reason: "how-to-noun",
    },
    {
      match: "which [%Noun|Verb%] #Noun",
      group: 0,
      tag: "Infinitive",
      reason: "which-boost-it",
    },
    {
      match: "#Gerund [%Plural|Verb%]",
      group: 0,
      tag: "Plural",
      reason: "asking-questions",
    },
    {
      match:
        "(ready|available|difficult|hard|easy|made|attempt|try) to [%Noun|Verb%]",
      group: 0,
      tag: "Infinitive",
      reason: "ready-to-noun",
    },
    {
      match: "(bring|went|go|drive|run|bike) to [%Noun|Verb%]",
      group: 0,
      tag: "Noun",
      reason: "bring-to-noun",
    },
    {
      match: "#Modal #Noun [%Noun|Verb%]",
      group: 0,
      tag: "Infinitive",
      reason: "would-you-look",
    },
    {
      match: "#Copula just [#Infinitive]",
      group: 0,
      tag: "Noun",
      reason: "is-just-spam",
    },
    {
      match: "^%Noun|Verb% %Plural|Verb%",
      tag: "Imperative #Plural",
      reason: "request-copies",
    },
    {
      match: "#Adjective #Plural and [%Plural|Verb%]",
      group: 0,
      tag: "#Plural",
      reason: "pickles-and-drinks",
    },
    {
      match: "#Determiner #Year [#Verb]",
      group: 0,
      tag: "Noun",
      reason: "the-1968-film",
    },
    {
      match: "#Determiner [#PhrasalVerb #Particle]",
      group: 0,
      tag: "Noun",
      reason: "the-break-up",
    },
    {
      match: "#Determiner [%Adj|Noun%] #Noun",
      group: 0,
      tag: "Adjective",
      notIf: "(#Pronoun|#Possessive|#ProperNoun)",
      reason: "the-individual-goals",
    },
    {
      match: "[%Noun|Verb%] or #Infinitive",
      group: 0,
      tag: "Infinitive",
      reason: "work-or-prepare",
    },
    {
      match: "to #Infinitive [#PresentTense]",
      group: 0,
      tag: "Noun",
      notIf: "(#Gerund|#Copula|help)",
      reason: "to-give-thanks",
    },
    { match: "[#Noun] me", group: 0, tag: "Verb", reason: "kills-me" },
    {
      match: "%Plural|Verb% %Plural|Verb%",
      tag: "#PresentTense #Plural",
      reason: "removes-wrinkles",
    },
  ],
  a0 = [
    {
      match: "#Money and #Money #Currency?",
      tag: "Money",
      reason: "money-and-money",
    },
    {
      match: "#Value #Currency [and] #Value (cents|ore|centavos|sens)",
      group: 0,
      tag: "money",
      reason: "and-5-cents",
    },
    {
      match: "#Value (mark|rand|won|rub|ore)",
      tag: "#Money #Currency",
      reason: "4-mark",
    },
    { match: "a pound", tag: "#Money #Unit", reason: "a-pound" },
    { match: "#Value (pound|pounds)", tag: "#Money #Unit", reason: "4-pounds" },
  ],
  o0 = [
    {
      match: "[(half|quarter)] of? (a|an)",
      group: 0,
      tag: "Fraction",
      reason: "millionth",
    },
    {
      match: "#Adverb [half]",
      group: 0,
      tag: "Fraction",
      reason: "nearly-half",
    },
    { match: "[half] the", group: 0, tag: "Fraction", reason: "half-the" },
    { match: "#Cardinal and a half", tag: "Fraction", reason: "and-a-half" },
    {
      match: "#Value (halves|halfs|quarters)",
      tag: "Fraction",
      reason: "two-halves",
    },
    { match: "a #Ordinal", tag: "Fraction", reason: "a-quarter" },
    {
      match: "[#Cardinal+] (#Fraction && /s$/)",
      tag: "Fraction",
      reason: "seven-fifths",
    },
    {
      match: "[#Cardinal+ #Ordinal] of .",
      group: 0,
      tag: "Fraction",
      reason: "ordinal-of",
    },
    {
      match: "[(#NumericValue && #Ordinal)] of .",
      group: 0,
      tag: "Fraction",
      reason: "num-ordinal-of",
    },
    {
      match: "(a|one) #Cardinal?+ #Ordinal",
      tag: "Fraction",
      reason: "a-ordinal",
    },
    {
      match: "#Cardinal+ out? of every? #Cardinal",
      tag: "Fraction",
      reason: "out-of",
    },
  ],
  r0 = [
    { match: "#Cardinal [second]", tag: "Unit", reason: "one-second" },
    {
      match:
        "!once? [(a|an)] (#Duration|hundred|thousand|million|billion|trillion)",
      group: 0,
      tag: "Value",
      reason: "a-is-one",
    },
    {
      match: "1 #Value #PhoneNumber",
      tag: "PhoneNumber",
      reason: "1-800-Value",
    },
    {
      match: "#NumericValue #PhoneNumber",
      tag: "PhoneNumber",
      reason: "(800) PhoneNumber",
    },
    {
      match: "#Demonym #Currency",
      tag: "Currency",
      reason: "demonym-currency",
    },
    {
      match: "#Value [(buck|bucks|grand)]",
      group: 0,
      tag: "Currency",
      reason: "value-bucks",
    },
    { match: "[#Value+] #Currency", group: 0, tag: "Money", reason: "15 usd" },
    {
      match: "[second] #Noun",
      group: 0,
      tag: "Ordinal",
      reason: "second-noun",
    },
    { match: "#Value+ [#Currency]", group: 0, tag: "Unit", reason: "5-yan" },
    {
      match: "#Value [(foot|feet)]",
      group: 0,
      tag: "Unit",
      reason: "foot-unit",
    },
    {
      match: "#Value [#Abbreviation]",
      group: 0,
      tag: "Unit",
      reason: "value-abbr",
    },
    { match: "#Value [k]", group: 0, tag: "Unit", reason: "value-k" },
    { match: "#Unit an hour", tag: "Unit", reason: "unit-an-hour" },
    { match: "(minus|negative) #Value", tag: "Value", reason: "minus-value" },
    {
      match: "#Value (point|decimal) #Value",
      tag: "Value",
      reason: "value-point-value",
    },
    {
      match: "#Determiner [(half|quarter)] #Ordinal",
      group: 0,
      tag: "Value",
      reason: "half-ordinal",
    },
    {
      match: "#Multiple+ and #Value",
      tag: "Value",
      reason: "magnitude-and-value",
    },
    {
      match: "#Value #Unit [(per|an) (hr|hour|sec|second|min|minute)]",
      group: 0,
      tag: "Unit",
      reason: "12-miles-per-second",
    },
    {
      match: "#Value [(square|cubic)] #Unit",
      group: 0,
      tag: "Unit",
      reason: "square-miles",
    },
  ],
  t0 = [
    {
      match: "#Copula [(#Noun|#PresentTense)] #LastName",
      group: 0,
      tag: "FirstName",
      reason: "copula-noun-lastname",
    },
    {
      match:
        "(sister|pope|brother|father|aunt|uncle|grandpa|grandfather|grandma) #ProperNoun",
      tag: "Person",
      reason: "lady-titlecase",
      safe: !0,
    },
    {
      match: "#FirstName [#Determiner #Noun] #LastName",
      group: 0,
      tag: "Person",
      reason: "first-noun-last",
    },
    {
      match:
        "#ProperNoun (b|c|d|e|f|g|h|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z) #ProperNoun",
      tag: "Person",
      reason: "titlecase-acronym-titlecase",
      safe: !0,
    },
    {
      match: "#Acronym #LastName",
      tag: "Person",
      reason: "acronym-lastname",
      safe: !0,
    },
    { match: "#Person (jr|sr|md)", tag: "Person", reason: "person-honorific" },
    {
      match: "#Honorific #Acronym",
      tag: "Person",
      reason: "Honorific-TitleCase",
    },
    {
      match: "#Person #Person the? #RomanNumeral",
      tag: "Person",
      reason: "roman-numeral",
    },
    {
      match: "#FirstName [/^[^aiurck]$/]",
      group: 0,
      tag: ["Acronym", "Person"],
      reason: "john-e",
    },
    {
      match: "#Noun van der? #Noun",
      tag: "Person",
      reason: "van der noun",
      safe: !0,
    },
    {
      match: "(king|queen|prince|saint|lady) of #Noun",
      tag: "Person",
      reason: "king-of-noun",
      safe: !0,
    },
    { match: "(prince|lady) #Place", tag: "Person", reason: "lady-place" },
    {
      match: "(king|queen|prince|saint) #ProperNoun",
      tag: "Person",
      notIf: "#Place",
      reason: "saint-foo",
    },
    {
      match: "al (#Person|#ProperNoun)",
      tag: "Person",
      reason: "al-borlen",
      safe: !0,
    },
    { match: "#FirstName de #Noun", tag: "Person", reason: "bill-de-noun" },
    {
      match: "#FirstName (bin|al) #Noun",
      tag: "Person",
      reason: "bill-al-noun",
    },
    {
      match: "#FirstName #Acronym #ProperNoun",
      tag: "Person",
      reason: "bill-acronym-title",
    },
    {
      match: "#FirstName #FirstName #ProperNoun",
      tag: "Person",
      reason: "bill-firstname-title",
    },
    {
      match: "#Honorific #FirstName? #ProperNoun",
      tag: "Person",
      reason: "dr-john-Title",
    },
    {
      match: "#FirstName the #Adjective",
      tag: "Person",
      reason: "name-the-great",
    },
    {
      match: "#ProperNoun (van|al|bin) #ProperNoun",
      tag: "Person",
      reason: "title-van-title",
      safe: !0,
    },
    {
      match: "#ProperNoun (de|du) la? #ProperNoun",
      tag: "Person",
      notIf: "#Place",
      reason: "title-de-title",
    },
    {
      match: "#Singular #Acronym #LastName",
      tag: "#FirstName #Person .",
      reason: "title-acro-noun",
      safe: !0,
    },
    {
      match: "[#ProperNoun] #Person",
      group: 0,
      tag: "Person",
      reason: "proper-person",
      safe: !0,
    },
    {
      match: "#Person [#ProperNoun #ProperNoun]",
      group: 0,
      tag: "Person",
      notIf: "#Possessive",
      reason: "three-name-person",
      safe: !0,
    },
    {
      match: "#FirstName #Acronym? [#ProperNoun]",
      group: 0,
      tag: "LastName",
      notIf: "#Possessive",
      reason: "firstname-titlecase",
    },
    {
      match: "#FirstName [#FirstName]",
      group: 0,
      tag: "LastName",
      reason: "firstname-firstname",
    },
    {
      match: "#FirstName #Acronym #Noun",
      tag: "Person",
      reason: "n-acro-noun",
      safe: !0,
    },
    {
      match: "#FirstName [(de|di|du|van|von)] #Person",
      group: 0,
      tag: "LastName",
      reason: "de-firstname",
    },
    {
      match:
        "[(lieutenant|corporal|sergeant|captain|qeen|king|admiral|major|colonel|marshal|president|queen|king)+] #ProperNoun",
      group: 0,
      tag: "Honorific",
      reason: "seargeant-john",
    },
    {
      match:
        "[(private|general|major|rear|prime|field|count|miss)] #Honorific? #Person",
      group: 0,
      tag: ["Honorific", "Person"],
      reason: "ambg-honorifics",
    },
    {
      match: "#Honorific #FirstName [#Singular]",
      group: 0,
      tag: "LastName",
      notIf: "#Possessive",
      reason: "dr-john-foo",
      safe: !0,
    },
    {
      match:
        "[(his|her) (majesty|honour|worship|excellency|honorable)] #Person",
      group: 0,
      tag: "Honorific",
      reason: "his-excellency",
    },
    {
      match: "#Honorific #Actor",
      tag: "Honorific",
      reason: "Lieutenant colonel",
    },
    {
      match: "(first|second|third|1st|2nd|3rd) #Actor",
      tag: "Honorific",
      reason: "first lady",
    },
    { match: "#Person #RomanNumeral", tag: "Person", reason: "louis-IV" },
  ],
  l0 = [
    {
      match: "#FirstName #Noun$",
      tag: ". #LastName",
      notIf: "(#Possessive|#Organization|#Place|#Pronoun|@hasTitleCase)",
      reason: "firstname-noun",
    },
    {
      match: "%Person|Date% #Acronym? #ProperNoun",
      tag: "Person",
      reason: "jan-thierson",
    },
    {
      match: "%Person|Noun% #Acronym? #ProperNoun",
      tag: "Person",
      reason: "switch-person",
      safe: !0,
    },
    {
      match: "%Person|Noun% #Organization",
      tag: "Organization",
      reason: "olive-garden",
    },
    {
      match: "%Person|Verb% #Acronym? #ProperNoun",
      tag: "Person",
      reason: "verb-propernoun",
      ifNo: "#Actor",
    },
    {
      match:
        "[%Person|Verb%] (will|had|has|said|says|told|did|learned|wants|wanted)",
      group: 0,
      tag: "Person",
      reason: "person-said",
    },
    {
      match:
        "[%Person|Place%] (harbor|harbour|pier|town|city|place|dump|landfill)",
      group: 0,
      tag: "Place",
      reason: "sydney-harbour",
    },
    {
      match: "(west|east|north|south) [%Person|Place%]",
      group: 0,
      tag: "Place",
      reason: "east-sydney",
    },
    {
      match: "#Modal [%Person|Verb%]",
      group: 0,
      tag: "Verb",
      reason: "would-mark",
    },
    {
      match: "#Adverb [%Person|Verb%]",
      group: 0,
      tag: "Verb",
      reason: "really-mark",
    },
    {
      match: "[%Person|Verb%] (#Adverb|#Comparative)",
      group: 0,
      tag: "Verb",
      reason: "drew-closer",
    },
    { match: "%Person|Verb% #Person", tag: "Person", reason: "rob-smith" },
    {
      match: "%Person|Verb% #Acronym #ProperNoun",
      tag: "Person",
      reason: "rob-a-smith",
    },
    { match: "[will] #Verb", group: 0, tag: "Modal", reason: "will-verb" },
    {
      match: "(will && @isTitleCase) #ProperNoun",
      tag: "Person",
      reason: "will-name",
    },
    {
      match: "(#FirstName && !#Possessive) [#Singular] #Verb",
      group: 0,
      safe: !0,
      tag: "LastName",
      reason: "jack-layton",
    },
    {
      match: "^[#Singular] #Person #Verb",
      group: 0,
      safe: !0,
      tag: "Person",
      reason: "sherwood-anderson",
    },
    {
      match: "(a|an) [#Person]$",
      group: 0,
      unTag: "Person",
      reason: "a-warhol",
    },
  ],
  i0 = [
    {
      match: "#Copula (pretty|dead|full|well|sure) (#Adjective|#Noun)",
      tag: "#Copula #Adverb #Adjective",
      reason: "sometimes-adverb",
    },
    {
      match: "(#Pronoun|#Person) (had|#Adverb)? [better] #PresentTense",
      group: 0,
      tag: "Modal",
      reason: "i-better",
    },
    {
      match: "(#Modal|i|they|we|do) not? [like]",
      group: 0,
      tag: "PresentTense",
      reason: "modal-like",
    },
    {
      match: "#Noun #Adverb? [left]",
      group: 0,
      tag: "PastTense",
      reason: "left-verb",
    },
    {
      match: "will #Adverb? not? #Adverb? [be] #Gerund",
      group: 0,
      tag: "Copula",
      reason: "will-be-copula",
    },
    {
      match: "will #Adverb? not? #Adverb? [be] #Adjective",
      group: 0,
      tag: "Copula",
      reason: "be-copula",
    },
    {
      match: "[march] (up|down|back|toward)",
      notIf: "#Date",
      group: 0,
      tag: "Infinitive",
      reason: "march-to",
    },
    {
      match: "#Modal [march]",
      group: 0,
      tag: "Infinitive",
      reason: "must-march",
    },
    { match: "[may] be", group: 0, tag: "Verb", reason: "may-be" },
    {
      match: "[(subject|subjects|subjected)] to",
      group: 0,
      tag: "Verb",
      reason: "subject to",
    },
    { match: "[home] to", group: 0, tag: "PresentTense", reason: "home to" },
    {
      match: "[open] #Determiner",
      group: 0,
      tag: "Infinitive",
      reason: "open-the",
    },
    {
      match: "(were|was) being [#PresentTense]",
      group: 0,
      tag: "PastTense",
      reason: "was-being",
    },
    {
      match: "(had|has|have) [been /en$/]",
      group: 0,
      tag: "Auxiliary Participle",
      reason: "had-been-broken",
    },
    {
      match: "(had|has|have) [been /ed$/]",
      group: 0,
      tag: "Auxiliary PastTense",
      reason: "had-been-smoked",
    },
    {
      match: "(had|has) #Adverb? [been] #Adverb? #PastTense",
      group: 0,
      tag: "Auxiliary",
      reason: "had-been-adj",
    },
    {
      match: "(had|has) to [#Noun] (#Determiner|#Possessive)",
      group: 0,
      tag: "Infinitive",
      reason: "had-to-noun",
    },
    {
      match: "have [#PresentTense]",
      group: 0,
      tag: "PastTense",
      notIf: "(come|gotten)",
      reason: "have-read",
    },
    {
      match: "(does|will|#Modal) that [work]",
      group: 0,
      tag: "PastTense",
      reason: "does-that-work",
    },
    {
      match: "[(sound|sounds)] #Adjective",
      group: 0,
      tag: "PresentTense",
      reason: "sounds-fun",
    },
    {
      match: "[(look|looks)] #Adjective",
      group: 0,
      tag: "PresentTense",
      reason: "looks-good",
    },
    {
      match: "[(start|starts|stop|stops|begin|begins)] #Gerund",
      group: 0,
      tag: "Verb",
      reason: "starts-thinking",
    },
    { match: "(have|had) read", tag: "Modal #PastTense", reason: "read-read" },
    {
      match: "(is|was|were) [(under|over) #PastTense]",
      group: 0,
      tag: "Adverb Adjective",
      reason: "was-under-cooked",
    },
    {
      match: "[shit] (#Determiner|#Possessive|them)",
      group: 0,
      tag: "Verb",
      reason: "swear1-verb",
    },
    {
      match: "[damn] (#Determiner|#Possessive|them)",
      group: 0,
      tag: "Verb",
      reason: "swear2-verb",
    },
    {
      match: "[fuck] (#Determiner|#Possessive|them)",
      group: 0,
      tag: "Verb",
      reason: "swear3-verb",
    },
    {
      match: "#Plural that %Noun|Verb%",
      tag: ". #Preposition #Infinitive",
      reason: "jobs-that-work",
    },
    {
      match: "[works] for me",
      group: 0,
      tag: "PresentTense",
      reason: "works-for-me",
    },
    {
      match: "as #Pronoun [please]",
      group: 0,
      tag: "Infinitive",
      reason: "as-we-please",
    },
    {
      match: "[(co|mis|de|inter|intra|pre|re|un|out|under|over|counter)] #Verb",
      group: 0,
      tag: ["Verb", "Prefix"],
      notIf: "(#Copula|#PhrasalVerb)",
      reason: "co-write",
    },
    {
      match: "#PastTense and [%Adj|Past%]",
      group: 0,
      tag: "PastTense",
      reason: "dressed-and-left",
    },
    {
      match: "[%Adj|Past%] and #PastTense",
      group: 0,
      tag: "PastTense",
      reason: "dressed-and-left",
    },
    {
      match: "#Copula #Pronoun [%Adj|Past%]",
      group: 0,
      tag: "Adjective",
      reason: "is-he-stoked",
    },
    {
      match: "to [%Noun|Verb%] #Preposition",
      group: 0,
      tag: "Infinitive",
      reason: "to-dream-of",
    },
  ],
  s0 = [
    {
      match: "will (#Adverb|not)+? [have] (#Adverb|not)+? #Verb",
      group: 0,
      tag: "Auxiliary",
      reason: "will-have-vb",
    },
    {
      match: "[#Copula] (#Adverb|not)+? (#Gerund|#PastTense)",
      group: 0,
      tag: "Auxiliary",
      reason: "copula-walking",
    },
    {
      match: "[(#Modal|did)+] (#Adverb|not)+? #Verb",
      group: 0,
      tag: "Auxiliary",
      reason: "modal-verb",
    },
    {
      match:
        "#Modal (#Adverb|not)+? [have] (#Adverb|not)+? [had] (#Adverb|not)+? #Verb",
      group: 0,
      tag: "Auxiliary",
      reason: "would-have",
    },
    {
      match: "[(has|had)] (#Adverb|not)+? #PastTense",
      group: 0,
      tag: "Auxiliary",
      reason: "had-walked",
    },
    {
      match: "[(do|does|did|will|have|had|has|got)] (not|#Adverb)+? #Verb",
      group: 0,
      tag: "Auxiliary",
      reason: "have-had",
    },
    {
      match: "[about to] #Adverb? #Verb",
      group: 0,
      tag: ["Auxiliary", "Verb"],
      reason: "about-to",
    },
    {
      match: "#Modal (#Adverb|not)+? [be] (#Adverb|not)+? #Verb",
      group: 0,
      tag: "Auxiliary",
      reason: "would-be",
    },
    {
      match: "[(#Modal|had|has)] (#Adverb|not)+? [been] (#Adverb|not)+? #Verb",
      group: 0,
      tag: "Auxiliary",
      reason: "had-been",
    },
    {
      match: "[(be|being|been)] #Participle",
      group: 0,
      tag: "Auxiliary",
      reason: "being-driven",
    },
    {
      match: "[may] #Adverb? #Infinitive",
      group: 0,
      tag: "Auxiliary",
      reason: "may-want",
    },
    {
      match: "#Copula (#Adverb|not)+? [(be|being|been)] #Adverb+? #PastTense",
      group: 0,
      tag: "Auxiliary",
      reason: "being-walked",
    },
    {
      match: "will [be] #PastTense",
      group: 0,
      tag: "Auxiliary",
      reason: "will-be-x",
    },
    {
      match: "[(be|been)] (#Adverb|not)+? #Gerund",
      group: 0,
      tag: "Auxiliary",
      reason: "been-walking",
    },
    {
      match: "[used to] #PresentTense",
      group: 0,
      tag: "Auxiliary",
      reason: "used-to-walk",
    },
    {
      match: "#Copula (#Adverb|not)+? [going to] #Adverb+? #PresentTense",
      group: 0,
      tag: "Auxiliary",
      reason: "going-to-walk",
    },
    {
      match: "#Imperative [(me|him|her)]",
      group: 0,
      tag: "Reflexive",
      reason: "tell-him",
    },
    {
      match: "(is|was) #Adverb? [no]",
      group: 0,
      tag: "Negative",
      reason: "is-no",
    },
    {
      match: "[(been|had|became|came)] #PastTense",
      group: 0,
      notIf: "#PhrasalVerb",
      tag: "Auxiliary",
      reason: "been-told",
    },
    {
      match: "[(being|having|getting)] #Verb",
      group: 0,
      tag: "Auxiliary",
      reason: "being-born",
    },
    { match: "[be] #Gerund", group: 0, tag: "Auxiliary", reason: "be-walking" },
    {
      match: "[better] #PresentTense",
      group: 0,
      tag: "Modal",
      notIf: "(#Copula|#Gerund)",
      reason: "better-go",
    },
    { match: "even better", tag: "Adverb #Comparative", reason: "even-better" },
  ],
  u0 = [
    { match: "(#Verb && @hasHyphen) up", tag: "PhrasalVerb", reason: "foo-up" },
    {
      match: "(#Verb && @hasHyphen) off",
      tag: "PhrasalVerb",
      reason: "foo-off",
    },
    {
      match: "(#Verb && @hasHyphen) over",
      tag: "PhrasalVerb",
      reason: "foo-over",
    },
    {
      match: "(#Verb && @hasHyphen) out",
      tag: "PhrasalVerb",
      reason: "foo-out",
    },
    {
      match: "[#Verb (in|out|up|down|off|back)] (on|in)",
      notIf: "#Copula",
      tag: "PhrasalVerb Particle",
      reason: "walk-in-on",
    },
    {
      match: "(lived|went|crept|go) [on] for",
      group: 0,
      tag: "PhrasalVerb",
      reason: "went-on",
    },
    {
      match: "#Verb (up|down|in|on|for)$",
      tag: "PhrasalVerb #Particle",
      notIf: "#PhrasalVerb",
      reason: "come-down$",
    },
    {
      match: "help [(stop|end|make|start)]",
      group: 0,
      tag: "Infinitive",
      reason: "help-stop",
    },
    {
      match: "#PhrasalVerb (in && #Particle) #Determiner",
      tag: "#Verb #Preposition #Determiner",
      unTag: "PhrasalVerb",
      reason: "work-in-the",
    },
    {
      match: "[(stop|start|finish|help)] #Gerund",
      group: 0,
      tag: "Infinitive",
      reason: "start-listening",
    },
    {
      match:
        "#Verb (him|her|it|us|himself|herself|itself|everything|something) [(up|down)]",
      group: 0,
      tag: "Adverb",
      reason: "phrasal-pronoun-advb",
    },
  ],
  Pu = "(i|we|they)",
  d0 = [
    {
      match: "^do not? [#Infinitive #Particle?]",
      notIf: Pu,
      group: 0,
      tag: "Imperative",
      reason: "do-eat",
    },
    {
      match: "^please do? not? [#Infinitive #Particle?]",
      group: 0,
      tag: "Imperative",
      reason: "please-go",
    },
    {
      match: "^just do? not? [#Infinitive #Particle?]",
      group: 0,
      tag: "Imperative",
      reason: "just-go",
    },
    {
      match: "^[#Infinitive] it #Comparative",
      notIf: Pu,
      group: 0,
      tag: "Imperative",
      reason: "do-it-better",
    },
    {
      match: "^[#Infinitive] it (please|now|again|plz)",
      notIf: Pu,
      group: 0,
      tag: "Imperative",
      reason: "do-it-please",
    },
    {
      match: "^[#Infinitive] (#Adjective|#Adverb)$",
      group: 0,
      tag: "Imperative",
      notIf: "(so|such|rather|enough)",
      reason: "go-quickly",
    },
    {
      match: "^[#Infinitive] (up|down|over) #Determiner",
      group: 0,
      tag: "Imperative",
      reason: "turn-down",
    },
    {
      match:
        "^[#Infinitive] (your|my|the|a|an|any|each|every|some|more|with|on)",
      group: 0,
      notIf: "like",
      tag: "Imperative",
      reason: "eat-my-shorts",
    },
    {
      match: "^[#Infinitive] (him|her|it|us|me|there)",
      group: 0,
      tag: "Imperative",
      reason: "tell-him",
    },
    {
      match: "^[#Infinitive] #Adjective #Noun$",
      group: 0,
      tag: "Imperative",
      reason: "avoid-loud-noises",
    },
    {
      match: "^[#Infinitive] (#Adjective|#Adverb)? and #Infinitive",
      group: 0,
      tag: "Imperative",
      reason: "call-and-reserve",
    },
    {
      match: "^(go|stop|wait|hurry) please?$",
      tag: "Imperative",
      reason: "go",
    },
    {
      match: "^(somebody|everybody) [#Infinitive]",
      group: 0,
      tag: "Imperative",
      reason: "somebody-call",
    },
    {
      match: "^let (us|me) [#Infinitive]",
      group: 0,
      tag: "Imperative",
      reason: "lets-leave",
    },
    {
      match: "^[(shut|close|open|start|stop|end|keep)] #Determiner #Noun",
      group: 0,
      tag: "Imperative",
      reason: "shut-the-door",
    },
    {
      match: "^[#PhrasalVerb #Particle] #Determiner #Noun",
      group: 0,
      tag: "Imperative",
      reason: "turn-off-the-light",
    },
    {
      match: "^[go] to .",
      group: 0,
      tag: "Imperative",
      reason: "go-to-toronto",
    },
    {
      match: "^#Modal you [#Infinitive]",
      group: 0,
      tag: "Imperative",
      reason: "would-you-",
    },
    {
      match: "^never [#Infinitive]",
      group: 0,
      tag: "Imperative",
      reason: "never-stop",
    },
    {
      match: "^come #Infinitive",
      tag: "Imperative",
      notIf: "on",
      reason: "come-have",
    },
    {
      match: "^come and? #Infinitive",
      tag: "Imperative . Imperative",
      notIf: "#PhrasalVerb",
      reason: "come-and-have",
    },
    { match: "^stay (out|away|back)", tag: "Imperative", reason: "stay-away" },
    {
      match: "^[(stay|be|keep)] #Adjective",
      group: 0,
      tag: "Imperative",
      reason: "stay-cool",
    },
    {
      match: "^[keep it] #Adjective",
      group: 0,
      tag: "Imperative",
      reason: "keep-it-cool",
    },
    {
      match: "^do not [#Infinitive]",
      group: 0,
      tag: "Imperative",
      reason: "do-not-be",
    },
    {
      match: "[#Infinitive] (yourself|yourselves)",
      group: 0,
      tag: "Imperative",
      reason: "allow-yourself",
    },
    {
      match: "[#Infinitive] what .",
      group: 0,
      tag: "Imperative",
      reason: "look-what",
    },
    {
      match: "^[#Infinitive] #Gerund",
      group: 0,
      tag: "Imperative",
      reason: "keep-playing",
    },
    {
      match: "^[#Infinitive] (to|for|into|toward|here|there)",
      group: 0,
      tag: "Imperative",
      reason: "go-to",
    },
    {
      match: "^[#Infinitive] (and|or) #Infinitive",
      group: 0,
      tag: "Imperative",
      reason: "inf-and-inf",
    },
    {
      match: "^[%Noun|Verb%] to",
      group: 0,
      tag: "Imperative",
      reason: "commit-to",
    },
    {
      match: "^[#Infinitive] #Adjective? #Singular #Singular",
      group: 0,
      tag: "Imperative",
      reason: "maintain-eye-contact",
    },
    {
      match: "do not (forget|omit|neglect) to [#Infinitive]",
      group: 0,
      tag: "Imperative",
      reason: "do-not-forget",
    },
    {
      match:
        "^[(ask|wear|pay|look|help|show|watch|act|fix|kill|stop|start|turn|try|win)] #Noun",
      group: 0,
      tag: "Imperative",
      reason: "pay-attention",
    },
  ],
  c0 = [
    {
      match: "(that|which) were [%Adj|Gerund%]",
      group: 0,
      tag: "Gerund",
      reason: "that-were-growing",
    },
    {
      match: "#Gerund [#Gerund] #Plural",
      group: 0,
      tag: "Adjective",
      reason: "hard-working-fam",
    },
  ],
  h0 = [
    {
      match: "(got|were|was|is|are|am) (#PastTense|#Participle)",
      tag: "Passive",
      reason: "got-walked",
    },
    {
      match: "(was|were|is|are|am) being (#PastTense|#Participle)",
      tag: "Passive",
      reason: "was-being",
    },
    {
      match: "(had|have|has) been (#PastTense|#Participle)",
      tag: "Passive",
      reason: "had-been",
    },
    {
      match: "will be being? (#PastTense|#Participle)",
      tag: "Passive",
      reason: "will-be-cleaned",
    },
    {
      match: "#Noun [(#PastTense|#Participle)] by (the|a) #Noun",
      group: 0,
      tag: "Passive",
      reason: "suffered-by",
    },
  ];
let g0 = [
  { match: "u r", tag: "#Pronoun #Copula", reason: "u r" },
  {
    match: "#Noun [(who|whom)]",
    group: 0,
    tag: "Determiner",
    reason: "captain-who",
  },
  {
    match: "[had] #Noun+ #PastTense",
    group: 0,
    tag: "Condition",
    reason: "had-he",
  },
  {
    match: "[were] #Noun+ to #Infinitive",
    group: 0,
    tag: "Condition",
    reason: "were-he",
  },
  {
    match: "some sort of",
    tag: "Adjective Noun Conjunction",
    reason: "some-sort-of",
  },
  {
    match: "of some sort",
    tag: "Conjunction Adjective Noun",
    reason: "of-some-sort",
  },
  {
    match: "[such] (a|an|is)? #Noun",
    group: 0,
    tag: "Determiner",
    reason: "such-skill",
  },
  {
    match: "[right] (before|after|in|into|to|toward)",
    group: 0,
    tag: "#Adverb",
    reason: "right-into",
  },
  {
    match: "#Preposition [about]",
    group: 0,
    tag: "Adjective",
    reason: "at-about",
  },
  {
    match: "(are|#Modal|see|do|for) [ya]",
    group: 0,
    tag: "Pronoun",
    reason: "are-ya",
  },
  {
    match: "[long live] .",
    group: 0,
    tag: "#Adjective #Infinitive",
    reason: "long-live",
  },
  { match: "[plenty] of", group: 0, tag: "#Uncountable", reason: "plenty-of" },
  {
    match: "(always|nearly|barely|practically) [there]",
    group: 0,
    tag: "Adjective",
    reason: "always-there",
  },
  {
    match: "[there] (#Adverb|#Pronoun)? #Copula",
    group: 0,
    tag: "There",
    reason: "there-is",
  },
  { match: "#Copula [there] .", group: 0, tag: "There", reason: "is-there" },
  {
    match: "#Modal #Adverb? [there]",
    group: 0,
    tag: "There",
    reason: "should-there",
  },
  {
    match: "^[do] (you|we|they)",
    group: 0,
    tag: "QuestionWord",
    reason: "do-you",
  },
  {
    match: "^[does] (he|she|it|#ProperNoun)",
    group: 0,
    tag: "QuestionWord",
    reason: "does-he",
  },
  {
    match: "#Determiner #Noun+ [who] #Verb",
    group: 0,
    tag: "Preposition",
    reason: "the-x-who",
  },
  {
    match: "#Determiner #Noun+ [which] #Verb",
    group: 0,
    tag: "Preposition",
    reason: "the-x-which",
  },
  { match: "a [while]", group: 0, tag: "Noun", reason: "a-while" },
  { match: "guess who", tag: "#Infinitive #QuestionWord", reason: "guess-who" },
  {
    match: "[fucking] !#Verb",
    group: 0,
    tag: "#Gerund",
    reason: "f-as-gerund",
  },
];
const m0 = [
    {
      match: "university of #Place",
      tag: "Organization",
      reason: "university-of-Foo",
    },
    { match: "#Noun (&|n) #Noun", tag: "Organization", reason: "Noun-&-Noun" },
    {
      match: "#Organization of the? #ProperNoun",
      tag: "Organization",
      reason: "org-of-place",
      safe: !0,
    },
    {
      match: "#Organization #Country",
      tag: "Organization",
      reason: "org-country",
    },
    {
      match: "#ProperNoun #Organization",
      tag: "Organization",
      notIf: "#FirstName",
      reason: "titlecase-org",
    },
    {
      match: "#ProperNoun (ltd|co|inc|dept|assn|bros)",
      tag: "Organization",
      reason: "org-abbrv",
    },
    {
      match: "the [#Acronym]",
      group: 0,
      tag: "Organization",
      reason: "the-acronym",
      safe: !0,
    },
    {
      match: "government of the? [#Place+]",
      tag: "Organization",
      reason: "government-of-x",
    },
    {
      match: "(health|school|commerce) board",
      tag: "Organization",
      reason: "school-board",
    },
    {
      match:
        "(nominating|special|conference|executive|steering|central|congressional) committee",
      tag: "Organization",
      reason: "special-comittee",
    },
    {
      match: "(world|global|international|national|#Demonym) #Organization",
      tag: "Organization",
      reason: "global-org",
    },
    {
      match: "#Noun+ (public|private) school",
      tag: "School",
      reason: "noun-public-school",
    },
    {
      match: "#Place+ #SportsTeam",
      tag: "SportsTeam",
      reason: "place-sportsteam",
    },
    {
      match: "(dc|atlanta|minnesota|manchester|newcastle|sheffield) united",
      tag: "SportsTeam",
      reason: "united-sportsteam",
    },
    { match: "#Place+ fc", tag: "SportsTeam", reason: "fc-sportsteam" },
    {
      match:
        "#Place+ #Noun{0,2} (club|society|group|team|committee|commission|association|guild|crew)",
      tag: "Organization",
      reason: "place-noun-society",
    },
  ],
  p0 = [
    {
      match:
        "(west|north|south|east|western|northern|southern|eastern)+ #Place",
      tag: "Region",
      reason: "west-norfolk",
    },
    {
      match:
        "#City [(al|ak|az|ar|ca|ct|dc|fl|ga|id|il|nv|nh|nj|ny|oh|pa|sc|tn|tx|ut|vt|pr)]",
      group: 0,
      tag: "Region",
      reason: "us-state",
    },
    { match: "portland [or]", group: 0, tag: "Region", reason: "portland-or" },
    {
      match:
        "#ProperNoun+ (cliff|place|range|pit|place|point|room|grounds|ruins)",
      tag: "Place",
      reason: "foo-point",
    },
    {
      match: "in [#ProperNoun] #Place",
      group: 0,
      tag: "Place",
      reason: "propernoun-place",
    },
    {
      match:
        "#Value #Noun (st|street|rd|road|crescent|cr|way|tr|terrace|avenue|ave)",
      tag: "Address",
      reason: "address-st",
    },
    { match: "(port|mount|mt) #ProperName", tag: "Place", reason: "port-name" },
  ],
  y0 = [
    { match: "[so] #Noun", group: 0, tag: "Conjunction", reason: "so-conj" },
    {
      match:
        "[(who|what|where|why|how|when)] #Noun #Copula #Adverb? (#Verb|#Adjective)",
      group: 0,
      tag: "Conjunction",
      reason: "how-he-is-x",
    },
    {
      match: "#Copula [(who|what|where|why|how|when)] #Noun",
      group: 0,
      tag: "Conjunction",
      reason: "when-he",
    },
    {
      match: "#Verb [that] #Pronoun",
      group: 0,
      tag: "Conjunction",
      reason: "said-that-he",
    },
    {
      match: "#Noun [that] #Copula",
      group: 0,
      tag: "Conjunction",
      reason: "that-are",
    },
    {
      match: "#Noun [that] #Verb #Adjective",
      group: 0,
      tag: "Conjunction",
      reason: "that-seem",
    },
    {
      match: "#Noun #Copula not? [that] #Adjective",
      group: 0,
      tag: "Adverb",
      reason: "that-adj",
    },
    {
      match: "#Verb #Adverb? #Noun [(that|which)]",
      group: 0,
      tag: "Preposition",
      reason: "that-prep",
    },
    {
      match: "@hasComma [which] (#Pronoun|#Verb)",
      group: 0,
      tag: "Preposition",
      reason: "which-copula",
    },
    {
      match: "#Noun [like] #Noun",
      group: 0,
      tag: "Preposition",
      reason: "noun-like",
    },
    {
      match: "^[like] #Determiner",
      group: 0,
      tag: "Preposition",
      reason: "like-the",
    },
    {
      match: "a #Noun [like] (#Noun|#Determiner)",
      group: 0,
      tag: "Preposition",
      reason: "a-noun-like",
    },
    { match: "#Adverb [like]", group: 0, tag: "Verb", reason: "really-like" },
    {
      match: "(not|nothing|never) [like]",
      group: 0,
      tag: "Preposition",
      reason: "nothing-like",
    },
    {
      match: "#Infinitive #Pronoun [like]",
      group: 0,
      tag: "Preposition",
      reason: "treat-them-like",
    },
    {
      match: "[#QuestionWord] (#Pronoun|#Determiner)",
      group: 0,
      tag: "Preposition",
      reason: "how-he",
    },
    {
      match: "[#QuestionWord] #Participle",
      group: 0,
      tag: "Preposition",
      reason: "when-stolen",
    },
    {
      match: "[how] (#Determiner|#Copula|#Modal|#PastTense)",
      group: 0,
      tag: "QuestionWord",
      reason: "how-is",
    },
    {
      match: "#Plural [(who|which|when)] .",
      group: 0,
      tag: "Preposition",
      reason: "people-who",
    },
  ],
  f0 = [
    {
      match: "holy (shit|fuck|hell)",
      tag: "Expression",
      reason: "swears-expression",
    },
    {
      match: "^[(well|so|okay|now)] !#Adjective?",
      group: 0,
      tag: "Expression",
      reason: "well-",
    },
    { match: "^come on", tag: "Expression", reason: "come-on" },
    {
      match: "(say|says|said) [sorry]",
      group: 0,
      tag: "Expression",
      reason: "say-sorry",
    },
    {
      match: "^(ok|alright|shoot|hell|anyways)",
      tag: "Expression",
      reason: "ok-",
    },
    { match: "^(say && @hasComma)", tag: "Expression", reason: "say-" },
    { match: "^(like && @hasComma)", tag: "Expression", reason: "like-" },
    {
      match: "^[(dude|man|girl)] #Pronoun",
      group: 0,
      tag: "Expression",
      reason: "dude-i",
    },
  ];
let v0 = [].concat(
  h0,
  KL,
  zL,
  jL,
  $L,
  qL,
  QL,
  YL,
  XL,
  e0,
  n0,
  a0,
  o0,
  r0,
  t0,
  l0,
  i0,
  UL,
  s0,
  u0,
  d0,
  c0,
  g0,
  m0,
  p0,
  y0,
  f0
);
const C0 = { two: { matches: v0 } };
let Hu = null;
const k0 = function (e) {
    const { world: n } = e,
      { model: o, methods: t } = n;
    Hu = Hu || t.one.buildNet(o.two.matches, n);
    let s = t.two.quickSplit(e.document).map((g) => {
        let m = g[0];
        return [m.index[0], m.index[1], m.index[1] + g.length];
      }),
      d = e.update(s);
    return d.cache(), d.sweep(Hu), e.uncache(), e.unfreeze(), e;
  },
  w0 = (e) =>
    e.compute(["freeze", "lexicon", "preTagger", "postTagger", "unfreeze"]),
  S0 = { postTagger: k0, tagger: w0 },
  b0 = (e) => Math.round(e * 100) / 100;
function M0(e) {
  (e.prototype.confidence = function () {
    let n = 0,
      o = 0;
    return (
      this.docs.forEach((t) => {
        t.forEach((l) => {
          (o += 1), (n += l.confidence || 1);
        });
      }),
      o === 0 ? 1 : b0(n / o)
    );
  }),
    (e.prototype.tagger = function () {
      return this.compute(["tagger"]);
    });
}
const B0 = { api: M0, compute: S0, model: C0, hooks: ["postTagger"] },
  P0 = function (e) {
    return Object.keys(e.hooks).filter(
      (n) => !n.startsWith("#") && !n.startsWith("%")
    );
  },
  H0 = function (e, n) {
    let o = P0(n);
    if (o.length === 0) return e;
    e._cache || e.cache();
    let t = e._cache;
    return e.filter((l, s) => o.some((d) => t[s].has(d)));
  },
  L0 = function (e, n) {
    let o = n;
    typeof n == "string" && (o = this.buildNet([{ match: n }]));
    let t = this.tokenize(e),
      l = H0(t, o);
    return l.found ? (l.compute(["index", "tagger"]), l.match(n)) : t.none();
  },
  W0 = { lib: { lazy: L0 } },
  A0 = function (e, n) {
    const o = e.methods.two.transform.verb.conjugate;
    let t = o(n, e.model);
    return e.has("#Gerund")
      ? t.Gerund
      : e.has("#PastTense")
      ? t.PastTense
      : e.has("#PresentTense")
      ? t.PresentTense
      : e.has("#Gerund")
      ? t.Gerund
      : n;
  },
  G0 = function (e, n) {
    let o = n;
    return (
      e.forEach((t) => {
        t.has("#Infinitive") || (o = A0(t, n)), t.replaceWith(o);
      }),
      e
    );
  },
  R0 = function (e, n) {
    let o = n;
    if (e.has("#Plural")) {
      const t = e.methods.two.transform.noun.toPlural;
      o = t(n, e.model);
    }
    e.replaceWith(o, { possessives: !0 });
  },
  N0 = function (e, n) {
    const { toAdverb: o } = e.methods.two.transform.adjective;
    let l = o(n);
    l && e.replaceWith(l);
  },
  E0 = function (e, n) {
    const { toComparative: o, toSuperlative: t } =
      e.methods.two.transform.adjective;
    let l = n;
    e.has("#Comparative")
      ? (l = o(l, e.model))
      : e.has("#Superlative") && (l = t(l, e.model)),
      l && e.replaceWith(l);
  },
  F0 = function (e, n, o) {
    let t = e.split(/ /g).map((s) => s.toLowerCase().trim());
    (t = t.filter((s) => s)), (t = t.map((s) => `{${s}}`).join(" "));
    let l = this.match(t);
    return (
      o && (l = l.if(o)),
      l.has("#Verb")
        ? G0(l, n)
        : l.has("#Noun")
        ? R0(l, n)
        : l.has("#Adverb")
        ? N0(l, n)
        : l.has("#Adjective")
        ? E0(l, n)
        : this
    );
  },
  D0 = function (e) {
    e.prototype.swap = F0;
  },
  T0 = { api: D0 };
Q.plugin(hL);
Q.plugin(_L);
Q.plugin(B0);
Q.plugin(W0);
Q.plugin(T0);
const vr = function (e) {
    const { fromComparative: n, fromSuperlative: o } =
      e.methods.two.transform.adjective;
    let t = e.text("normal");
    return e.has("#Comparative")
      ? n(t, e.model)
      : e.has("#Superlative")
      ? o(t, e.model)
      : t;
  },
  O0 = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Adjectives");
      }
      json(t = {}) {
        const {
          toAdverb: l,
          toNoun: s,
          toSuperlative: d,
          toComparative: g,
        } = this.methods.two.transform.adjective;
        return (
          (t.normal = !0),
          this.map((m) => {
            let y = m.toView().json(t)[0] || {},
              f = vr(m);
            return (
              (y.adjective = {
                adverb: l(f, this.model),
                noun: s(f, this.model),
                superlative: d(f, this.model),
                comparative: g(f, this.model),
              }),
              y
            );
          }, [])
        );
      }
      adverbs() {
        return this.before("#Adverb+$").concat(this.after("^#Adverb+"));
      }
      conjugate(t) {
        const {
          toComparative: l,
          toSuperlative: s,
          toNoun: d,
          toAdverb: g,
        } = this.methods.two.transform.adjective;
        return this.getNth(t).map((m) => {
          let y = vr(m);
          return {
            Adjective: y,
            Comparative: l(y, this.model),
            Superlative: s(y, this.model),
            Noun: d(y, this.model),
            Adverb: g(y, this.model),
          };
        }, []);
      }
      toComparative(t) {
        const { toComparative: l } = this.methods.two.transform.adjective;
        return this.getNth(t).map((s) => {
          let d = vr(s),
            g = l(d, this.model);
          return s.replaceWith(g);
        });
      }
      toSuperlative(t) {
        const { toSuperlative: l } = this.methods.two.transform.adjective;
        return this.getNth(t).map((s) => {
          let d = vr(s),
            g = l(d, this.model);
          return s.replaceWith(g);
        });
      }
      toAdverb(t) {
        const { toAdverb: l } = this.methods.two.transform.adjective;
        return this.getNth(t).map((s) => {
          let d = vr(s),
            g = l(d, this.model);
          return s.replaceWith(g);
        });
      }
      toNoun(t) {
        const { toNoun: l } = this.methods.two.transform.adjective;
        return this.getNth(t).map((s) => {
          let d = vr(s),
            g = l(d, this.model);
          return s.replaceWith(g);
        });
      }
    }
    (e.prototype.adjectives = function (o) {
      let t = this.match("#Adjective");
      return (t = t.getNth(o)), new n(t.document, t.pointer);
    }),
      (e.prototype.superlatives = function (o) {
        let t = this.match("#Superlative");
        return (t = t.getNth(o)), new n(t.document, t.pointer);
      }),
      (e.prototype.comparatives = function (o) {
        let t = this.match("#Comparative");
        return (t = t.getNth(o)), new n(t.document, t.pointer);
      });
  },
  x0 = { api: O0 },
  V0 = function (e) {
    return e.compute("root").text("root");
  },
  I0 = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Adverbs");
      }
      conjugate(t) {
        return this.getNth(t).map((l) => {
          let s = V0(l);
          return { Adverb: l.text("normal"), Adjective: s };
        }, []);
      }
      json(t = {}) {
        const l = this.methods.two.transform.adjective.fromAdverb;
        return (
          (t.normal = !0),
          this.map((s) => {
            let d = s.toView().json(t)[0] || {};
            return (d.adverb = { adjective: l(d.normal) }), d;
          }, [])
        );
      }
    }
    e.prototype.adverbs = function (o) {
      let t = this.match("#Adverb");
      return (t = t.getNth(o)), new n(t.document, t.pointer);
    };
  },
  _0 = { api: I0 },
  K0 = function (e) {
    let n = e.match("@hasComma");
    return (
      (n = n.filter((o) => {
        if (
          o.growLeft(".").wordCount() === 1 ||
          o.growRight(". .").wordCount() === 1
        )
          return !1;
        let t = o.grow(".");
        return (
          (t = t.ifNo("@hasComma @hasComma")),
          (t = t.ifNo("@hasComma (and|or) .")),
          (t = t.ifNo("(#City && @hasComma) #Country")),
          (t = t.ifNo("(#WeekDay && @hasComma) #Date")),
          (t = t.ifNo("(#Date+ && @hasComma) #Value")),
          (t = t.ifNo("(#Adjective && @hasComma) #Adjective")),
          t.found
        );
      })),
      e.splitAfter(n)
    );
  },
  J0 = function (e) {
    let n = e.parentheses();
    return (
      (n = n.filter(
        (o) => o.wordCount() >= 3 && o.has("#Verb") && o.has("#Noun")
      )),
      e.splitOn(n)
    );
  },
  z0 = function (e) {
    let n = e.quotations();
    return (
      (n = n.filter(
        (o) => o.wordCount() >= 3 && o.has("#Verb") && o.has("#Noun")
      )),
      e.splitOn(n)
    );
  },
  j0 = function (e) {
    let n = this;
    (n = J0(n)),
      (n = z0(n)),
      (n = K0(n)),
      (n = n.splitAfter("(@hasEllipses|@hasSemicolon|@hasDash|@hasColon)")),
      (n = n.splitAfter("^#Pronoun (said|says)")),
      (n = n.splitBefore("(said|says) #ProperNoun$")),
      (n = n.splitBefore(". . if .{4}")),
      (n = n.splitBefore("and while")),
      (n = n.splitBefore("now that")),
      (n = n.splitBefore("ever since")),
      (n = n.splitBefore("(supposing|although)")),
      (n = n.splitBefore("even (while|if|though)")),
      (n = n.splitBefore("(whereas|whose)")),
      (n = n.splitBefore("as (though|if)")),
      (n = n.splitBefore("(til|until)"));
    let o = n.match("#Verb .* [but] .* #Verb", 0);
    o.found && (n = n.splitBefore(o));
    let t = n.if("if .{2,9} then .").match("then");
    return (n = n.splitBefore(t)), typeof e == "number" && (n = n.get(e)), n;
  },
  $0 = function (e) {
    let n = [],
      o = null;
    return (
      e.clauses().docs.forEach((s) => {
        s.forEach((d) => {
          !d.chunk || d.chunk !== o
            ? ((o = d.chunk), n.push([d.index[0], d.index[1], d.index[1] + 1]))
            : (n[n.length - 1][2] = d.index[1] + 1);
        }),
          (o = null);
      }),
      e.update(n)
    );
  },
  U0 = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Chunks");
      }
      isVerb() {
        return this.filter((t) => t.has("<Verb>"));
      }
      isNoun() {
        return this.filter((t) => t.has("<Noun>"));
      }
      isAdjective() {
        return this.filter((t) => t.has("<Adjective>"));
      }
      isPivot() {
        return this.filter((t) => t.has("<Pivot>"));
      }
      debug() {
        return this.toView().debug("chunks"), this;
      }
      update(t) {
        let l = new n(this.document, t);
        return (l._cache = this._cache), l;
      }
    }
    (e.prototype.chunks = function (o) {
      let t = $0(this);
      return (t = t.getNth(o)), new n(this.document, t.pointer);
    }),
      (e.prototype.clauses = j0);
  },
  ip = { this: "Noun", then: "Pivot" },
  q0 = function (e) {
    for (let n = 0; n < e.length; n += 1)
      for (let o = 0; o < e[n].length; o += 1) {
        let t = e[n][o];
        if (ip.hasOwnProperty(t.normal) === !0) {
          t.chunk = ip[t.normal];
          continue;
        }
        if (t.tags.has("Verb")) {
          t.chunk = "Verb";
          continue;
        }
        if (t.tags.has("Noun") || t.tags.has("Determiner")) {
          t.chunk = "Noun";
          continue;
        }
        if (t.tags.has("Value")) {
          t.chunk = "Noun";
          continue;
        }
        if (t.tags.has("QuestionWord")) {
          t.chunk = "Pivot";
          continue;
        }
      }
  },
  Y0 = function (e) {
    for (let n = 0; n < e.length; n += 1)
      for (let o = 0; o < e[n].length; o += 1) {
        let t = e[n][o];
        if (t.chunk) continue;
        let l = e[n][o + 1],
          s = e[n][o - 1];
        if (t.tags.has("Adjective")) {
          if (s && s.tags.has("Copula")) {
            t.chunk = "Adjective";
            continue;
          }
          if (s && s.tags.has("Determiner")) {
            t.chunk = "Noun";
            continue;
          }
          if (l && l.tags.has("Noun")) {
            t.chunk = "Noun";
            continue;
          }
          continue;
        }
        if (t.tags.has("Adverb") || t.tags.has("Negative")) {
          if (s && s.tags.has("Adjective")) {
            t.chunk = "Adjective";
            continue;
          }
          if (s && s.tags.has("Verb")) {
            t.chunk = "Verb";
            continue;
          }
          if (l && l.tags.has("Adjective")) {
            t.chunk = "Adjective";
            continue;
          }
          if (l && l.tags.has("Verb")) {
            t.chunk = "Verb";
            continue;
          }
        }
      }
  },
  Q0 = [
    { match: "[that] #Determiner #Noun", group: 0, chunk: "Pivot" },
    { match: "#PastTense [that]", group: 0, chunk: "Pivot" },
    { match: "[so] #Determiner", group: 0, chunk: "Pivot" },
    { match: "#Copula #Adverb+? [#Adjective]", group: 0, chunk: "Adjective" },
    { match: "#Adjective and #Adjective", chunk: "Adjective" },
    { match: "#Adverb+ and #Adverb #Verb", chunk: "Verb" },
    { match: "#Gerund #Adjective$", chunk: "Verb" },
    { match: "#Gerund to #Verb", chunk: "Verb" },
    { match: "#PresentTense and #PresentTense", chunk: "Verb" },
    { match: "#Adverb #Negative", chunk: "Verb" },
    { match: "(want|wants|wanted) to #Infinitive", chunk: "Verb" },
    { match: "#Verb #Reflexive", chunk: "Verb" },
    { match: "#Verb [to] #Adverb? #Infinitive", group: 0, chunk: "Verb" },
    { match: "[#Preposition] #Gerund", group: 0, chunk: "Verb" },
    { match: "#Infinitive [that] <Noun>", group: 0, chunk: "Verb" },
    { match: "#Noun of #Determiner? #Noun", chunk: "Noun" },
    { match: "#Value+ #Adverb? #Adjective", chunk: "Noun" },
    { match: "the [#Adjective] #Noun", chunk: "Noun" },
    { match: "#Singular in #Determiner? #Singular", chunk: "Noun" },
    { match: "#Plural [in] #Determiner? #Noun", group: 0, chunk: "Pivot" },
    {
      match: "#Noun and #Determiner? #Noun",
      notIf: "(#Possessive|#Pronoun)",
      chunk: "Noun",
    },
  ];
let Lu = null;
const Z0 = function (e, n, o) {
  const { methods: t } = o;
  (Lu = Lu || t.one.buildNet(Q0, o)), e.sweep(Lu);
};
var sp = {};
const Wu = function (e, n) {
    if (
      (typeof process == "undefined" || !sp ? self.env || {} : sp).DEBUG_CHUNKS
    ) {
      let t = (e.normal + "'").padEnd(8);
      console.log(
        `  | '${t}  →  \x1B[34m${n.padEnd(
          12
        )}\x1B[0m \x1B[2m -fallback- \x1B[0m`
      );
    }
    e.chunk = n;
  },
  X0 = function (e) {
    for (let n = 0; n < e.length; n += 1)
      for (let o = 0; o < e[n].length; o += 1) {
        let t = e[n][o];
        t.chunk === void 0 &&
          (t.tags.has("Conjunction") || t.tags.has("Preposition")
            ? Wu(t, "Pivot")
            : t.tags.has("Adverb")
            ? Wu(t, "Verb")
            : (t.chunk = "Noun"));
      }
  },
  eW = function (e) {
    let n = [],
      o = null;
    e.forEach((t) => {
      for (let l = 0; l < t.length; l += 1) {
        let s = t[l];
        o && s.chunk === o
          ? n[n.length - 1].terms.push(s)
          : (n.push({ chunk: s.chunk, terms: [s] }), (o = s.chunk));
      }
    }),
      n.forEach((t) => {
        t.chunk === "Verb" &&
          (t.terms.find((s) => s.tags.has("Verb")) ||
            t.terms.forEach((s) => (s.chunk = null)));
      });
  },
  nW = function (e) {
    const { document: n, world: o } = e;
    q0(n), Y0(n), Z0(e, n, o), X0(n), eW(n);
  },
  aW = { chunks: nW },
  oW = { compute: aW, api: U0, hooks: ["chunks"] },
  ni = /\./g,
  rW = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Acronyms");
      }
      strip() {
        return (
          this.docs.forEach((t) => {
            t.forEach((l) => {
              (l.text = l.text.replace(ni, "")),
                (l.normal = l.normal.replace(ni, ""));
            });
          }),
          this
        );
      }
      addPeriods() {
        return (
          this.docs.forEach((t) => {
            t.forEach((l) => {
              (l.text = l.text.replace(ni, "")),
                (l.normal = l.normal.replace(ni, "")),
                (l.text = l.text.split("").join(".") + "."),
                (l.normal = l.normal.split("").join(".") + ".");
            });
          }),
          this
        );
      }
    }
    e.prototype.acronyms = function (o) {
      let t = this.match("#Acronym");
      return (t = t.getNth(o)), new n(t.document, t.pointer);
    };
  },
  xy = /\(/,
  Vy = /\)/,
  tW = function (e, n) {
    for (; n < e.length; n += 1)
      if (e[n].post && Vy.test(e[n].post)) {
        let [, o] = e[n].index;
        return (o = o || 0), o;
      }
    return null;
  },
  lW = function (e) {
    let n = [];
    return (
      e.docs.forEach((o) => {
        for (let t = 0; t < o.length; t += 1) {
          let l = o[t];
          if (l.pre && xy.test(l.pre)) {
            let s = tW(o, t);
            if (s !== null) {
              let [d, g] = o[t].index;
              n.push([d, g, s + 1, o[t].id]), (t = s);
            }
          }
        }
      }),
      e.update(n)
    );
  },
  iW = function (e) {
    return (
      e.docs.forEach((n) => {
        n[0].pre = n[0].pre.replace(xy, "");
        let o = n[n.length - 1];
        o.post = o.post.replace(Vy, "");
      }),
      e
    );
  },
  sW = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Possessives");
      }
      strip() {
        return iW(this);
      }
    }
    e.prototype.parentheses = function (o) {
      let t = lW(this);
      return (t = t.getNth(o)), new n(t.document, t.pointer);
    };
  },
  up = /'s$/,
  uW = function (e) {
    let n = e.match("#Possessive+");
    return (
      n.has("#Person") && (n = n.growLeft("#Person+")),
      n.has("#Place") && (n = n.growLeft("#Place+")),
      n.has("#Organization") && (n = n.growLeft("#Organization+")),
      n
    );
  },
  dW = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Possessives");
      }
      strip() {
        return (
          this.docs.forEach((t) => {
            t.forEach((l) => {
              (l.text = l.text.replace(up, "")),
                (l.normal = l.normal.replace(up, ""));
            });
          }),
          this
        );
      }
    }
    e.prototype.possessives = function (o) {
      let t = uW(this);
      return (t = t.getNth(o)), new n(t.document, t.pointer);
    };
  },
  gi = {
    '"': '"',
    "＂": "＂",
    "'": "'",
    "“": "”",
    "‘": "’",
    "‟": "”",
    "‛": "’",
    "„": "”",
    "⹂": "”",
    "‚": "’",
    "«": "»",
    "‹": "›",
    "‵": "′",
    "‶": "″",
    "‷": "‴",
    "〝": "〞",
    "`": "´",
    "〟": "〞",
  },
  Sd = RegExp("[" + Object.keys(gi).join("") + "]"),
  cW = RegExp("[" + Object.values(gi).join("") + "]"),
  hW = function (e, n) {
    const o = e[n].pre.match(Sd)[0] || "";
    if (!o || !gi[o]) return null;
    const t = gi[o];
    for (; n < e.length; n += 1) if (e[n].post && e[n].post.match(t)) return n;
    return null;
  },
  gW = function (e) {
    let n = [];
    return (
      e.docs.forEach((o) => {
        for (let t = 0; t < o.length; t += 1) {
          let l = o[t];
          if (l.pre && Sd.test(l.pre)) {
            let s = hW(o, t);
            if (s !== null) {
              let [d, g] = o[t].index;
              n.push([d, g, s + 1, o[t].id]), (t = s);
            }
          }
        }
      }),
      e.update(n)
    );
  },
  mW = function (e) {
    e.docs.forEach((n) => {
      n[0].pre = n[0].pre.replace(Sd, "");
      let o = n[n.length - 1];
      o.post = o.post.replace(cW, "");
    });
  },
  pW = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Possessives");
      }
      strip() {
        return mW(this);
      }
    }
    e.prototype.quotations = function (o) {
      let t = gW(this);
      return (t = t.getNth(o)), new n(t.document, t.pointer);
    };
  },
  yW = function (e) {
    let n = this.splitAfter("@hasComma");
    return (n = n.match("#PhoneNumber+")), (n = n.getNth(e)), n;
  },
  fW = [
    ["hyphenated", "@hasHyphen ."],
    ["hashTags", "#HashTag"],
    ["emails", "#Email"],
    ["emoji", "#Emoji"],
    ["emoticons", "#Emoticon"],
    ["atMentions", "#AtMention"],
    ["urls", "#Url"],
    ["conjunctions", "#Conjunction"],
    ["prepositions", "#Preposition"],
    ["abbreviations", "#Abbreviation"],
    ["honorifics", "#Honorific"],
  ];
let vW = [
  ["emojis", "emoji"],
  ["atmentions", "atMentions"],
];
const CW = function (e) {
    fW.forEach((n) => {
      e.prototype[n[0]] = function (o) {
        let t = this.match(n[1]);
        return typeof o == "number" ? t.get(o) : t;
      };
    }),
      (e.prototype.phoneNumbers = yW),
      vW.forEach((n) => {
        e.prototype[n[0]] = e.prototype[n[1]];
      });
  },
  kW = /\//,
  wW = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Slashes");
      }
      split() {
        return this.map((t) => {
          let s = t.text().split(kW);
          return (
            (t = t.replaceWith(s.join(" "))),
            t.growRight("(" + s.join("|") + ")+")
          );
        });
      }
    }
    e.prototype.slashes = function (o) {
      let t = this.match("#SlashedTerm");
      return (t = t.getNth(o)), new n(t.document, t.pointer);
    };
  },
  SW = {
    api: function (e) {
      rW(e), sW(e), dW(e), pW(e), CW(e), wW(e);
    },
  },
  ai = function (e, n) {
    e.docs.forEach((o) => {
      o.forEach(n);
    });
  },
  dp = {
    case: (e) => {
      ai(e, (n) => {
        n.text = n.text.toLowerCase();
      });
    },
    unicode: (e) => {
      const n = e.world,
        o = n.methods.one.killUnicode;
      ai(e, (t) => (t.text = o(t.text, n)));
    },
    whitespace: (e) => {
      ai(e, (n) => {
        (n.post = n.post.replace(/\s+/g, " ")),
          (n.post = n.post.replace(/\s([.,?!:;])/g, "$1")),
          (n.pre = n.pre.replace(/\s+/g, ""));
      });
    },
    punctuation: (e) => {
      ai(e, (t) => {
        (t.post = t.post.replace(/[–—-]/g, " ")),
          (t.post = t.post.replace(/[,:;]/g, "")),
          (t.post = t.post.replace(/\.{2,}/g, "")),
          (t.post = t.post.replace(/\?{2,}/g, "?")),
          (t.post = t.post.replace(/!{2,}/g, "!")),
          (t.post = t.post.replace(/\?!+/g, "?"));
      });
      let n = e.docs,
        o = n[n.length - 1];
      if (o && o.length > 0) {
        let t = o[o.length - 1];
        t.post = t.post.replace(/ /g, "");
      }
    },
    contractions: (e) => {
      e.contractions().expand();
    },
    acronyms: (e) => {
      e.acronyms().strip();
    },
    parentheses: (e) => {
      e.parentheses().strip();
    },
    possessives: (e) => {
      e.possessives().strip();
    },
    quotations: (e) => {
      e.quotations().strip();
    },
    emoji: (e) => {
      e.emojis().remove();
    },
    honorifics: (e) => {
      e.match("#Honorific+ #Person").honorifics().remove();
    },
    adverbs: (e) => {
      e.adverbs().remove();
    },
    nouns: (e) => {
      e.nouns().toSingular();
    },
    verbs: (e) => {
      e.verbs().toInfinitive();
    },
    numbers: (e) => {
      e.numbers().toNumber();
    },
    debullet: (e) => {
      const n = /^\s*([-–—*•])\s*$/;
      return (
        e.docs.forEach((o) => {
          n.test(o[0].pre) && (o[0].pre = o[0].pre.replace(n, ""));
        }),
        e
      );
    },
  },
  Au = (e) => e.split("|").reduce((n, o) => ((n[o] = !0), n), {}),
  Gu = "unicode|punctuation|whitespace|acronyms",
  cp = "|case|contractions|parentheses|quotations|emoji|honorifics|debullet",
  bW = "|possessives|adverbs|nouns|verbs",
  MW = { light: Au(Gu), medium: Au(Gu + cp), heavy: Au(Gu + cp + bW) };
function BW(e) {
  e.prototype.normalize = function (n = "light") {
    return (
      typeof n == "string" && (n = MW[n]),
      Object.keys(n).forEach((o) => {
        dp.hasOwnProperty(o) && dp[o](this, n[o]);
      }),
      this
    );
  };
}
const PW = { api: BW },
  HW = function (e) {
    let n = e.clauses().match("<Noun>"),
      o = n.match("@hasComma");
    return (
      (o = o.not("#Place")),
      o.found && (n = n.splitAfter(o)),
      (n = n.splitOn("#Expression")),
      (n = n.splitOn("(he|she|we|you|they|i)")),
      (n = n.splitOn("(#Noun|#Adjective) [(he|him|she|it)]", 0)),
      (n = n.splitOn("[(he|him|she|it)] (#Determiner|#Value)", 0)),
      (n = n.splitBefore("#Noun [(the|a|an)] #Adjective? #Noun", 0)),
      (n = n.splitOn("[(here|there)] #Noun", 0)),
      (n = n.splitOn("[#Noun] (here|there)", 0)),
      (n = n.splitBefore("(our|my|their|your)")),
      (n = n.splitOn("#Noun [#Determiner]", 0)),
      (n = n.if("#Noun")),
      n
    );
  },
  hp = [
    "after",
    "although",
    "as if",
    "as long as",
    "as",
    "because",
    "before",
    "even if",
    "even though",
    "ever since",
    "if",
    "in order that",
    "provided that",
    "since",
    "so that",
    "than",
    "that",
    "though",
    "unless",
    "until",
    "what",
    "whatever",
    "when",
    "whenever",
    "where",
    "whereas",
    "wherever",
    "whether",
    "which",
    "whichever",
    "who",
    "whoever",
    "whom",
    "whomever",
    "whose",
  ],
  LW = function (e) {
    if (e.before("#Preposition$").found) return !0;
    if (!e.before().found) return !1;
    for (let o = 0; o < hp.length; o += 1) if (e.has(hp[o])) return !0;
    return !1;
  },
  WW =
    "(#Pronoun|#Place|#Value|#Person|#Uncountable|#Month|#WeekDay|#Holiday|#Possessive)",
  AW = function (e, n) {
    if (e.has("#Plural") || e.has("#Noun and #Noun") || e.has("(we|they)"))
      return !0;
    if (n.has(WW) === !0 || e.has("#Singular")) return !1;
    let o = n.text("normal");
    return o.length > 3 && o.endsWith("s") && !o.endsWith("ss");
  },
  GW = function (e) {
    let n = e.clone();
    return (
      (n = n.match("#Noun+")),
      (n = n.remove("(#Adjective|#Preposition|#Determiner|#Value)")),
      (n = n.not("#Possessive")),
      (n = n.first()),
      n.found ? n : e
    );
  },
  mo = function (e) {
    let n = GW(e);
    return {
      determiner: e.match("#Determiner").eq(0),
      adjectives: e.match("#Adjective"),
      number: e.values(),
      isPlural: AW(e, n),
      isSubordinate: LW(e),
      root: n,
    };
  },
  gp = (e) => e.text(),
  RW = (e) => e.json({ terms: !1, normal: !0 }).map((n) => n.normal),
  NW = function (e) {
    let n = null;
    if (!e.found) return n;
    let o = e.values(0);
    return o.found ? (o.parse()[0] || {}).num : n;
  },
  EW = function (e) {
    let n = mo(e);
    return {
      root: gp(n.root),
      number: NW(n.number),
      determiner: gp(n.determiner),
      adjectives: RW(n.adjectives),
      isPlural: n.isPlural,
      isSubordinate: n.isSubordinate,
    };
  },
  Iy = function (e) {
    return !e.has("^(#Uncountable|#ProperNoun|#Place|#Pronoun|#Acronym)+$");
  },
  FW = { tags: !0 },
  DW = function (e, n) {
    if (
      n.isPlural === !0 ||
      (n.root.has("#Possessive") && (n.root = n.root.possessives().strip()),
      !Iy(n.root))
    )
      return e;
    const { methods: o, model: t } = e.world,
      { toPlural: l } = o.two.transform.noun;
    let s = n.root.text({ keepPunct: !1 }),
      d = l(s, t);
    e.match(n.root).replaceWith(d, FW).tag("Plural", "toPlural"),
      n.determiner.has("(a|an)") && e.remove(n.determiner);
    let g = n.root.after("not? #Adverb+? [#Copula]", 0);
    return (
      g.found &&
        (g.has("is")
          ? e.replace(g, "are")
          : g.has("was") && e.replace(g, "were")),
      e
    );
  },
  TW = { tags: !0 },
  OW = function (e, n) {
    if (n.isPlural === !1) return e;
    const { methods: o, model: t } = e.world,
      { toSingular: l } = o.two.transform.noun;
    let s = n.root.text("normal"),
      d = l(s, t);
    return e.replace(n.root, d, TW).tag("Singular", "toPlural"), e;
  },
  xW = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Nouns");
      }
      parse(t) {
        return this.getNth(t).map(mo);
      }
      json(t) {
        let l = typeof t == "object" ? t : {};
        return this.getNth(t).map((s) => {
          let d = s.toView().json(l)[0] || {};
          return l && l.noun !== !1 && (d.noun = EW(s)), d;
        }, []);
      }
      conjugate(t) {
        const l = this.world.methods.two.transform.noun;
        return this.getNth(t).map((s) => {
          let d = mo(s),
            g = d.root.compute("root").text("root"),
            m = { Singular: g };
          return (
            Iy(d.root) && (m.Plural = l.toPlural(g, this.model)),
            m.Singular === m.Plural && delete m.Plural,
            m
          );
        }, []);
      }
      isPlural(t) {
        return this.filter((s) => mo(s).isPlural).getNth(t);
      }
      isSingular(t) {
        return this.filter((s) => !mo(s).isPlural).getNth(t);
      }
      adjectives(t) {
        let l = this.update([]);
        return (
          this.forEach((s) => {
            let d = mo(s).adjectives;
            d.found && (l = l.concat(d));
          }),
          l.getNth(t)
        );
      }
      toPlural(t) {
        return this.getNth(t).map((l) => DW(l, mo(l)));
      }
      toSingular(t) {
        return this.getNth(t).map((l) => {
          let s = mo(l);
          return OW(l, s);
        });
      }
      update(t) {
        let l = new n(this.document, t);
        return (l._cache = this._cache), l;
      }
    }
    e.prototype.nouns = function (o) {
      let t = HW(this);
      return (t = t.getNth(o)), new n(this.document, t.pointer);
    };
  },
  VW = { api: xW },
  IW = function (e, n) {
    let o = e.match("#Fraction+");
    return (
      (o = o.filter((t) => !t.lookBehind("#Value and$").found)),
      (o = o.notIf("#Value seconds")),
      o
    );
  },
  _W = (e) => {
    const n = [
      { reg: /^(minus|negative)[\s-]/i, mult: -1 },
      { reg: /^(a\s)?half[\s-](of\s)?/i, mult: 0.5 },
    ];
    for (let o = 0; o < n.length; o++)
      if (n[o].reg.test(e) === !0)
        return { amount: n[o].mult, str: e.replace(n[o].reg, "") };
    return { amount: 1, str: e };
  },
  Ve = {
    ones: {
      zeroth: 0,
      first: 1,
      second: 2,
      third: 3,
      fourth: 4,
      fifth: 5,
      sixth: 6,
      seventh: 7,
      eighth: 8,
      ninth: 9,
      zero: 0,
      one: 1,
      two: 2,
      three: 3,
      four: 4,
      five: 5,
      six: 6,
      seven: 7,
      eight: 8,
      nine: 9,
    },
    teens: {
      tenth: 10,
      eleventh: 11,
      twelfth: 12,
      thirteenth: 13,
      fourteenth: 14,
      fifteenth: 15,
      sixteenth: 16,
      seventeenth: 17,
      eighteenth: 18,
      nineteenth: 19,
      ten: 10,
      eleven: 11,
      twelve: 12,
      thirteen: 13,
      fourteen: 14,
      fifteen: 15,
      sixteen: 16,
      seventeen: 17,
      eighteen: 18,
      nineteen: 19,
    },
    tens: {
      twentieth: 20,
      thirtieth: 30,
      fortieth: 40,
      fourtieth: 40,
      fiftieth: 50,
      sixtieth: 60,
      seventieth: 70,
      eightieth: 80,
      ninetieth: 90,
      twenty: 20,
      thirty: 30,
      forty: 40,
      fourty: 40,
      fifty: 50,
      sixty: 60,
      seventy: 70,
      eighty: 80,
      ninety: 90,
    },
    multiples: {
      hundredth: 100,
      thousandth: 1e3,
      millionth: 1e6,
      billionth: 1e9,
      trillionth: 1e12,
      quadrillionth: 1e15,
      quintillionth: 1e18,
      sextillionth: 1e21,
      septillionth: 1e24,
      hundred: 100,
      thousand: 1e3,
      million: 1e6,
      billion: 1e9,
      trillion: 1e12,
      quadrillion: 1e15,
      quintillion: 1e18,
      sextillion: 1e21,
      septillion: 1e24,
      grand: 1e3,
    },
  },
  KW = (e, n) => {
    if (Ve.ones.hasOwnProperty(e)) {
      if (n.ones || n.teens) return !1;
    } else if (Ve.teens.hasOwnProperty(e)) {
      if (n.ones || n.teens || n.tens) return !1;
    } else if (Ve.tens.hasOwnProperty(e) && (n.ones || n.teens || n.tens))
      return !1;
    return !0;
  },
  JW = function (e) {
    let n = "0.";
    for (let o = 0; o < e.length; o++) {
      let t = e[o];
      if (Ve.ones.hasOwnProperty(t) === !0) n += Ve.ones[t];
      else if (Ve.teens.hasOwnProperty(t) === !0) n += Ve.teens[t];
      else if (Ve.tens.hasOwnProperty(t) === !0) n += Ve.tens[t];
      else if (/^[0-9]$/.test(t) === !0) n += t;
      else return 0;
    }
    return parseFloat(n);
  },
  zW = (e) => (
    (e = e.replace(/1st$/, "1")),
    (e = e.replace(/2nd$/, "2")),
    (e = e.replace(/3rd$/, "3")),
    (e = e.replace(/([4567890])r?th$/, "$1")),
    (e = e.replace(/^[$€¥£¢]/, "")),
    (e = e.replace(/[%$€¥£¢]$/, "")),
    (e = e.replace(/,/g, "")),
    (e = e.replace(/([0-9])([a-z\u00C0-\u00FF]{1,2})$/, "$1")),
    e
  ),
  jW = /^([0-9,. ]+)\/([0-9,. ]+)$/,
  mp = { "a few": 3, "a couple": 2, "a dozen": 12, "two dozen": 24, zero: 0 },
  oi = (e) => Object.keys(e).reduce((n, o) => ((n += e[o]), n), 0),
  od = function (e) {
    if (mp.hasOwnProperty(e) === !0) return mp[e];
    if (e === "a" || e === "an") return 1;
    const n = _W(e);
    e = n.str;
    let o = null,
      t = {},
      l = 0,
      s = !1;
    const d = e.split(/[ -]/);
    for (let g = 0; g < d.length; g++) {
      let m = d[g];
      if (((m = zW(m)), !m || m === "and")) continue;
      if (m === "-" || m === "negative") {
        s = !0;
        continue;
      }
      if (
        (m.charAt(0) === "-" && ((s = !0), (m = m.substring(1))), m === "point")
      )
        return (
          (l += oi(t)), (l += JW(d.slice(g + 1, d.length))), (l *= n.amount), l
        );
      const y = m.match(jW);
      if (y) {
        const f = parseFloat(y[1].replace(/[, ]/g, "")),
          v = parseFloat(y[2].replace(/[, ]/g, ""));
        v && (l += f / v || 0);
        continue;
      }
      if (
        (Ve.tens.hasOwnProperty(m) &&
          t.ones &&
          Object.keys(t).length === 1 &&
          ((l = t.ones * 100), (t = {})),
        KW(m, t) === !1)
      )
        return null;
      if (/^[0-9.]+$/.test(m)) t.ones = parseFloat(m);
      else if (Ve.ones.hasOwnProperty(m) === !0) t.ones = Ve.ones[m];
      else if (Ve.teens.hasOwnProperty(m) === !0) t.teens = Ve.teens[m];
      else if (Ve.tens.hasOwnProperty(m) === !0) t.tens = Ve.tens[m];
      else if (Ve.multiples.hasOwnProperty(m) === !0) {
        let f = Ve.multiples[m];
        if (f === o) return null;
        if (f === 100 && d[g + 1] !== void 0) {
          const v = d[g + 1];
          Ve.multiples[v] && ((f *= Ve.multiples[v]), (g += 1));
        }
        o === null || f < o
          ? ((l += (oi(t) || 1) * f), (o = f), (t = {}))
          : ((l += oi(t)), (o = f), (l = (l || 1) * f), (t = {}));
      }
    }
    return (
      (l += oi(t)),
      (l *= n.amount),
      (l *= s ? -1 : 1),
      l === 0 && Object.keys(t).length === 0 ? null : l
    );
  },
  pp = /s$/,
  bt = function (e) {
    let n = e.text("reduced");
    return od(n);
  };
let mi = { half: 2, halve: 2, quarter: 4 };
const $W = function (e) {
    let o = e
      .text("reduced")
      .match(/^([-+]?[0-9]+)\/([-+]?[0-9]+)(st|nd|rd|th)?s?$/);
    return o && o[1] && o[0]
      ? { numerator: Number(o[1]), denominator: Number(o[2]) }
      : null;
  },
  UW = function (e) {
    let n = e.match("[<num>#Value+] out of every? [<den>#Value+]");
    if (n.found !== !0) return null;
    let { num: o, den: t } = n.groups();
    return !o || !t || ((o = bt(o)), (t = bt(t)), !o || !t)
      ? null
      : typeof o == "number" && typeof t == "number"
      ? { numerator: o, denominator: t }
      : null;
  },
  qW = function (e) {
    let n = e.match("[<num>(#Cardinal|a)+] [<den>#Fraction+]");
    if (n.found !== !0) return null;
    let { num: o, den: t } = n.groups();
    o.has("a") ? (o = 1) : (o = bt(o));
    let l = t.text("reduced");
    return (
      pp.test(l) && ((l = l.replace(pp, "")), (t = t.replaceWith(l))),
      mi.hasOwnProperty(l) ? (t = mi[l]) : (t = bt(t)),
      typeof o == "number" && typeof t == "number"
        ? { numerator: o, denominator: t }
        : null
    );
  },
  YW = function (e) {
    let n = e.match("^#Ordinal$");
    return n.found !== !0
      ? null
      : e.lookAhead("^of .")
      ? { numerator: 1, denominator: bt(n) }
      : null;
  },
  QW = function (e) {
    let n = e.text("reduced");
    return mi.hasOwnProperty(n) ? { numerator: 1, denominator: mi[n] } : null;
  },
  ZW = (e) => {
    let n = Math.round(e * 1e3) / 1e3;
    return n === 0 && e !== 0 ? e : n;
  },
  Oa = function (e) {
    e = e.clone();
    let n = QW(e) || $W(e) || UW(e) || qW(e) || YW(e) || null;
    return (
      n !== null &&
        n.numerator &&
        n.denominator &&
        ((n.decimal = n.numerator / n.denominator),
        (n.decimal = ZW(n.decimal))),
      n
    );
  },
  bd = function (e) {
    if (e < 1e6) return String(e);
    let n;
    return (
      typeof e == "number" ? (n = e.toFixed(0)) : (n = e),
      n.indexOf("e+") === -1
        ? n
        : n
            .replace(".", "")
            .split("e+")
            .reduce(function (o, t) {
              return o + Array(t - o.length + 2).join(0);
            })
    );
  },
  ri = [
    ["ninety", 90],
    ["eighty", 80],
    ["seventy", 70],
    ["sixty", 60],
    ["fifty", 50],
    ["forty", 40],
    ["thirty", 30],
    ["twenty", 20],
  ],
  yp = [
    "",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "ten",
    "eleven",
    "twelve",
    "thirteen",
    "fourteen",
    "fifteen",
    "sixteen",
    "seventeen",
    "eighteen",
    "nineteen",
  ],
  XW = [
    [1e24, "septillion"],
    [1e20, "hundred sextillion"],
    [1e21, "sextillion"],
    [1e20, "hundred quintillion"],
    [1e18, "quintillion"],
    [1e17, "hundred quadrillion"],
    [1e15, "quadrillion"],
    [1e14, "hundred trillion"],
    [1e12, "trillion"],
    [1e11, "hundred billion"],
    [1e9, "billion"],
    [1e8, "hundred million"],
    [1e6, "million"],
    [1e5, "hundred thousand"],
    [1e3, "thousand"],
    [100, "hundred"],
    [1, "one"],
  ],
  eA = function (e) {
    let n = e,
      o = [];
    return (
      XW.forEach((t) => {
        if (e >= t[0]) {
          let l = Math.floor(n / t[0]);
          (n -= l * t[0]), l && o.push({ unit: t[1], count: l });
        }
      }),
      o
    );
  },
  nA = function (e) {
    let n = [];
    if (e > 100) return n;
    for (let o = 0; o < ri.length; o++)
      e >= ri[o][1] && ((e -= ri[o][1]), n.push(ri[o][0]));
    return yp[e] && n.push(yp[e]), n;
  },
  aA = (e) => {
    const n = [
      "zero",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
    ];
    let o = [],
      l = bd(e).match(/\.([0-9]+)/);
    if (!l || !l[0]) return o;
    o.push("point");
    let s = l[0].split("");
    for (let d = 0; d < s.length; d++) o.push(n[s[d]]);
    return o;
  },
  Mt = function (e) {
    let n = e.num;
    if (n === 0 || n === "0") return "zero";
    n > 1e21 && (n = bd(n));
    let o = [];
    n < 0 && (o.push("minus"), (n = Math.abs(n)));
    let t = eA(n);
    for (let l = 0; l < t.length; l++) {
      let s = t[l].unit;
      s === "one" && ((s = ""), o.length > 1 && o.push("and")),
        (o = o.concat(nA(t[l].count))),
        o.push(s);
    }
    return (
      (o = o.concat(aA(n))),
      (o = o.filter((l) => l)),
      o.length === 0 && (o[0] = ""),
      o.join(" ")
    );
  },
  oA = function (e) {
    if (!e.numerator || !e.denominator) return "";
    let n = Mt({ num: e.numerator }),
      o = Mt({ num: e.denominator });
    return `${n} out of ${o}`;
  },
  fp = {
    one: "first",
    two: "second",
    three: "third",
    five: "fifth",
    eight: "eighth",
    nine: "ninth",
    twelve: "twelfth",
    twenty: "twentieth",
    thirty: "thirtieth",
    forty: "fortieth",
    fourty: "fourtieth",
    fifty: "fiftieth",
    sixty: "sixtieth",
    seventy: "seventieth",
    eighty: "eightieth",
    ninety: "ninetieth",
  },
  _y = (e) => {
    let n = Mt(e).split(" "),
      o = n[n.length - 1];
    return (
      fp.hasOwnProperty(o)
        ? (n[n.length - 1] = fp[o])
        : (n[n.length - 1] = o.replace(/y$/, "i") + "th"),
      n.join(" ")
    );
  },
  rA = function (e) {
    if (!e.numerator || !e.denominator) return "";
    let n = Mt({ num: e.numerator }),
      o = _y({ num: e.denominator });
    return (
      e.denominator === 2 && (o = "half"),
      n && o ? (e.numerator !== 1 && (o += "s"), `${n} ${o}`) : ""
    );
  },
  tA = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Fractions");
      }
      parse(t) {
        return this.getNth(t).map(Oa);
      }
      get(t) {
        return this.getNth(t).map(Oa);
      }
      json(t) {
        return this.getNth(t).map((l) => {
          let s = l.toView().json(t)[0],
            d = Oa(l);
          return (s.fraction = d), s;
        }, []);
      }
      toDecimal(t) {
        return (
          this.getNth(t).forEach((l) => {
            let { decimal: s } = Oa(l);
            (l = l.replaceWith(String(s), !0)),
              l.tag("NumericValue"),
              l.unTag("Fraction");
          }),
          this
        );
      }
      toFraction(t) {
        return (
          this.getNth(t).forEach((l) => {
            let s = Oa(l);
            if (
              s &&
              typeof s.numerator == "number" &&
              typeof s.denominator == "number"
            ) {
              let d = `${s.numerator}/${s.denominator}`;
              this.replace(l, d);
            }
          }),
          this
        );
      }
      toOrdinal(t) {
        return (
          this.getNth(t).forEach((l) => {
            let s = Oa(l),
              d = rA(s);
            l.after("^#Noun").found && (d += " of"), l.replaceWith(d);
          }),
          this
        );
      }
      toCardinal(t) {
        return (
          this.getNth(t).forEach((l) => {
            let s = Oa(l),
              d = oA(s);
            l.replaceWith(d);
          }),
          this
        );
      }
      toPercentage(t) {
        return (
          this.getNth(t).forEach((l) => {
            let { decimal: s } = Oa(l),
              d = s * 100;
            (d = Math.round(d * 100) / 100), l.replaceWith(`${d}%`);
          }),
          this
        );
      }
    }
    e.prototype.fractions = function (o) {
      let t = IW(this);
      return (t = t.getNth(o)), new n(this.document, t.pointer);
    };
  },
  lA = "one|two|three|four|five|six|seven|eight|nine",
  co = "twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|fourty",
  iA =
    "eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen",
  Ru = function (e) {
    let n = e.match("#Value+");
    if (
      (n.has("#NumericValue #NumericValue") &&
        (n.has("#Value @hasComma #Value")
          ? n.splitAfter("@hasComma")
          : n.has("#NumericValue #Fraction")
          ? n.splitAfter("#NumericValue #Fraction")
          : (n = n.splitAfter("#NumericValue"))),
      n.has("#Value #Value #Value") &&
        !n.has("#Multiple") &&
        n.has("(" + co + ") #Cardinal #Cardinal") &&
        (n = n.splitAfter("(" + co + ") #Cardinal")),
      n.has("#Value #Value"))
    ) {
      n.has("#NumericValue #NumericValue") && (n = n.splitOn("#Year")),
        n.has("(" + co + ") (" + iA + ")") &&
          (n = n.splitAfter("(" + co + ")"));
      let o = n.match("#Cardinal #Cardinal");
      if (
        o.found &&
        !n.has("(point|decimal|#Fraction)") &&
        !o.has("#Cardinal (#Multiple|point|decimal)")
      ) {
        let t = n.has(`(${lA}) (${co})`),
          l = o.has("(" + co + ") #Cardinal"),
          s = o.has("#Multiple #Value");
        !t &&
          !l &&
          !s &&
          o.terms().forEach((d) => {
            n = n.splitOn(d);
          });
      }
      n.match("#Ordinal #Ordinal").match("#TextValue").found &&
        !n.has("#Multiple") &&
        (n.has("(" + co + ") #Ordinal") || (n = n.splitAfter("#Ordinal"))),
        (n = n.splitBefore("#Ordinal [#Cardinal]", 0)),
        n.has("#TextValue #NumericValue") &&
          !n.has("(" + co + "|#Multiple)") &&
          (n = n.splitBefore("#TextValue #NumericValue"));
    }
    return (n = n.splitAfter("#NumberRange")), (n = n.splitBefore("#Year")), n;
  },
  sA = function (e, n) {
    e = e.replace(/,/g, "");
    let o = e.split(/([0-9.,]*)/),
      [t, l] = o,
      s = o.slice(2).join("");
    return l !== "" && n.length < 2
      ? ((l = Number(l || e)),
        typeof l != "number" && (l = null),
        (s = s || ""),
        (s === "st" || s === "nd" || s === "rd" || s === "th") && (s = ""),
        { prefix: t || "", num: l, suffix: s })
      : null;
  },
  tn = function (e) {
    if (typeof e == "string") return { num: od(e) };
    let n = e.text("reduced"),
      o = e.growRight("#Unit").match("#Unit$").text("machine"),
      t = /[0-9],[0-9]/.test(e.text("text"));
    if (e.terms().length === 1 && !e.has("#Multiple")) {
      let g = sA(n, e);
      if (g !== null) return (g.hasComma = t), (g.unit = o), g;
    }
    let l = e.match("#Fraction{2,}$");
    l = l.found === !1 ? e.match("^#Fraction$") : l;
    let s = null;
    l.found &&
      (l.has("#Value and #Value #Fraction") &&
        (l = l.match("and #Value #Fraction")),
      (s = Oa(l)),
      (e = e.not(l)),
      (e = e.not("and$")),
      (n = e.text("reduced")));
    let d = 0;
    return (
      n && (d = od(n) || 0),
      s && s.decimal && (d += s.decimal),
      {
        hasComma: t,
        prefix: "",
        num: d,
        suffix: "",
        isOrdinal: e.has("#Ordinal"),
        isText: e.has("#TextValue"),
        isFraction: e.has("#Fraction"),
        isMoney: e.has("#Money"),
        unit: o,
      }
    );
  },
  uA = function (e) {
    let n = e.num;
    if (!n && n !== 0) return null;
    let o = n % 100;
    if (o > 10 && o < 20) return String(n) + "th";
    const t = { 0: "th", 1: "st", 2: "nd", 3: "rd" };
    let l = bd(n),
      s = l.slice(l.length - 1, l.length);
    return t[s] ? (l += t[s]) : (l += "th"), l;
  },
  vp = {
    "¢": "cents",
    $: "dollars",
    "£": "pounds",
    "¥": "yen",
    "€": "euros",
    "₡": "colón",
    "฿": "baht",
    "₭": "kip",
    "₩": "won",
    "₹": "rupees",
    "₽": "ruble",
    "₺": "liras",
  },
  Cp = { "%": "percent", "°": "degrees" },
  kp = function (e) {
    let n = { suffix: "", prefix: e.prefix };
    return (
      vp.hasOwnProperty(e.prefix) &&
        ((n.suffix += " " + vp[e.prefix]), (n.prefix = "")),
      Cp.hasOwnProperty(e.suffix) && (n.suffix += " " + Cp[e.suffix]),
      n.suffix && e.num === 1 && (n.suffix = n.suffix.replace(/s$/, "")),
      !n.suffix && e.suffix && (n.suffix += " " + e.suffix),
      n
    );
  },
  Eo = function (e, n) {
    if (n === "TextOrdinal") {
      let { prefix: t, suffix: l } = kp(e);
      return t + _y(e) + l;
    }
    if (n === "Ordinal") return e.prefix + uA(e) + e.suffix;
    if (n === "TextCardinal") {
      let { prefix: t, suffix: l } = kp(e);
      return t + Mt(e) + l;
    }
    let o = e.num;
    return (
      e.hasComma && (o = o.toLocaleString()), e.prefix + String(o) + e.suffix
    );
  },
  dA = (e) => Object.prototype.toString.call(e) === "[object Array]",
  cA = function (e) {
    if (typeof e == "string" || typeof e == "number") {
      let n = {};
      return (n[e] = !0), n;
    }
    return dA(e) ? e.reduce((n, o) => ((n[o] = !0), n), {}) : e || {};
  },
  hA = function (e, n = {}) {
    return (
      (n = cA(n)),
      e.filter((o) => {
        let { unit: t } = tn(o);
        return !!(t && n[t] === !0);
      })
    );
  },
  gA = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Numbers");
      }
      parse(t) {
        return this.getNth(t).map(tn);
      }
      get(t) {
        return this.getNth(t)
          .map(tn)
          .map((l) => l.num);
      }
      json(t) {
        let l = typeof t == "object" ? t : {};
        return this.getNth(t).map((s) => {
          let d = s.toView().json(l)[0],
            g = tn(s);
          return (
            (d.number = {
              prefix: g.prefix,
              num: g.num,
              suffix: g.suffix,
              hasComma: g.hasComma,
              unit: g.unit,
            }),
            d
          );
        }, []);
      }
      units() {
        return this.growRight("#Unit").match("#Unit$");
      }
      isUnit(t) {
        return hA(this, t);
      }
      isOrdinal() {
        return this.if("#Ordinal");
      }
      isCardinal() {
        return this.if("#Cardinal");
      }
      toNumber() {
        let t = this.map((l) => {
          if (!this.has("#TextValue")) return l;
          let s = tn(l);
          if (s.num === null) return l;
          let d = l.has("#Ordinal") ? "Ordinal" : "Cardinal",
            g = Eo(s, d);
          return l.replaceWith(g, { tags: !0 }), l.tag("NumericValue");
        });
        return new n(t.document, t.pointer);
      }
      toLocaleString() {
        return (
          this.forEach((l) => {
            let s = tn(l);
            if (s.num === null) return;
            let d = s.num.toLocaleString();
            if (l.has("#Ordinal")) {
              let m = Eo(s, "Ordinal").match(/[a-z]+$/);
              m && (d += m[0] || "");
            }
            l.replaceWith(d, { tags: !0 });
          }),
          this
        );
      }
      toText() {
        let l = this.map((s) => {
          if (s.has("#TextValue")) return s;
          let d = tn(s);
          if (d.num === null) return s;
          let g = s.has("#Ordinal") ? "TextOrdinal" : "TextCardinal",
            m = Eo(d, g);
          return s.replaceWith(m, { tags: !0 }), s.tag("TextValue"), s;
        });
        return new n(l.document, l.pointer);
      }
      toCardinal() {
        let l = this.map((s) => {
          if (!s.has("#Ordinal")) return s;
          let d = tn(s);
          if (d.num === null) return s;
          let g = s.has("#TextValue") ? "TextCardinal" : "Cardinal",
            m = Eo(d, g);
          return s.replaceWith(m, { tags: !0 }), s.tag("Cardinal"), s;
        });
        return new n(l.document, l.pointer);
      }
      toOrdinal() {
        let l = this.map((s) => {
          if (s.has("#Ordinal")) return s;
          let d = tn(s);
          if (d.num === null) return s;
          let g = s.has("#TextValue") ? "TextOrdinal" : "Ordinal",
            m = Eo(d, g);
          return s.replaceWith(m, { tags: !0 }), s.tag("Ordinal"), s;
        });
        return new n(l.document, l.pointer);
      }
      isEqual(t) {
        return this.filter((l) => tn(l).num === t);
      }
      greaterThan(t) {
        return this.filter((l) => tn(l).num > t);
      }
      lessThan(t) {
        return this.filter((l) => tn(l).num < t);
      }
      between(t, l) {
        return this.filter((s) => {
          let d = tn(s).num;
          return d > t && d < l;
        });
      }
      set(t) {
        if (t === void 0) return this;
        typeof t == "string" && (t = tn(t).num);
        let s = this.map((d) => {
          let g = tn(d);
          if (((g.num = t), g.num === null)) return d;
          let m = d.has("#Ordinal") ? "Ordinal" : "Cardinal";
          d.has("#TextValue") &&
            (m = d.has("#Ordinal") ? "TextOrdinal" : "TextCardinal");
          let y = Eo(g, m);
          return (
            g.hasComma && m === "Cardinal" && (y = Number(y).toLocaleString()),
            (d = d.not("#Currency")),
            d.replaceWith(y, { tags: !0 }),
            d
          );
        });
        return new n(s.document, s.pointer);
      }
      add(t) {
        if (!t) return this;
        typeof t == "string" && (t = tn(t).num);
        let s = this.map((d) => {
          let g = tn(d);
          if (g.num === null) return d;
          g.num += t;
          let m = d.has("#Ordinal") ? "Ordinal" : "Cardinal";
          g.isText && (m = d.has("#Ordinal") ? "TextOrdinal" : "TextCardinal");
          let y = Eo(g, m);
          return d.replaceWith(y, { tags: !0 }), d;
        });
        return new n(s.document, s.pointer);
      }
      subtract(t, l) {
        return this.add(t * -1, l);
      }
      increment(t) {
        return this.add(1, t);
      }
      decrement(t) {
        return this.add(-1, t);
      }
      update(t) {
        let l = new n(this.document, t);
        return (l._cache = this._cache), l;
      }
    }
    (n.prototype.toNice = n.prototype.toLocaleString),
      (n.prototype.isBetween = n.prototype.between),
      (n.prototype.minus = n.prototype.subtract),
      (n.prototype.plus = n.prototype.add),
      (n.prototype.equals = n.prototype.isEqual),
      (e.prototype.numbers = function (o) {
        let t = Ru(this);
        return (t = t.getNth(o)), new n(this.document, t.pointer);
      }),
      (e.prototype.percentages = function (o) {
        let t = Ru(this);
        return (
          (t = t.filter((l) => l.has("#Percent") || l.after("^percent"))),
          (t = t.getNth(o)),
          new n(this.document, t.pointer)
        );
      }),
      (e.prototype.money = function (o) {
        let t = Ru(this);
        return (
          (t = t.filter((l) => l.has("#Money") || l.after("^#Currency"))),
          (t = t.getNth(o)),
          new n(this.document, t.pointer)
        );
      }),
      (e.prototype.values = e.prototype.numbers);
  },
  mA = function (e) {
    tA(e), gA(e);
  },
  pA = { api: mA },
  yA = { people: !0, emails: !0, phoneNumbers: !0, places: !0 },
  fA = function (e = {}) {
    return (
      (e = Object.assign({}, yA, e)),
      e.people !== !1 && this.people().replaceWith("██████████"),
      e.emails !== !1 && this.emails().replaceWith("██████████"),
      e.places !== !1 && this.places().replaceWith("██████████"),
      e.phoneNumbers !== !1 && this.phoneNumbers().replaceWith("███████"),
      this
    );
  },
  vA = {
    api: function (e) {
      e.prototype.redact = fA;
    },
  },
  CA = function (e) {
    let n = e.clauses();
    return /\.\.$/.test(e.out("text")) ||
      (e.has("^#QuestionWord") && e.has("@hasComma"))
      ? !1
      : !!(
          e.has("or not$") ||
          e.has("^#QuestionWord") ||
          e.has("^(do|does|did|is|was|can|could|will|would|may) #Noun") ||
          e.has("^(have|must) you") ||
          n.has("(do|does|is|was) #Noun+ #Adverb? (#Adjective|#Infinitive)$")
        );
  },
  kA = function (e) {
    const n = /\?/,
      { document: o } = e;
    return e.filter((t) => {
      let l = t.docs[0] || [],
        s = l[l.length - 1];
      return !s || o[s.index[0]].length !== l.length
        ? !1
        : n.test(s.post)
        ? !0
        : CA(t);
    });
  },
  wA =
    "(after|although|as|because|before|if|since|than|that|though|when|whenever|where|whereas|wherever|whether|while|why|unless|until|once)",
  SA = "(that|which|whichever|who|whoever|whom|whose|whomever)",
  bA = function (e) {
    let n = e;
    return n.length === 1 ||
      ((n = n.if("#Verb")), n.length === 1) ||
      ((n = n.ifNo(wA)),
      (n = n.ifNo("^even (if|though)")),
      (n = n.ifNo("^so that")),
      (n = n.ifNo("^rather than")),
      (n = n.ifNo("^provided that")),
      n.length === 1) ||
      ((n = n.ifNo(SA)), n.length === 1) ||
      ((n = n.ifNo("(^despite|^during|^before|^through|^throughout)")),
      n.length === 1) ||
      ((n = n.ifNo("^#Gerund")), n.length === 1)
      ? n
      : (n.length === 0 && (n = e), n.eq(0));
  },
  MA = function (e) {
    let n = null;
    return (
      e.has("#PastTense")
        ? (n = "PastTense")
        : e.has("#FutureTense")
        ? (n = "FutureTense")
        : e.has("#PresentTense") && (n = "PresentTense"),
      { tense: n }
    );
  },
  Fo = function (e) {
    let n = e.clauses(),
      t = bA(n).chunks(),
      l = e.none(),
      s = e.none(),
      d = e.none();
    return (
      t.forEach((g, m) => {
        if (m === 0 && !g.has("<Verb>")) {
          l = g;
          return;
        }
        if (!s.found && g.has("<Verb>")) {
          s = g;
          return;
        }
        s.found && (d = d.concat(g));
      }),
      s.found && !l.found && (l = s.before("<Noun>+").first()),
      { subj: l, verb: s, pred: d, grammar: MA(s) }
    );
  },
  BA = function (e) {
    let n = e.verbs(),
      o = n.eq(0);
    if (o.has("#PastTense")) return e;
    if ((o.toPastTense(), n.length > 1)) {
      (n = n.slice(1)),
        (n = n.filter((l) => !l.lookBehind("to$").found)),
        (n = n.if("#PresentTense")),
        (n = n.notIf("#Gerund"));
      let t = e.match("to #Verb+ #Conjunction #Verb").terms();
      (n = n.not(t)), n.found && n.verbs().toPastTense();
    }
    return e;
  },
  PA = function (e) {
    let n = e.verbs();
    return (
      n.eq(0).toPresentTense(),
      n.length > 1 &&
        ((n = n.slice(1)),
        (n = n.filter((t) => !t.lookBehind("to$").found)),
        (n = n.notIf("#Gerund")),
        n.found && n.verbs().toPresentTense()),
      e
    );
  },
  HA = function (e) {
    let n = e.verbs();
    if (
      (n.eq(0).toFutureTense(),
      (e = e.fullSentence()),
      (n = e.verbs()),
      n.length > 1)
    ) {
      n = n.slice(1);
      let t = n.filter((l) =>
        l.lookBehind("to$").found
          ? !1
          : l.has("#Copula #Gerund")
          ? !0
          : l.has("#Gerund")
          ? !1
          : l.has("#Copula")
          ? !0
          : !(
              l.has("#PresentTense") &&
              !l.has("#Infinitive") &&
              l.lookBefore("(he|she|it|that|which)$").found
            )
      );
      t.found &&
        t.forEach((l) => {
          if (l.has("#Copula")) {
            l.match("was").replaceWith("is"),
              l.match("is").replaceWith("will be");
            return;
          }
          l.toInfinitive();
        });
    }
    return e;
  },
  LA = function (e) {
    return e.verbs().first().toNegative().compute("chunks"), e;
  },
  WA = function (e) {
    return e.verbs().first().toPositive().compute("chunks"), e;
  },
  AA = function (e) {
    return e.verbs().toInfinitive(), e;
  },
  GA = function (e) {
    class n extends e {
      constructor(l, s, d) {
        super(l, s, d), (this.viewType = "Sentences");
      }
      json(l = {}) {
        return this.map((s) => {
          let d = s.toView().json(l)[0] || {},
            { subj: g, verb: m, pred: y, grammar: f } = Fo(s);
          return (
            (d.sentence = {
              subject: g.text("normal"),
              verb: m.text("normal"),
              predicate: y.text("normal"),
              grammar: f,
            }),
            d
          );
        }, []);
      }
      toPastTense(l) {
        return this.getNth(l).map((s) => (Fo(s), BA(s)));
      }
      toPresentTense(l) {
        return this.getNth(l).map((s) => (Fo(s), PA(s)));
      }
      toFutureTense(l) {
        return this.getNth(l).map((s) => (Fo(s), (s = HA(s)), s));
      }
      toInfinitive(l) {
        return this.getNth(l).map((s) => (Fo(s), AA(s)));
      }
      toNegative(l) {
        return this.getNth(l).map((s) => (Fo(s), LA(s)));
      }
      toPositive(l) {
        return this.getNth(l).map((s) => (Fo(s), WA(s)));
      }
      isQuestion(l) {
        return this.questions(l);
      }
      isExclamation(l) {
        return this.filter((d) => d.lastTerm().has("@hasExclamation")).getNth(
          l
        );
      }
      isStatement(l) {
        return this.filter(
          (d) => !d.isExclamation().found && !d.isQuestion().found
        ).getNth(l);
      }
      update(l) {
        let s = new n(this.document, l);
        return (s._cache = this._cache), s;
      }
    }
    (n.prototype.toPresent = n.prototype.toPresentTense),
      (n.prototype.toPast = n.prototype.toPastTense),
      (n.prototype.toFuture = n.prototype.toFutureTense);
    const o = {
      sentences: function (t) {
        let l = this.map((s) => s.fullSentence());
        return (l = l.getNth(t)), new n(this.document, l.pointer);
      },
      questions: function (t) {
        return kA(this).getNth(t);
      },
    };
    Object.assign(e.prototype, o);
  },
  RA = { api: GA },
  NA = function (e) {
    let n = e.splitAfter("@hasComma");
    n = n.match("#Honorific+? #Person+");
    let o = n.match("#Possessive").notIf("(his|her)");
    return (n = n.splitAfter(o)), n;
  },
  wp = function (e) {
    let n = {};
    (n.firstName = e.match("#FirstName+")),
      (n.lastName = e.match("#LastName+")),
      (n.honorific = e.match("#Honorific+"));
    let o = n.lastName,
      t = n.firstName;
    return (
      (!t.found || !o.found) &&
        !t.found &&
        !o.found &&
        e.has("^#Honorific .$") &&
        (n.lastName = e.match(".$")),
      n
    );
  },
  na = "male",
  wn = "female",
  Sp = {
    mr: na,
    mrs: wn,
    miss: wn,
    madam: wn,
    king: na,
    queen: wn,
    duke: na,
    duchess: wn,
    baron: na,
    baroness: wn,
    count: na,
    countess: wn,
    prince: na,
    princess: wn,
    sire: na,
    dame: wn,
    lady: wn,
    ayatullah: na,
    congressman: na,
    congresswoman: wn,
    "first lady": wn,
    mx: null,
  },
  EA = function (e, n) {
    let { firstName: o, honorific: t } = e;
    if (o.has("#FemaleName")) return wn;
    if (o.has("#MaleName")) return na;
    if (t.found) {
      let s = t.text("normal");
      if (((s = s.replace(/\./g, "")), Sp.hasOwnProperty(s))) return Sp[s];
      if (/^her /.test(s)) return wn;
      if (/^his /.test(s)) return na;
    }
    let l = n.after();
    if (!l.has("#Person") && l.has("#Pronoun")) {
      let s = l.match("#Pronoun");
      if (s.has("(they|their)")) return null;
      let d = s.has("(he|his)"),
        g = s.has("(she|her|hers)");
      if (d && !g) return na;
      if (g && !d) return wn;
    }
    return null;
  },
  FA = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "People");
      }
      parse(t) {
        return this.getNth(t).map(wp);
      }
      json(t) {
        let l = typeof t == "object" ? t : {};
        return this.getNth(t).map((s) => {
          let d = s.toView().json(l)[0],
            g = wp(s);
          return (
            (d.person = {
              firstName: g.firstName.text("normal"),
              lastName: g.lastName.text("normal"),
              honorific: g.honorific.text("normal"),
              presumed_gender: EA(g, s),
            }),
            d
          );
        }, []);
      }
      presumedMale() {
        return this.filter((t) =>
          t.has("(#MaleName|mr|mister|sr|jr|king|pope|prince|sir)")
        );
      }
      presumedFemale() {
        return this.filter((t) =>
          t.has("(#FemaleName|mrs|miss|queen|princess|madam)")
        );
      }
      update(t) {
        let l = new n(this.document, t);
        return (l._cache = this._cache), l;
      }
    }
    e.prototype.people = function (o) {
      let t = NA(this);
      return (t = t.getNth(o)), new n(this.document, t.pointer);
    };
  },
  DA = function (e) {
    let n = e.match("(#Place|#Address)+"),
      o = n.match("@hasComma");
    return (
      (o = o.filter((t) =>
        t.has("(asia|africa|europe|america)$")
          ? !0
          : !(
              t.has("(#City|#Region|#ProperNoun)$") &&
              t.after("^(#Country|#Region)").found
            )
      )),
      (n = n.splitAfter(o)),
      n
    );
  },
  TA = function (e) {
    e.prototype.places = function (n) {
      let o = DA(this);
      return (o = o.getNth(n)), new e(this.document, o.pointer);
    };
  },
  OA = function (e) {
    e.prototype.organizations = function (n) {
      return this.match("#Organization+").getNth(n);
    };
  },
  xA = function (e) {
    let n = this.clauses(),
      o = n.people();
    return (
      (o = o.concat(n.places())),
      (o = o.concat(n.organizations())),
      (o = o.not("(someone|man|woman|mother|brother|sister|father)")),
      (o = o.sort("seq")),
      (o = o.getNth(e)),
      o
    );
  },
  VA = function (e) {
    e.prototype.topics = xA;
  },
  IA = function (e) {
    FA(e), TA(e), OA(e), VA(e);
  },
  _A = { api: IA },
  KA = function (e) {
    let n = e.match("<Verb>");
    return (
      (n = n.not("#Conjunction")),
      (n = n.not("#Preposition")),
      (n = n.splitAfter("@hasComma")),
      (n = n.splitAfter("[(do|did|am|was|is|will)] (is|was)", 0)),
      (n = n.splitBefore("(#Verb && !#Copula) [being] #Verb", 0)),
      (n = n.splitBefore("#Verb [to be] #Verb", 0)),
      (n = n.splitAfter("[help] #PresentTense", 0)),
      (n = n.splitBefore("(#PresentTense|#PastTense) [#Copula]$", 0)),
      (n = n.splitBefore("(#PresentTense|#PastTense) [will be]$", 0)),
      (n = n.splitBefore("(#PresentTense|#PastTense) [(had|has)]", 0)),
      (n = n.not("#Reflexive$")),
      (n = n.not("#Adjective")),
      (n = n.splitAfter("[#PastTense] #PastTense", 0)),
      (n = n.splitAfter("[#PastTense] #Auxiliary+ #PastTense", 0)),
      (n = n.splitAfter("#Copula [#Gerund] #PastTense", 0)),
      (n = n.if("#Verb")),
      n.has("(#Verb && !#Auxiliary) #Adverb+? #Copula") &&
        (n = n.splitBefore("#Copula")),
      n
    );
  },
  JA = function (e) {
    let n = e;
    return (
      e.wordCount() > 1 &&
        (n = e.not("(#Negative|#Auxiliary|#Modal|#Adverb|#Prefix)")),
      n.length > 1 && !n.has("#Phrasal #Particle") && (n = n.last()),
      (n = n.not("(want|wants|wanted) to")),
      n.found || (n = e.not("#Negative")),
      n
    );
  },
  zA = function (e, n) {
    let o = { pre: e.none(), post: e.none() };
    if (!e.has("#Adverb")) return o;
    let t = e.splitOn(n);
    return t.length === 3
      ? { pre: t.eq(0).adverbs(), post: t.eq(2).adverbs() }
      : t.eq(0).isDoc(n)
      ? ((o.post = t.eq(1).adverbs()), o)
      : ((o.pre = t.eq(0).adverbs()), o);
  },
  jA = function (e, n) {
    let o = e.splitBefore(n);
    if (o.length <= 1) return e.none();
    let t = o.eq(0);
    return (t = t.not("(#Adverb|#Negative|#Prefix)")), t;
  },
  $A = function (e) {
    return e.match("#Negative");
  },
  UA = function (e) {
    if (!e.has("(#Particle|#PhrasalVerb)"))
      return { verb: e.none(), particle: e.none() };
    let n = e.match("#Particle$");
    return { verb: e.not(n), particle: n };
  },
  ga = function (e) {
    let n = e.clone();
    n.contractions().expand();
    const o = JA(n);
    return {
      root: o,
      prefix: n.match("#Prefix"),
      adverbs: zA(n, o),
      auxiliary: jA(n, o),
      negative: $A(n),
      phrasal: UA(o),
    };
  },
  ha = { tense: "PresentTense" },
  ti = { conditional: !0 },
  Da = { tense: "FutureTense" },
  Cr = { progressive: !0 },
  Ze = { tense: "PastTense" },
  kr = { complete: !0, progressive: !1 },
  ho = { passive: !0 },
  qA = { plural: !0 },
  YA = { plural: !1 },
  QA = function (e) {
    let n = {};
    return (
      e.forEach((o) => {
        Object.assign(n, o);
      }),
      n
    );
  },
  bp = {
    imperative: [["#Imperative", []]],
    "want-infinitive": [
      ["^(want|wants|wanted) to #Infinitive$", [ha]],
      ["^wanted to #Infinitive$", [Ze]],
      ["^will want to #Infinitive$", [Da]],
    ],
    "gerund-phrase": [
      ["^#PastTense #Gerund$", [Ze]],
      ["^#PresentTense #Gerund$", [ha]],
      ["^#Infinitive #Gerund$", [ha]],
      ["^will #Infinitive #Gerund$", [Da]],
      ["^have #PastTense #Gerund$", [Ze]],
      ["^will have #PastTense #Gerund$", [Ze]],
    ],
    "simple-present": [
      ["^#PresentTense$", [ha]],
      ["^#Infinitive$", [ha]],
    ],
    "simple-past": [["^#PastTense$", [Ze]]],
    "simple-future": [["^will #Adverb? #Infinitive", [Da]]],
    "present-progressive": [["^(is|are|am) #Gerund$", [ha, Cr]]],
    "past-progressive": [["^(was|were) #Gerund$", [Ze, Cr]]],
    "future-progressive": [["^will be #Gerund$", [Da, Cr]]],
    "present-perfect": [["^(has|have) #PastTense$", [Ze, kr]]],
    "past-perfect": [
      ["^had #PastTense$", [Ze, kr]],
      ["^had #PastTense to #Infinitive", [Ze, kr]],
    ],
    "future-perfect": [["^will have #PastTense$", [Da, kr]]],
    "present-perfect-progressive": [["^(has|have) been #Gerund$", [Ze, Cr]]],
    "past-perfect-progressive": [["^had been #Gerund$", [Ze, Cr]]],
    "future-perfect-progressive": [["^will have been #Gerund$", [Da, Cr]]],
    "passive-past": [
      ["(got|were|was) #Passive", [Ze, ho]],
      ["^(was|were) being #Passive", [Ze, ho]],
      ["^(had|have) been #Passive", [Ze, ho]],
    ],
    "passive-present": [
      ["^(is|are|am) #Passive", [ha, ho]],
      ["^(is|are|am) being #Passive", [ha, ho]],
      ["^has been #Passive", [ha, ho]],
    ],
    "passive-future": [
      ["will have been #Passive", [Da, ho, ti]],
      ["will be being? #Passive", [Da, ho, ti]],
    ],
    "present-conditional": [["would be #PastTense", [ha, ti]]],
    "past-conditional": [["would have been #PastTense", [Ze, ti]]],
    "auxiliary-future": [
      ["(is|are|am|was) going to (#Infinitive|#PresentTense)", [Da]],
    ],
    "auxiliary-past": [
      ["^did #Infinitive$", [Ze, YA]],
      ["^used to #Infinitive$", [Ze, kr]],
    ],
    "auxiliary-present": [["^(does|do) #Infinitive$", [ha, kr, qA]]],
    "modal-past": [["^(could|must|should|shall) have #PastTense$", [Ze]]],
    "modal-infinitive": [["^#Modal #Infinitive$", []]],
    infinitive: [["^#Infinitive$", []]],
  };
let rd = [];
Object.keys(bp).map((e) => {
  bp[e].forEach((n) => {
    rd.push({ name: e, match: n[0], data: QA(n[1]) });
  });
});
const ZA = function (e, n) {
    return (
      (e = e.clone()),
      n.adverbs.post && n.adverbs.post.found && e.remove(n.adverbs.post),
      n.adverbs.pre && n.adverbs.pre.found && e.remove(n.adverbs.pre),
      e.has("#Negative") && (e = e.remove("#Negative")),
      e.has("#Prefix") && (e = e.remove("#Prefix")),
      n.root.has("#PhrasalVerb #Particle") && e.remove("#Particle$"),
      (e = e.not("#Adverb")),
      e
    );
  },
  XA = function (e) {
    return !!(e.has("#Infinitive") && e.growLeft("to").has("^to #Infinitive"));
  },
  xa = function (e, n) {
    let o = {};
    e = ZA(e, n);
    for (let t = 0; t < rd.length; t += 1) {
      let l = rd[t];
      if (e.has(l.match) === !0) {
        (o.form = l.name), Object.assign(o, l.data);
        break;
      }
    }
    return (
      o.form || (e.has("^#Verb$") && (o.form = "infinitive")),
      o.tense ||
        (o.tense = n.root.has("#PastTense") ? "PastTense" : "PresentTense"),
      (o.copula = n.root.has("#Copula")),
      (o.isInfinitive = XA(e)),
      o
    );
  },
  Mp = function (e) {
    return e.length <= 1 ? !1 : (e.parse()[0] || {}).isSubordinate;
  },
  eG = function (e) {
    let n = e.clauses();
    return (
      (n = n.filter(
        (o, t) =>
          !(
            o.has("^(if|unless|while|but|for|per|at|by|that|which|who|from)") ||
            (t > 0 && o.has("^#Verb . #Noun+$")) ||
            (t > 0 && o.has("^#Adverb"))
          )
      )),
      n.length === 0 ? e : n
    );
  },
  nG = function (e) {
    let n = e.before();
    n = eG(n);
    let o = n.nouns(),
      t = o.last(),
      l = t.match("(i|he|she|we|you|they)");
    if (l.found) return l.nouns();
    let s = o.if("^(that|this|those)");
    return s.found ||
      (o.found === !1 && ((s = n.match("^(that|this|those)")), s.found))
      ? s
      : ((t = o.last()),
        Mp(t) && (o.remove(t), (t = o.last())),
        Mp(t) && (o.remove(t), (t = o.last())),
        t);
  },
  aG = function (e, n) {
    return n.has("(are|were|does)") || e.has("(those|they|we)")
      ? !0
      : e.found && e.isPlural
      ? e.isPlural().found
      : !1;
  },
  Sa = function (e) {
    let n = nG(e);
    return { subject: n, plural: aG(n, e) };
  },
  we = (e) => e,
  Ct = (e, n) => {
    let o = Sa(e),
      t = o.subject;
    return t.has("i") || t.has("we") ? !0 : o.plural;
  },
  oG = (e, n) => {
    let { subject: o, plural: t } = Sa(e);
    return t || o.has("we") ? "were" : "was";
  },
  kt = function (e, n) {
    if (e.has("were")) return "are";
    let { subject: o, plural: t } = Sa(e);
    return o.has("i") ? "am" : o.has("we") || t ? "are" : "is";
  },
  Md = function (e, n) {
    let o = Sa(e),
      t = o.subject;
    return t.has("i") || t.has("we") || o.plural ? "do" : "does";
  },
  Jn = function (e) {
    if (e.has("#Infinitive")) return "Infinitive";
    if (e.has("#Participle")) return "Participle";
    if (e.has("#PastTense")) return "PastTense";
    if (e.has("#Gerund")) return "Gerund";
    if (e.has("#PresentTense")) return "PresentTense";
  },
  td = function (e, n) {
    const { toInfinitive: o } = e.methods.two.transform.verb;
    let t = n.root.text({ keepPunct: !1 });
    return (t = o(t, e.model, Jn(e))), t && e.replace(n.root, t), e;
  },
  Bp = (e) =>
    e.has("will not") ? e.replace("will not", "have not") : e.remove("will"),
  Pp = function (e) {
    if (!e || !e.isView) return [];
    const n = { normal: !0, terms: !1, text: !1 };
    return e.json(n).map((o) => o.normal);
  },
  Hp = function (e) {
    return !e || !e.isView ? "" : e.text("normal");
  },
  rG = function (e) {
    const { toInfinitive: n } = e.methods.two.transform.verb;
    let o = e.text("normal");
    return n(o, e.model, Jn(e));
  },
  tG = function (e) {
    let n = ga(e);
    e = e.clone().toView();
    const o = xa(e, n);
    return {
      root: n.root.text(),
      preAdverbs: Pp(n.adverbs.pre),
      postAdverbs: Pp(n.adverbs.post),
      auxiliary: Hp(n.auxiliary),
      negative: n.negative.found,
      prefix: Hp(n.prefix),
      infinitive: rG(n.root),
      grammar: o,
    };
  },
  lG = { tags: !0 },
  iG = function (e, n) {
    const { toInfinitive: o } = e.methods.two.transform.verb,
      { root: t, auxiliary: l } = n;
    let s = l.terms().harden(),
      d = t.text("normal");
    if (
      ((d = o(d, e.model, Jn(t))),
      d && e.replace(t, d, lG).tag("Verb").firstTerm().tag("Infinitive"),
      s.found && e.remove(s),
      n.negative.found)
    ) {
      e.has("not") || e.prepend("not");
      let g = Md(e);
      e.prepend(g);
    }
    return (
      e
        .fullSentence()
        .compute([
          "freeze",
          "lexicon",
          "preTagger",
          "postTagger",
          "unfreeze",
          "chunks",
        ]),
      e
    );
  },
  ea = { tags: !0 },
  Va = {
    noAux: (e, n) => (n.auxiliary.found && (e = e.remove(n.auxiliary)), e),
    simple: (e, n) => {
      const { conjugate: o, toInfinitive: t } = e.methods.two.transform.verb,
        l = n.root;
      if (l.has("#Modal")) return e;
      let s = l.text({ keepPunct: !1 });
      return (
        (s = t(s, e.model, Jn(l))),
        (s = o(s, e.model).PastTense),
        (s = s === "been" ? "was" : s),
        s === "was" && (s = oG(e)),
        s && e.replace(l, s, ea),
        e
      );
    },
    both: function (e, n) {
      return n.negative.found
        ? (e.replace("will", "did"), e)
        : ((e = Va.simple(e, n)), (e = Va.noAux(e, n)), e);
    },
    hasHad: (e) => (e.replace("has", "had", ea), e),
    hasParticiple: (e, n) => {
      const { conjugate: o, toInfinitive: t } = e.methods.two.transform.verb,
        l = n.root;
      let s = l.text("normal");
      return (s = t(s, e.model, Jn(l))), o(s, e.model).Participle;
    },
  },
  Lp = {
    infinitive: Va.simple,
    "simple-present": Va.simple,
    "simple-past": we,
    "simple-future": Va.both,
    "present-progressive": (e) => (
      e.replace("are", "were", ea), e.replace("(is|are|am)", "was", ea), e
    ),
    "past-progressive": we,
    "future-progressive": (e, n) => (
      e.match(n.root).insertBefore("was"), e.remove("(will|be)"), e
    ),
    "present-perfect": Va.hasHad,
    "past-perfect": we,
    "future-perfect": (e, n) => (
      e.match(n.root).insertBefore("had"),
      e.has("will") && (e = Bp(e)),
      e.remove("have"),
      e
    ),
    "present-perfect-progressive": Va.hasHad,
    "past-perfect-progressive": we,
    "future-perfect-progressive": (e) => (
      e.remove("will"), e.replace("have", "had", ea), e
    ),
    "passive-past": (e) => (e.replace("have", "had", ea), e),
    "passive-present": (e) => (e.replace("(is|are)", "was", ea), e),
    "passive-future": (e, n) => (
      n.auxiliary.has("will be") &&
        (e.match(n.root).insertBefore("had been"), e.remove("(will|be)")),
      n.auxiliary.has("will have been") &&
        (e.replace("have", "had", ea), e.remove("will")),
      e
    ),
    "present-conditional": (e) => (e.replace("be", "have been"), e),
    "past-conditional": we,
    "auxiliary-future": (e) => (e.replace("(is|are|am)", "was", ea), e),
    "auxiliary-past": we,
    "auxiliary-present": (e) => (e.replace("(do|does)", "did", ea), e),
    "modal-infinitive": (e, n) => (
      e.has("can")
        ? e.replace("can", "could", ea)
        : (Va.simple(e, n),
          e.match("#Modal").insertAfter("have").tag("Auxiliary")),
      e
    ),
    "modal-past": we,
    "want-infinitive": (e) => (
      e.replace("(want|wants)", "wanted", ea), e.remove("will"), e
    ),
    "gerund-phrase": (e, n) => (
      (n.root = n.root.not("#Gerund$")), Va.simple(e, n), Bp(e), e
    ),
  },
  sG = function (e, n, o) {
    return (
      Lp.hasOwnProperty(o) &&
        ((e = Lp[o](e, n)), e.fullSentence().compute(["tagger", "chunks"])),
      e
    );
  },
  ld = function (e, n) {
    let o = Sa(e),
      t = o.subject;
    return t.has("(i|we|you)")
      ? "have"
      : o.plural === !1 || t.has("he") || t.has("she") || t.has("#Person")
      ? "has"
      : "have";
  },
  id = (e, n) => {
    const { conjugate: o, toInfinitive: t } = e.methods.two.transform.verb,
      { root: l, auxiliary: s } = n;
    if (l.has("#Modal")) return e;
    let d = l.text({ keepPunct: !1 });
    d = t(d, e.model, Jn(l));
    let g = o(d, e.model);
    if (((d = g.Participle || g.PastTense), d)) {
      e = e.replace(l, d);
      let m = ld(e);
      e.prepend(m).match(m).tag("Auxiliary"), e.remove(s);
    }
    return e;
  },
  Wp = {
    infinitive: id,
    "simple-present": id,
    "simple-future": (e, n) => e.replace("will", ld(e)),
    "present-perfect": we,
    "past-perfect": we,
    "future-perfect": (e, n) => e.replace("will have", ld(e)),
    "present-perfect-progressive": we,
    "past-perfect-progressive": we,
    "future-perfect-progressive": we,
  },
  uG = function (e, n, o) {
    return Wp.hasOwnProperty(o)
      ? ((e = Wp[o](e, n)), e.fullSentence().compute(["tagger", "chunks"]), e)
      : ((e = id(e, n)), e.fullSentence().compute(["tagger", "chunks"]), e);
  },
  Ia = { tags: !0 },
  wr = (e, n) => {
    const { conjugate: o, toInfinitive: t } = e.methods.two.transform.verb,
      l = n.root;
    let s = l.text("normal");
    return (
      (s = t(s, e.model, Jn(l))),
      Ct(e) === !1 && (s = o(s, e.model).PresentTense),
      l.has("#Copula") && (s = kt(e)),
      s && ((e = e.replace(l, s, Ia)), e.not("#Particle").tag("PresentTense")),
      e
    );
  },
  Ap = (e, n) => {
    const { conjugate: o, toInfinitive: t } = e.methods.two.transform.verb,
      l = n.root;
    let s = l.text("normal");
    return (
      (s = t(s, e.model, Jn(l))),
      Ct(e) === !1 && (s = o(s, e.model).Gerund),
      s && ((e = e.replace(l, s, Ia)), e.not("#Particle").tag("Gerund")),
      e
    );
  },
  dG = (e, n) => {
    const { toInfinitive: o } = e.methods.two.transform.verb,
      t = n.root;
    let l = n.root.text("normal");
    return (l = o(l, e.model, Jn(t))), l && (e = e.replace(n.root, l, Ia)), e;
  },
  Gp = {
    infinitive: wr,
    "simple-present": (e, n) => {
      const { conjugate: o } = e.methods.two.transform.verb;
      let { root: t } = n;
      if (t.has("#Infinitive")) {
        let s = Sa(e).subject;
        if (Ct(e) || s.has("i")) return e;
        let d = t.text("normal"),
          g = o(d, e.model).PresentTense;
        d !== g && e.replace(t, g, Ia);
      } else return wr(e, n);
      return e;
    },
    "simple-past": wr,
    "simple-future": (e, n) => {
      const { root: o, auxiliary: t } = n;
      if (t.has("will") && o.has("be")) {
        let l = kt(e);
        e.replace(o, l),
          (e = e.remove("will")),
          e.replace("not " + l, l + " not");
      } else wr(e, n), (e = e.remove("will"));
      return e;
    },
    "present-progressive": we,
    "past-progressive": (e, n) => {
      let o = kt(e);
      return e.replace("(were|was)", o, Ia);
    },
    "future-progressive": (e) => (
      e.match("will").insertBefore("is"), e.remove("be"), e.remove("will")
    ),
    "present-perfect": (e, n) => (
      wr(e, n), (e = e.remove("(have|had|has)")), e
    ),
    "past-perfect": (e, n) => {
      let t = Sa(e).subject;
      return Ct(e) || t.has("i")
        ? ((e = td(e, n)), e.remove("had"), e)
        : (e.replace("had", "has", Ia), e);
    },
    "future-perfect": (e) => (
      e.match("will").insertBefore("has"), e.remove("have").remove("will")
    ),
    "present-perfect-progressive": we,
    "past-perfect-progressive": (e) => e.replace("had", "has", Ia),
    "future-perfect-progressive": (e) => (
      e.match("will").insertBefore("has"), e.remove("have").remove("will")
    ),
    "passive-past": (e, n) => {
      let o = kt(e);
      return e.has("(had|have|has)") && e.has("been")
        ? (e.replace("(had|have|has)", o, Ia), e.replace("been", "being"), e)
        : e.replace("(got|was|were)", o);
    },
    "passive-present": we,
    "passive-future": (e) => (
      e.replace("will", "is"), e.replace("be", "being")
    ),
    "present-conditional": we,
    "past-conditional": (e) => (e.replace("been", "be"), e.remove("have")),
    "auxiliary-future": (e, n) => (Ap(e, n), e.remove("(going|to)"), e),
    "auxiliary-past": (e, n) => {
      if (n.auxiliary.has("did")) {
        let o = Md(e);
        return e.replace(n.auxiliary, o), e;
      }
      return Ap(e, n), e.replace(n.auxiliary, "is"), e;
    },
    "auxiliary-present": we,
    "modal-infinitive": we,
    "modal-past": (e, n) => (dG(e, n), e.remove("have")),
    "gerund-phrase": (e, n) => (
      (n.root = n.root.not("#Gerund$")), wr(e, n), e.remove("(will|have)")
    ),
    "want-infinitive": (e, n) => {
      let o = "wants";
      return (
        Ct(e) && (o = "want"),
        e.replace("(want|wanted|wants)", o, Ia),
        e.remove("will"),
        e
      );
    },
  },
  cG = function (e, n, o) {
    return (
      Gp.hasOwnProperty(o) &&
        ((e = Gp[o](e, n)), e.fullSentence().compute(["tagger", "chunks"])),
      e
    );
  },
  Ky = { tags: !0 },
  li = (e, n) => {
    const { toInfinitive: o } = e.methods.two.transform.verb,
      { root: t, auxiliary: l } = n;
    if (t.has("#Modal")) return e;
    let s = t.text("normal");
    return (
      (s = o(s, e.model, Jn(t))),
      s && ((e = e.replace(t, s, Ky)), e.not("#Particle").tag("Verb")),
      e.prepend("will").match("will").tag("Auxiliary"),
      e.remove(l),
      e
    );
  },
  Rp = (e, n) => {
    const { conjugate: o, toInfinitive: t } = e.methods.two.transform.verb,
      { root: l, auxiliary: s } = n;
    let d = l.text("normal");
    return (
      (d = t(d, e.model, Jn(l))),
      d &&
        ((d = o(d, e.model).Gerund),
        e.replace(l, d, Ky),
        e.not("#Particle").tag("PresentTense")),
      e.remove(s),
      e.prepend("will be").match("will be").tag("Auxiliary"),
      e
    );
  },
  Np = {
    infinitive: li,
    "simple-present": li,
    "simple-past": li,
    "simple-future": we,
    "present-progressive": Rp,
    "past-progressive": Rp,
    "future-progressive": we,
    "present-perfect": (e) => (
      e.match("(have|has)").replaceWith("will have"), e
    ),
    "past-perfect": (e) => e.replace("(had|has)", "will have"),
    "future-perfect": we,
    "present-perfect-progressive": (e) => e.replace("has", "will have"),
    "past-perfect-progressive": (e) => e.replace("had", "will have"),
    "future-perfect-progressive": we,
    "passive-past": (e) =>
      e.has("got")
        ? e.replace("got", "will get")
        : e.has("(was|were)")
        ? (e.replace("(was|were)", "will be"), e.remove("being"))
        : e.has("(have|has|had) been")
        ? e.replace("(have|has|had) been", "will be")
        : e,
    "passive-present": (e) => (
      e.replace("being", "will be"), e.remove("(is|are|am)"), e
    ),
    "passive-future": we,
    "present-conditional": (e) => e.replace("would", "will"),
    "past-conditional": (e) => e.replace("would", "will"),
    "auxiliary-future": we,
    "auxiliary-past": (e) =>
      e.has("used") && e.has("to")
        ? (e.replace("used", "will"), e.remove("to"))
        : (e.replace("did", "will"), e),
    "auxiliary-present": (e) => e.replace("(do|does)", "will"),
    "modal-infinitive": we,
    "modal-past": we,
    "gerund-phrase": (e, n) => (
      (n.root = n.root.not("#Gerund$")), li(e, n), e.remove("(had|have)")
    ),
    "want-infinitive": (e) => (
      e.replace("(want|wants|wanted)", "will want"), e
    ),
  },
  hG = function (e, n, o) {
    return (
      e.has("will") ||
        e.has("going to") ||
        (Np.hasOwnProperty(o) &&
          ((e = Np[o](e, n)), e.fullSentence().compute(["tagger", "chunks"]))),
      e
    );
  },
  gG = { tags: !0 },
  mG = function (e, n) {
    const { toInfinitive: o, conjugate: t } = e.methods.two.transform.verb,
      { root: l, auxiliary: s } = n;
    if (e.has("#Gerund")) return e;
    let d = l.text("normal");
    d = o(d, e.model, Jn(l));
    let g = t(d, e.model).Gerund;
    if (g) {
      let m = kt(e);
      e.replace(l, g, gG), e.remove(s), e.prepend(m);
    }
    return (
      e.replace("not is", "is not"),
      e.replace("not are", "are not"),
      e.fullSentence().compute(["tagger", "chunks"]),
      e
    );
  },
  Ep = { tags: !0 },
  Nu = function (e, n) {
    let o = Md(e);
    return e.prepend(o + " not"), e;
  },
  di = function (e) {
    let n = e.match("be");
    return n.found
      ? (n.prepend("not"), e)
      : ((n = e.match("(is|was|am|are|will|were)")),
        n.found && n.append("not"),
        e);
  },
  ci = (e) => e.has("(is|was|am|are|will|were|be)"),
  Fp = {
    "simple-present": (e, n) =>
      ci(e) === !0 ? di(e) : ((e = td(e, n)), (e = Nu(e)), e),
    "simple-past": (e, n) =>
      ci(e) === !0 ? di(e) : ((e = td(e, n)), e.prepend("did not"), e),
    imperative: (e) => (e.prepend("do not"), e),
    infinitive: (e, n) => (ci(e) === !0 ? di(e) : Nu(e)),
    "passive-past": (e) => {
      if (e.has("got"))
        return e.replace("got", "get", Ep), e.prepend("did not"), e;
      let n = e.match("(was|were|had|have)");
      return n.found && n.append("not"), e;
    },
    "auxiliary-past": (e) => {
      if (e.has("used")) return e.prepend("did not"), e;
      let n = e.match("(did|does|do)");
      return n.found && n.append("not"), e;
    },
    "want-infinitive": (e, n) => (
      (e = Nu(e)), (e = e.replace("wants", "want", Ep)), e
    ),
  },
  pG = function (e, n, o) {
    if (e.has("#Negative")) return e;
    if (Fp.hasOwnProperty(o)) return (e = Fp[o](e, n)), e;
    let t = e.matchOne("be");
    return t.found
      ? (t.prepend("not"), e)
      : ci(e) === !0
      ? di(e)
      : ((t = e.matchOne("(will|had|have|has|did|does|do|#Modal)")),
        t.found && t.append("not"),
        e);
  },
  yG = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Verbs");
      }
      parse(t) {
        return this.getNth(t).map(ga);
      }
      json(t, l) {
        return this.getNth(l).map((g) => {
          let m = g.toView().json(t)[0] || {};
          return (m.verb = tG(g)), m;
        }, []);
      }
      subjects(t) {
        return this.getNth(t).map((l) => (ga(l), Sa(l).subject));
      }
      adverbs(t) {
        return this.getNth(t).map((l) => l.match("#Adverb"));
      }
      isSingular(t) {
        return this.getNth(t).filter((l) => Sa(l).plural !== !0);
      }
      isPlural(t) {
        return this.getNth(t).filter((l) => Sa(l).plural === !0);
      }
      isImperative(t) {
        return this.getNth(t).filter((l) => l.has("#Imperative"));
      }
      toInfinitive(t) {
        return this.getNth(t).map((l) => {
          let s = ga(l),
            d = xa(l, s);
          return iG(l, s, d.form);
        });
      }
      toPresentTense(t) {
        return this.getNth(t).map((l) => {
          let s = ga(l),
            d = xa(l, s);
          return d.isInfinitive ? l : cG(l, s, d.form);
        });
      }
      toPastTense(t) {
        return this.getNth(t).map((l) => {
          let s = ga(l),
            d = xa(l, s);
          return d.isInfinitive ? l : sG(l, s, d.form);
        });
      }
      toFutureTense(t) {
        return this.getNth(t).map((l) => {
          let s = ga(l),
            d = xa(l, s);
          return d.isInfinitive ? l : hG(l, s, d.form);
        });
      }
      toGerund(t) {
        return this.getNth(t).map((l) => {
          let s = ga(l),
            d = xa(l, s);
          return d.isInfinitive ? l : mG(l, s, d.form);
        });
      }
      toPastParticiple(t) {
        return this.getNth(t).map((l) => {
          let s = ga(l),
            d = xa(l, s);
          return d.isInfinitive ? l : uG(l, s, d.form);
        });
      }
      conjugate(t) {
        const { conjugate: l, toInfinitive: s } =
          this.world.methods.two.transform.verb;
        return this.getNth(t).map((d) => {
          let g = ga(d),
            m = xa(d, g);
          m.form === "imperative" && (m.form = "simple-present");
          let y = g.root.text("normal");
          if (!g.root.has("#Infinitive")) {
            let f = Jn(g.root);
            y = s(y, d.model, f) || y;
          }
          return l(y, d.model);
        }, []);
      }
      isNegative() {
        return this.if("#Negative");
      }
      isPositive() {
        return this.ifNo("#Negative");
      }
      toPositive() {
        let t = this.match("do not #Verb");
        return t.found && t.remove("do not"), this.remove("#Negative");
      }
      toNegative(t) {
        return this.getNth(t).map((l) => {
          let s = ga(l),
            d = xa(l, s);
          return pG(l, s, d.form);
        });
      }
      update(t) {
        let l = new n(this.document, t);
        return (l._cache = this._cache), l;
      }
    }
    (n.prototype.toPast = n.prototype.toPastTense),
      (n.prototype.toPresent = n.prototype.toPresentTense),
      (n.prototype.toFuture = n.prototype.toFutureTense),
      (e.prototype.verbs = function (o) {
        let t = KA(this);
        return (t = t.getNth(o)), new n(this.document, t.pointer);
      });
  },
  fG = { api: yG },
  sd = function (e, n) {
    let o = n.match(e);
    if (o.found) {
      let t = o.pronouns().refersTo();
      if (t.found) return t;
    }
    return n.none();
  },
  Dp = function (e) {
    if (!e.found) return e;
    let [n] = e.fullPointer[0];
    return n && n > 0 ? e.update([[n - 1]]) : e.none();
  },
  vG = function (e, n) {
    return n === "m"
      ? e.filter((o) => !o.presumedFemale().found)
      : n === "f"
      ? e.filter((o) => !o.presumedMale().found)
      : e;
  },
  Tp = function (e, n) {
    let o = e.people();
    return (
      (o = vG(o, n)),
      o.found || ((o = e.nouns("#Actor")), o.found)
        ? o.last()
        : n === "f"
        ? sd("(she|her|hers)", e)
        : n === "m"
        ? sd("(he|him|his)", e)
        : e.none()
    );
  },
  CG = function (e) {
    let n = e.nouns(),
      o = n.isPlural().notIf("#Pronoun");
    if (o.found) return o.last();
    let t = sd("(they|their|theirs)", e);
    return t.found
      ? t
      : ((o = n.match(
          "(somebody|nobody|everybody|anybody|someone|noone|everyone|anyone)"
        )),
        o.found ? o.last() : e.none());
  },
  kG = function (e, n) {
    if (n && n.found) {
      let o = e.docs[0][0];
      o.reference = n.ptrs[0];
    }
  },
  Eu = function (e, n) {
    let o = e.before(),
      t = n(o);
    return t.found ||
      ((o = Dp(e)), (t = n(o)), t.found) ||
      ((o = Dp(o)), (t = n(o)), t.found)
      ? t
      : e.none();
  },
  wG = function (e) {
    e.pronouns()
      .if("(he|him|his|she|her|hers|they|their|theirs|it|its)")
      .forEach((o) => {
        let t = null;
        o.has("(he|him|his)")
          ? (t = Eu(o, (l) => Tp(l, "m")))
          : o.has("(she|her|hers)")
          ? (t = Eu(o, (l) => Tp(l, "f")))
          : o.has("(they|their|theirs)") && (t = Eu(o, CG)),
          t && t.found && kG(o, t);
      });
  },
  SG = function (e) {
    class n extends e {
      constructor(t, l, s) {
        super(t, l, s), (this.viewType = "Pronouns");
      }
      hasReference() {
        return (
          this.compute("coreference"),
          this.filter((t) => t.docs[0][0].reference)
        );
      }
      refersTo() {
        return (
          this.compute("coreference"),
          this.map((t) => {
            if (!t.found) return t.none();
            let l = t.docs[0][0];
            return l.reference ? t.update([l.reference]) : t.none();
          })
        );
      }
      update(t) {
        let l = new n(this.document, t);
        return (l._cache = this._cache), l;
      }
    }
    e.prototype.pronouns = function (o) {
      let t = this.match("#Pronoun");
      return (t = t.getNth(o)), new n(t.document, t.pointer);
    };
  },
  bG = { compute: { coreference: wG }, api: SG };
Q.plugin(x0);
Q.plugin(_0);
Q.plugin(oW);
Q.plugin(bG);
Q.plugin(SW);
Q.plugin(PW);
Q.plugin(VW);
Q.plugin(pA);
Q.plugin(vA);
Q.plugin(RA);
Q.plugin(_A);
Q.plugin(fG);
var go = {},
  ii = {},
  Op;
function Jy() {
  return (
    Op ||
      ((Op = 1),
      Object.defineProperty(ii, "__esModule", { value: !0 }),
      (ii.default = [
        {
          alpha2: "US",
          alpha3: "USA",
          country_code: "1",
          country_name: "United States",
          mobile_begin_with: [
            "201",
            "202",
            "203",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "223",
            "224",
            "225",
            "227",
            "228",
            "229",
            "231",
            "234",
            "239",
            "240",
            "248",
            "251",
            "252",
            "253",
            "254",
            "256",
            "260",
            "262",
            "267",
            "269",
            "270",
            "272",
            "274",
            "276",
            "278",
            "281",
            "283",
            "301",
            "302",
            "303",
            "304",
            "305",
            "307",
            "308",
            "309",
            "310",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "323",
            "325",
            "327",
            "329",
            "330",
            "331",
            "332",
            "334",
            "336",
            "337",
            "339",
            "341",
            "346",
            "347",
            "351",
            "352",
            "353",
            "360",
            "361",
            "364",
            "369",
            "380",
            "385",
            "386",
            "401",
            "402",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "412",
            "413",
            "414",
            "415",
            "417",
            "419",
            "423",
            "424",
            "425",
            "430",
            "432",
            "434",
            "435",
            "440",
            "441",
            "442",
            "443",
            "445",
            "447",
            "458",
            "463",
            "464",
            "469",
            "470",
            "472",
            "475",
            "478",
            "479",
            "480",
            "484",
            "501",
            "502",
            "503",
            "504",
            "505",
            "507",
            "508",
            "509",
            "510",
            "512",
            "513",
            "515",
            "516",
            "517",
            "518",
            "520",
            "530",
            "531",
            "534",
            "539",
            "540",
            "541",
            "551",
            "557",
            "559",
            "561",
            "562",
            "563",
            "564",
            "567",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "580",
            "582",
            "585",
            "586",
            "601",
            "602",
            "603",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "612",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "623",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "636",
            "640",
            "641",
            "645",
            "646",
            "650",
            "651",
            "656",
            "657",
            "659",
            "660",
            "661",
            "662",
            "667",
            "669",
            "678",
            "679",
            "680",
            "681",
            "682",
            "689",
            "701",
            "702",
            "703",
            "704",
            "706",
            "707",
            "708",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "724",
            "725",
            "726",
            "727",
            "728",
            "730",
            "731",
            "732",
            "734",
            "737",
            "740",
            "743",
            "747",
            "752",
            "754",
            "757",
            "760",
            "762",
            "763",
            "764",
            "765",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "779",
            "781",
            "785",
            "786",
            "787",
            "801",
            "802",
            "803",
            "804",
            "805",
            "806",
            "808",
            "810",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "820",
            "828",
            "830",
            "831",
            "832",
            "835",
            "838",
            "840",
            "843",
            "845",
            "847",
            "848",
            "850",
            "854",
            "856",
            "857",
            "858",
            "859",
            "860",
            "862",
            "863",
            "864",
            "865",
            "870",
            "872",
            "878",
            "901",
            "903",
            "904",
            "906",
            "907",
            "908",
            "909",
            "910",
            "912",
            "913",
            "914",
            "915",
            "916",
            "917",
            "918",
            "919",
            "920",
            "925",
            "927",
            "928",
            "929",
            "930",
            "931",
            "934",
            "935",
            "936",
            "937",
            "938",
            "939",
            "940",
            "941",
            "945",
            "947",
            "949",
            "951",
            "952",
            "954",
            "956",
            "957",
            "959",
            "970",
            "971",
            "972",
            "973",
            "975",
            "978",
            "979",
            "980",
            "984",
            "985",
            "986",
            "989",
            "888",
            "800",
            "833",
            "844",
            "855",
            "866",
            "877",
            "279",
            "340",
            "983",
            "448",
            "943",
            "363",
            "326",
            "839",
            "826",
            "948",
          ],
          phone_number_lengths: [10],
        },
        {
          alpha2: "AW",
          alpha3: "ABW",
          country_code: "297",
          country_name: "Aruba",
          mobile_begin_with: ["56", "59", "64", "73", "74", "99"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "AF",
          alpha3: "AFG",
          country_code: "93",
          country_name: "Afghanistan",
          mobile_begin_with: ["7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "AO",
          alpha3: "AGO",
          country_code: "244",
          country_name: "Angola",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "AI",
          alpha3: "AIA",
          country_code: "1",
          country_name: "Anguilla",
          mobile_begin_with: ["2642", "2644", "2645", "2647"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "AX",
          alpha3: "ALA",
          country_code: "358",
          country_name: "Åland Islands",
          mobile_begin_with: ["18"],
          phone_number_lengths: [6, 7, 8],
        },
        {
          alpha2: "AL",
          alpha3: "ALB",
          country_code: "355",
          country_name: "Albania",
          mobile_begin_with: ["6"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "AD",
          alpha3: "AND",
          country_code: "376",
          country_name: "Andorra",
          mobile_begin_with: ["3", "4", "6"],
          phone_number_lengths: [6],
        },
        {
          alpha2: "BQ",
          alpha3: "BES",
          country_code: "599",
          country_name: "Caribbean Netherlands",
          mobile_begin_with: ["3", "416", "700", "701", "795"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "AE",
          alpha3: "ARE",
          country_code: "971",
          country_name: "United Arab Emirates",
          mobile_begin_with: ["5"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "AR",
          alpha3: "ARG",
          country_code: "54",
          country_name: "Argentina",
          mobile_begin_with: ["1", "2", "3"],
          phone_number_lengths: [8, 9, 10, 11, 12],
        },
        {
          alpha2: "AM",
          alpha3: "ARM",
          country_code: "374",
          country_name: "Armenia",
          mobile_begin_with: ["3", "4", "5", "7", "9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "AS",
          alpha3: "ASM",
          country_code: "1",
          country_name: "American Samoa",
          mobile_begin_with: ["684733", "684258"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "AG",
          alpha3: "ATG",
          country_code: "1",
          country_name: "Antigua and Barbuda",
          mobile_begin_with: ["2687"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "AU",
          alpha3: "AUS",
          country_code: "61",
          country_name: "Australia",
          mobile_begin_with: ["4"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "AT",
          alpha3: "AUT",
          country_code: "43",
          country_name: "Austria",
          mobile_begin_with: ["6"],
          phone_number_lengths: [10, 11, 12, 13, 14],
        },
        {
          alpha2: "AZ",
          alpha3: "AZE",
          country_code: "994",
          country_name: "Azerbaijan",
          mobile_begin_with: ["10", "50", "51", "55", "60", "70", "77", "99"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "BI",
          alpha3: "BDI",
          country_code: "257",
          country_name: "Burundi",
          mobile_begin_with: [
            "71",
            "72",
            "75",
            "76",
            "77",
            "79",
            "29",
            "61",
            "68",
            "69",
          ],
          phone_number_lengths: [8],
        },
        {
          alpha2: "BE",
          alpha3: "BEL",
          country_code: "32",
          country_name: "Belgium",
          mobile_begin_with: ["4", "3"],
          phone_number_lengths: [9, 8],
        },
        {
          alpha2: "BJ",
          alpha3: "BEN",
          country_code: "229",
          country_name: "Benin",
          mobile_begin_with: ["4", "6", "9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "BF",
          alpha3: "BFA",
          country_code: "226",
          country_name: "Burkina Faso",
          mobile_begin_with: ["6", "7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "BD",
          alpha3: "BGD",
          country_code: "880",
          country_name: "Bangladesh",
          mobile_begin_with: ["1"],
          phone_number_lengths: [8, 9, 10],
        },
        {
          alpha2: "BG",
          alpha3: "BGR",
          country_code: "359",
          country_name: "Bulgaria",
          mobile_begin_with: ["87", "88", "89", "98", "99", "43"],
          phone_number_lengths: [8, 9],
        },
        {
          alpha2: "BH",
          alpha3: "BHR",
          country_code: "973",
          country_name: "Bahrain",
          mobile_begin_with: ["3"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "BS",
          alpha3: "BHS",
          country_code: "1",
          country_name: "Bahamas",
          mobile_begin_with: ["242"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "BA",
          alpha3: "BIH",
          country_code: "387",
          country_name: "Bosnia and Herzegovina",
          mobile_begin_with: ["6"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "BY",
          alpha3: "BLR",
          country_code: "375",
          country_name: "Belarus",
          mobile_begin_with: ["25", "29", "33", "44"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "BZ",
          alpha3: "BLZ",
          country_code: "501",
          country_name: "Belize",
          mobile_begin_with: ["6"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "BM",
          alpha3: "BMU",
          country_code: "1",
          country_name: "Bermuda",
          mobile_begin_with: ["4413", "4415", "4417"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "BO",
          alpha3: "BOL",
          country_code: "591",
          country_name: "Bolivia",
          mobile_begin_with: ["6", "7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "BR",
          alpha3: "BRA",
          country_code: "55",
          country_name: "Brazil",
          mobile_begin_with: [
            "119",
            "129",
            "139",
            "149",
            "159",
            "169",
            "179",
            "189",
            "199",
            "219",
            "229",
            "249",
            "279",
            "289",
            "319",
            "329",
            "339",
            "349",
            "359",
            "379",
            "389",
            "419",
            "429",
            "439",
            "449",
            "459",
            "469",
            "479",
            "489",
            "499",
            "519",
            "539",
            "549",
            "559",
            "619",
            "629",
            "639",
            "649",
            "659",
            "669",
            "679",
            "689",
            "699",
            "719",
            "739",
            "749",
            "759",
            "779",
            "799",
            "819",
            "829",
            "839",
            "849",
            "859",
            "869",
            "879",
            "889",
            "899",
            "919",
            "929",
            "939",
            "949",
            "959",
            "969",
            "979",
            "989",
            "999",
          ],
          phone_number_lengths: [10, 11],
        },
        {
          alpha2: "BB",
          alpha3: "BRB",
          country_code: "1",
          country_name: "Barbados",
          mobile_begin_with: ["246"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "BN",
          alpha3: "BRN",
          country_code: "673",
          country_name: "Brunei Darussalam",
          mobile_begin_with: ["7", "8"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "BT",
          alpha3: "BTN",
          country_code: "975",
          country_name: "Bhutan",
          mobile_begin_with: ["17"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "BW",
          alpha3: "BWA",
          country_code: "267",
          country_name: "Botswana",
          mobile_begin_with: [
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
          ],
          phone_number_lengths: [8],
        },
        {
          alpha2: "CF",
          alpha3: "CAF",
          country_code: "236",
          country_name: "Central African Republic",
          mobile_begin_with: ["7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "CA",
          alpha3: "CAN",
          country_code: "1",
          country_name: "Canada",
          mobile_begin_with: [
            "204",
            "226",
            "236",
            "249",
            "250",
            "263",
            "289",
            "306",
            "343",
            "354",
            "365",
            "367",
            "368",
            "403",
            "416",
            "418",
            "431",
            "437",
            "438",
            "450",
            "468",
            "474",
            "506",
            "514",
            "519",
            "548",
            "579",
            "581",
            "584",
            "587",
            "600",
            "604",
            "613",
            "639",
            "647",
            "672",
            "683",
            "705",
            "709",
            "742",
            "753",
            "778",
            "780",
            "782",
            "807",
            "819",
            "825",
            "867",
            "873",
            "902",
            "905",
            "428",
            "382",
          ],
          phone_number_lengths: [10],
        },
        {
          alpha2: "CH",
          alpha3: "CHE",
          country_code: "41",
          country_name: "Switzerland",
          mobile_begin_with: ["74", "75", "76", "77", "78", "79"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "CL",
          alpha3: "CHL",
          country_code: "56",
          country_name: "Chile",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "CN",
          alpha3: "CHN",
          country_code: "86",
          country_name: "China",
          mobile_begin_with: ["13", "14", "15", "17", "18", "19", "16"],
          phone_number_lengths: [11],
        },
        {
          alpha2: "CI",
          alpha3: "CIV",
          country_code: "225",
          country_name: "Côte D'Ivoire",
          mobile_begin_with: ["0", "4", "5", "6", "7", "8"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "CM",
          alpha3: "CMR",
          country_code: "237",
          country_name: "Cameroon",
          mobile_begin_with: ["6"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "CD",
          alpha3: "COD",
          country_code: "243",
          country_name: "Congo, The Democratic Republic Of The",
          mobile_begin_with: ["8", "9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "CG",
          alpha3: "COG",
          country_code: "242",
          country_name: "Congo",
          mobile_begin_with: ["0"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "CK",
          alpha3: "COK",
          country_code: "682",
          country_name: "Cook Islands",
          mobile_begin_with: ["5", "7"],
          phone_number_lengths: [5],
        },
        {
          alpha2: "CO",
          alpha3: "COL",
          country_code: "57",
          country_name: "Colombia",
          mobile_begin_with: ["3"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "CW",
          alpha3: "CUW",
          country_code: "599",
          country_name: "Curaçao",
          mobile_begin_with: ["95", "96"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "KM",
          alpha3: "COM",
          country_code: "269",
          country_name: "Comoros",
          mobile_begin_with: ["3", "76"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "CV",
          alpha3: "CPV",
          country_code: "238",
          country_name: "Cape Verde",
          mobile_begin_with: ["5", "9"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "CR",
          alpha3: "CRI",
          country_code: "506",
          country_name: "Costa Rica",
          mobile_begin_with: ["5", "6", "7", "8"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "CU",
          alpha3: "CUB",
          country_code: "53",
          country_name: "Cuba",
          mobile_begin_with: ["5", "6"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "KY",
          alpha3: "CYM",
          country_code: "1",
          country_name: "Cayman Islands",
          mobile_begin_with: ["345"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "CY",
          alpha3: "CYP",
          country_code: "357",
          country_name: "Cyprus",
          mobile_begin_with: ["9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "CZ",
          alpha3: "CZE",
          country_code: "420",
          country_name: "Czech Republic",
          mobile_begin_with: ["6", "7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "DE",
          alpha3: "DEU",
          country_code: "49",
          country_name: "Germany",
          mobile_begin_with: ["15", "16", "17"],
          phone_number_lengths: [10, 11],
        },
        {
          alpha2: "DJ",
          alpha3: "DJI",
          country_code: "253",
          country_name: "Djibouti",
          mobile_begin_with: ["77"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "DM",
          alpha3: "DMA",
          country_code: "1",
          country_name: "Dominica",
          mobile_begin_with: ["767"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "DK",
          alpha3: "DNK",
          country_code: "45",
          country_name: "Denmark",
          mobile_begin_with: [
            "2",
            "30",
            "31",
            "40",
            "41",
            "42",
            "50",
            "51",
            "52",
            "53",
            "60",
            "61",
            "71",
            "81",
            "91",
            "92",
            "93",
            "342",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "356",
            "357",
            "359",
            "362",
            "365",
            "366",
            "389",
            "398",
            "431",
            "441",
            "462",
            "466",
            "468",
            "472",
            "474",
            "476",
            "478",
            "485",
            "486",
            "488",
            "489",
            "493",
            "494",
            "495",
            "496",
            "498",
            "499",
            "542",
            "543",
            "545",
            "551",
            "552",
            "556",
            "571",
            "572",
            "573",
            "574",
            "577",
            "579",
            "584",
            "586",
            "587",
            "589",
            "597",
            "598",
            "627",
            "629",
            "641",
            "649",
            "658",
            "662",
            "663",
            "664",
            "665",
            "667",
            "692",
            "693",
            "694",
            "697",
            "771",
            "772",
            "782",
            "783",
            "785",
            "786",
            "788",
            "789",
            "826",
            "827",
            "829",
          ],
          phone_number_lengths: [8],
        },
        {
          alpha2: "DO",
          alpha3: "DOM",
          country_code: "1",
          country_name: "Dominican Republic",
          mobile_begin_with: ["809", "829", "849"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "DZ",
          alpha3: "DZA",
          country_code: "213",
          country_name: "Algeria",
          mobile_begin_with: ["5", "6", "7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "EC",
          alpha3: "ECU",
          country_code: "593",
          country_name: "Ecuador",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "EG",
          alpha3: "EGY",
          country_code: "20",
          country_name: "Egypt",
          mobile_begin_with: ["1"],
          phone_number_lengths: [10, 8],
        },
        {
          alpha2: "ER",
          alpha3: "ERI",
          country_code: "291",
          country_name: "Eritrea",
          mobile_begin_with: ["1", "7", "8"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "ES",
          alpha3: "ESP",
          country_code: "34",
          country_name: "Spain",
          mobile_begin_with: ["6", "7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "EE",
          alpha3: "EST",
          country_code: "372",
          country_name: "Estonia",
          mobile_begin_with: ["5", "81", "82", "83"],
          phone_number_lengths: [7, 8],
        },
        {
          alpha2: "ET",
          alpha3: "ETH",
          country_code: "251",
          country_name: "Ethiopia",
          mobile_begin_with: ["7", "9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "FI",
          alpha3: "FIN",
          country_code: "358",
          country_name: "Finland",
          mobile_begin_with: ["4", "5"],
          phone_number_lengths: [6, 7, 9, 10],
        },
        {
          alpha2: "FJ",
          alpha3: "FJI",
          country_code: "679",
          country_name: "Fiji",
          mobile_begin_with: ["2", "7", "8", "9"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "FK",
          alpha3: "FLK",
          country_code: "500",
          country_name: "Falkland Islands (Malvinas)",
          mobile_begin_with: ["5", "6"],
          phone_number_lengths: [5],
        },
        {
          alpha2: "FR",
          alpha3: "FRA",
          country_code: "33",
          country_name: "France",
          mobile_begin_with: ["6", "7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "FO",
          alpha3: "FRO",
          country_code: "298",
          country_name: "Faroe Islands",
          mobile_begin_with: [],
          phone_number_lengths: [6],
        },
        {
          alpha2: "FM",
          alpha3: "FSM",
          country_code: "691",
          country_name: "Micronesia, Federated States Of",
          mobile_begin_with: [],
          phone_number_lengths: [7],
        },
        {
          alpha2: "GA",
          alpha3: "GAB",
          country_code: "241",
          country_name: "Gabon",
          mobile_begin_with: ["2", "3", "4", "5", "6", "7"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "GB",
          alpha3: "GBR",
          country_code: "44",
          country_name: "United Kingdom",
          mobile_begin_with: ["7"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "GE",
          alpha3: "GEO",
          country_code: "995",
          country_name: "Georgia",
          mobile_begin_with: ["5", "7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "GH",
          alpha3: "GHA",
          country_code: "233",
          country_name: "Ghana",
          mobile_begin_with: ["2", "5"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "GI",
          alpha3: "GIB",
          country_code: "350",
          country_name: "Gibraltar",
          mobile_begin_with: ["5"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "GN",
          alpha3: "GIN",
          country_code: "224",
          country_name: "Guinea",
          mobile_begin_with: ["6"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "GP",
          alpha3: "GLP",
          country_code: "590",
          country_name: "Guadeloupe",
          mobile_begin_with: ["690"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "GM",
          alpha3: "GMB",
          country_code: "220",
          country_name: "Gambia",
          mobile_begin_with: ["7", "9"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "GW",
          alpha3: "GNB",
          country_code: "245",
          country_name: "Guinea-Bissau",
          mobile_begin_with: ["5", "6", "7"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "GQ",
          alpha3: "GNQ",
          country_code: "240",
          country_name: "Equatorial Guinea",
          mobile_begin_with: ["222", "551"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "GR",
          alpha3: "GRC",
          country_code: "30",
          country_name: "Greece",
          mobile_begin_with: ["6"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "GD",
          alpha3: "GRD",
          country_code: "1",
          country_name: "Grenada",
          mobile_begin_with: ["473"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "GL",
          alpha3: "GRL",
          country_code: "299",
          country_name: "Greenland",
          mobile_begin_with: ["2", "4", "5"],
          phone_number_lengths: [6],
        },
        {
          alpha2: "GT",
          alpha3: "GTM",
          country_code: "502",
          country_name: "Guatemala",
          mobile_begin_with: ["3", "4", "5"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "GF",
          alpha3: "GUF",
          country_code: "594",
          country_name: "French Guiana",
          mobile_begin_with: ["694"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "GU",
          alpha3: "GUM",
          country_code: "1",
          country_name: "Guam",
          mobile_begin_with: ["671"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "GY",
          alpha3: "GUY",
          country_code: "592",
          country_name: "Guyana",
          mobile_begin_with: ["6"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "HK",
          alpha3: "HKG",
          country_code: "852",
          country_name: "Hong Kong",
          mobile_begin_with: [
            "4",
            "5",
            "6",
            "70",
            "71",
            "72",
            "73",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "9",
          ],
          phone_number_lengths: [8],
        },
        {
          alpha2: "HN",
          alpha3: "HND",
          country_code: "504",
          country_name: "Honduras",
          mobile_begin_with: ["3", "7", "8", "9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "HR",
          alpha3: "HRV",
          country_code: "385",
          country_name: "Croatia",
          mobile_begin_with: ["9"],
          phone_number_lengths: [8, 9],
        },
        {
          alpha2: "HT",
          alpha3: "HTI",
          country_code: "509",
          country_name: "Haiti",
          mobile_begin_with: ["3", "4"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "HU",
          alpha3: "HUN",
          country_code: "36",
          country_name: "Hungary",
          mobile_begin_with: ["20", "30", "31", "50", "70"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "ID",
          alpha3: "IDN",
          country_code: "62",
          country_name: "Indonesia",
          mobile_begin_with: ["8"],
          phone_number_lengths: [9, 10, 11, 12],
        },
        {
          alpha2: "IN",
          alpha3: "IND",
          country_code: "91",
          country_name: "India",
          mobile_begin_with: ["6", "7", "8", "9"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "IE",
          alpha3: "IRL",
          country_code: "353",
          country_name: "Ireland",
          mobile_begin_with: ["82", "83", "84", "85", "86", "87", "88", "89"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "IR",
          alpha3: "IRN",
          country_code: "98",
          country_name: "Iran, Islamic Republic Of",
          mobile_begin_with: ["9"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "IQ",
          alpha3: "IRQ",
          country_code: "964",
          country_name: "Iraq",
          mobile_begin_with: ["7"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "IS",
          alpha3: "ISL",
          country_code: "354",
          country_name: "Iceland",
          mobile_begin_with: ["6", "7", "8"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "IL",
          alpha3: "ISR",
          country_code: "972",
          country_name: "Israel",
          mobile_begin_with: ["5"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "IT",
          alpha3: "ITA",
          country_code: "39",
          country_name: "Italy",
          mobile_begin_with: ["3"],
          phone_number_lengths: [9, 10],
        },
        {
          alpha2: "JM",
          alpha3: "JAM",
          country_code: "1",
          country_name: "Jamaica",
          mobile_begin_with: ["876"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "JO",
          alpha3: "JOR",
          country_code: "962",
          country_name: "Jordan",
          mobile_begin_with: ["7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "JP",
          alpha3: "JPN",
          country_code: "81",
          country_name: "Japan",
          mobile_begin_with: ["70", "80", "90"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "KZ",
          alpha3: "KAZ",
          country_code: "7",
          country_name: "Kazakhstan",
          mobile_begin_with: ["70", "74", "77"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "KE",
          alpha3: "KEN",
          country_code: "254",
          country_name: "Kenya",
          mobile_begin_with: ["7", "1"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "KG",
          alpha3: "KGZ",
          country_code: "996",
          country_name: "Kyrgyzstan",
          mobile_begin_with: [
            "20",
            "22",
            "31258",
            "312973",
            "5",
            "600",
            "7",
            "88",
            "912",
            "99",
          ],
          phone_number_lengths: [9],
        },
        {
          alpha2: "KH",
          alpha3: "KHM",
          country_code: "855",
          country_name: "Cambodia",
          mobile_begin_with: ["1", "6", "7", "8", "9"],
          phone_number_lengths: [8, 9],
        },
        {
          alpha2: "KI",
          alpha3: "KIR",
          country_code: "686",
          country_name: "Kiribati",
          mobile_begin_with: ["9", "30"],
          phone_number_lengths: [5],
        },
        {
          alpha2: "KN",
          alpha3: "KNA",
          country_code: "1",
          country_name: "Saint Kitts And Nevis",
          mobile_begin_with: ["869"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "KR",
          alpha3: "KOR",
          country_code: "82",
          country_name: "Korea, Republic of",
          mobile_begin_with: ["1"],
          phone_number_lengths: [9, 10],
        },
        {
          alpha2: "XK",
          alpha3: "XKX",
          country_code: "383",
          country_name: "Kosovo, Republic of",
          mobile_begin_with: ["43", "44", "45", "46", "47", "48", "49"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "KW",
          alpha3: "KWT",
          country_code: "965",
          country_name: "Kuwait",
          mobile_begin_with: ["5", "6", "9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "LA",
          alpha3: "LAO",
          country_code: "856",
          country_name: "Lao People's Democratic Republic",
          mobile_begin_with: ["20"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "LB",
          alpha3: "LBN",
          country_code: "961",
          country_name: "Lebanon",
          mobile_begin_with: ["3", "7", "8"],
          phone_number_lengths: [7, 8],
        },
        {
          alpha2: "LR",
          alpha3: "LBR",
          country_code: "231",
          country_name: "Liberia",
          mobile_begin_with: ["4", "5", "6", "7"],
          phone_number_lengths: [7, 8],
        },
        {
          alpha2: "LY",
          alpha3: "LBY",
          country_code: "218",
          country_name: "Libyan Arab Jamahiriya",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "LC",
          alpha3: "LCA",
          country_code: "1",
          country_name: "Saint Lucia",
          mobile_begin_with: ["758"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "LI",
          alpha3: "LIE",
          country_code: "423",
          country_name: "Liechtenstein",
          mobile_begin_with: ["7"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "LK",
          alpha3: "LKA",
          country_code: "94",
          country_name: "Sri Lanka",
          mobile_begin_with: ["7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "LS",
          alpha3: "LSO",
          country_code: "266",
          country_name: "Lesotho",
          mobile_begin_with: ["5", "6"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "LT",
          alpha3: "LTU",
          country_code: "370",
          country_name: "Lithuania",
          mobile_begin_with: ["6"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "LU",
          alpha3: "LUX",
          country_code: "352",
          country_name: "Luxembourg",
          mobile_begin_with: ["6"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "LV",
          alpha3: "LVA",
          country_code: "371",
          country_name: "Latvia",
          mobile_begin_with: ["2"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "MO",
          alpha3: "MAC",
          country_code: "853",
          country_name: "Macao",
          mobile_begin_with: ["6"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "MA",
          alpha3: "MAR",
          country_code: "212",
          country_name: "Morocco",
          mobile_begin_with: ["6", "7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "MC",
          alpha3: "MCO",
          country_code: "377",
          country_name: "Monaco",
          mobile_begin_with: ["4", "6"],
          phone_number_lengths: [8, 9],
        },
        {
          alpha2: "MD",
          alpha3: "MDA",
          country_code: "373",
          country_name: "Moldova, Republic of",
          mobile_begin_with: ["6", "7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "MG",
          alpha3: "MDG",
          country_code: "261",
          country_name: "Madagascar",
          mobile_begin_with: ["3"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "MV",
          alpha3: "MDV",
          country_code: "960",
          country_name: "Maldives",
          mobile_begin_with: ["7", "9"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "MX",
          alpha3: "MEX",
          country_code: "52",
          country_name: "Mexico",
          mobile_begin_with: [""],
          phone_number_lengths: [10, 11],
        },
        {
          alpha2: "MH",
          alpha3: "MHL",
          country_code: "692",
          country_name: "Marshall Islands",
          mobile_begin_with: [],
          phone_number_lengths: [7],
        },
        {
          alpha2: "MK",
          alpha3: "MKD",
          country_code: "389",
          country_name: "Macedonia, the Former Yugoslav Republic Of",
          mobile_begin_with: ["7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "ML",
          alpha3: "MLI",
          country_code: "223",
          country_name: "Mali",
          mobile_begin_with: ["6", "7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "MT",
          alpha3: "MLT",
          country_code: "356",
          country_name: "Malta",
          mobile_begin_with: ["7", "9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "MM",
          alpha3: "MMR",
          country_code: "95",
          country_name: "Myanmar",
          mobile_begin_with: ["9"],
          phone_number_lengths: [8, 9, 10],
        },
        {
          alpha2: "ME",
          alpha3: "MNE",
          country_code: "382",
          country_name: "Montenegro",
          mobile_begin_with: ["6"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "MN",
          alpha3: "MNG",
          country_code: "976",
          country_name: "Mongolia",
          mobile_begin_with: ["5", "8", "9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "MP",
          alpha3: "MNP",
          country_code: "1",
          country_name: "Northern Mariana Islands",
          mobile_begin_with: ["670"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "MZ",
          alpha3: "MOZ",
          country_code: "258",
          country_name: "Mozambique",
          mobile_begin_with: ["8"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "MR",
          alpha3: "MRT",
          country_code: "222",
          country_name: "Mauritania",
          mobile_begin_with: [],
          phone_number_lengths: [8],
        },
        {
          alpha2: "MS",
          alpha3: "MSR",
          country_code: "1",
          country_name: "Montserrat",
          mobile_begin_with: ["664"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "MQ",
          alpha3: "MTQ",
          country_code: "596",
          country_name: "Martinique",
          mobile_begin_with: ["696"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "MU",
          alpha3: "MUS",
          country_code: "230",
          country_name: "Mauritius",
          mobile_begin_with: ["5"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "MW",
          alpha3: "MWI",
          country_code: "265",
          country_name: "Malawi",
          mobile_begin_with: ["77", "88", "99"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "MY",
          alpha3: "MYS",
          country_code: "60",
          country_name: "Malaysia",
          mobile_begin_with: ["1", "6"],
          phone_number_lengths: [9, 10, 8],
        },
        {
          alpha2: "YT",
          alpha3: "MYT",
          country_code: "262",
          country_name: "Mayotte",
          mobile_begin_with: ["639"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "NA",
          alpha3: "NAM",
          country_code: "264",
          country_name: "Namibia",
          mobile_begin_with: ["60", "81", "82", "85"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "NC",
          alpha3: "NCL",
          country_code: "687",
          country_name: "New Caledonia",
          mobile_begin_with: ["7", "8", "9"],
          phone_number_lengths: [6],
        },
        {
          alpha2: "NE",
          alpha3: "NER",
          country_code: "227",
          country_name: "Niger",
          mobile_begin_with: ["9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "NF",
          alpha3: "NFK",
          country_code: "672",
          country_name: "Norfolk Island",
          mobile_begin_with: ["5", "8"],
          phone_number_lengths: [5],
        },
        {
          alpha2: "NG",
          alpha3: "NGA",
          country_code: "234",
          country_name: "Nigeria",
          mobile_begin_with: ["70", "80", "81", "90", "91"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "NI",
          alpha3: "NIC",
          country_code: "505",
          country_name: "Nicaragua",
          mobile_begin_with: ["7", "8"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "NU",
          alpha3: "NIU",
          country_code: "683",
          country_name: "Niue",
          mobile_begin_with: [],
          phone_number_lengths: [4],
        },
        {
          alpha2: "NL",
          alpha3: "NLD",
          country_code: "31",
          country_name: "Netherlands",
          mobile_begin_with: ["6"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "NO",
          alpha3: "NOR",
          country_code: "47",
          country_name: "Norway",
          mobile_begin_with: ["4", "9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "NP",
          alpha3: "NPL",
          country_code: "977",
          country_name: "Nepal",
          mobile_begin_with: ["97", "98"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "NR",
          alpha3: "NRU",
          country_code: "674",
          country_name: "Nauru",
          mobile_begin_with: ["555"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "NZ",
          alpha3: "NZL",
          country_code: "64",
          country_name: "New Zealand",
          mobile_begin_with: ["2"],
          phone_number_lengths: [8, 9, 10],
        },
        {
          alpha2: "OM",
          alpha3: "OMN",
          country_code: "968",
          country_name: "Oman",
          mobile_begin_with: ["9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "PK",
          alpha3: "PAK",
          country_code: "92",
          country_name: "Pakistan",
          mobile_begin_with: ["3"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "PA",
          alpha3: "PAN",
          country_code: "507",
          country_name: "Panama",
          mobile_begin_with: ["6"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "PE",
          alpha3: "PER",
          country_code: "51",
          country_name: "Peru",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "PH",
          alpha3: "PHL",
          country_code: "63",
          country_name: "Philippines",
          mobile_begin_with: ["9"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "PW",
          alpha3: "PLW",
          country_code: "680",
          country_name: "Palau",
          mobile_begin_with: [],
          phone_number_lengths: [7],
        },
        {
          alpha2: "PG",
          alpha3: "PNG",
          country_code: "675",
          country_name: "Papua New Guinea",
          mobile_begin_with: ["7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "PL",
          alpha3: "POL",
          country_code: "48",
          country_name: "Poland",
          mobile_begin_with: ["4", "5", "6", "7", "8"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "PR",
          alpha3: "PRI",
          country_code: "1",
          country_name: "Puerto Rico",
          mobile_begin_with: ["787", "939"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "PT",
          alpha3: "PRT",
          country_code: "351",
          country_name: "Portugal",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "PY",
          alpha3: "PRY",
          country_code: "595",
          country_name: "Paraguay",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "PS",
          alpha3: "PSE",
          country_code: "970",
          country_name: "Palestinian Territory, Occupied",
          mobile_begin_with: ["5"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "PF",
          alpha3: "PYF",
          country_code: "689",
          country_name: "French Polynesia",
          mobile_begin_with: ["8"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "QA",
          alpha3: "QAT",
          country_code: "974",
          country_name: "Qatar",
          mobile_begin_with: ["3", "5", "6", "7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "RE",
          alpha3: "REU",
          country_code: "262",
          country_name: "Réunion",
          mobile_begin_with: ["692", "693"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "RO",
          alpha3: "ROU",
          country_code: "40",
          country_name: "Romania",
          mobile_begin_with: ["7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "RU",
          alpha3: "RUS",
          country_code: "7",
          country_name: "Russian Federation",
          mobile_begin_with: ["9", "495", "498", "499", "835"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "RW",
          alpha3: "RWA",
          country_code: "250",
          country_name: "Rwanda",
          mobile_begin_with: ["7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "SA",
          alpha3: "SAU",
          country_code: "966",
          country_name: "Saudi Arabia",
          mobile_begin_with: ["5"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "SD",
          alpha3: "SDN",
          country_code: "249",
          country_name: "Sudan",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "SS",
          alpha3: "SSD",
          country_code: "211",
          country_name: "South Sudan",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "SN",
          alpha3: "SEN",
          country_code: "221",
          country_name: "Senegal",
          mobile_begin_with: ["7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "SG",
          alpha3: "SGP",
          country_code: "65",
          country_name: "Singapore",
          mobile_begin_with: ["8", "9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "SH",
          alpha3: "SHN",
          country_code: "290",
          country_name: "Saint Helena",
          mobile_begin_with: [],
          phone_number_lengths: [4],
        },
        {
          alpha2: "SJ",
          alpha3: "SJM",
          country_code: "47",
          country_name: "Svalbard And Jan Mayen",
          mobile_begin_with: ["79"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "SB",
          alpha3: "SLB",
          country_code: "677",
          country_name: "Solomon Islands",
          mobile_begin_with: ["7", "8"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "SL",
          alpha3: "SLE",
          country_code: "232",
          country_name: "Sierra Leone",
          mobile_begin_with: [
            "21",
            "25",
            "30",
            "33",
            "34",
            "40",
            "44",
            "50",
            "55",
            "76",
            "77",
            "78",
            "79",
            "88",
          ],
          phone_number_lengths: [8],
        },
        {
          alpha2: "SV",
          alpha3: "SLV",
          country_code: "503",
          country_name: "El Salvador",
          mobile_begin_with: ["6", "7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "SM",
          alpha3: "SMR",
          country_code: "378",
          country_name: "San Marino",
          mobile_begin_with: ["3", "6"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "SO",
          alpha3: "SOM",
          country_code: "252",
          country_name: "Somalia",
          mobile_begin_with: [
            "61",
            "62",
            "63",
            "65",
            "66",
            "68",
            "69",
            "71",
            "90",
          ],
          phone_number_lengths: [9],
        },
        {
          alpha2: "SX",
          alpha3: "SXM",
          country_code: "1",
          country_name: "Sint Maarten",
          mobile_begin_with: ["721"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "PM",
          alpha3: "SPM",
          country_code: "508",
          country_name: "Saint Pierre And Miquelon",
          mobile_begin_with: ["55", "41"],
          phone_number_lengths: [6],
        },
        {
          alpha2: "RS",
          alpha3: "SRB",
          country_code: "381",
          country_name: "Serbia",
          mobile_begin_with: ["6"],
          phone_number_lengths: [8, 9],
        },
        {
          alpha2: "ST",
          alpha3: "STP",
          country_code: "239",
          country_name: "Sao Tome and Principe",
          mobile_begin_with: ["98", "99"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "SR",
          alpha3: "SUR",
          country_code: "597",
          country_name: "Suriname",
          mobile_begin_with: ["6", "7", "8"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "SK",
          alpha3: "SVK",
          country_code: "421",
          country_name: "Slovakia",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "SI",
          alpha3: "SVN",
          country_code: "386",
          country_name: "Slovenia",
          mobile_begin_with: ["3", "4", "5", "6", "7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "SE",
          alpha3: "SWE",
          country_code: "46",
          country_name: "Sweden",
          mobile_begin_with: ["7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "SZ",
          alpha3: "SWZ",
          country_code: "268",
          country_name: "Swaziland",
          mobile_begin_with: ["76", "77", "78", "79"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "SC",
          alpha3: "SYC",
          country_code: "248",
          country_name: "Seychelles",
          mobile_begin_with: ["2"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "SY",
          alpha3: "SYR",
          country_code: "963",
          country_name: "Syrian Arab Republic",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "TC",
          alpha3: "TCA",
          country_code: "1",
          country_name: "Turks and Caicos Islands",
          mobile_begin_with: ["6492", "6493", "6494"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "TD",
          alpha3: "TCD",
          country_code: "235",
          country_name: "Chad",
          mobile_begin_with: ["6", "7", "9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "TG",
          alpha3: "TGO",
          country_code: "228",
          country_name: "Togo",
          mobile_begin_with: ["9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "TH",
          alpha3: "THA",
          country_code: "66",
          country_name: "Thailand",
          mobile_begin_with: ["6", "8", "9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "TJ",
          alpha3: "TJK",
          country_code: "992",
          country_name: "Tajikistan",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "TK",
          alpha3: "TKL",
          country_code: "690",
          country_name: "Tokelau",
          mobile_begin_with: [],
          phone_number_lengths: [4],
        },
        {
          alpha2: "TM",
          alpha3: "TKM",
          country_code: "993",
          country_name: "Turkmenistan",
          mobile_begin_with: ["6"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "TL",
          alpha3: "TLS",
          country_code: "670",
          country_name: "Timor-Leste",
          mobile_begin_with: ["7"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "TO",
          alpha3: "TON",
          country_code: "676",
          country_name: "Tonga",
          mobile_begin_with: [],
          phone_number_lengths: [5],
        },
        {
          alpha2: "TT",
          alpha3: "TTO",
          country_code: "1",
          country_name: "Trinidad and Tobago",
          mobile_begin_with: ["868"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "TN",
          alpha3: "TUN",
          country_code: "216",
          country_name: "Tunisia",
          mobile_begin_with: ["2", "4", "5", "9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "TR",
          alpha3: "TUR",
          country_code: "90",
          country_name: "Turkey",
          mobile_begin_with: ["5"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "TV",
          alpha3: "TUV",
          country_code: "688",
          country_name: "Tuvalu",
          mobile_begin_with: [],
          phone_number_lengths: [5],
        },
        {
          alpha2: "TW",
          alpha3: "TWN",
          country_code: "886",
          country_name: "Taiwan",
          mobile_begin_with: ["9"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "TZ",
          alpha3: "TZA",
          country_code: "255",
          country_name: "Tanzania, United Republic of",
          mobile_begin_with: ["7", "6"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "UG",
          alpha3: "UGA",
          country_code: "256",
          country_name: "Uganda",
          mobile_begin_with: ["7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "UA",
          alpha3: "UKR",
          country_code: "380",
          country_name: "Ukraine",
          mobile_begin_with: [
            "39",
            "50",
            "63",
            "66",
            "67",
            "68",
            "73",
            "75",
            "77",
            "9",
          ],
          phone_number_lengths: [9],
        },
        {
          alpha2: "UY",
          alpha3: "URY",
          country_code: "598",
          country_name: "Uruguay",
          mobile_begin_with: ["9"],
          phone_number_lengths: [8],
        },
        {
          alpha2: "UZ",
          alpha3: "UZB",
          country_code: "998",
          country_name: "Uzbekistan",
          mobile_begin_with: ["9", "88", "33"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "VC",
          alpha3: "VCT",
          country_code: "1",
          country_name: "Saint Vincent And The Grenedines",
          mobile_begin_with: ["784"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "VE",
          alpha3: "VEN",
          country_code: "58",
          country_name: "Venezuela, Bolivarian Republic of",
          mobile_begin_with: ["4"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "VG",
          alpha3: "VGB",
          country_code: "1",
          country_name: "Virgin Islands, British",
          mobile_begin_with: ["284"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "VI",
          alpha3: "VIR",
          country_code: "1",
          country_name: "Virgin Islands, U.S.",
          mobile_begin_with: ["340"],
          phone_number_lengths: [10],
        },
        {
          alpha2: "VN",
          alpha3: "VNM",
          country_code: "84",
          country_name: "Viet Nam",
          mobile_begin_with: ["8", "9", "3", "7", "5"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "VU",
          alpha3: "VUT",
          country_code: "678",
          country_name: "Vanuatu",
          mobile_begin_with: ["5", "7"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "WF",
          alpha3: "WLF",
          country_code: "681",
          country_name: "Wallis and Futuna",
          mobile_begin_with: [],
          phone_number_lengths: [6],
        },
        {
          alpha2: "WS",
          alpha3: "WSM",
          country_code: "685",
          country_name: "Samoa",
          mobile_begin_with: ["7"],
          phone_number_lengths: [7],
        },
        {
          alpha2: "YE",
          alpha3: "YEM",
          country_code: "967",
          country_name: "Yemen",
          mobile_begin_with: ["7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "ZA",
          alpha3: "ZAF",
          country_code: "27",
          country_name: "South Africa",
          mobile_begin_with: ["1", "2", "3", "4", "5", "6", "7", "8"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "ZM",
          alpha3: "ZMB",
          country_code: "260",
          country_name: "Zambia",
          mobile_begin_with: ["9", "7"],
          phone_number_lengths: [9],
        },
        {
          alpha2: "ZW",
          alpha3: "ZWE",
          country_code: "263",
          country_name: "Zimbabwe",
          mobile_begin_with: ["71", "73", "77", "78"],
          phone_number_lengths: [9],
        },
      ])),
    ii
  );
}
var Ta = {},
  xp;
function MG() {
  if (xp) return Ta;
  xp = 1;
  var e =
    Ta.__importDefault ||
    function (g) {
      return g && g.__esModule ? g : { default: g };
    };
  Object.defineProperty(Ta, "__esModule", { value: !0 }),
    (Ta.findCountryPhoneDataByCountry = o),
    (Ta.findExactCountryPhoneData = t),
    (Ta.findPossibleCountryPhoneData = l),
    (Ta.findCountryPhoneDataByPhoneNumber = s),
    (Ta.validatePhoneISO3166 = d);
  const n = e(Jy());
  function o(g) {
    return g
      ? g.length === 2
        ? n.default.find((m) => g.toUpperCase() === m.alpha2) || null
        : g.length === 3
        ? n.default.find((m) => g.toUpperCase() === m.alpha3) || null
        : n.default.find(
            (m) => g.toUpperCase() === m.country_name.toUpperCase()
          ) || null
      : n.default.find((m) => m.alpha3 === "USA") || null;
  }
  function t(g, m, y) {
    return y.phone_number_lengths.some(
      (v) => y.country_code.length + v === g.length
    ) &&
      (!y.mobile_begin_with.length ||
        !m ||
        y.mobile_begin_with.some((v) =>
          g.match(new RegExp("^" + y.country_code + v))
        ))
      ? y
      : null;
  }
  function l(g, m, y) {
    if (
      !y.phone_number_lengths.some(
        (v) => y.country_code.length + v + 1 === g.length
      )
    )
      return null;
    if (
      !y.mobile_begin_with.length ||
      !m ||
      y.mobile_begin_with.some((v) =>
        g.match(new RegExp("^" + y.country_code + "\\d?" + v))
      )
    )
      return y;
  }
  function s(g, m) {
    let y, f;
    for (const v of n.default)
      g.match(new RegExp("^" + v.country_code)) &&
        (y || (y = t(g, m, v)), f || (f = l(g, m, v)));
    return { exactCountryPhoneData: y, possibleCountryPhoneData: f };
  }
  function d(g, m, y, f) {
    if (!m.phone_number_lengths) return !1;
    const v = g.replace(new RegExp("^" + m.country_code), "");
    if (f && m && v.length === g.length) return !1;
    const M = m.phone_number_lengths,
      G = m.mobile_begin_with,
      ae = M.some((U) => v.length === U),
      Y = G.length ? G.some((U) => v.match(new RegExp("^" + U))) : !0;
    return ae && (!y || Y);
  }
  return Ta;
}
var Vp;
function BG() {
  if (Vp) return go;
  Vp = 1;
  var e =
    go.__importDefault ||
    function (l) {
      return l && l.__esModule ? l : { default: l };
    };
  Object.defineProperty(go, "__esModule", { value: !0 }),
    (go.countryPhoneData = void 0),
    (go.default = t),
    (go.phone = t);
  const n = e(Jy());
  go.countryPhoneData = n.default;
  const o = MG();
  function t(
    l,
    {
      country: s = "",
      validateMobilePrefix: d = !0,
      strictDetection: g = !1,
    } = {}
  ) {
    const m = {
      isValid: !1,
      phoneNumber: null,
      countryIso2: null,
      countryIso3: null,
      countryCode: null,
    };
    let y = typeof l != "string" ? "" : l.trim();
    const f = typeof s != "string" ? "" : s.trim(),
      v = !!y.match(/^\+/);
    y = y.replace(/\D/g, "");
    let M = (0, o.findCountryPhoneDataByCountry)(f);
    if (!M) return m;
    let G = !1;
    if (f)
      ["CIV", "COG"].includes(M.alpha3) || (y = y.replace(/^0+/, "")),
        M.alpha3 === "RUS" &&
          y.length === 11 &&
          y.match(/^89/) !== null &&
          (y = y.replace(/^8+/, "")),
        !v &&
          M.phone_number_lengths.includes(y.length) &&
          (y = `${M.country_code}${y}`);
    else if (v) {
      const { exactCountryPhoneData: Y, possibleCountryPhoneData: U } = (0,
      o.findCountryPhoneDataByPhoneNumber)(y, d);
      Y
        ? (M = Y)
        : U && !g
        ? ((M = U),
          (y =
            M.country_code +
            y.replace(new RegExp(`^${M.country_code}\\d`), "")))
        : (M = null);
    } else
      M.phone_number_lengths.indexOf(y.length) !== -1 &&
        ((y = `1${y}`), (G = !0));
    if (!M) return m;
    let ae = (0, o.validatePhoneISO3166)(y, M, d, v);
    return ae
      ? {
          isValid: !0,
          phoneNumber: `+${y}`,
          countryIso2: M.alpha2,
          countryIso3: M.alpha3,
          countryCode: `+${M.country_code}`,
        }
      : G &&
        ((M = (0, o.findCountryPhoneDataByCountry)("CAN")),
        (ae = (0, o.validatePhoneISO3166)(y, M, d, v)),
        ae)
      ? {
          isValid: !0,
          phoneNumber: `+${y}`,
          countryIso2: M.alpha2,
          countryIso3: M.alpha3,
          countryCode: `+${M.country_code}`,
        }
      : m;
  }
  return go;
}
var PG = BG();
const HG = Bt(PG),
  LG = "AL",
  WG = "AK",
  AG = "AZ",
  GG = "AR",
  RG = "CA",
  NG = "CO",
  EG = "CT",
  FG = "DE",
  DG = "FL",
  TG = "GA",
  OG = "HI",
  xG = "ID",
  VG = "IL",
  IG = "IN",
  _G = "IA",
  KG = "KS",
  JG = "KY",
  zG = "LA",
  jG = "ME",
  $G = "MD",
  UG = "MA",
  qG = "MI",
  YG = "MN",
  QG = "MS",
  ZG = "MO",
  XG = "MT",
  eR = "NE",
  nR = "NV",
  aR = "OH",
  oR = "OK",
  rR = "OR",
  tR = "PA",
  lR = "TN",
  iR = "TX",
  sR = "UT",
  uR = "VT",
  dR = "VA",
  cR = "WA",
  hR = "WI",
  gR = "WY",
  mR = "AB",
  pR = "MB",
  yR = "NU",
  fR = "ON",
  vR = "QC",
  CR = "SK",
  kR = "YT",
  wR = {
    alabama: LG,
    alaska: WG,
    arizona: AG,
    arkansas: GG,
    california: RG,
    colorado: NG,
    connecticut: EG,
    delaware: FG,
    "district of columbia": "DC",
    florida: DG,
    georgia: TG,
    hawaii: OG,
    idaho: xG,
    illinois: VG,
    indiana: IG,
    iowa: _G,
    kansas: KG,
    kentucky: JG,
    louisiana: zG,
    maine: jG,
    maryland: $G,
    massachusetts: UG,
    michigan: qG,
    minnesota: YG,
    mississippi: QG,
    missouri: ZG,
    montana: XG,
    nebraska: eR,
    nevada: nR,
    "new hampshire": "NH",
    "new jersey": "NJ",
    "new mexico": "NM",
    "new york": "NY",
    "north carolina": "NC",
    "north dakota": "ND",
    ohio: aR,
    oklahoma: oR,
    oregon: rR,
    pennsylvania: tR,
    "rhode island": "RI",
    "south carolina": "SC",
    "south dakota": "SD",
    tennessee: lR,
    texas: iR,
    utah: sR,
    vermont: uR,
    virginia: dR,
    washington: cR,
    "west virginia": "WV",
    wisconsin: hR,
    wyoming: gR,
    alberta: mR,
    "british columbia": "BC",
    manitoba: pR,
    "new brunswick": "NB",
    "newfoundland and labrador": "NL",
    "nova scotia": "NS",
    "northwest territories": "NT",
    nunavut: yR,
    ontario: fR,
    "prince edward island": "PE",
    quebec: vR,
    saskatchewan: CR,
    yukon: kR,
  },
  SR = "aly",
  bR = "aly",
  MR = "aly",
  BR = "aly",
  PR = "anx",
  HR = "anx",
  LR = "anx",
  WR = "anx",
  AR = "arc",
  GR = "arc",
  RR = "ave",
  NR = "ave",
  ER = "ave",
  FR = "ave",
  DR = "ave",
  TR = "ave",
  OR = "ave",
  xR = "byu",
  VR = "byu",
  IR = "bch",
  _R = "bch",
  KR = "bnd",
  JR = "bg",
  zR = "bgs",
  jR = "blf",
  $R = "blfs",
  UR = "blf",
  qR = "blf",
  YR = "blfs",
  QR = "blvd",
  ZR = "bnd",
  XR = "btm",
  eN = "btm",
  nN = "btm",
  aN = "blvd",
  oN = "blvd",
  rN = "blvd",
  tN = "br",
  lN = "br",
  iN = "brg",
  sN = "brg",
  uN = "brg",
  dN = "brk",
  cN = "brks",
  hN = "br",
  gN = "brk",
  mN = "brks",
  pN = "btm",
  yN = "bg",
  fN = "bgs",
  vN = "byp",
  CN = "byp",
  kN = "byp",
  wN = "byp",
  SN = "byp",
  bN = "byu",
  MN = "cp",
  BN = "cyn",
  PN = "cyn",
  HN = "cpe",
  LN = "cswy",
  WN = "cswy",
  AN = "ctr",
  GN = "ctr",
  RN = "ctr",
  NN = "ctrs",
  EN = "ctr",
  FN = "ctr",
  DN = "cir",
  TN = "cir",
  ON = "cir",
  xN = "cir",
  VN = "cirs",
  IN = "cirs",
  _N = "crk",
  KN = "clb",
  JN = "clf",
  zN = "clfs",
  jN = "clf",
  $N = "clfs",
  UN = "clb",
  qN = "cmn",
  YN = "cp",
  QN = "ctr",
  ZN = "ctr",
  XN = "cyn",
  e1 = "cmn",
  n1 = "cor",
  a1 = "cor",
  o1 = "cors",
  r1 = "cors",
  t1 = "crse",
  l1 = "ct",
  i1 = "cts",
  s1 = "cv",
  u1 = "cvs",
  d1 = "cp",
  c1 = "cpe",
  h1 = "crk",
  g1 = "cir",
  m1 = "cir",
  p1 = "cres",
  y1 = "crk",
  f1 = "cres",
  v1 = "cres",
  C1 = "cres",
  k1 = "crst",
  w1 = "crk",
  S1 = "xing",
  b1 = "xrd",
  M1 = "cres",
  B1 = "crse",
  P1 = "cres",
  H1 = "cres",
  L1 = "xing",
  W1 = "xing",
  A1 = "crst",
  G1 = "ct",
  R1 = "cswy",
  N1 = "ct",
  E1 = "ctr",
  F1 = "ctrs",
  D1 = "cts",
  T1 = "curv",
  O1 = "curv",
  x1 = "cv",
  V1 = "cvs",
  I1 = "cyn",
  _1 = "dl",
  K1 = "dm",
  J1 = "dv",
  z1 = "dv",
  j1 = "dl",
  $1 = "dm",
  U1 = "dr",
  q1 = "dr",
  Y1 = "dr",
  Q1 = "drs",
  Z1 = "drs",
  X1 = "dr",
  eE = "dv",
  nE = "dv",
  aE = "est",
  oE = "est",
  rE = "ests",
  tE = "ests",
  lE = "expy",
  iE = "expy",
  sE = "expy",
  uE = "expy",
  dE = "expy",
  cE = "expy",
  hE = "ext",
  gE = "ext",
  mE = "exts",
  pE = "ext",
  yE = "ext",
  fE = "exts",
  vE = "fls",
  CE = "fry",
  kE = "fld",
  wE = "flds",
  SE = "flt",
  bE = "flts",
  ME = "fld",
  BE = "flds",
  PE = "fls",
  HE = "flt",
  LE = "flts",
  WE = "frd",
  AE = "frds",
  GE = "frst",
  RE = "frst",
  NE = "frg",
  EE = "frg",
  FE = "frgs",
  DE = "frk",
  TE = "frks",
  OE = "ft",
  xE = "frd",
  VE = "frds",
  IE = "fwy",
  _E = "fwy",
  KE = "frg",
  JE = "frgs",
  zE = "frk",
  jE = "frks",
  $E = "fry",
  UE = "frst",
  qE = "ft",
  YE = "fwy",
  QE = "fwy",
  ZE = "fry",
  XE = "ft",
  eF = "fwy",
  nF = "gdn",
  aF = "gdns",
  oF = "gdn",
  rF = "gtwy",
  tF = "gtwy",
  lF = "gtwy",
  iF = "gdn",
  sF = "gdns",
  uF = "gln",
  dF = "glns",
  cF = "gln",
  hF = "glns",
  gF = "gdn",
  mF = "gdn",
  pF = "gdns",
  yF = "grn",
  fF = "grns",
  vF = "grn",
  CF = "grns",
  kF = "grv",
  wF = "grv",
  SF = "grvs",
  bF = "grv",
  MF = "grvs",
  BF = "gtwy",
  PF = "gtwy",
  HF = "hbr",
  LF = "hbr",
  WF = "hbrs",
  AF = "hbr",
  GF = "hvn",
  RF = "hvn",
  NF = "hbr",
  EF = "hbrs",
  FF = "hts",
  DF = "hts",
  TF = "hts",
  OF = "hwy",
  xF = "hwy",
  VF = "hl",
  IF = "hls",
  _F = "hwy",
  KF = "hwy",
  JF = "hl",
  zF = "hls",
  jF = "holw",
  $F = "holw",
  UF = "holw",
  qF = "holw",
  YF = "holw",
  QF = "hbr",
  ZF = "hts",
  XF = "hts",
  eD = "hvn",
  nD = "hwy",
  aD = "hwy",
  oD = "inlt",
  rD = "inlt",
  tD = "is",
  lD = "is",
  iD = "iss",
  sD = "isle",
  uD = "isle",
  dD = "is",
  cD = "iss",
  hD = "iss",
  gD = "jct",
  mD = "jct",
  pD = "jct",
  yD = "jcts",
  fD = "jcts",
  vD = "jct",
  CD = "jcts",
  kD = "jct",
  wD = "jct",
  SD = "ky",
  bD = "kys",
  MD = "knl",
  BD = "knls",
  PD = "knl",
  HD = "knl",
  LD = "knls",
  WD = "ky",
  AD = "kys",
  GD = "ln",
  RD = "lk",
  ND = "lks",
  ED = "lndg",
  FD = "ln",
  DD = "ln",
  TD = "lck",
  OD = "lcks",
  xD = "ldg",
  VD = "ldg",
  ID = "lf",
  _D = "lgt",
  KD = "lgts",
  JD = "lgt",
  zD = "lgts",
  jD = "lk",
  $D = "lks",
  UD = "ln",
  qD = "lndg",
  YD = "lndg",
  QD = "lf",
  ZD = "lck",
  XD = "lcks",
  eT = "ldg",
  nT = "ldg",
  aT = "loop",
  oT = "loop",
  rT = "mnr",
  tT = "mnrs",
  lT = "mdw",
  iT = "mdws",
  sT = "mdw",
  uT = "mdws",
  dT = "mdws",
  cT = "ml",
  hT = "mls",
  gT = "msn",
  mT = "msn",
  pT = "ml",
  yT = "mls",
  fT = "mnr",
  vT = "mnrs",
  CT = "mt",
  kT = "mtn",
  wT = "mtn",
  ST = "mtns",
  bT = "mtwy",
  MT = "mt",
  BT = "mtn",
  PT = "mtns",
  HT = "mtn",
  LT = "msn",
  WT = "msn",
  AT = "mt",
  GT = "mtn",
  RT = "mtn",
  NT = "mtns",
  ET = "mtwy",
  FT = "nck",
  DT = "nck",
  TT = "opas",
  OT = "orch",
  xT = "orch",
  VT = "orch",
  IT = "oval",
  _T = "opas",
  KT = "oval",
  JT = "park",
  zT = "park",
  jT = "pkwy",
  $T = "pkwy",
  UT = "pkwy",
  qT = "pass",
  YT = "psge",
  QT = "path",
  ZT = "path",
  XT = "pike",
  eO = "pike",
  nO = "pne",
  aO = "pnes",
  oO = "park",
  rO = "pkwy",
  tO = "pkwy",
  lO = "pkwy",
  iO = "pkwy",
  sO = "pl",
  uO = "pl",
  dO = "pln",
  cO = "plns",
  hO = "plns",
  gO = "plz",
  mO = "pln",
  pO = "plns",
  yO = "plz",
  fO = "plz",
  vO = "pne",
  CO = "pnes",
  kO = "pt",
  wO = "pts",
  SO = "prt",
  bO = "prts",
  MO = "pr",
  BO = "pr",
  PO = "pr",
  HO = "park",
  LO = "pr",
  WO = "prt",
  AO = "prts",
  GO = "psge",
  RO = "pt",
  NO = "pts",
  EO = "radl",
  FO = "radl",
  DO = "radl",
  TO = "radl",
  OO = "rnch",
  xO = "rnch",
  VO = "rpd",
  IO = "rpds",
  _O = "rd",
  KO = "rdg",
  JO = "rdg",
  zO = "rdgs",
  jO = "rds",
  $O = "rst",
  UO = "rdg",
  qO = "rdgs",
  YO = "riv",
  QO = "riv",
  ZO = "riv",
  XO = "rnch",
  e2 = "rnch",
  n2 = "rd",
  a2 = "rds",
  o2 = "rte",
  r2 = "rpd",
  t2 = "rpds",
  l2 = "rst",
  i2 = "rte",
  s2 = "riv",
  u2 = "row",
  d2 = "shl",
  c2 = "shls",
  h2 = "shl",
  g2 = "shls",
  m2 = "shr",
  p2 = "shrs",
  y2 = "shr",
  f2 = "shrs",
  v2 = "shr",
  C2 = "shrs",
  k2 = "skwy",
  w2 = "skwy",
  S2 = "smt",
  b2 = "spg",
  M2 = "spgs",
  B2 = "spg",
  P2 = "spgs",
  H2 = "spg",
  L2 = "spgs",
  W2 = "spg",
  A2 = "spgs",
  G2 = "spur",
  R2 = "spur",
  N2 = "sq",
  E2 = "sq",
  F2 = "sq",
  D2 = "sqs",
  T2 = "sqs",
  O2 = "sq",
  x2 = "sq",
  V2 = "sqs",
  I2 = "st",
  _2 = "sta",
  K2 = "sta",
  J2 = "sta",
  z2 = "sta",
  j2 = "st",
  $2 = "stra",
  U2 = "stra",
  q2 = "stra",
  Y2 = "stra",
  Q2 = "stra",
  Z2 = "stra",
  X2 = "strm",
  ex = "st",
  nx = "sts",
  ax = "strm",
  ox = "strm",
  rx = "st",
  tx = "stra",
  lx = "stra",
  ix = "sts",
  sx = "smt",
  ux = "smt",
  dx = "smt",
  cx = "ter",
  hx = "ter",
  gx = "ter",
  mx = "trwy",
  px = "tpke",
  yx = "tpke",
  fx = "trl",
  vx = "trce",
  Cx = "trce",
  kx = "trak",
  wx = "trak",
  Sx = "trfy",
  bx = "trl",
  Mx = "trl",
  Bx = "trak",
  Px = "trce",
  Hx = "trfy",
  Lx = "trak",
  Wx = "trak",
  Ax = "trl",
  Gx = "trl",
  Rx = "tpke",
  Nx = "tpke",
  Ex = "trwy",
  Fx = "tunl",
  Dx = "tunl",
  Tx = "tunl",
  Ox = "tunl",
  xx = "tunl",
  Vx = "tunl",
  Ix = "turn",
  _x = "tpke",
  Kx = "tpke",
  Jx = "upas",
  zx = "un",
  jx = "un",
  $x = "uns",
  Ux = "uns",
  qx = "upas",
  Yx = "vly",
  Qx = "vlys",
  Zx = "vly",
  Xx = "via",
  e3 = "via",
  n3 = "via",
  a3 = "via",
  o3 = "vw",
  r3 = "vws",
  t3 = "vlg",
  l3 = "vlg",
  i3 = "vlg",
  s3 = "vlgs",
  u3 = "vl",
  d3 = "vlg",
  c3 = "vlg",
  h3 = "vis",
  g3 = "vis",
  m3 = "vis",
  p3 = "vl",
  y3 = "vlg",
  f3 = "vlgs",
  v3 = "vly",
  C3 = "vly",
  k3 = "vlys",
  w3 = "vis",
  S3 = "vis",
  b3 = "vw",
  M3 = "vws",
  B3 = "walk",
  P3 = "walk",
  H3 = "way",
  L3 = "wl",
  W3 = "wls",
  A3 = "wl",
  G3 = "wls",
  R3 = "way",
  N3 = "xing",
  E3 = "xrd",
  F3 = {
    allee: SR,
    alley: bR,
    ally: MR,
    aly: BR,
    anex: PR,
    annex: HR,
    annx: LR,
    anx: WR,
    arc: AR,
    arcade: GR,
    av: RR,
    ave: NR,
    aven: ER,
    avenu: FR,
    avenue: DR,
    avn: TR,
    avnue: OR,
    bayoo: xR,
    bayou: VR,
    bch: IR,
    beach: _R,
    bend: KR,
    bg: JR,
    bgs: zR,
    blf: jR,
    blfs: $R,
    bluf: UR,
    bluff: qR,
    bluffs: YR,
    blvd: QR,
    bnd: ZR,
    bot: XR,
    bottm: eN,
    bottom: nN,
    boul: aN,
    boulevard: oN,
    boulv: rN,
    br: tN,
    branch: lN,
    brdge: iN,
    brg: sN,
    bridge: uN,
    brk: dN,
    brks: cN,
    brnch: hN,
    brook: gN,
    brooks: mN,
    btm: pN,
    burg: yN,
    burgs: fN,
    byp: vN,
    bypa: CN,
    bypas: kN,
    bypass: wN,
    byps: SN,
    byu: bN,
    camp: MN,
    canyn: BN,
    canyon: PN,
    cape: HN,
    causeway: LN,
    causway: WN,
    cen: AN,
    cent: GN,
    center: RN,
    centers: NN,
    centr: EN,
    centre: FN,
    cir: DN,
    circ: TN,
    circl: ON,
    circle: xN,
    circles: VN,
    cirs: IN,
    ck: _N,
    clb: KN,
    clf: JN,
    clfs: zN,
    cliff: jN,
    cliffs: $N,
    club: UN,
    cmn: qN,
    cmp: YN,
    cnter: QN,
    cntr: ZN,
    cnyn: XN,
    common: e1,
    cor: n1,
    corner: a1,
    corners: o1,
    cors: r1,
    course: t1,
    court: l1,
    courts: i1,
    cove: s1,
    coves: u1,
    cp: d1,
    cpe: c1,
    cr: h1,
    crcl: g1,
    crcle: m1,
    crecent: p1,
    creek: y1,
    cres: f1,
    crescent: v1,
    cresent: C1,
    crest: k1,
    crk: w1,
    crossing: S1,
    crossroad: b1,
    crscnt: M1,
    crse: B1,
    crsent: P1,
    crsnt: H1,
    crssing: L1,
    crssng: W1,
    crst: A1,
    crt: G1,
    cswy: R1,
    ct: N1,
    ctr: E1,
    ctrs: F1,
    cts: D1,
    curv: T1,
    curve: O1,
    cv: x1,
    cvs: V1,
    cyn: I1,
    dale: _1,
    dam: K1,
    div: J1,
    divide: z1,
    dl: j1,
    dm: $1,
    dr: U1,
    driv: q1,
    drive: Y1,
    drives: Q1,
    drs: Z1,
    drv: X1,
    dv: eE,
    dvd: nE,
    est: aE,
    estate: oE,
    estates: rE,
    ests: tE,
    exp: lE,
    expr: iE,
    express: sE,
    expressway: uE,
    expw: dE,
    expy: cE,
    ext: hE,
    extension: gE,
    extensions: mE,
    extn: pE,
    extnsn: yE,
    exts: fE,
    falls: vE,
    ferry: CE,
    field: kE,
    fields: wE,
    flat: SE,
    flats: bE,
    fld: ME,
    flds: BE,
    fls: PE,
    flt: HE,
    flts: LE,
    ford: WE,
    fords: AE,
    forest: GE,
    forests: RE,
    forg: NE,
    forge: EE,
    forges: FE,
    fork: DE,
    forks: TE,
    fort: OE,
    frd: xE,
    frds: VE,
    freeway: IE,
    freewy: _E,
    frg: KE,
    frgs: JE,
    frk: zE,
    frks: jE,
    frry: $E,
    frst: UE,
    frt: qE,
    frway: YE,
    frwy: QE,
    fry: ZE,
    ft: XE,
    fwy: eF,
    garden: nF,
    gardens: aF,
    gardn: oF,
    gateway: rF,
    gatewy: tF,
    gatway: lF,
    gdn: iF,
    gdns: sF,
    glen: uF,
    glens: dF,
    gln: cF,
    glns: hF,
    grden: gF,
    grdn: mF,
    grdns: pF,
    green: yF,
    greens: fF,
    grn: vF,
    grns: CF,
    grov: kF,
    grove: wF,
    groves: SF,
    grv: bF,
    grvs: MF,
    gtway: BF,
    gtwy: PF,
    harb: HF,
    harbor: LF,
    harbors: WF,
    harbr: AF,
    haven: GF,
    havn: RF,
    hbr: NF,
    hbrs: EF,
    height: FF,
    heights: DF,
    hgts: TF,
    highway: OF,
    highwy: xF,
    hill: VF,
    hills: IF,
    hiway: _F,
    hiwy: KF,
    hl: JF,
    hls: zF,
    hllw: jF,
    hollow: $F,
    hollows: UF,
    holw: qF,
    holws: YF,
    hrbor: QF,
    ht: ZF,
    hts: XF,
    hvn: eD,
    hway: nD,
    hwy: aD,
    inlet: oD,
    inlt: rD,
    is: tD,
    island: lD,
    islands: iD,
    isle: sD,
    isles: uD,
    islnd: dD,
    islnds: cD,
    iss: hD,
    jct: gD,
    jction: mD,
    jctn: pD,
    jctns: yD,
    jcts: fD,
    junction: vD,
    junctions: CD,
    junctn: kD,
    juncton: wD,
    key: SD,
    keys: bD,
    knl: MD,
    knls: BD,
    knol: PD,
    knoll: HD,
    knolls: LD,
    ky: WD,
    kys: AD,
    la: GD,
    lake: RD,
    lakes: ND,
    landing: ED,
    lane: FD,
    lanes: DD,
    lck: TD,
    lcks: OD,
    ldg: xD,
    ldge: VD,
    lf: ID,
    lgt: _D,
    lgts: KD,
    light: JD,
    lights: zD,
    lk: jD,
    lks: $D,
    ln: UD,
    lndg: qD,
    lndng: YD,
    loaf: QD,
    lock: ZD,
    locks: XD,
    lodg: eT,
    lodge: nT,
    loop: aT,
    loops: oT,
    manor: rT,
    manors: tT,
    mdw: lT,
    mdws: iT,
    meadow: sT,
    meadows: uT,
    medows: dT,
    mill: cT,
    mills: hT,
    mission: gT,
    missn: mT,
    ml: pT,
    mls: yT,
    mnr: fT,
    mnrs: vT,
    mnt: CT,
    mntain: kT,
    mntn: wT,
    mntns: ST,
    motorway: bT,
    mount: MT,
    mountain: BT,
    mountains: PT,
    mountin: HT,
    msn: LT,
    mssn: WT,
    mt: AT,
    mtin: GT,
    mtn: RT,
    mtns: NT,
    mtwy: ET,
    nck: FT,
    neck: DT,
    opas: TT,
    orch: OT,
    orchard: xT,
    orchrd: VT,
    oval: IT,
    overpass: _T,
    ovl: KT,
    park: JT,
    parks: zT,
    parkway: jT,
    parkways: $T,
    parkwy: UT,
    pass: qT,
    passage: YT,
    path: QT,
    paths: ZT,
    pike: XT,
    pikes: eO,
    pine: nO,
    pines: aO,
    pk: oO,
    pkway: rO,
    pkwy: tO,
    pkwys: lO,
    pky: iO,
    pl: sO,
    place: uO,
    plain: dO,
    plaines: cO,
    plains: hO,
    plaza: gO,
    pln: mO,
    plns: pO,
    plz: yO,
    plza: fO,
    pne: vO,
    pnes: CO,
    point: kO,
    points: wO,
    port: SO,
    ports: bO,
    pr: MO,
    prairie: BO,
    prarie: PO,
    prk: HO,
    prr: LO,
    prt: WO,
    prts: AO,
    psge: GO,
    pt: RO,
    pts: NO,
    rad: EO,
    radial: FO,
    radiel: DO,
    radl: TO,
    ranch: OO,
    ranches: xO,
    rapid: VO,
    rapids: IO,
    rd: _O,
    rdg: KO,
    rdge: JO,
    rdgs: zO,
    rds: jO,
    rest: $O,
    ridge: UO,
    ridges: qO,
    riv: YO,
    river: QO,
    rivr: ZO,
    rnch: XO,
    rnchs: e2,
    road: n2,
    roads: a2,
    route: o2,
    rpd: r2,
    rpds: t2,
    rst: l2,
    rte: i2,
    rvr: s2,
    row: u2,
    shl: d2,
    shls: c2,
    shoal: h2,
    shoals: g2,
    shoar: m2,
    shoars: p2,
    shore: y2,
    shores: f2,
    shr: v2,
    shrs: C2,
    skwy: k2,
    skyway: w2,
    smt: S2,
    spg: b2,
    spgs: M2,
    spng: B2,
    spngs: P2,
    spring: H2,
    springs: L2,
    sprng: W2,
    sprngs: A2,
    spur: G2,
    spurs: R2,
    sq: N2,
    sqr: E2,
    sqre: F2,
    sqrs: D2,
    sqs: T2,
    squ: O2,
    square: x2,
    squares: V2,
    st: I2,
    sta: _2,
    station: K2,
    statn: J2,
    stn: z2,
    str: j2,
    stra: $2,
    strav: U2,
    strave: q2,
    straven: Y2,
    stravenue: Q2,
    stravn: Z2,
    stream: X2,
    street: ex,
    streets: nx,
    streme: ax,
    strm: ox,
    strt: rx,
    strvn: tx,
    strvnue: lx,
    sts: ix,
    sumit: sx,
    sumitt: ux,
    summit: dx,
    ter: cx,
    terr: hx,
    terrace: gx,
    throughway: mx,
    tpk: px,
    tpke: yx,
    tr: fx,
    trace: vx,
    traces: Cx,
    track: kx,
    tracks: wx,
    trafficway: Sx,
    trail: bx,
    trails: Mx,
    trak: Bx,
    trce: Px,
    trfy: Hx,
    trk: Lx,
    trks: Wx,
    trl: Ax,
    trls: Gx,
    trnpk: Rx,
    trpk: Nx,
    trwy: Ex,
    tunel: Fx,
    tunl: Dx,
    tunls: Tx,
    tunnel: Ox,
    tunnels: xx,
    tunnl: Vx,
    turn: Ix,
    turnpike: _x,
    turnpk: Kx,
    underpass: Jx,
    un: zx,
    union: jx,
    unions: $x,
    uns: Ux,
    upas: qx,
    valley: Yx,
    valleys: Qx,
    vally: Zx,
    vdct: Xx,
    via: e3,
    viadct: n3,
    viaduct: a3,
    view: o3,
    views: r3,
    vill: t3,
    villag: l3,
    village: i3,
    villages: s3,
    ville: u3,
    villg: d3,
    villiage: c3,
    vis: h3,
    vist: g3,
    vista: m3,
    vl: p3,
    vlg: y3,
    vlgs: f3,
    vlly: v3,
    vly: C3,
    vlys: k3,
    vst: w3,
    vsta: S3,
    vw: b3,
    vws: M3,
    walk: B3,
    walks: P3,
    way: H3,
    well: L3,
    wells: W3,
    wl: A3,
    wls: G3,
    wy: R3,
    xing: N3,
    xrd: E3,
  },
  D3 = [
    "Tuskegee Institute",
    "Valhermoso Springs",
    "Auburn University",
    "Owens Cross Roads",
    "Magnolia Springs",
    "Lower Peach Tree",
    "Marion Junction",
    "Coffee Springs",
    "Pleasant Grove",
    "Smiths Station",
    "Bayou La Batre",
    "Dauphin Island",
    "Alexander City",
    "East Tallassee",
    "Saint Stephens",
    "Double Springs",
    "Natural Bridge",
    "Union Springs",
    "De Armanville",
    "Spring Garden",
    "Muscle Shoals",
    "Highland Home",
    "Plantersville",
    "Phil Campbell",
    "Meridianville",
    "Laceys Spring",
    "Fort Mitchell",
    "Hatchechubbee",
    "Autaugaville",
    "Spanish Fort",
    "Little River",
    "Orange Beach",
    "West Blocton",
    "Blountsville",
    "Jacksonville",
    "Edwardsville",
    "New Brockton",
    "Midland City",
    "Skipperville",
    "Collinsville",
    "Rainbow City",
    "Walnut Grove",
    "Russellville",
    "Shorterville",
    "Fort Deposit",
    "Dixons Mills",
    "Guntersville",
    "Mount Vernon",
    "Holy Trinity",
    "Cook Springs",
    "Harpersville",
    "Childersburg",
    "Jacksons Gap",
    "Vinegar Bend",
    "Billingsley",
    "Bay Minette",
    "Gulf Shores",
    "Point Clear",
    "Robertsdale",
    "Centreville",
    "Locust Fork",
    "Fitzpatrick",
    "Forest Home",
    "Choccolocco",
    "Five Points",
    "Cedar Bluff",
    "Gaylesville",
    "Maplesville",
    "Coffeeville",
    "Thomasville",
    "Millerville",
    "Castleberry",
    "River Falls",
    "Honoraville",
    "Garden City",
    "Fort Rucker",
    "Valley Head",
    "Spruce Pine",
    "West Greene",
    "Sawyerville",
    "Mount Olive",
    "Rogersville",
    "Mooresville",
    "Letohatchee",
    "Lowndesboro",
    "Hazel Green",
    "Sweet Water",
    "Union Grove",
    "Albertville",
    "Frisco City",
    "Monroeville",
    "Perdue Hill",
    "Vredenburgh",
    "Mount Meigs",
    "Ethelsville",
    "Phenix City",
    "Springville",
    "Wilsonville",
    "Gainesville",
    "Duncanville",
    "Carbon Hill",
    "Goodsprings",
    "Mc Williams",
    "Prattville",
    "Bon Secour",
    "Silverhill",
    "Summerdale",
    "Louisville",
    "Brierfield",
    "Green Pond",
    "Greenville",
    "Alexandria",
    "Wellington",
    "Gilbertown",
    "Pennington",
    "Grove Hill",
    "Gainestown",
    "Fruithurst",
    "Enterprise",
    "Crane Hill",
    "Hanceville",
    "Holly Pond",
    "Crossville",
    "Fort Payne",
    "Rainsville",
    "Deatsville",
    "Glen Allen",
    "Chancellor",
    "Moundville",
    "Greensboro",
    "Cottonwood",
    "Bridgeport",
    "Estillfork",
    "Paint Rock",
    "Scottsboro",
    "Adamsville",
    "Fultondale",
    "Gardendale",
    "Graysville",
    "New Castle",
    "Palmerdale",
    "Trussville",
    "Birmingham",
    "Cloverdale",
    "Mount Hope",
    "Town Creek",
    "Loachapoka",
    "Belle Mina",
    "Hayneville",
    "Fort Davis",
    "Brownsboro",
    "New Market",
    "Huntsville",
    "Myrtlewood",
    "Bear Creek",
    "Hackleburg",
    "Citronelle",
    "Saint Elmo",
    "Eight Mile",
    "Pine Level",
    "Montgomery",
    "Somerville",
    "Aliceville",
    "Carrollton",
    "Wattsville",
    "Columbiana",
    "Montevallo",
    "Livingston",
    "Tuscaloosa",
    "Cottondale",
    "Frankville",
    "Wagarville",
    "Pine Apple",
    "Haleyville",
    "Stapleton",
    "Woodstock",
    "Cleveland",
    "Georgiana",
    "Mc Kenzie",
    "Eastaboga",
    "Lafayette",
    "Dickinson",
    "Lineville",
    "Muscadine",
    "Sheffield",
    "Tuscumbia",
    "Evergreen",
    "Goodwater",
    "Andalusia",
    "Red Level",
    "Baileyton",
    "Daleville",
    "Geraldine",
    "Millbrook",
    "Tallassee",
    "Knoxville",
    "Abbeville",
    "Hollytree",
    "Hollywood",
    "Princeton",
    "Stevenson",
    "Woodville",
    "Flat Rock",
    "Brookside",
    "Fairfield",
    "Beaverton",
    "Sulligent",
    "Lexington",
    "Courtland",
    "Hillsboro",
    "Notasulga",
    "Demopolis",
    "Faunsdale",
    "Jefferson",
    "Nanafalia",
    "Thomaston",
    "Brilliant",
    "Chunchula",
    "Grand Bay",
    "Irvington",
    "Hope Hull",
    "Pike Road",
    "Falkville",
    "Hartselle",
    "Uniontown",
    "Brundidge",
    "Cottonton",
    "Hurtsboro",
    "Pittsview",
    "Odenville",
    "Pell City",
    "Riverside",
    "Alabaster",
    "Sylacauga",
    "Talladega",
    "Camp Hill",
    "Dadeville",
    "Brookwood",
    "Kellerman",
    "Northport",
    "Deer Park",
    "Fruitdale",
    "Mc Intosh",
    "Sunflower",
    "Arlington",
    "Catherine",
    "Pine Hill",
    "Fairhope",
    "Montrose",
    "Seminole",
    "Stockton",
    "Randolph",
    "Anniston",
    "Ohatchee",
    "Piedmont",
    "Leesburg",
    "Campbell",
    "Cragford",
    "Ranburne",
    "Cherokee",
    "Leighton",
    "Brooklyn",
    "Kellyton",
    "Rockford",
    "Weogufka",
    "Equality",
    "Lockhart",
    "Brantley",
    "Glenwood",
    "Rutledge",
    "Vinemont",
    "Pinckard",
    "Orrville",
    "Groveoak",
    "Sylvania",
    "Eclectic",
    "Wetumpka",
    "Flomaton",
    "Bankston",
    "Bellwood",
    "Hartford",
    "Forkland",
    "Headland",
    "Newville",
    "Columbia",
    "Langston",
    "Bessemer",
    "Dolomite",
    "Kimberly",
    "Mc Calla",
    "Trafford",
    "Millport",
    "Anderson",
    "Florence",
    "Waterloo",
    "Hardaway",
    "Tuskegee",
    "New Hope",
    "Magnolia",
    "Hamilton",
    "Winfield",
    "Saraland",
    "Theodore",
    "Beatrice",
    "Franklin",
    "Megargel",
    "Peterman",
    "Danville",
    "Woodland",
    "Cropwell",
    "Margaret",
    "Ashville",
    "Sterrett",
    "Vandiver",
    "Westover",
    "Sycamore",
    "Daviston",
    "Abernant",
    "Peterson",
    "Samantha",
    "Burnwell",
    "Eldridge",
    "Oak Hill",
    "Marbury",
    "Elberta",
    "Lillian",
    "Perdido",
    "Clayton",
    "Eufaula",
    "Allgood",
    "Oneonta",
    "Chapman",
    "Cusseta",
    "Clanton",
    "Jemison",
    "Thorsby",
    "Verbena",
    "Stanton",
    "Needham",
    "Whatley",
    "Jackson",
    "Hollins",
    "Ashland",
    "Kinston",
    "Florala",
    "Luverne",
    "Cullman",
    "Clopton",
    "Safford",
    "Henagar",
    "Mentone",
    "Coosada",
    "Brewton",
    "Huxford",
    "Gadsden",
    "Altoona",
    "Attalla",
    "Gallant",
    "Fayette",
    "Red Bay",
    "Malvern",
    "Slocomb",
    "Boligee",
    "Clinton",
    "Gallion",
    "Newbern",
    "Ashford",
    "Cowarts",
    "Fackler",
    "Section",
    "Trenton",
    "Shannon",
    "Warrior",
    "Detroit",
    "Kennedy",
    "Moulton",
    "Opelika",
    "Waverly",
    "Elkmont",
    "Ardmore",
    "Capshaw",
    "Shorter",
    "Harvest",
    "Madison",
    "Douglas",
    "Satsuma",
    "Goodway",
    "Mathews",
    "Decatur",
    "Trinity",
    "Mc Shan",
    "Roanoke",
    "Wedowee",
    "Ragland",
    "Chelsea",
    "Maylene",
    "Saginaw",
    "Siluria",
    "Vincent",
    "Bellamy",
    "Bon Air",
    "Lincoln",
    "Munford",
    "Coaling",
    "Fosters",
    "Quinton",
    "Sumiton",
    "Cordova",
    "Parrish",
    "Townley",
    "Calvert",
    "Malcolm",
    "Alberta",
    "Addison",
    "Houston",
    "Daphne",
    "Loxley",
    "Lawley",
    "Hayden",
    "Remlap",
    "Midway",
    "Perote",
    "Oxford",
    "Weaver",
    "Valley",
    "Lanett",
    "Centre",
    "Butler",
    "Jachin",
    "Lisman",
    "Melvin",
    "Fulton",
    "Heflin",
    "Repton",
    "Dozier",
    "Petrey",
    "Bremen",
    "Ariton",
    "Newton",
    "Minter",
    "Sardis",
    "Dawson",
    "Elmore",
    "Atmore",
    "Hodges",
    "Geneva",
    "Samson",
    "Dothan",
    "Gordon",
    "Pansey",
    "Dutton",
    "Pisgah",
    "Bryant",
    "Higdon",
    "Docena",
    "Morris",
    "Pinson",
    "Watson",
    "Vernon",
    "Killen",
    "Auburn",
    "Athens",
    "Lester",
    "Tanner",
    "Gurley",
    "Normal",
    "Ryland",
    "Linden",
    "Horton",
    "Creola",
    "Semmes",
    "Wilmer",
    "Mobile",
    "Lapine",
    "Marion",
    "Reform",
    "Goshen",
    "Graham",
    "Wadley",
    "Steele",
    "Calera",
    "Helena",
    "Pelham",
    "Shelby",
    "Wilton",
    "Emelle",
    "Panola",
    "Alpine",
    "Echola",
    "Empire",
    "Jasper",
    "Kansas",
    "Nauvoo",
    "Oakman",
    "Sipsey",
    "Chatom",
    "Millry",
    "Tibbie",
    "Boykin",
    "Camden",
    "Furman",
    "Delmar",
    "Booth",
    "Jones",
    "Foley",
    "Brent",
    "Bynum",
    "Silas",
    "Toxey",
    "Delta",
    "Lenox",
    "Range",
    "Gantt",
    "Joppa",
    "Logan",
    "Ozark",
    "Selma",
    "Tyler",
    "Fyffe",
    "Titus",
    "Berry",
    "Black",
    "Eutaw",
    "Akron",
    "Adger",
    "Alton",
    "Leeds",
    "Mulga",
    "Sayre",
    "Salem",
    "Toney",
    "Grant",
    "Bucks",
    "Coden",
    "Excel",
    "Mexia",
    "Uriah",
    "Cecil",
    "Grady",
    "Ramer",
    "Gordo",
    "Banks",
    "Seale",
    "Moody",
    "Coker",
    "Elrod",
    "Ralph",
    "Vance",
    "Leroy",
    "Arley",
    "Clio",
    "Ward",
    "Elba",
    "Jack",
    "Wing",
    "Ider",
    "Kent",
    "Belk",
    "Vina",
    "Webb",
    "Clay",
    "Guin",
    "Arab",
    "Boaz",
    "Axis",
    "Troy",
    "Epes",
    "Cuba",
    "York",
    "Buhl",
    "Dora",
    "Lynn",
    "Opp",
    "Eva",
    "Coy",
  ],
  T3 = [
    "Denali National Park",
    "Saint George Island",
    "Manley Hot Springs",
    "Saint Paul Island",
    "Mountain Village",
    "Fort Wainwright",
    "Russian Mission",
    "Tenakee Springs",
    "Lake Minchumina",
    "Stevens Village",
    "Cooper Landing",
    "Chignik Lagoon",
    "White Mountain",
    "Brevig Mission",
    "Anaktuvuk Pass",
    "Delta Junction",
    "Port Alexander",
    "Arctic Village",
    "Crooked Creek",
    "Lower Kalskag",
    "Pilot Station",
    "Port Alsworth",
    "Trapper Creek",
    "Saint Michael",
    "Copper Center",
    "Bettles Field",
    "Dutch Harbor",
    "Goodnews Bay",
    "Kwigillingok",
    "South Naknek",
    "Clarks Point",
    "New Stuyahok",
    "Anchor Point",
    "Chignik Lake",
    "Meyers Chuck",
    "Coffman Cove",
    "Eagle River",
    "Toksook Bay",
    "Nunapitchuk",
    "Tuntutuliak",
    "King Salmon",
    "Eielson Afb",
    "Saint Marys",
    "Scammon Bay",
    "Port Heiden",
    "Pilot Point",
    "Prudhoe Bay",
    "Point Baker",
    "Fort Greely",
    "Chalkyitsik",
    "False Pass",
    "Sand Point",
    "Kongiganak",
    "Dillingham",
    "North Pole",
    "Two Rivers",
    "Clam Gulch",
    "Moose Pass",
    "Port Lions",
    "Larsen Bay",
    "Old Harbor",
    "Hooper Bay",
    "Nunam Iqua",
    "Perryville",
    "Unalakleet",
    "Shaktoolik",
    "Shishmaref",
    "Point Hope",
    "Wainwright",
    "Thorne Bay",
    "Metlakatla",
    "Elfin Cove",
    "Glennallen",
    "Petersburg",
    "Holy Cross",
    "Fort Yukon",
    "King Cove",
    "Anchorage",
    "Chefornak",
    "Quinhagak",
    "Red Devil",
    "Sleetmute",
    "Nightmute",
    "Aleknagik",
    "Manokotak",
    "Fairbanks",
    "Ninilchik",
    "Ketchikan",
    "Ward Cove",
    "Nondalton",
    "Pedro Bay",
    "Talkeetna",
    "Point Lay",
    "Tanacross",
    "Allakaket",
    "Cold Bay",
    "Nikolski",
    "Unalaska",
    "Girdwood",
    "Akiachak",
    "Kasigluk",
    "Kwethluk",
    "Mekoryuk",
    "Napakiak",
    "Platinum",
    "Tuluksak",
    "Cantwell",
    "Anderson",
    "Auke Bay",
    "Seldovia",
    "Soldotna",
    "Sterling",
    "Ouzinkie",
    "Alakanuk",
    "Marshall",
    "Levelock",
    "Big Lake",
    "Skwentna",
    "Stebbins",
    "Savoonga",
    "Kaktovik",
    "Buckland",
    "Kivalina",
    "Kotzebue",
    "Shungnak",
    "Hydaburg",
    "Gustavus",
    "Northway",
    "Tatitlek",
    "Whittier",
    "Wrangell",
    "Grayling",
    "Mc Grath",
    "Shageluk",
    "Chugiak",
    "Kalskag",
    "Tununak",
    "Douglas",
    "Kasilof",
    "Nikiski",
    "Emmonak",
    "Chignik",
    "Iliamna",
    "Wasilla",
    "Houston",
    "Gambell",
    "Nuiqsut",
    "Atqasuk",
    "Deering",
    "Noorvik",
    "Selawik",
    "Klawock",
    "Yakutat",
    "Pelican",
    "Skagway",
    "Chicken",
    "Chitina",
    "Cordova",
    "Takotna",
    "Nikolai",
    "Central",
    "Koyukuk",
    "Rampart",
    "Venetie",
    "Akutan",
    "Indian",
    "Bethel",
    "Kipnuk",
    "Naknek",
    "Togiak",
    "Salcha",
    "Haines",
    "Juneau",
    "Seward",
    "Tyonek",
    "Karluk",
    "Kodiak",
    "Chevak",
    "Kotlik",
    "Egegik",
    "Palmer",
    "Sutton",
    "Willow",
    "Teller",
    "Barrow",
    "Noatak",
    "Ambler",
    "Angoon",
    "Hoonah",
    "Gakona",
    "Valdez",
    "Beaver",
    "Circle",
    "Galena",
    "Hughes",
    "Huslia",
    "Kaltag",
    "Nenana",
    "Nulato",
    "Tanana",
    "Akiak",
    "Aniak",
    "Clear",
    "Healy",
    "Ekwok",
    "Ester",
    "Homer",
    "Kenai",
    "Koyuk",
    "Wales",
    "Kiana",
    "Kobuk",
    "Craig",
    "Hyder",
    "Sitka",
    "Eagle",
    "Anvik",
    "Minto",
    "Adak",
    "Atka",
    "Jber",
    "Hope",
    "Elim",
    "Nome",
    "Kake",
    "Ruby",
    "Eek",
    "Tok",
  ],
  O3 = [
    "Petrified Forest Natl Pk",
    "Luke Air Force Base",
    "White Mountain Lake",
    "Kykotsmovi Village",
    "Temple Bar Marina",
    "Black Canyon City",
    "Chandler Heights",
    "Lake Havasu City",
    "Corona de Tucson",
    "Paradise Valley",
    "Litchfield Park",
    "Apache Junction",
    "Prescott Valley",
    "Saint Michaels",
    "Fountain Hills",
    "San Tan Valley",
    "Lake Montezuma",
    "Dewey Humboldt",
    "Springerville",
    "Fort Defiance",
    "Fort Huachuca",
    "Huachuca City",
    "Gray Mountain",
    "Marble Canyon",
    "Tortilla Flat",
    "Fort Mcdowell",
    "Sun City West",
    "Colorado City",
    "Golden Valley",
    "Bullhead City",
    "Peach Springs",
    "Mohave Valley",
    "Dolan Springs",
    "Teec Nos Pos",
    "Sierra Vista",
    "Forest Lakes",
    "Grand Canyon",
    "Willow Beach",
    "Clay Springs",
    "Indian Wells",
    "Keams Canyon",
    "Green Valley",
    "Mount Lemmon",
    "Arizona City",
    "Valley Farms",
    "Chino Valley",
    "Skull Valley",
    "South Tucson",
    "Saint Johns",
    "Window Rock",
    "Pirtleville",
    "Saint David",
    "Mormon Lake",
    "Tonto Basin",
    "Fort Thomas",
    "Queen Creek",
    "Fort Mohave",
    "Littlefield",
    "Fort Apache",
    "Joseph City",
    "Second Mesa",
    "Gold Canyon",
    "Casa Grande",
    "Lukachukai",
    "Dennehotso",
    "Many Farms",
    "Red Valley",
    "Rock Point",
    "Round Rock",
    "Munds Park",
    "Happy Jack",
    "San Carlos",
    "Quartzsite",
    "Scottsdale",
    "Cave Creek",
    "Morristown",
    "Palo Verde",
    "Wickenburg",
    "Whiteriver",
    "Sun Valley",
    "San Manuel",
    "Tumacacori",
    "Camp Verde",
    "Cottonwood",
    "Crown King",
    "San Simon",
    "Tombstone",
    "Flagstaff",
    "Bellemont",
    "Tuba City",
    "North Rim",
    "Winkelman",
    "Roosevelt",
    "Ehrenberg",
    "New River",
    "Rio Verde",
    "Arlington",
    "El Mirage",
    "Gila Bend",
    "Youngtown",
    "Hackberry",
    "Valentine",
    "Overgaard",
    "Snowflake",
    "Hotevilla",
    "Lukeville",
    "Sahuarita",
    "Stanfield",
    "Patagonia",
    "Clarkdale",
    "Cornville",
    "Nutrioso",
    "Chambers",
    "Hereford",
    "Pomerene",
    "Fredonia",
    "Williams",
    "Claypool",
    "Thatcher",
    "Chandler",
    "Glendale",
    "Avondale",
    "Goodyear",
    "Sun City",
    "Tolleson",
    "Wittmann",
    "Surprise",
    "Carefree",
    "Hualapai",
    "Chloride",
    "Meadview",
    "Show Low",
    "Lakeside",
    "Pinedale",
    "Woodruff",
    "Holbrook",
    "Blue Gap",
    "Catalina",
    "Bapchule",
    "Coolidge",
    "Florence",
    "Maricopa",
    "Red Rock",
    "Superior",
    "Rio Rico",
    "Congress",
    "Prescott",
    "Ash Fork",
    "Humboldt",
    "Kirkland",
    "Seligman",
    "Dateland",
    "San Luis",
    "Somerton",
    "Sanders",
    "Nazlini",
    "Cochise",
    "Douglas",
    "Dragoon",
    "Elfrida",
    "Mc Neal",
    "Willcox",
    "Cameron",
    "Tonalea",
    "Kaibeto",
    "Peridot",
    "Central",
    "Safford",
    "Solomon",
    "Clifton",
    "Morenci",
    "Phoenix",
    "Gilbert",
    "Buckeye",
    "Cashion",
    "Tonopah",
    "Waddell",
    "Wikieup",
    "Kingman",
    "Cibecue",
    "Pinetop",
    "Kayenta",
    "Polacca",
    "Winslow",
    "Arivaca",
    "Cortaro",
    "Rillito",
    "Picacho",
    "Sacaton",
    "Mammoth",
    "Nogales",
    "Sonoita",
    "Yarnell",
    "Paulden",
    "Rimrock",
    "Gadsden",
    "Wellton",
    "Alpine",
    "Concho",
    "Mcnary",
    "Vernon",
    "Chinle",
    "Ganado",
    "Lupton",
    "Tsaile",
    "Benson",
    "Bisbee",
    "Pearce",
    "Sedona",
    "Hayden",
    "Payson",
    "Duncan",
    "Cibola",
    "Parker",
    "Salome",
    "Wenden",
    "Poston",
    "Higley",
    "Aguila",
    "Laveen",
    "Peoria",
    "Oatman",
    "Topock",
    "Taylor",
    "Shonto",
    "Sasabe",
    "Topawa",
    "Marana",
    "Tucson",
    "Kearny",
    "Oracle",
    "Bagdad",
    "Jerome",
    "Eagar",
    "Greer",
    "Houck",
    "Bowie",
    "Parks",
    "Leupp",
    "Supai",
    "Globe",
    "Miami",
    "Young",
    "Bylas",
    "Bouse",
    "Tempe",
    "Yucca",
    "Heber",
    "Pinon",
    "Sells",
    "Elgin",
    "Amado",
    "Tubac",
    "Dewey",
    "Mayer",
    "Tacna",
    "Naco",
    "Page",
    "Pine",
    "Eden",
    "Pima",
    "Blue",
    "Mesa",
    "Vail",
    "Eloy",
    "Roll",
    "Yuma",
    "Ajo",
  ],
  x3 = [
    "Little Rock Air Force Base",
    "Hot Springs National Park",
    "Hot Springs Village",
    "North Little Rock",
    "State University",
    "Frenchmans Bayou",
    "Ravenden Springs",
    "Cherokee Village",
    "Crocketts Bluff",
    "Sulphur Springs",
    "Tumbling Shoals",
    "Mineral Springs",
    "Pleasant Plains",
    "College Station",
    "Siloam Springs",
    "Valley Springs",
    "Eureka Springs",
    "Whelen Springs",
    "Crawfordsville",
    "Mammoth Spring",
    "Horseshoe Bend",
    "Mount Pleasant",
    "De Valls Bluff",
    "Hickory Plains",
    "Pleasant Grove",
    "Saint Charles",
    "Fountain Hill",
    "Mountain Home",
    "Peach Orchard",
    "Saint Francis",
    "Heber Springs",
    "Cherry Valley",
    "Hickory Ridge",
    "Arkansas City",
    "Mountain Pine",
    "Blue Mountain",
    "Western Grove",
    "Witts Springs",
    "Evening Shade",
    "Mountain View",
    "Junction City",
    "Fairfield Bay",
    "Prairie Grove",
    "Griffithville",
    "Cave Springs",
    "Diamond City",
    "Green Forest",
    "Lake Village",
    "New Edinburg",
    "Center Ridge",
    "Mountainburg",
    "West Memphis",
    "Mount Vernon",
    "Locust Grove",
    "Sulphur Rock",
    "Garland City",
    "Walnut Ridge",
    "Pencil Bluff",
    "Marble Falls",
    "Poplar Grove",
    "Murfreesboro",
    "Russellville",
    "Jacksonville",
    "Wrightsville",
    "Warm Springs",
    "Forrest City",
    "Poughkeepsie",
    "Fayetteville",
    "Cotton Plant",
    "Bentonville",
    "Bella Vista",
    "Little Rock",
    "Arkadelphia",
    "Hattieville",
    "Plumerville",
    "Solgohachia",
    "Springfield",
    "Natural Dam",
    "Jessieville",
    "Prattsville",
    "Beech Grove",
    "Calico Rock",
    "Violet Hill",
    "Jacksonport",
    "Clarksville",
    "Bull Shoals",
    "Blytheville",
    "Holly Grove",
    "Willisville",
    "Mount Judea",
    "West Helena",
    "Marked Tree",
    "Vandervoort",
    "Mount Holly",
    "Elm Springs",
    "Briggsville",
    "Centerville",
    "Clarkridge",
    "Berryville",
    "Cedarville",
    "Clarkedale",
    "Monticello",
    "Winchester",
    "Greenbrier",
    "Charleston",
    "Delaplaine",
    "Mc Caskill",
    "Washington",
    "Bonnerdale",
    "Friendship",
    "Jones Mill",
    "Batesville",
    "Oil Trough",
    "Beedeville",
    "Pine Bluff",
    "White Hall",
    "Hagarville",
    "Lewisville",
    "Black Rock",
    "Smithville",
    "Strawberry",
    "New Blaine",
    "Booneville",
    "Hindsville",
    "Huntsville",
    "Saint Paul",
    "West Ridge",
    "Leachville",
    "Bluff City",
    "Perryville",
    "Harrisburg",
    "Waldenburg",
    "Board Camp",
    "Pottsville",
    "Sweet Home",
    "Pocahontas",
    "Fort Smith",
    "Huntington",
    "Ben Lomond",
    "Lockesburg",
    "Bee Branch",
    "Evansville",
    "Farmington",
    "Springdale",
    "West Point",
    "Belleville",
    "Dardanelle",
    "Stuttgart",
    "Henderson",
    "Gassville",
    "Centerton",
    "Maysville",
    "Pea Ridge",
    "Lead Hill",
    "Hermitage",
    "Oak Grove",
    "Mc Dougal",
    "Kingsland",
    "Cleveland",
    "Jerusalem",
    "Morrilton",
    "Jonesboro",
    "Black Oak",
    "Brookland",
    "Lake City",
    "Uniontown",
    "Van Buren",
    "Edmondson",
    "Snow Lake",
    "Mayflower",
    "Elizabeth",
    "Grapevine",
    "Marmaduke",
    "Paragould",
    "Donaldson",
    "Nashville",
    "Charlotte",
    "Brockwell",
    "Melbourne",
    "Pineville",
    "Tuckerman",
    "Altheimer",
    "Jefferson",
    "Wabbaseka",
    "Coal Hill",
    "Knoxville",
    "La Grange",
    "Star City",
    "Pettigrew",
    "Yellville",
    "Doddridge",
    "Texarkana",
    "Clarendon",
    "Caddo Gap",
    "Mount Ida",
    "Parthenon",
    "Chidester",
    "Rivervale",
    "Alexander",
    "Mabelvale",
    "Palestine",
    "Traskwood",
    "Mansfield",
    "Saint Joe",
    "Greenwood",
    "Williford",
    "Cave City",
    "Fifty Six",
    "El Dorado",
    "Smackover",
    "Greenland",
    "Tontitown",
    "West Fork",
    "Bald Knob",
    "Higginson",
    "Patterson",
    "Plainview",
    "Humphrey",
    "Crossett",
    "Montrose",
    "Parkdale",
    "Portland",
    "Gamaliel",
    "Big Flat",
    "Lakeview",
    "Garfield",
    "Gravette",
    "Harrison",
    "Thornton",
    "Greenway",
    "Edgemont",
    "Magnolia",
    "Mulberry",
    "Vanndale",
    "Carthage",
    "Sparkman",
    "Mc Gehee",
    "Damascus",
    "Lonsdale",
    "Sheridan",
    "Columbus",
    "Bismarck",
    "Saratoga",
    "Franklin",
    "Redfield",
    "Sherrill",
    "Powhatan",
    "Ravenden",
    "Sedgwick",
    "Brickeys",
    "Marianna",
    "Yorktown",
    "Winthrop",
    "Delaware",
    "Scranton",
    "Magazine",
    "Ratcliff",
    "Carlisle",
    "Kingston",
    "Burdette",
    "Brinkley",
    "Prescott",
    "Stephens",
    "Lambrook",
    "Mellwood",
    "Glenwood",
    "Hatfield",
    "Maumelle",
    "Sherwood",
    "Caldwell",
    "Wheatley",
    "Marshall",
    "Hartford",
    "De Queen",
    "Ash Flat",
    "Marcella",
    "Norphlet",
    "Scotland",
    "Canehill",
    "Bradford",
    "Judsonia",
    "Pangburn",
    "Rose Bud",
    "Mc Crory",
    "Bluffton",
    "Danville",
    "Gravelly",
    "Casscoe",
    "De Witt",
    "Gillett",
    "Tichnor",
    "Hamburg",
    "Norfork",
    "Decatur",
    "Gateway",
    "Hiwasse",
    "Bergman",
    "Everton",
    "Hampton",
    "Harrell",
    "Dermott",
    "Okolona",
    "Corning",
    "Piggott",
    "Pollard",
    "Success",
    "Quitman",
    "Wilburn",
    "Concord",
    "Emerson",
    "Mc Neil",
    "Menifee",
    "Caraway",
    "Monette",
    "Chester",
    "Gilmore",
    "Proctor",
    "Turrell",
    "Fordyce",
    "Pickens",
    "Vilonia",
    "Wooster",
    "Glencoe",
    "Sturkie",
    "Walcott",
    "Blevins",
    "Malvern",
    "Cushman",
    "Magness",
    "Wideman",
    "Wiseman",
    "Newport",
    "Swifton",
    "Reydell",
    "Hartman",
    "Bradley",
    "Buckner",
    "Imboden",
    "Minturn",
    "Saffell",
    "Alleene",
    "Ashdown",
    "Foreman",
    "Subiaco",
    "England",
    "Humnoke",
    "Flippin",
    "Oakland",
    "Armorel",
    "Bassett",
    "Gosnell",
    "Osceola",
    "Rosston",
    "Compton",
    "Bearden",
    "Bigelow",
    "Houston",
    "Crumrod",
    "Marvell",
    "Antoine",
    "Delight",
    "Langley",
    "Newhope",
    "Lepanto",
    "Tyronza",
    "Trumann",
    "Grannis",
    "Des Arc",
    "Hensley",
    "Woodson",
    "Biggers",
    "Maynard",
    "Goodwin",
    "Madison",
    "Widener",
    "Bauxite",
    "Waldron",
    "Gilbert",
    "Harriet",
    "Pindall",
    "Barling",
    "Hackett",
    "Midland",
    "Gillham",
    "Horatio",
    "Choctaw",
    "Clinton",
    "Shirley",
    "Dennard",
    "Johnson",
    "Lincoln",
    "Summers",
    "Winslow",
    "El Paso",
    "Kensett",
    "Romance",
    "Russell",
    "Augusta",
    "Gregory",
    "Almyra",
    "Wilmot",
    "Cotter",
    "Midway",
    "Gentry",
    "Lowell",
    "Rogers",
    "Alpena",
    "Jersey",
    "Warren",
    "Beaver",
    "Eudora",
    "Beirne",
    "Curtis",
    "Gurdon",
    "Alpine",
    "Knobel",
    "Rector",
    "Higden",
    "Drasco",
    "Taylor",
    "Marion",
    "Parkin",
    "Rohwer",
    "Tillar",
    "Watson",
    "Wilmar",
    "Conway",
    "Branch",
    "Pearcy",
    "Fulton",
    "Benton",
    "Dierks",
    "Umpire",
    "Floral",
    "Newark",
    "Salado",
    "Oxford",
    "Amagon",
    "Tupelo",
    "Grubbs",
    "Moscow",
    "Tucker",
    "Wright",
    "Stamps",
    "Alicia",
    "Portia",
    "Aubrey",
    "Haynes",
    "Wilton",
    "Austin",
    "Lonoke",
    "Wesley",
    "Witter",
    "Summit",
    "Driver",
    "Joiner",
    "Keiser",
    "Luxora",
    "Wilson",
    "Etowah",
    "Manila",
    "Monroe",
    "Norman",
    "Jasper",
    "Vendor",
    "Camden",
    "Louann",
    "Barton",
    "Elaine",
    "Helena",
    "Oneida",
    "Turner",
    "Wabash",
    "Fisher",
    "Weiner",
    "Wickes",
    "Atkins",
    "Hector",
    "London",
    "Pelsor",
    "Biscoe",
    "Roland",
    "O Kean",
    "Hughes",
    "Bryant",
    "Harvey",
    "Leslie",
    "Lavaca",
    "Sidney",
    "Calion",
    "Huttig",
    "Lawson",
    "Strong",
    "Elkins",
    "Goshen",
    "Morrow",
    "Garner",
    "Letona",
    "Mc Rae",
    "Searcy",
    "Hunter",
    "Havana",
    "Ethel",
    "Avoca",
    "Omaha",
    "Banks",
    "Amity",
    "Datto",
    "Rison",
    "Waldo",
    "Egypt",
    "Earle",
    "Wynne",
    "Dumas",
    "Enola",
    "Altus",
    "Cecil",
    "Ozark",
    "Bexar",
    "Salem",
    "Viola",
    "Royal",
    "Leola",
    "Poyen",
    "Thida",
    "Desha",
    "Rosie",
    "Dolph",
    "Guion",
    "Lamar",
    "Ozone",
    "Hoxie",
    "Gould",
    "Grady",
    "Ogden",
    "Paris",
    "Cabot",
    "Combs",
    "Pyatt",
    "Fouke",
    "Genoa",
    "Dyess",
    "Story",
    "Emmet",
    "Hasty",
    "Ponca",
    "Adona",
    "Perry",
    "Kirby",
    "Tilly",
    "Dover",
    "Hazen",
    "Scott",
    "Reyno",
    "Paron",
    "Boles",
    "Parks",
    "Hardy",
    "Timbo",
    "Beebe",
    "Rover",
    "Prim",
    "Bono",
    "Cash",
    "Alma",
    "Dyer",
    "Rudy",
    "Ivan",
    "Alix",
    "Camp",
    "Gepp",
    "Lafe",
    "Hope",
    "Ozan",
    "Cord",
    "Sage",
    "Diaz",
    "Oark",
    "Lynn",
    "Moro",
    "Ward",
    "Peel",
    "Dell",
    "Oden",
    "Sims",
    "Cale",
    "Deer",
    "Casa",
    "Lexa",
    "Cove",
    "Mena",
    "Colt",
    "Heth",
    "Onia",
    "Ida",
    "Bay",
    "Guy",
    "Coy",
    "Keo",
    "Roe",
    "Ulm",
    "Fox",
    "Ola",
  ],
  V3 = JSON.parse(
    '["Kings Canyon National Pk","Palos Verdes Peninsula","Yosemite National Park","Rancho Santa Margarita","March Air Reserve Base","California Hot Springs","Sequoia National Park","Port Hueneme Cbc Base","La Canada Flintridge","Rancho Palos Verdes","Point Reyes Station","San Juan Capistrano","South San Francisco","Pine Mountain Club","Hidden Valley Lake","Blairsden Graeagle","Desert Hot Springs","North Palm Springs","Cardiff By The Sea","Pacific Palisades","Belvedere Tiburon","Carmel By The Sea","San Juan Bautista","Green Valley Lake","Boyes Hot Springs","Strawberry Valley","South Lake Tahoe","Mono Hot Springs","Santa Fe Springs","Hawaiian Gardens","City Of Industry","Hacienda Heights","Huntington Beach","Capistrano Beach","Rancho Cucamonga","Twentynine Palms","Newberry Springs","Palomar Mountain","Fall River Mills","Montgomery Creek","Westlake Village","Diamond Springs","Shingle Springs","El Dorado Hills","Wofford Heights","California City","Huntington Park","Manhattan Beach","Stevenson Ranch","North Hollywood","Rowland Heights","Santa Rita Park","South Dos Palos","American Canyon","Rough And Ready","Fountain Valley","Mountain Center","North Highlands","Cedarpines Park","Running Springs","Borrego Springs","Rancho Santa Fe","San Luis Obispo","Santa Margarita","Redwood Estates","Forks Of Salmon","Point Mugu Nawc","West Sacramento","Knights Landing","Hathaway Pines","Mokelumne Hill","Mountain Ranch","Rail Road Flat","Valley Springs","Fields Landing","Kettleman City","Clearlake Oaks","Clearlake Park","Witter Springs","West Hollywood","Marina Del Rey","South Pasadena","Canyon Country","Woodland Hills","Valley Village","Universal City","South El Monte","Catheys Valley","Redwood Valley","North San Juan","Foothill Ranch","Corona Del Mar","Trabuco Canyon","Olympic Valley","Crescent Mills","Cathedral City","Thousand Palms","Citrus Heights","Rancho Cordova","Morongo Valley","Lake Arrowhead","Lucerne Valley","San Bernardino","Imperial Beach","Camp Pendleton","Warner Springs","Portola Valley","Mount Hamilton","Round Mountain","Stewarts Point","Pleasant Grove","Trinity Center","Mi Wuk Village","East Palo Alto","Castro Valley","Clipper Mills","Feather Falls","Stirling City","Discovery Bay","Bethel Island","Pleasant Hill","Crescent City","Garden Valley","Grizzly Flats","Pollock Pines","Hamilton City","Mckinleyville","Phillipsville","Lake Isabella","Beverly Hills","Hermosa Beach","Redondo Beach","Playa Del Rey","Granada Hills","Mission Hills","Santa Clarita","Panorama City","Monterey Park","Forest Knolls","Stinson Beach","Potter Valley","Mammoth Lakes","Carmel Valley","Pacific Grove","Laguna Niguel","Newport Coast","Newport Beach","Mission Viejo","Carnelian Bay","Meadow Valley","Desert Center","Rancho Mirage","Lake Elsinore","Moreno Valley","Grand Terrace","Big Bear City","Big Bear Lake","Mountain Pass","National City","Spring Valley","Valley Center","San Francisco","Arroyo Grande","Half Moon Bay","Santa Barbara","Mountain View","Boulder Creek","Scotts Valley","Goodyears Bar","Klamath River","Birds Landing","Duncans Mills","The Sea Ranch","Crows Landing","Junction City","Thousand Oaks","Browns Valley","Markleeville","Sutter Creek","Forest Ranch","Copperopolis","Douglas Flat","Walnut Creek","Twin Bridges","Cantua Creek","Tranquillity","Willow Creek","Death Valley","Independence","Buttonwillow","Frazier Park","Johannesburg","Bell Gardens","Santa Monica","Mount Wilson","Sierra Madre","Verdugo City","La Crescenta","Agoura Hills","Porter Ranch","San Fernando","Sherman Oaks","Baldwin Park","Corte Madera","Dillon Beach","San Geronimo","Coulterville","Little River","Fort Bidwell","Pebble Beach","Moss Landing","Saint Helena","Chicago Park","Soda Springs","Grass Valley","Los Alamitos","Sunset Beach","Laguna Woods","Laguna Beach","Laguna Hills","San Clemente","Ladera Ranch","Garden Grove","Emigrant Gap","Meadow Vista","Taylorsville","Indian Wells","Palm Springs","Quail Valley","Walnut Grove","Yucca Valley","Angelus Oaks","Apple Valley","Forest Falls","Red Mountain","Mount Laguna","Pauma Valley","San Luis Rey","Santa Ysabel","Solana Beach","Grover Beach","Redwood City","San Gregorio","Mount Hermon","French Gulch","Mount Shasta","Seiad Valley","Rohnert Park","Villa Grande","Paynes Creek","Douglas City","Farmersville","Three Rivers","Big Oak Flat","Chinese Camp","Soulsbyville","Newbury Park","Port Hueneme","Camptonville","Oregon House","San Leandro","San Lorenzo","Amador City","River Pines","Berry Creek","Angels Camp","San Andreas","Wilseyville","El Sobrante","Smith River","Mount Aukum","Placerville","Five Points","Orange Cove","Raisin City","San Joaquin","Shaver Lake","Bridgeville","Garberville","Salton City","Westmorland","Winterhaven","Little Lake","Mc Kittrick","Bakersfield","Kelseyville","Los Angeles","Playa Vista","Culver City","Pico Rivera","Harbor City","Signal Hill","Canoga Park","North Hills","Studio City","Toluca Lake","Mount Baldy","Diamond Bar","San Gabriel","Temple City","West Covina","Lake Hughes","Pearblossom","Mill Valley","San Anselmo","San Quentin","Laytonville","Point Arena","Davis Creek","Castroville","Pope Valley","Cedar Ridge","Penn Valley","Nevada City","Smartsville","Lake Forest","East Irvine","Midway City","Aliso Viejo","Westminster","Yorba Linda","Granite Bay","Kings Beach","Tahoe Vista","Palm Desert","San Jacinto","Sloughhouse","Chino Hills","Joshua Tree","Pioneertown","Bloomington","Lytle Creek","Pinon Hills","Victorville","Chula Vista","Lemon Grove","Pine Valley","French Camp","Avila Beach","Paso Robles","Pismo Beach","Carpinteria","Santa Maria","Morgan Hill","New Almaden","Santa Clara","Watsonville","Bella Vista","Shasta Lake","Old Station","Shingletown","Whiskeytown","Downieville","Sierra City","Sierraville","Suisun City","Valley Ford","Camp Meeker","Forestville","Geyserville","Guerneville","Los Molinos","Burnt Ranch","Weaverville","Camp Nelson","Porterville","Springville","Terra Bella","Twain Harte","Santa Paula","Simi Valley","Brownsville","Westchester","Pleasanton","Union City","Emeryville","Fiddletown","Kit Carson","Pine Grove","Forbestown","Campo Seco","West Point","El Cerrito","Port Costa","Georgetown","Pilot Hill","Butte City","Alderpoint","Blocksburg","Hydesville","Myers Flat","Whitethorn","Calipatria","Palo Verde","Glennville","Lost Hills","Mc Farland","Ridgecrest","Lower Lake","Middletown","Upper Lake","Janesville","Litchfield","Susanville","Dodgertown","El Segundo","South Gate","Montebello","Bellflower","Wilmington","Long Beach","San Marino","West Hills","Chatsworth","Northridge","Sun Valley","Littlerock","Chowchilla","Coarsegold","North Fork","San Rafael","Fort Bragg","Manchester","Livingston","Cedarville","Eagleville","Bridgeport","Lee Vining","Greenfield","Rutherford","Yountville","Washington","Buena Park","Seal Beach","Costa Mesa","Dana Point","Villa Park","Foresthill","Dutch Flat","Tahoe City","Canyon Dam","Greenville","Beckwourth","Whitewater","Winchester","Sacramento","Carmichael","Orangevale","Tres Pinos","Parker Dam","Fort Irwin","Cedar Glen","Loma Linda","Oro Grande","Twin Peaks","Wrightwood","San Marcos","San Ysidro","Farmington","Woodbridge","Atascadero","San Miguel","San Simeon","Burlingame","El Granada","Menlo Park","Moss Beach","San Carlos","Summerland","New Cuyama","Los Alamos","Los Olivos","Santa Ynez","San Martin","Ben Lomond","Santa Cruz","Cottonwood","Palo Cedro","Fort Jones","Happy Camp","Travis Afb","Bodega Bay","Santa Rosa","Cloverdale","Glen Ellen","Healdsburg","Occidental","Sebastopol","Mill Creek","Lemon Cove","Strathmore","Strawberry","Clarksburg","Marysville","Olivehurst","Livermore","Altaville","Vallecito","Princeton","Stonyford","Brentwood","Knightsen","Lafayette","Pittsburg","San Ramon","San Pablo","Fort Dick","El Dorado","Greenwood","Echo Lake","Big Creek","Caruthers","Firebaugh","Kingsburg","Lakeshore","Miramonte","Riverdale","Tollhouse","Elk Creek","Blue Lake","El Centro","Holtville","Lone Pine","Kernville","Randsburg","Tehachapi","Stratford","Clearlake","Glenhaven","Ravendale","Hawthorne","Inglewood","La Mirada","Paramount","San Pedro","Calabasas","Claremont","La Puente","San Dimas","Lancaster","Bass Lake","Greenbrae","Kentfield","Inverness","Lagunitas","Sausalito","Fish Camp","El Portal","Boonville","Branscomb","Mendocino","Yorkville","Dos Palos","Los Banos","Stevinson","Lake City","June Lake","Coleville","King City","San Lucas","Spreckels","Calistoga","Deer Park","Floriston","Silverado","Santa Ana","Fullerton","Placentia","Newcastle","Roseville","Applegate","Mira Loma","Coachella","La Quinta","Riverside","Idyllwild","Courtland","Elk Grove","Fair Oaks","Mcclellan","Rio Linda","Hollister","Montclair","Bryn Mawr","Crestline","Helendale","Rimforest","Skyforest","Sugarloaf","Boulevard","Encinitas","Escondido","Fallbrook","Oceanside","San Diego","Lockeford","Morro Bay","Templeton","Daly City","Pescadero","San Bruno","Palo Alto","San Mateo","Guadalupe","Los Altos","Sunnyvale","Cupertino","Holy City","Los Gatos","Brookdale","Davenport","Hat Creek","Millville","Alleghany","Somes Bar","Greenview","Hornbrook","Scott Bar","Fairfield","Rio Vista","Vacaville","Penngrove","Annapolis","El Verano","Monte Rio","La Grange","Patterson","Riverbank","Waterford","Yuba City","Red Bluff","Mad River","Earlimart","Richgrove","Groveland","Jamestown","Long Barn","Pinecrest","Camarillo","Wheatland","Beale Afb","Challenge","Piedmont","Berkeley","Kirkwood","Plymouth","Oroville","Paradise","Richvale","Arbuckle","Williams","Danville","Crockett","Hercules","Martinez","Richmond","Somerset","Coalinga","Carlotta","Ferndale","Honeydew","Kneeland","Petrolia","Rio Dell","Redcrest","Trinidad","Calexico","Imperial","Ocotillo","Shoshone","Big Pine","Maricopa","Caliente","Inyokern","Rosamond","Corcoran","Lakeport","Nubieber","Madeline","Standish","Westwood","Lawndale","Torrance","Whittier","Cerritos","Lakewood","Altadena","Monrovia","Montrose","Pasadena","Glendale","Winnetka","Valencia","Van Nuys","El Monte","Glendora","La Verne","Rosemead","Alhambra","Palmdale","Valyermo","Ahwahnee","Oakhurst","Larkspur","Marshall","Woodacre","Hornitos","Mariposa","Midpines","Calpella","Comptche","Dos Rios","Westport","Le Grand","Snelling","San Ardo","Gonzales","Lockwood","Monterey","Oakville","La Palma","La Habra","Surfside","Sheridan","Gold Run","Homewood","Chilcoot","Beaumont","Calimesa","Homeland","Murrieta","Sun City","Temecula","Wildomar","Antelope","Paicines","Adelanto","Blue Jay","Fawnskin","Hesperia","Highland","Redlands","Descanso","Carlsbad","El Cajon","La Jolla","Lakeside","Ranchita","Coronado","Stockton","Clements","Vernalis","Thornton","Los Osos","Brisbane","La Honda","Loma Mar","Atherton","Millbrae","Pacifica","Buellton","Casmalia","Stanford","Campbell","Milpitas","Saratoga","San Jose","Capitola","Anderson","Big Bend","Castella","Lakehead","Mcarthur","Whitmore","Loyalton","Callahan","Dunsmuir","Montague","Tulelake","Petaluma","Cazadero","Eldridge","Rio Nido","Vineburg","Nicolaus","Live Oak","Meridian","Flournoy","Paskenta","Proberta","Lewiston","Woodlake","Columbia","Moccasin","Standard","Tuolumne","Oak Park","Fillmore","Moorpark","Oak View","Brandeis","Woodland","Dunnigan","Rackerby","Alameda","Fremont","Hayward","Oakland","Jackson","Martell","Pioneer","Volcano","Drytown","Gridley","Magalia","Palermo","Glencoe","Murphys","Wallace","Maxwell","Antioch","Clayton","Concord","Gasquet","Klamath","Auberry","Del Rey","Mendota","Parlier","Prather","Reedley","Willows","Bayside","Fortuna","Miranda","Orleans","Brawley","Fontana","Olancha","Bodfish","Fellows","Shafter","Edwards","Hanford","Lemoore","Lucerne","Herlong","Milford","Compton","Gardena","Lynwood","Maywood","Topanga","Norwalk","Artesia","Arcadia","Sunland","Tujunga","Castaic","Newhall","Pacoima","Tarzana","Burbank","O Neals","Raymond","Bolinas","Fairfax","Nicasio","Tomales","Gualala","Hopland","Navarro","Talmage","Willits","Leggett","Atwater","Ballico","Cressey","El Nido","Gustine","Planada","Lookout","Alturas","Bradley","Salinas","Big Sur","Chualar","Seaside","Soledad","Truckee","Cypress","Stanton","El Toro","Anaheim","Lincoln","Rocklin","Storrie","Chester","Portola","Banning","Cabazon","Thermal","Aguanga","Menifee","Elverta","Isleton","Represa","Ontario","Landers","Barstow","Daggett","Hinkley","Mentone","Needles","Yucaipa","Dulzura","Jacumba","La Mesa","Potrero","Bonsall","Del Mar","Escalon","Lathrop","Manteca","Cambria","Cayucos","Creston","Harmony","Shandon","Belmont","Montara","Solvang","Freedom","Redding","Oak Run","Platina","Calpine","Gazelle","Grenada","Mccloud","Macdoel","Benicia","Vallejo","Kenwood","Windsor","Hickman","Hughson","Modesto","Oakdale","Turlock","Westley","Rio Oso","Robbins","Corning","Mineral","Big Bar","Hayfork","Hyampom","Alpaugh","Ivanhoe","Lindsay","Visalia","Waukena","Sultana","Ventura","Esparto","Madison","Winters","Dobbins","Newark","Dublin","Albany","Bangor","Durham","Nelson","Arnold","Burson","Colusa","Grimes","Canyon","Diablo","Moraga","Oakley","Orinda","Pinole","Coloma","Rescue","Camino","Kyburz","Tahoma","Burrel","Clovis","Dunlap","Fowler","Friant","Kerman","Piedra","Fresno","Sanger","Yokuts","Artois","Orland","Eureka","Arcata","Cutten","Korbel","Loleta","Redway","Scotia","Niland","Seeley","Tecopa","Bishop","Darwin","Keeler","Delano","Edison","Lamont","Tupman","Weldon","Mojave","Cantil","Armona","Avenal","Finley","Bieber","Wendel","Downey","Malibu","Venice","Avalon","Lomita","Carson","Duarte","Encino","Reseda","Sylmar","Covina","Pomona","Walnut","Madera","Wishon","Novato","Albion","Caspar","Covelo","Piercy","Hilmar","Merced","Winton","Likely","Benton","Carmel","Marina","Aromas","Angwin","Norden","Irvine","Tustin","Atwood","Orange","Auburn","Loomis","Penryn","Colfax","Weimar","Belden","Quincy","Vinton","Blythe","Perris","Corona","Folsom","Herald","Mather","Wilton","Guasti","Upland","Colton","Phelan","Ludlow","Nipton","Patton","Rialto","Alpine","Bonita","Guatay","Tecate","Julian","Ramona","Santee","Acampo","Linden","Victor","Nipomo","Oceano","Goleta","Lompoc","Alviso","Coyote","Gilroy","Felton","Soquel","Burney","Cassel","Obrien","Shasta","Dorris","Elmira","Bodega","Cotati","Fulton","Graton","Jenner","Sonoma","Denair","Empire","Newman","Salida","Sutter","Gerber","Manton","Tehama","Salyer","Exeter","Goshen","Kaweah","Pixley","Tipton","Tulare","Badger","Cutler","Dinuba","Yettem","Traver","Sonora","Oxnard","Brooks","Guinda","Rumsey","Zamora","Sunol","Biggs","Chico","Avery","Alamo","Byron","Rodeo","Lotus","Huron","Laton","Biola","Selma","Glenn","Hoopa","Orick","Samoa","Weott","Heber","Arvin","Lebec","Wasco","Woody","Boron","Keene","Doyle","Termo","Azusa","Acton","Llano","Olema","Philo","Ukiah","Delhi","Canby","Topaz","Jolon","Twain","Indio","Mecca","Hemet","Nuevo","Norco","Chino","Vidal","Amboy","Baker","Essex","Yermo","Trona","Campo","Jamul","Poway","Vista","Tracy","Ripon","Aptos","Yreka","Dixon","Ceres","Keyes","Zenia","Ducor","Posey","Orosi","Somis","Capay","Davis","Ione","Cool","Helm","Hume","Bard","Onyx","Taft","Cobb","Nice","Bell","Ross","Adin","Napa","Brea","Alta","Clio","Anza","Galt","Hood","Ryde","Earp","Cima","Pala","Holt","Lodi","Etna","Weed","Vina","Ojai","Piru","Yolo","Elk","Igo"]'
  ),
  I3 = [
    "Mesa Verde National Park",
    "Green Mountain Falls",
    "Hot Sulphur Springs",
    "West Pleasant View",
    "Red Feather Lakes",
    "Steamboat Springs",
    "Eldorado Springs",
    "Colorado Springs",
    "Glenwood Springs",
    "Log Lane Village",
    "Snowmass Village",
    "Manitou Springs",
    "Battlement Mesa",
    "Pagosa Springs",
    "Poncha Springs",
    "Cheyenne Wells",
    "Grand Junction",
    "Commerce City",
    "Idaho Springs",
    "Olney Springs",
    "Crested Butte",
    "Buffalo Creek",
    "Sheridan Lake",
    "Pleasant View",
    "Yellow Jacket",
    "Colorado City",
    "Cripple Creek",
    "Woodland Park",
    "Silver Plume",
    "Fort Garland",
    "Usaf Academy",
    "Central City",
    "Rollinsville",
    "Indian Hills",
    "Fort Collins",
    "Breckenridge",
    "Silverthorne",
    "Westminster",
    "Springfield",
    "Buena Vista",
    "Castle Rock",
    "Palmer Lake",
    "Winter Park",
    "Wheat Ridge",
    "Fort Morgan",
    "Lake George",
    "Woody Creek",
    "Monte Vista",
    "Villa Grove",
    "Placerville",
    "Fort Lupton",
    "Platteville",
    "Deer Trail",
    "Two Buttes",
    "Las Animas",
    "Broomfield",
    "Louisville",
    "Pinecliffe",
    "Allenspark",
    "Kit Carson",
    "Wild Horse",
    "Georgetown",
    "Sugar City",
    "Westcliffe",
    "Dove Creek",
    "Canon City",
    "Coal Creek",
    "Carbondale",
    "New Castle",
    "Black Hawk",
    "Grand Lake",
    "Powderhorn",
    "Walsenburg",
    "Burlington",
    "Twin Lakes",
    "Estes Park",
    "Glen Haven",
    "Masonville",
    "Wellington",
    "Glade Park",
    "Whitewater",
    "Rocky Ford",
    "South Fork",
    "Phippsburg",
    "Florissant",
    "Briggsdale",
    "Keenesburg",
    "New Raymer",
    "Strasburg",
    "Henderson",
    "Englewood",
    "Littleton",
    "Pritchett",
    "Fort Lyon",
    "Lafayette",
    "Jamestown",
    "Nederland",
    "Cedaredge",
    "Hotchkiss",
    "Franktown",
    "Lone Tree",
    "Red Cliff",
    "Elizabeth",
    "Parachute",
    "Kremmling",
    "Tabernash",
    "Ohio City",
    "Lake City",
    "Evergreen",
    "Kittredge",
    "Arlington",
    "Leadville",
    "Livermore",
    "Trinchera",
    "Manzanola",
    "Jefferson",
    "Del Norte",
    "Oak Creek",
    "Silverton",
    "Telluride",
    "Julesburg",
    "Firestone",
    "Frederick",
    "Johnstown",
    "Severance",
    "Thornton",
    "Brighton",
    "Eastlake",
    "Mc Clave",
    "Longmont",
    "Arapahoe",
    "Antonito",
    "San Luis",
    "Crawford",
    "Larkspur",
    "Louviers",
    "Matheson",
    "Monument",
    "Fountain",
    "Coaldale",
    "Cotopaxi",
    "Florence",
    "Hillside",
    "Rockvale",
    "Parshall",
    "Gunnison",
    "Somerset",
    "Coalmont",
    "Idledale",
    "Morrison",
    "Stratton",
    "Bayfield",
    "Hesperus",
    "Berthoud",
    "Loveland",
    "Boncarbo",
    "Trinidad",
    "Sterling",
    "Palisade",
    "Collbran",
    "De Beque",
    "Dinosaur",
    "Hamilton",
    "Cimarron",
    "Montrose",
    "Naturita",
    "Hillrose",
    "La Junta",
    "Fairplay",
    "Meredith",
    "Snowmass",
    "Avondale",
    "Homelake",
    "Crestone",
    "Saguache",
    "Sargents",
    "Sedgwick",
    "Milliken",
    "Gilcrest",
    "La Salle",
    "Hereford",
    "Stoneham",
    "Bennett",
    "Watkins",
    "Alamosa",
    "Arboles",
    "Boulder",
    "Hygiene",
    "Monarch",
    "Granite",
    "Nathrop",
    "Capulin",
    "Conejos",
    "La Jara",
    "Manassa",
    "Sanford",
    "Crowley",
    "Wetmore",
    "Sedalia",
    "Edwards",
    "Minturn",
    "Wolcott",
    "Cascade",
    "Penrose",
    "Gardner",
    "La Veta",
    "Cowdrey",
    "Conifer",
    "Haswell",
    "Bethune",
    "Flagler",
    "Seibert",
    "Ignacio",
    "Durango",
    "Bellvue",
    "Laporte",
    "Timnath",
    "Aguilar",
    "Branson",
    "Fleming",
    "Padroni",
    "Clifton",
    "Gateway",
    "Maybell",
    "Dolores",
    "Bedrock",
    "Paradox",
    "Redvale",
    "Orchard",
    "Weldona",
    "Wiggins",
    "Ridgway",
    "Hartsel",
    "Shawnee",
    "Amherst",
    "Holyoke",
    "Granada",
    "Hartman",
    "Rangely",
    "Toponas",
    "Norwood",
    "Woodrow",
    "Windsor",
    "Galeton",
    "Greeley",
    "Lucerne",
    "Aurora",
    "Dupont",
    "Denver",
    "Hooper",
    "Chromo",
    "Salida",
    "Dumont",
    "Empire",
    "Blanca",
    "Jaroso",
    "Ordway",
    "Austin",
    "Eckert",
    "Lazear",
    "Paonia",
    "Cahone",
    "Parker",
    "Mc Coy",
    "Basalt",
    "Gypsum",
    "Elbert",
    "Calhan",
    "Peyton",
    "Howard",
    "Fraser",
    "Granby",
    "Almont",
    "Parlin",
    "Pitkin",
    "Walden",
    "Arvada",
    "Golden",
    "Climax",
    "Marvel",
    "Hoehne",
    "Weston",
    "Arriba",
    "Karval",
    "Atwood",
    "Merino",
    "Fruita",
    "Molina",
    "Creede",
    "Slater",
    "Cortez",
    "Mancos",
    "Towaoc",
    "Olathe",
    "Snyder",
    "Cheraw",
    "Fowler",
    "Bailey",
    "Guffey",
    "Haxtun",
    "Pueblo",
    "Beulah",
    "Meeker",
    "Hayden",
    "Center",
    "Moffat",
    "Dillon",
    "Frisco",
    "Divide",
    "Victor",
    "Lindon",
    "Dacono",
    "Hudson",
    "Kersey",
    "Pierce",
    "Roggen",
    "Grover",
    "Eckley",
    "Idalia",
    "Vernon",
    "Mosca",
    "Byers",
    "Campo",
    "Vilas",
    "Walsh",
    "Hasty",
    "Lyons",
    "Niwot",
    "Romeo",
    "Chama",
    "Delta",
    "Burns",
    "Eagle",
    "Agate",
    "Kiowa",
    "Simla",
    "Ramah",
    "Yoder",
    "Rifle",
    "Drake",
    "Model",
    "Genoa",
    "Limon",
    "Crook",
    "Iliff",
    "Peetz",
    "Craig",
    "Lewis",
    "Nucla",
    "Brush",
    "Swink",
    "Ouray",
    "Grant",
    "Paoli",
    "Aspen",
    "Holly",
    "Lamar",
    "Wiley",
    "Boone",
    "Clark",
    "Yampa",
    "Egnar",
    "Ophir",
    "Akron",
    "Anton",
    "Eaton",
    "Evans",
    "Ward",
    "Cory",
    "Rico",
    "Bond",
    "Avon",
    "Vail",
    "Rush",
    "Silt",
    "Rand",
    "Pine",
    "Eads",
    "Vona",
    "Hugo",
    "Loma",
    "Mack",
    "Mesa",
    "Alma",
    "Como",
    "Ovid",
    "Otis",
    "Cope",
    "Erie",
    "Mead",
    "Ault",
    "Carr",
    "Gill",
    "Nunn",
    "Wray",
    "Yuma",
    "Joes",
    "Kirk",
    "Kim",
    "Rye",
  ],
  _3 = [
    "New Preston Marble Dale",
    "North Grosvenordale",
    "East Windsor Hill",
    "South Glastonbury",
    "Winchester Center",
    "North Westchester",
    "East Glastonbury",
    "Washington Depot",
    "North Stonington",
    "Vernon Rockville",
    "Stafford Springs",
    "Mansfield Center",
    "South Willington",
    "Storrs Mansfield",
    "Woodstock Valley",
    "Cornwall Bridge",
    "Mansfield Depot",
    "South Woodstock",
    "Central Village",
    "Redding Center",
    "North Branford",
    "North Franklin",
    "East Killingly",
    "East Woodstock",
    "Grosvenor Dale",
    "Pomfret Center",
    "New Fairfield",
    "Old Greenwich",
    "Redding Ridge",
    "Canton Center",
    "East Hartland",
    "South Windsor",
    "West Hartland",
    "West Simsbury",
    "West Suffield",
    "Windsor Locks",
    "West Hartford",
    "East Hartford",
    "Falls Village",
    "Gaylordsville",
    "West Cornwall",
    "Middle Haddam",
    "South Britain",
    "Staffordville",
    "North Windham",
    "South Windham",
    "Greens Farms",
    "Collinsville",
    "North Canton",
    "North Granby",
    "East Windsor",
    "Wethersfield",
    "New Hartford",
    "Killingworth",
    "East Hampton",
    "Old Saybrook",
    "Beacon Falls",
    "Mashantucket",
    "Hawleyville",
    "Broad Brook",
    "East Berlin",
    "East Granby",
    "Glastonbury",
    "New Britain",
    "Tariffville",
    "West Granby",
    "Marlborough",
    "Plantsville",
    "Southington",
    "East Canaan",
    "Pine Meadow",
    "Barkhamsted",
    "Bridgewater",
    "New Milford",
    "Centerbrook",
    "East Haddam",
    "Middlefield",
    "North Haven",
    "Wallingford",
    "Gales Ferry",
    "Jewett City",
    "Quaker Hill",
    "West Mystic",
    "Somersville",
    "Willimantic",
    "Ballouville",
    "Sandy Hook",
    "Bridgeport",
    "Brookfield",
    "Georgetown",
    "New Canaan",
    "Ridgefield",
    "Bloomfield",
    "Burlington",
    "Farmington",
    "Manchester",
    "Plainville",
    "Rocky Hill",
    "Unionville",
    "Litchfield",
    "Northfield",
    "South Kent",
    "Terryville",
    "Torrington",
    "Washington",
    "Deep River",
    "Middletown",
    "West Haven",
    "Middlebury",
    "New London",
    "Old Mystic",
    "South Lyme",
    "Stonington",
    "Uncasville",
    "Versailles",
    "Colchester",
    "Willington",
    "Canterbury",
    "Plainfield",
    "Winchester",
    "Stevenson",
    "Stratford",
    "Fairfield",
    "Greenwich",
    "Riverside",
    "Southport",
    "Poquonock",
    "Newington",
    "Colebrook",
    "Lakeville",
    "Salisbury",
    "Bethlehem",
    "Pequabuck",
    "Thomaston",
    "Harwinton",
    "Watertown",
    "Westbrook",
    "Northford",
    "Southbury",
    "New Haven",
    "Waterbury",
    "Naugatuck",
    "East Lyme",
    "Montville",
    "Pawcatuck",
    "Taftville",
    "Voluntown",
    "Waterford",
    "Ellington",
    "Danielson",
    "Quinebaug",
    "Woodstock",
    "Botsford",
    "Trumbull",
    "Westport",
    "Stamford",
    "Simsbury",
    "Suffield",
    "Weatogue",
    "Hartford",
    "Milldale",
    "Riverton",
    "Cornwall",
    "Lakeside",
    "Oakville",
    "Plymouth",
    "Woodbury",
    "Cromwell",
    "Higganum",
    "Ivoryton",
    "Portland",
    "Rockfall",
    "Branford",
    "Cheshire",
    "Guilford",
    "Prospect",
    "Old Lyme",
    "Stafford",
    "Columbia",
    "Coventry",
    "Abington",
    "Brooklyn",
    "Dayville",
    "Eastford",
    "Scotland",
    "Thompson",
    "Sterling",
    "Wauregan",
    "Newtown",
    "Shelton",
    "Sherman",
    "Cos Cob",
    "Danbury",
    "Norwalk",
    "Redding",
    "Windsor",
    "Bristol",
    "Enfield",
    "Norfolk",
    "Taconic",
    "Winsted",
    "Roxbury",
    "Chester",
    "Clinton",
    "Ansonia",
    "Madison",
    "Meriden",
    "Milford",
    "Seymour",
    "Bethany",
    "Wolcott",
    "Lebanon",
    "Ledyard",
    "Hanover",
    "Niantic",
    "Norwich",
    "Preston",
    "Oakdale",
    "Hadlyme",
    "Tolland",
    "Andover",
    "Chaplin",
    "Hampton",
    "Pomfret",
    "Ashford",
    "Windham",
    "Monroe",
    "Easton",
    "Bethel",
    "Darien",
    "Weston",
    "Wilton",
    "Canton",
    "Granby",
    "Berlin",
    "Marion",
    "Canaan",
    "Sharon",
    "Bantam",
    "Goshen",
    "Morris",
    "Cobalt",
    "Durham",
    "Haddam",
    "Moodus",
    "Orange",
    "Oxford",
    "Hamden",
    "Baltic",
    "Bozrah",
    "Gilman",
    "Groton",
    "Mystic",
    "Yantic",
    "Bolton",
    "Somers",
    "Amston",
    "Hebron",
    "Fabyan",
    "Putnam",
    "Rogers",
    "Moosup",
    "Essex",
    "Derby",
    "Salem",
    "Oneco",
    "Avon",
    "Kent",
  ],
  K3 = [
    "Camden Wyoming",
    "Fenwick Island",
    "Rehoboth Beach",
    "Delaware City",
    "Saint Georges",
    "Bethany Beach",
    "Little Creek",
    "Bridgeville",
    "Harrington",
    "Middletown",
    "Montchanin",
    "New Castle",
    "Winterthur",
    "Wilmington",
    "Georgetown",
    "Ocean View",
    "Selbyville",
    "Dover Afb",
    "Frederica",
    "Hockessin",
    "Port Penn",
    "Ellendale",
    "Frankford",
    "Greenwood",
    "Millsboro",
    "Millville",
    "Cheswold",
    "Magnolia",
    "Woodside",
    "Claymont",
    "Kirkwood",
    "Rockland",
    "Townsend",
    "Dagsboro",
    "Harbeson",
    "Clayton",
    "Houston",
    "Marydel",
    "Yorklyn",
    "Lincoln",
    "Milford",
    "Seaford",
    "Felton",
    "Hartly",
    "Kenton",
    "Smyrna",
    "Newark",
    "Odessa",
    "Bethel",
    "Delmar",
    "Laurel",
    "Milton",
    "Nassau",
    "Dover",
    "Viola",
    "Lewes",
    "Bear",
  ],
  J3 = ["Washington Navy Yard", "Naval Anacost Annex", "Washington"],
  z3 = [
    "Indian Lake Estates",
    "Worthington Springs",
    "Green Cove Springs",
    "Jacksonville Beach",
    "Howey In The Hills",
    "Palm Beach Gardens",
    "Indian Rocks Beach",
    "Panama City Beach",
    "Homosassa Springs",
    "North Miami Beach",
    "Fort Walton Beach",
    "Intercession City",
    "Ponte Vedra Beach",
    "Altamonte Springs",
    "Keystone Heights",
    "North Fort Myers",
    "Fort Myers Beach",
    "Saint James City",
    "Key Colony Beach",
    "Fernandina Beach",
    "North Palm Beach",
    "Royal Palm Beach",
    "Saint Petersburg",
    "Clearwater Beach",
    "Port Saint Lucie",
    "Lake Panasoffkee",
    "New Smyrna Beach",
    "Defuniak Springs",
    "Santa Rosa Beach",
    "South Palm Beach",
    "Glen Saint Mary",
    "Satellite Beach",
    "Melbourne Beach",
    "Fort Lauderdale",
    "Deerfield Beach",
    "Everglades City",
    "Horseshoe Beach",
    "Sun City Center",
    "Bradenton Beach",
    "Marathon Shores",
    "West Palm Beach",
    "Crystal Springs",
    "New Port Richey",
    "Saint Augustine",
    "De Leon Springs",
    "Cape Canaveral",
    "Merritt Island",
    "Pembroke Pines",
    "Port Charlotte",
    "Fleming Island",
    "Atlantic Beach",
    "Lanark Village",
    "Port Saint Joe",
    "Fruitland Park",
    "Bonita Springs",
    "Orange Springs",
    "Silver Springs",
    "Summerland Key",
    "Hurlburt Field",
    "Belleair Beach",
    "Tarpon Springs",
    "Winter Springs",
    "Rosemary Beach",
    "Pompano Beach",
    "Coral Springs",
    "Coconut Creek",
    "Crystal River",
    "Beverly Hills",
    "Doctors Inlet",
    "Neptune Beach",
    "Flagler Beach",
    "Chattahoochee",
    "White Springs",
    "Bowling Green",
    "Zolfo Springs",
    "Ponce De Leon",
    "Eastlake Weir",
    "Miami Gardens",
    "Winter Garden",
    "Boynton Beach",
    "Wesley Chapel",
    "Pinellas Park",
    "Crystal Beach",
    "Safety Harbor",
    "Highland City",
    "Lake Hamilton",
    "Crescent City",
    "Daytona Beach",
    "Crawfordville",
    "Miramar Beach",
    "South Daytona",
    "High Springs",
    "Island Grove",
    "Mexico Beach",
    "Lehigh Acres",
    "Rotonda West",
    "Penney Farms",
    "Marco Island",
    "Jacksonville",
    "Apalachicola",
    "Apollo Beach",
    "Thonotosassa",
    "Winter Beach",
    "Grand Island",
    "Gulf Hammock",
    "Holmes Beach",
    "Longboat Key",
    "Jensen Beach",
    "Port Salerno",
    "Coral Gables",
    "Key Biscayne",
    "Big Pine Key",
    "Delray Beach",
    "Land O Lakes",
    "Winter Haven",
    "East Palatka",
    "The Villages",
    "Steinhatchee",
    "Ormond Beach",
    "Gainesville",
    "Panama City",
    "Indialantic",
    "Patrick Afb",
    "Cocoa Beach",
    "Blountstown",
    "Clarksville",
    "Wewahitchka",
    "Punta Gorda",
    "Floral City",
    "Orange Park",
    "Lake Geneva",
    "Chokoloskee",
    "Tallahassee",
    "Moore Haven",
    "Brooksville",
    "Spring Hill",
    "Lake Placid",
    "Campbellton",
    "Grand Ridge",
    "Boca Grande",
    "Otter Creek",
    "Myakka City",
    "Fort Mc Coy",
    "Orange Lake",
    "Summerfield",
    "Miami Beach",
    "Laurel Hill",
    "Mary Esther",
    "Winter Park",
    "Kenansville",
    "Saint Cloud",
    "Belle Glade",
    "Canal Point",
    "Lake Harbor",
    "Loxahatchee",
    "Zephyrhills",
    "San Antonio",
    "Port Richey",
    "Palm Harbor",
    "Babson Park",
    "Haines City",
    "Lake Alfred",
    "River Ranch",
    "Interlachen",
    "Pomona Park",
    "Putnam Hall",
    "Ponte Vedra",
    "Saint Johns",
    "Fort Pierce",
    "Gulf Breeze",
    "Casselberry",
    "Lake Monroe",
    "Mid Florida",
    "Center Hill",
    "Sumterville",
    "Shady Grove",
    "Lake Butler",
    "Barberville",
    "Port Orange",
    "Orange City",
    "Saint Marks",
    "North Miami",
    "Lynn Haven",
    "Youngstown",
    "Scottsmoor",
    "Titusville",
    "Hallandale",
    "Plantation",
    "Middleburg",
    "Fort White",
    "Fort Ogden",
    "Cross City",
    "Cantonment",
    "Palm Coast",
    "Carrabelle",
    "Greensboro",
    "Istachatta",
    "Plant City",
    "Vero Beach",
    "Cottondale",
    "Graceville",
    "Monticello",
    "Mount Dora",
    "Fort Myers",
    "Cape Coral",
    "Yankeetown",
    "Greenville",
    "Anna Maria",
    "Terra Ceia",
    "Hobe Sound",
    "Indiantown",
    "Islamorada",
    "Bryceville",
    "Valparaiso",
    "Okeechobee",
    "Windermere",
    "Wellington",
    "Boca Raton",
    "Lake Worth",
    "Greenacres",
    "Palm Beach",
    "Clearwater",
    "Auburndale",
    "Eagle Lake",
    "Eaton Park",
    "Fort Meade",
    "Frostproof",
    "Lake Wales",
    "Georgetown",
    "North Port",
    "Lake Helen",
    "Mossy Head",
    "Hawthorne",
    "La Crosse",
    "Lochloosa",
    "Macclenny",
    "Sanderson",
    "Melbourne",
    "Rockledge",
    "Sebastian",
    "Hollywood",
    "El Jobean",
    "Dunnellon",
    "Homosassa",
    "Inverness",
    "Immokalee",
    "Lake City",
    "Pensacola",
    "Eastpoint",
    "Clewiston",
    "Avon Park",
    "Gibsonton",
    "Riverview",
    "Westville",
    "Fellsmere",
    "Greenwood",
    "Lady Lake",
    "Groveland",
    "Montverde",
    "Okahumpka",
    "Woodville",
    "Cedar Key",
    "Chiefland",
    "Morriston",
    "Williston",
    "Bradenton",
    "Tallevast",
    "Ocklawaha",
    "Weirsdale",
    "Fairfield",
    "Mc Intosh",
    "Belleview",
    "Palm City",
    "Homestead",
    "Opa Locka",
    "Key Largo",
    "Tavernier",
    "Crestview",
    "Eglin Afb",
    "Niceville",
    "Christmas",
    "Tangerine",
    "Killarney",
    "Kissimmee",
    "South Bay",
    "Dade City",
    "Lacoochee",
    "Saint Leo",
    "Bay Pines",
    "Davenport",
    "Lakeshore",
    "Polk City",
    "Florahome",
    "Hollister",
    "Lake Como",
    "San Mateo",
    "Englewood",
    "Goldenrod",
    "Lake Mary",
    "Edgewater",
    "Cassadaga",
    "Sopchoppy",
    "Caryville",
    "Earleton",
    "Evinston",
    "Micanopy",
    "Newberry",
    "Fountain",
    "Palm Bay",
    "Hernando",
    "Copeland",
    "Goodland",
    "Old Town",
    "Suwannee",
    "Gonzalez",
    "Mc David",
    "Palmdale",
    "Jennings",
    "Wauchula",
    "Nobleton",
    "Sun City",
    "Roseland",
    "Marianna",
    "Sorrento",
    "Umatilla",
    "Astatula",
    "Clermont",
    "Ferndale",
    "Leesburg",
    "Mascotte",
    "Minneola",
    "Bokeelia",
    "Pineland",
    "Palmetto",
    "Ellenton",
    "Sarasota",
    "Manasota",
    "Long Key",
    "Key West",
    "Marathon",
    "Callahan",
    "Hilliard",
    "Milligan",
    "Shalimar",
    "Clarcona",
    "Maitland",
    "Plymouth",
    "Zellwood",
    "Seminole",
    "Lakeland",
    "Homeland",
    "Kathleen",
    "Nalcrest",
    "Loughman",
    "Mulberry",
    "Bostwick",
    "Hastings",
    "Longwood",
    "Bushnell",
    "Wildwood",
    "Branford",
    "Live Oak",
    "Mc Alpin",
    "Wellborn",
    "Glenwood",
    "Oak Hill",
    "Freeport",
    "Alachua",
    "Olustee",
    "Hampton",
    "Brooker",
    "Orlando",
    "Malabar",
    "Sharpes",
    "Margate",
    "Murdock",
    "Placida",
    "Lecanto",
    "Ochopee",
    "Arcadia",
    "Nocatee",
    "Century",
    "Bunnell",
    "Trenton",
    "Labelle",
    "Sebring",
    "Brandon",
    "Seffner",
    "Valrico",
    "Wimauma",
    "Bonifay",
    "Wabasso",
    "Cypress",
    "Wacissa",
    "Altoona",
    "Paisley",
    "Tavares",
    "Captiva",
    "Sanibel",
    "Bronson",
    "Bristol",
    "Hosford",
    "Sumatra",
    "Telogia",
    "Madison",
    "Pinetta",
    "Parrish",
    "Candler",
    "Anthony",
    "Reddick",
    "Hialeah",
    "Oakland",
    "Jupiter",
    "Pahokee",
    "Aripeka",
    "Holiday",
    "Oldsmar",
    "Dunedin",
    "Alturas",
    "Bradley",
    "Nichols",
    "Waverly",
    "Grandin",
    "Palatka",
    "Satsuma",
    "Melrose",
    "Navarre",
    "Nokomis",
    "Sanford",
    "Coleman",
    "Webster",
    "O Brien",
    "Raiford",
    "Pierson",
    "Seville",
    "Deltona",
    "Panacea",
    "Chipley",
    "Archer",
    "Graham",
    "Lawtey",
    "Starke",
    "Holder",
    "Naples",
    "Molino",
    "Gretna",
    "Havana",
    "Midway",
    "Quincy",
    "Jasper",
    "Lorida",
    "Durant",
    "Lithia",
    "Odessa",
    "Ruskin",
    "Sydney",
    "Alford",
    "Bascom",
    "Malone",
    "Sneads",
    "Lamont",
    "Debary",
    "Eustis",
    "Yalaha",
    "Estero",
    "Inglis",
    "Cortez",
    "Lowell",
    "Stuart",
    "Destin",
    "Apopka",
    "Trilby",
    "Hudson",
    "Elfers",
    "Bartow",
    "Dundee",
    "Welaka",
    "Elkton",
    "Bagdad",
    "Milton",
    "Osprey",
    "Laurel",
    "Venice",
    "Geneva",
    "Oviedo",
    "Oxford",
    "Deland",
    "Osteen",
    "Argyle",
    "Paxton",
    "Vernon",
    "Wausau",
    "Waldo",
    "Cocoa",
    "Grant",
    "Dania",
    "Altha",
    "Felda",
    "Venus",
    "Dover",
    "Mango",
    "Tampa",
    "Lloyd",
    "Astor",
    "Oneco",
    "Citra",
    "Sparr",
    "Ocala",
    "Miami",
    "Yulee",
    "Baker",
    "Gotha",
    "Ocoee",
    "Largo",
    "Ozona",
    "Perry",
    "Salem",
    "Mims",
    "Lulu",
    "Bell",
    "Balm",
    "Lutz",
    "Noma",
    "Mayo",
    "Alva",
    "Holt",
    "Ebro",
    "Ona",
    "Day",
    "Lee",
    "Jay",
  ],
  j3 = [
    "Pine Mountain Valley",
    "Saint Simons Island",
    "Peachtree Corners",
    "Chestnut Mountain",
    "Avondale Estates",
    "Franklin Springs",
    "Lookout Mountain",
    "Sautee Nacoochee",
    "Bowdon Junction",
    "Fort Oglethorpe",
    "Port Wentworth",
    "Powder Springs",
    "Stone Mountain",
    "Lithia Springs",
    "Peachtree City",
    "Flowery Branch",
    "Tallulah Falls",
    "Jeffersonville",
    "Donalsonville",
    "Milledgeville",
    "Richmond Hill",
    "Holly Springs",
    "Cedar Springs",
    "Mineral Bluff",
    "Jekyll Island",
    "Lawrenceville",
    "Pine Mountain",
    "Warner Robins",
    "Walthourville",
    "Sapelo Island",
    "Marshallville",
    "Mountain City",
    "Andersonville",
    "Junction City",
    "Crawfordville",
    "Mc Rae Helena",
    "Social Circle",
    "Saint George",
    "Willacoochee",
    "Cartersville",
    "Taylorsville",
    "Bloomingdale",
    "Tybee Island",
    "Douglasville",
    "Mc Caysville",
    "Fayetteville",
    "Silver Creek",
    "East Ellijay",
    "Sugar Valley",
    "White Plains",
    "Clarkesville",
    "Waverly Hall",
    "Locust Grove",
    "Wrightsville",
    "Fort Stewart",
    "Danielsville",
    "Luthersville",
    "Warm Springs",
    "Mount Vernon",
    "Fort Benning",
    "Watkinsville",
    "Arnoldsville",
    "Talking Rock",
    "Hawkinsville",
    "Orchard Hill",
    "Toccoa Falls",
    "Jacksonville",
    "Young Harris",
    "Sandersville",
    "Adairsville",
    "Waynesville",
    "Jenkinsburg",
    "Saint Marys",
    "Summerville",
    "Ball Ground",
    "Winterville",
    "Fort Gaines",
    "Forest Park",
    "Norman Park",
    "Rising Fawn",
    "Dawsonville",
    "Statenville",
    "Springfield",
    "Cave Spring",
    "Mount Berry",
    "Carnesville",
    "Union Point",
    "North Metro",
    "Turnerville",
    "Gainesville",
    "Murrayville",
    "Bowersville",
    "Stockbridge",
    "Clinchfield",
    "Centerville",
    "Pendergrass",
    "Barnesville",
    "East Dublin",
    "Buena Vista",
    "Bolingbroke",
    "High Shoals",
    "Fort Valley",
    "Marble Hill",
    "Eastanollee",
    "Box Springs",
    "Lumber City",
    "Thomasville",
    "Hogansville",
    "Blairsville",
    "Chickamauga",
    "Rock Spring",
    "Tunnel Hill",
    "Fitzgerald",
    "Statesboro",
    "Waynesboro",
    "Carrollton",
    "Mount Zion",
    "Villa Rica",
    "Whitesburg",
    "Graysville",
    "Georgetown",
    "Homerville",
    "West Green",
    "Hartsfield",
    "Grantville",
    "Sharpsburg",
    "Attapulgus",
    "Bainbridge",
    "Byromville",
    "Swainsboro",
    "Norristown",
    "Blue Ridge",
    "Alpharetta",
    "Union City",
    "Cherry Log",
    "Sea Island",
    "Plainville",
    "Greensboro",
    "Snellville",
    "Loganville",
    "Mount Airy",
    "Gillsville",
    "Tallapoosa",
    "Irwinville",
    "Monticello",
    "Shady Dale",
    "Hazlehurst",
    "Louisville",
    "Smithville",
    "Allenhurst",
    "Hinesville",
    "Lincolnton",
    "Oglethorpe",
    "Greenville",
    "Manchester",
    "Chatsworth",
    "Porterdale",
    "Farmington",
    "Blackshear",
    "Meansville",
    "Williamson",
    "Rocky Ford",
    "Experiment",
    "Sunny Side",
    "Glennville",
    "Reidsville",
    "Ochlocknee",
    "Brookfield",
    "West Point",
    "Dry Branch",
    "Yatesville",
    "Flintstone",
    "La Fayette",
    "Rocky Face",
    "Washington",
    "Maysville",
    "Bethlehem",
    "Cassville",
    "Nashville",
    "Keysville",
    "Kings Bay",
    "Kingsland",
    "White Oak",
    "Roopville",
    "Woodstock",
    "Jonesboro",
    "Riverdale",
    "Ellenwood",
    "Clarkdale",
    "Grovetown",
    "Arlington",
    "Knoxville",
    "Fowlstown",
    "Clarkston",
    "Pine Lake",
    "Scottdale",
    "Montezuma",
    "Pinehurst",
    "Dewy Rose",
    "Stillmore",
    "Twin City",
    "Bellville",
    "Morganton",
    "Brunswick",
    "Fairmount",
    "Ellerslie",
    "Mcdonough",
    "Braselton",
    "Jefferson",
    "Nicholson",
    "Mansfield",
    "Hillsboro",
    "Stapleton",
    "Rockledge",
    "Lake Park",
    "Moody Afb",
    "Dahlonega",
    "Boneville",
    "Sale City",
    "Tarrytown",
    "Covington",
    "Lexington",
    "Patterson",
    "Cedartown",
    "Esom Hill",
    "Rabun Gap",
    "Gracewood",
    "Hephzibah",
    "Ellaville",
    "Newington",
    "Iron City",
    "Talbotton",
    "Hiawassee",
    "Thomaston",
    "Rossville",
    "Good Hope",
    "Waresboro",
    "Warrenton",
    "Davisboro",
    "Cleveland",
    "Abbeville",
    "Allentown",
    "Mc Intyre",
    "Toomsboro",
    "Sylvester",
    "Surrency",
    "Colquitt",
    "Damascus",
    "Hardwick",
    "Kingston",
    "Cuthbert",
    "Ray City",
    "Hortense",
    "Ellabell",
    "Pembroke",
    "Brooklet",
    "Register",
    "Midville",
    "Flovilla",
    "Shellman",
    "Woodbine",
    "Ringgold",
    "Folkston",
    "Savannah",
    "Bluffton",
    "Marietta",
    "Mableton",
    "Kennesaw",
    "Nicholls",
    "Ellenton",
    "Moultrie",
    "Haralson",
    "Moreland",
    "Wildwood",
    "Lithonia",
    "Chauncey",
    "Unadilla",
    "Elberton",
    "Garfield",
    "Armuchee",
    "Fairburn",
    "Palmetto",
    "Mitchell",
    "Norcross",
    "Cornelia",
    "Demorest",
    "Clermont",
    "Buchanan",
    "Hamilton",
    "Hartwell",
    "Franklin",
    "Kathleen",
    "Commerce",
    "Hoschton",
    "Matthews",
    "Lakeland",
    "Stockton",
    "Montrose",
    "Leesburg",
    "Riceboro",
    "Ludowici",
    "Valdosta",
    "Crescent",
    "Meridian",
    "Townsend",
    "Woodbury",
    "Baconton",
    "Culloden",
    "Juliette",
    "Bostwick",
    "Buckhead",
    "Rutledge",
    "Crandall",
    "Columbus",
    "Crawford",
    "Stephens",
    "Offerman",
    "Rockmart",
    "Eatonton",
    "Lakemont",
    "Sylvania",
    "Richland",
    "Americus",
    "Woodland",
    "Cobbtown",
    "Manassas",
    "Reynolds",
    "Scotland",
    "Bronwood",
    "Coolidge",
    "Soperton",
    "Lagrange",
    "Sycamore",
    "Danville",
    "The Rock",
    "Waycross",
    "Millwood",
    "Harrison",
    "Tennille",
    "Glenwood",
    "Pineview",
    "Rochelle",
    "Irwinton",
    "Oakfield",
    "Pearson",
    "Baldwin",
    "Statham",
    "Emerson",
    "Alapaha",
    "Lizella",
    "Cochran",
    "Hoboken",
    "Nahunta",
    "Quitman",
    "Barwick",
    "Jackson",
    "Waverly",
    "Pulaski",
    "Cusseta",
    "Lebanon",
    "Waleska",
    "Blakely",
    "Coleman",
    "Lovejoy",
    "Du Pont",
    "Acworth",
    "Austell",
    "Ambrose",
    "Broxton",
    "Douglas",
    "Funston",
    "Appling",
    "Augusta",
    "Sargent",
    "Musella",
    "Roberta",
    "Cordele",
    "Trenton",
    "Decatur",
    "Atlanta",
    "Chester",
    "Eastman",
    "Winston",
    "Meldrim",
    "Claxton",
    "Epworth",
    "Lindale",
    "Shannon",
    "Cumming",
    "Lavonia",
    "Royston",
    "Roswell",
    "Red Oak",
    "Ellijay",
    "Calhoun",
    "Calvary",
    "Whigham",
    "Grayson",
    "Suwanee",
    "Lilburn",
    "Oakwood",
    "Cataula",
    "Hampton",
    "Bonaire",
    "Perkins",
    "Haddock",
    "Cadwell",
    "Fleming",
    "Dearing",
    "Thomson",
    "Carlton",
    "Colbert",
    "Camilla",
    "Forsyth",
    "Madison",
    "Fortson",
    "Midland",
    "Newborn",
    "Bristol",
    "Mershon",
    "Concord",
    "Zebulon",
    "Clayton",
    "Dillard",
    "Conyers",
    "Brinson",
    "Griffin",
    "Louvale",
    "Lumpkin",
    "De Soto",
    "Collins",
    "Vidalia",
    "Ashburn",
    "Rebecca",
    "Norwood",
    "Warthen",
    "Screven",
    "Preston",
    "Parrott",
    "Cohutta",
    "Varnell",
    "Seville",
    "Tignall",
    "Warwick",
    "Baxley",
    "Albany",
    "Newton",
    "Auburn",
    "Winder",
    "Enigma",
    "Barney",
    "Morven",
    "Portal",
    "Girard",
    "Sardis",
    "Dawson",
    "Morgan",
    "Metter",
    "Bowdon",
    "Temple",
    "Pooler",
    "Lyerly",
    "Canton",
    "Nelson",
    "Athens",
    "Edison",
    "Morris",
    "Morrow",
    "Conley",
    "Argyle",
    "Smyrna",
    "Berlin",
    "Doerun",
    "Harlem",
    "Sparks",
    "Newnan",
    "Senoia",
    "Tucker",
    "Vienna",
    "Putney",
    "Climax",
    "Guyton",
    "Rincon",
    "Bowman",
    "Adrian",
    "Brooks",
    "Tyrone",
    "Gibson",
    "Oakman",
    "Ranger",
    "Resaca",
    "Siloam",
    "Dacula",
    "Duluth",
    "Buford",
    "Sparta",
    "Bremen",
    "Felton",
    "Shiloh",
    "Mystic",
    "Ocilla",
    "Denton",
    "Bartow",
    "Wadley",
    "Millen",
    "Milner",
    "Dexter",
    "Dublin",
    "Dudley",
    "Midway",
    "Hahira",
    "Naylor",
    "Darien",
    "Cotton",
    "Pelham",
    "Alston",
    "Uvalda",
    "Tennga",
    "Upatoi",
    "Oxford",
    "Bishop",
    "Bogart",
    "Maxeys",
    "Dallas",
    "Jasper",
    "Molena",
    "Aragon",
    "Blythe",
    "Oliver",
    "Martin",
    "Toccoa",
    "Leslie",
    "Plains",
    "Geneva",
    "Sharon",
    "Butler",
    "Howard",
    "Rupert",
    "Sasser",
    "Boston",
    "Tifton",
    "Suches",
    "Jersey",
    "Monroe",
    "Mesena",
    "Jewell",
    "Oconee",
    "Weston",
    "Dalton",
    "Gordon",
    "Poulan",
    "Sumner",
    "Axson",
    "Leary",
    "Homer",
    "Rydal",
    "White",
    "Macon",
    "Dixie",
    "Gough",
    "Menlo",
    "Trion",
    "Fargo",
    "Evans",
    "Cecil",
    "Lenox",
    "Turin",
    "Arabi",
    "Redan",
    "Rhine",
    "Lilly",
    "Nunez",
    "Daisy",
    "Hagan",
    "Coosa",
    "Canon",
    "Cairo",
    "Perry",
    "Talmo",
    "Avera",
    "Wrens",
    "Rentz",
    "Ideal",
    "Comer",
    "Smarr",
    "Ailey",
    "Cisco",
    "Hiram",
    "Byron",
    "Tiger",
    "Wiley",
    "Dover",
    "Jakin",
    "Omaha",
    "Milan",
    "Meigs",
    "Chula",
    "Omega",
    "Ty Ty",
    "Lyons",
    "Manor",
    "Camak",
    "Jesup",
    "Alamo",
    "Helen",
    "Pitts",
    "Rayle",
    "Alma",
    "Adel",
    "Clyo",
    "Eden",
    "Rome",
    "Alto",
    "Lula",
    "Waco",
    "Elko",
    "Wray",
    "Kite",
    "Gray",
    "Hull",
    "Eton",
    "Tate",
    "Cobb",
    "Mauk",
    "Pavo",
    "Odum",
    "Rex",
    "Ila",
    "Gay",
  ],
  $3 = [
    "Tripler Army Medical Center",
    "Wheeler Army Airfield",
    "Hawaii National Park",
    "Schofield Barracks",
    "Mcbh Kaneohe Bay",
    "Camp H M Smith",
    "Urban Honolulu",
    "Mountain View",
    "East Honolulu",
    "Captain Cook",
    "Fort Shafter",
    "Kailua Kona",
    "Laupahoehoe",
    "Wake Island",
    "Princeville",
    "Ocean View",
    "Kealakekua",
    "Kurtistown",
    "Pearl City",
    "Kaunakakai",
    "Lanai City",
    "Ewa Beach",
    "Waimanalo",
    "Hanamaulu",
    "Kaumakani",
    "Kalaupapa",
    "Holualoa",
    "Honaunau",
    "Waikoloa",
    "Papaaloa",
    "Papaikou",
    "Pepeekeo",
    "Mililani",
    "Honolulu",
    "Hanapepe",
    "Makaweli",
    "Hoolehua",
    "Kualapuu",
    "Maunaloa",
    "Pukalani",
    "Hakalau",
    "Honokaa",
    "Keauhou",
    "Kamuela",
    "Naalehu",
    "Paauilo",
    "Volcano",
    "Kapolei",
    "Haleiwa",
    "Kaneohe",
    "Wahiawa",
    "Waialua",
    "Waianae",
    "Waipahu",
    "Anahola",
    "Hanalei",
    "Kalaheo",
    "Kilauea",
    "Kahului",
    "Lahaina",
    "Makawao",
    "Puunene",
    "Wailuku",
    "Honomu",
    "Kapaau",
    "Ninole",
    "Ookala",
    "Pahala",
    "Hauula",
    "Kaaawa",
    "Kahuku",
    "Kailua",
    "Eleele",
    "Kealia",
    "Kekaha",
    "Waimea",
    "Keaau",
    "Pahoa",
    "Kunia",
    "Jbphh",
    "Kapaa",
    "Koloa",
    "Lawai",
    "Lihue",
    "Haiku",
    "Kihei",
    "Hawi",
    "Hilo",
    "Aiea",
    "Laie",
    "Hana",
    "Paia",
    "Kula",
  ],
  U3 = [
    "Mountain Home Afb",
    "Lava Hot Springs",
    "Horseshoe Bend",
    "American Falls",
    "Indian Valley",
    "Saint Charles",
    "Garden Valley",
    "Bonners Ferry",
    "Moyie Springs",
    "Mountain Home",
    "Saint Anthony",
    "Coeur d'Alene",
    "Saint Maries",
    "Priest River",
    "Soda Springs",
    "Glenns Ferry",
    "Gibbonsville",
    "New Plymouth",
    "Smelterville",
    "Garden City",
    "New Meadows",
    "Bloomington",
    "Atomic City",
    "Springfield",
    "Placerville",
    "Idaho Falls",
    "Swan Valley",
    "Island Park",
    "Grangeville",
    "Spirit Lake",
    "Yellow Pine",
    "Georgetown",
    "Montpelier",
    "Fish Haven",
    "Sun Valley",
    "Idaho City",
    "Clark Fork",
    "Cottonwood",
    "Greencreek",
    "White Bird",
    "Lewisville",
    "Post Falls",
    "North Fork",
    "Winchester",
    "Sugar City",
    "Malad City",
    "Grand View",
    "Twin Falls",
    "Castleford",
    "Pocatello",
    "Fort Hall",
    "Blackfoot",
    "Blanchard",
    "Careywood",
    "Cocolalla",
    "Sandpoint",
    "Fairfield",
    "Hill City",
    "Greenleaf",
    "Middleton",
    "Elk River",
    "King Hill",
    "Macks Inn",
    "Ferdinand",
    "Monteview",
    "Juliaetta",
    "Princeton",
    "Craigmont",
    "Richfield",
    "Fruitland",
    "Pinehurst",
    "Silverton",
    "Lake Fork",
    "Cambridge",
    "Meridian",
    "McCammon",
    "Swanlake",
    "Fernwood",
    "Aberdeen",
    "Moreland",
    "Bellevue",
    "Kootenai",
    "Ponderay",
    "Eastport",
    "Porthill",
    "Caldwell",
    "Bancroft",
    "Franklin",
    "Thatcher",
    "Hagerman",
    "Elk City",
    "Terreton",
    "Hazelton",
    "Harrison",
    "Medimont",
    "Rathdrum",
    "Kendrick",
    "Potlatch",
    "Nezperce",
    "Dietrich",
    "Shoshone",
    "Minidoka",
    "Lewiston",
    "Culdesac",
    "Holbrook",
    "Homedale",
    "Rockland",
    "Kingston",
    "Rogerson",
    "Kimberly",
    "Murtaugh",
    "Donnelly",
    "Council",
    "Plummer",
    "Pingree",
    "Shelley",
    "Ketchum",
    "Oldtown",
    "Laclede",
    "Nordman",
    "Colburn",
    "Spencer",
    "Ahsahka",
    "Orofino",
    "Challis",
    "Clayton",
    "Stanley",
    "Atlanta",
    "Hammett",
    "Clifton",
    "Preston",
    "Chester",
    "Newdale",
    "Gooding",
    "Wendell",
    "Kooskia",
    "Pollock",
    "Riggins",
    "Roberts",
    "Bayview",
    "Cataldo",
    "Genesee",
    "Harvard",
    "Leadore",
    "Reubens",
    "Rexburg",
    "Heyburn",
    "Bruneau",
    "Marsing",
    "Payette",
    "Clarkia",
    "Kellogg",
    "Wallace",
    "Tetonia",
    "Cascade",
    "Midvale",
    "Downey",
    "Dingle",
    "Geneva",
    "Desmet",
    "Tensed",
    "Basalt",
    "Hailey",
    "Picabo",
    "Lowman",
    "Coolin",
    "Naples",
    "Corral",
    "Huston",
    "Wilder",
    "Albion",
    "Burley",
    "Oakley",
    "Dubois",
    "Lenore",
    "Pierce",
    "Weippe",
    "Mackay",
    "Dayton",
    "Weston",
    "Ashton",
    "Parker",
    "Emmett",
    "Lucile",
    "Stites",
    "Warren",
    "Jerome",
    "Hayden",
    "Worley",
    "Bovill",
    "Moscow",
    "Cobalt",
    "Carmen",
    "Salmon",
    "Tendoy",
    "Kamiah",
    "Rupert",
    "Lapwai",
    "Murphy",
    "Calder",
    "Mullan",
    "Osburn",
    "Murray",
    "Driggs",
    "Victor",
    "Hansen",
    "McCall",
    "Weiser",
    "Eagle",
    "Boise",
    "Arimo",
    "Inkom",
    "Paris",
    "Santa",
    "Firth",
    "Carey",
    "Banks",
    "Dover",
    "Sagle",
    "Irwin",
    "Moore",
    "Melba",
    "Nampa",
    "Notus",
    "Parma",
    "Conda",
    "Grace",
    "Wayan",
    "Declo",
    "Malta",
    "Ellis",
    "Teton",
    "Letha",
    "Sweet",
    "Bliss",
    "Hamer",
    "Menan",
    "Rigby",
    "Ririe",
    "Athol",
    "Deary",
    "Viola",
    "Lemhi",
    "Shoup",
    "Arbon",
    "Avery",
    "Filer",
    "Kuna",
    "Star",
    "Mesa",
    "Bern",
    "Hope",
    "Iona",
    "Ucon",
    "Arco",
    "Howe",
    "Almo",
    "Fenn",
    "Eden",
    "Troy",
    "Paul",
    "Peck",
    "Felt",
    "Buhl",
    "Ola",
    "May",
  ],
  q3 = JSON.parse(
    `["National Stock Yards","Scott Air Force Base","Lincoln'S New Salem","Country Club Hills","Saint Francisville","Arlington Heights","Elk Grove Village","Frankfort Heights","Pembroke Township","Lake In The Hills","Prairie Du Rocher","Prospect Heights","Glendale Heights","South Wilmington","East Saint Louis","Fairview Heights","Rolling Meadows","Hoffman Estates","Chicago Heights","Western Springs","Harwood Heights","Clarendon Hills","Carpentersville","Saint Augustine","Winthrop Harbor","Fox River Grove","North Henderson","Stillman Valley","Buffalo Prairie","East Carondelet","Pleasant Plains","University Park","Mulberry Grove","Garden Prairie","Mount Sterling","Sailor Springs","Mount Prospect","Olympia Fields","Willow Springs","La Grange Park","Evergreen Park","West Frankfort","East Galesburg","Franklin Grove","Taylor Springs","Davis Junction","Kingston Mines","Peoria Heights","Machesney Park","Spring Valley","Milledgeville","Mount Carroll","Bluff Springs","Chandlerville","Morrisonville","Franklin Park","Schiller Park","Chicago Ridge","Hickory Hills","Palos Heights","South Holland","Downers Grove","Thompsonville","Elizabethtown","Karbers Ridge","Crescent City","Campbell Hill","Saint Charles","Williamsfield","Highland Park","Fort Sheridan","North Chicago","Buffalo Grove","Lawrenceville","West Brooklyn","Mount Pulaski","Blandinsville","Cottage Hills","Monroe Center","Pinckneyville","Pleasant Hill","Illinois City","Carrier Mills","Mechanicsburg","Williamsville","German Valley","Burnt Prairie","Creal Springs","Johnston City","Cherry Valley","Olive Branch","Poplar Grove","Golden Eagle","Saint Joseph","Mount Auburn","Martinsville","Morton Grove","Melrose Park","River Forest","Calumet City","Richton Park","Bedford Park","Elmwood Park","Bloomingdale","Carol Stream","Hanover Park","West Chicago","Beecher City","London Mills","Mc Leansboro","Cave In Rock","Claytonville","Sainte Marie","West Liberty","Mount Vernon","East Dubuque","Scales Mound","New Burnside","North Aurora","Hopkins Park","Libertyville","Vernon Hills","Lincolnshire","Prairie City","Crystal Lake","Spring Grove","Chesterfield","Edwardsville","Granite City","South Roxana","Collinsville","Farmersville","Jacksonville","Mount Morris","Chambersburg","Coulterville","Carbon Cliff","Taylor Ridge","Saint Libory","Green Valley","Mount Carmel","Johnsonville","Prophetstown","Freeman Spur","South Beloit","Miller City","New Bedford","Seatonville","Taylorville","New Memphis","Des Plaines","Forest Park","Westchester","River Grove","Blue Island","Hazel Crest","Orland Park","Palos Hills","Park Forest","Tinley Park","Summit Argo","Lincolnwood","Hutsonville","Waynesville","Farmer City","Villa Grove","Bensenville","Willowbrook","Warrenville","Saint Peter","Gibson City","Christopher","Whittington","Table Grove","Dunfermline","Saint David","Shawneetown","Dallas City","Stronghurst","Lynn Center","Bishop Hill","Beaverville","Cissna Park","Grand Tower","Murphysboro","Willow Hill","Waltonville","Jerseyville","Apple River","South Elgin","Sugar Grove","Bourbonnais","Island Lake","Lake Forest","Lake Zurich","Great Lakes","Cedar Point","Grand Ridge","New Holland","Wonder Lake","Bloomington","Warrensburg","Bunker Hill","Mount Olive","Sawyerville","Wilsonville","Carlinville","Glen Carbon","New Douglas","Saint Jacob","Walnut Hill","Forest City","Matherville","New Windsor","Murrayville","Dalton City","Baileyville","Chillicothe","Willisville","Cerro Gordo","White Heath","Griggsville","Grand Chain","Villa Ridge","Ellis Grove","Steeleville","Parkersburg","Rock Island","Coal Valley","East Moline","Rapids City","Summerfield","Springfield","Shelbyville","Princeville","Orangeville","South Pekin","Creve Coeur","East Peoria","Little York","Golden Gate","Mill Shoals","Norris City","Springerton","Bolingbrook","Carterville","Congerville","East Dundee","West Peoria","Camp Point","La Prairie","Plainville","Donnellson","Greenville","Pocahontas","Versailles","Kampsville","Arenzville","Beardstown","Broadlands","Thomasboro","Assumption","Stonington","West Union","Louisville","Beckemeyer","Germantown","Charleston","Kenilworth","Northbrook","Park Ridge","Streamwood","Schaumburg","Stone Park","Midlothian","Oak Forest","Bridgeview","Palos Park","Brookfield","Janesville","Glen Ellyn","Villa Park","Naperville","Fox Valley","West Salem","Teutopolis","Hagarstown","Brownstown","Saint Elmo","Piper City","Mulkeytown","Ellisville","Smithfield","Farmington","Carrollton","Greenfield","Rockbridge","White Hall","Braceville","West Point","Biggsville","Wellington","Carbondale","Belle Rive","Grantsburg","Burlington","Maple Park","Mooseheart","Aroma Park","Buckingham","Grant Park","Saint Anne","Union Hill","Millington","Montgomery","Yates City","Barrington","Lake Bluff","Lake Villa","Round Lake","Marseilles","Troy Grove","Bridgeport","Lee Center","Chatsworth","Blackstone","Long Point","Middletown","Colchester","Arrowsmith","Bellflower","Cooksville","Blue Mound","Harristown","Eagarville","Scottville","East Alton","Livingston","Wood River","Camp Grove","Mason City","Metropolis","Petersburg","New Boston","Preemption","Keithsburg","Litchfield","Walshville","Literberry","Leaf River","Lindenwood","Hanna City","Monticello","Kinderhook","New Canton","Pittsfield","Mound City","Evansville","Port Byron","Belleville","Caseyville","New Athens","Harrisburg","Illiopolis","New Berlin","Huntsville","Manchester","Winchester","Stewardson","Tower Hill","La Fayette","Cedarville","Mc Connell","Pearl City","Washington","Deer Creek","Georgetown","Ridge Farm","Smithshire","Addieville","Mount Erie","Wayne City","Crossville","Rock Falls","Deer Grove","Crest Hill","Romeoville","Wilmington","Homer Glen","Plainfield","Pecatonica","Loves Park","Mount Zion","Coatsburg","Smithboro","Belvidere","Caledonia","Arlington","La Moille","Princeton","Sheffield","Batchtown","Bondville","Champaign","Westfield","Clay City","Keyesport","New Baden","Broadview","Crestwood","Flossmoor","La Grange","Riverside","Riverdale","Annapolis","Flat Rock","Palestine","West York","Hindsboro","Wood Dale","Woodridge","Oak Brook","Vermilion","Effingham","Dieterich","Shobonier","Lewistown","Liverpool","New Haven","Patterson","Roodhouse","Coal City","Broughton","Macedonia","Rosiclare","Gladstone","Cambridge","Martinton","Stockland","Thawville","Vergennes","Elizabeth","Goreville","Hampshire","Kaneville","Millbrook","Yorkville","Galesburg","Henderson","Knoxville","Deerfield","Grayslake","Ingleside","Mundelein","Wadsworth","Earlville","Lake Fork","Hartsburg","Good Hope","Tennessee","Woodstock","Algonquin","Ellsworth","Lexington","Gillespie","Maryville","Centralia","Kilbourne","Brookport","Greenview","Maeystown","Hillsboro","Alexander","Meredosia","Lovington","Forreston","Brimfield","Edelstein","Mossville","Mansfield","New Salem","Eddyville","Granville","Claremont","Andalusia","Hillsdale","Mascoutah","Millstadt","Stonefort","Rochester","Littleton","Frederick","Rushville","Strasburg","Castleton","Rock City","Groveland","Armington","Alto Pass","Jonesboro","Millcreek","Wolf Lake","East Lynn","Hoopeston","Rossville","Armstrong","Fairmount","Indianola","Westville","Allendale","Keensburg","Lancaster","Roseville","Nashville","Okawville","Irvington","Fairfield","Grayville","Shorewood","Braidwood","Channahon","Frankfort","Manhattan","New Lenox","Pittsburg","Winnebago","Goodfield","Mc Clure","Timewell","Neponset","Tiskilwa","Van Orin","Brussels","Chadwick","Virginia","Foosland","Ivesdale","Longview","Penfield","Rosamond","Edinburg","Dennison","Marshall","Ingraham","Bartelso","Humboldt","Glenview","Palatine","Wheeling","Wilmette","Winnetka","Bartlett","Bellwood","Hillside","Berkeley","Evanston","Oak Park","Glenwood","Homewood","Matteson","Oak Lawn","Hometown","Thornton","Robinson","Cortland","Kingston","Kirkland","Sycamore","Hinckley","Sandwich","Shabbona","Somonauk","Waterman","Elmhurst","Winfield","Hinsdale","Westmont","Chrisman","Bone Gap","Altamont","Edgewood","Montrose","Vandalia","Royalton","Fairview","Marietta","Equality","Junction","Hillview","Dahlgren","La Harpe","Carthage","Elvaston","Hamilton","Plymouth","Atkinson","Hooppole","Woodhull","Chebanse","Danforth","Goodwine","Iroquois","Papineau","Woodland","Elkville","Oraville","Scheller","Woodlawn","Brighton","Fidelity","Stockton","Buncombe","Gilberts","Big Rock","Kankakee","Bonfield","Herscher","Abingdon","Victoria","Fox Lake","Highwood","Waukegan","Wauconda","Sheridan","La Salle","Streator","Sublette","Emington","Fairbury","Flanagan","Graymont","Saunemin","Lawndale","Chestnut","Cornland","Bardolph","Bushnell","Industry","Richmond","Ringwood","Heyworth","Saybrook","Stanford","Staunton","Alhambra","Bethalto","Hartford","Highland","Kinmundy","Sandoval","Sparland","Washburn","San Jose","Sherrard","Columbia","Valmeyer","Waterloo","Fillmore","Waggoner","Franklin","Sullivan","Rochelle","Glasford","Mapleton","Du Quoin","La Place","Rockport","Golconda","Hennepin","Magnolia","Standard","Rockwood","Reynolds","Freeburg","Lenzburg","O Fallon","Smithton","Eldorado","Divernon","Riverton","Cantrall","Browning","Lakewood","Moweaqua","Bradford","Freeport","Hopedale","Mackinaw","Allerton","Bismarck","Collison","Danville","Bellmont","Kirkwood","Monmouth","Hoyleton","Richview","Barnhill","Sterling","Morrison","Lockport","Shirland","Rockford","Lowpoint","Metamora","Clayton","Liberty","Loraine","Sorento","Pierron","Dalzell","Kasbeer","Manlius","Mineral","Hamburg","Michael","Savanna","Shannon","Thomson","Ashland","Gifford","Mahomet","Pesotum","Rantoul","Sadorus","Seymour","Bulpitt","Kincaid","Owaneco","Aviston","Carlyle","Hoffman","Trenton","Ashmore","Mattoon","Oakland","Glencoe","Maywood","Lansing","Justice","Burbank","Robbins","Chicago","Greenup","Clinton","Wapella","Camargo","Murdock","Tuscola","Addison","Lombard","Medinah","Roselle","Wheaton","Brocton","Metcalf","Shumway","Bingham","Elliott","Kempton","Roberts","Buckner","Zeigler","Vermont","Astoria","Ridgway","Wrights","Gardner","Kinsman","Minooka","Augusta","Oquawka","Raritan","Andover","Annawan","Geneseo","Kewanee","Buckley","Clifton","Donovan","Milford","Sheldon","Watseka","De Soto","Makanda","Hidalgo","Wheeler","Bluford","Fieldon","Grafton","Hanover","Belknap","Cypress","Simpson","Batavia","Bradley","Manteno","Momence","Reddick","Bristol","Dahinda","Antioch","Russell","Leonore","Lostant","Mendota","Oglesby","Rutland","Triumph","Steward","Nachusa","Compton","Paw Paw","Cornell","Forrest","Pontiac","Atlanta","Elkhart","Lincoln","Harvard","Mchenry","Huntley","Marengo","Carlock","Cropsey","Danvers","Gridley","Mc Lean","Shirley","Towanda","Argenta","Decatur","Forsyth","Mt Zion","Niantic","Hettick","Modesto","Nilwood","Palmyra","Shipman","Godfrey","Madison","La Rose","Oakford","Tallula","Renault","Coffeen","Nokomis","Raymond","Concord","Waverly","Woodson","Bethany","Creston","Holcomb","Woosung","Edwards","Elmwood","Trivoli","Tamaroa","De Land","Milmine","Hammond","Olmsted","Pulaski","Mc Nabb","Baldwin","Chester","Red Bud","Calhoun","Barstow","Cordova","Hampton","Lovejoy","Lebanon","Marissa","Galatia","Raleigh","Buffalo","Glenarm","Chatham","Sherman","Windsor","Herrick","Findlay","Wyoming","Winslow","Tremont","Delavan","Dongola","Fithian","Henning","Oakwood","Potomac","Berwick","Cameron","Oakdale","Du Bois","Enfield","Tampico","Beecher","Markham","Peotone","Cambria","Rockton","Roanoke","El Paso","Quincy","Fowler","Golden","Mendon","Paloma","Payson","Thebes","Capron","Bureau","Cherry","Malden","Walnut","Wyanet","Hardin","Mozier","Lanark","Ludlow","Urbana","Fisher","Sidney","Tolono","Palmer","Albers","Breese","Trilla","Skokie","Techny","Berwyn","Dolton","Harvey","Steger","Cicero","Oblong","Jewett","Toledo","Dekalb","Esmond","Dewitt","Kenney","Weldon","Arcola","Arthur","Atwood","Newman","Itasca","Lemont","Aurora","Darien","Kansas","Redmon","Albion","Browns","Ellery","Watson","Ramsey","Farina","Cabery","Melvin","Paxton","Sibley","Benton","Coello","Orient","Sesser","Valier","Bryant","Canton","Norris","Eldred","Morris","Verona","Colusa","Ferris","Nauvoo","Sutter","Warsaw","Carman","Colona","Ophiem","Ashkum","Gilman","Onarga","Dowell","Gorham","Pomona","Newton","Bonnie","Opdyke","Texico","Medora","Galena","Warren","Vienna","Dundee","Elburn","Geneva","Newark","Oswego","Altona","Gilson","Maquon","Oneida","Wataga","Gurnee","Ransom","Leland","Serena","Wedron","Ottawa","Seneca","Tonica","Sumner","Ashton","Harmon","Eldena","Dwight","Campus","Cullom","Ancona","Strawn","Beason","Latham","Macomb","Sciota","Hebron","Anchor","Chenoa","Colfax","Hudson","Le Roy","Normal","Oreana","Girard","Virden","Dorsey","Marine","Roxana","Venice","Worden","Patoka","Vernon","Toluca","Wenona","Manito","Topeka","Easton","Havana","Athens","Alexis","Seaton","Hecker","Butler","Irving","Ohlman","Panama","Harvel","Chapin","Oregon","Dunlap","Peoria","Cutler","Bement","Baylis","Milton","Karnak","Mounds","Putnam","Menard","Sparta","Tilden","Dundas","Moline","Silvis","Dawson","Pawnee","Auburn","Lowder","Thayer","Camden","Bluffs","Cowden","Oconee","Toulon","Dakota","Eleroy","Ridott","Morton","Minier","Cobden","Rankin","Catlin","Tilton","Muncie","Sidell","Gerlaw","Ashley","Keenes","Rinard","Maunie","Albany","Fenton","Fulton","Lyndon","Elwood","Joliet","Mokena","Energy","Herrin","Marion","Durand","Roscoe","Seward","Benson","Eureka","Minonk","Cairo","Tamms","Unity","Depue","Dover","Dewey","Homer","Ogden","Philo","Royal","Savoy","Tovey","Casey","Flora","Xenia","Lerna","Hines","Posen","Worth","Lyons","Niles","Alsip","Neoga","Clare","Genoa","Malta","Wayne","Lisle","Paris","Mason","Ewing","Logan","Fiatt","Ipava","Omaha","Mazon","Basco","Bowen","Niota","Lomax","Media","Orion","Alpha","Galva","Jacob","Nason","Elsah","Boles","Ozark","Elgin","Lafox","Wasco","Essex","Plano","Utica","Dixon","Amboy","Odell","Emden","Adair","Alden","Union","Downs","Merna","Maroa","Boody","Elwin","Macon","Benld","Piasa","Alton","Hamel","Salem","Varna","Henry","Lacon","Joppa","Aledo","Viola","Fults","Byron","Chana","Laura","Cisco","Barry","Pearl","Perry","Herod","Perks","Ullin","Modoc","Percy","Walsh","Olney","Noble","Milan","Muddy","Loami","Alsey","Sigel","Speer","Davis","Pekin","Alvin","Radom","Cisne","Carmi","Crete","Monee","Hurst","Secor","Lima","Ursa","Buda","Ladd","Ohio","Pana","Huey","Golf","Stoy","Lane","Eola","Hume","Avon","Cuba","Kane","Dale","Osco","Loda","Yale","Nora","Zion","Dana","Peru","Cary","Moro","Troy","Alma","Iuka","Kell","Odin","Bath","Witt","Gays","Polo","Rome","Hull","Nebo","Mark","Dupo","Mode","Kent","Lena","Anna","Geff","Sims","Emma","Galt","Erie","Colp","Ava","Dix","Ina","Dow","Rio","Lee","Joy"]`
  ),
  Y3 = [
    "Saint Mary Of The Woods",
    "Mount Saint Francis",
    "West College Corner",
    "West Baden Springs",
    "Kingsford Heights",
    "West Terre Haute",
    "North Manchester",
    "Charlottesville",
    "Sulphur Springs",
    "Rolling Prairie",
    "East Enterprise",
    "Pleasant Mills",
    "Jeffersonville",
    "New Washington",
    "New Middletown",
    "West Middleton",
    "Paris Crossing",
    "Crawfordsville",
    "Sumava Resorts",
    "Beverly Shores",
    "West Lafayette",
    "Fredericksburg",
    "Cambridge City",
    "Liberty Center",
    "Elizabethtown",
    "Hartford City",
    "Young America",
    "Bowling Green",
    "West Harrison",
    "Saint Anthony",
    "New Palestine",
    "New Salisbury",
    "Crothersville",
    "Freelandville",
    "North Webster",
    "South Milford",
    "Michigan City",
    "North Liberty",
    "Saint Meinrad",
    "Pleasant Lake",
    "Battle Ground",
    "Saint Bernice",
    "Prairie Creek",
    "Shepardsville",
    "Liberty Mills",
    "Campbellsburg",
    "Fountain City",
    "Burnettsville",
    "Columbia City",
    "South Whitley",
    "Taylorsville",
    "Royal Center",
    "Knightsville",
    "Michigantown",
    "Lawrenceburg",
    "Spencerville",
    "Schnellville",
    "Connersville",
    "Floyds Knobs",
    "Leiters Ford",
    "Oakland City",
    "Indianapolis",
    "Mccordsville",
    "Mount Summit",
    "North Vernon",
    "Bargersville",
    "Wolcottville",
    "East Chicago",
    "Schererville",
    "Lake Station",
    "Merrillville",
    "Ellettsville",
    "New Richmond",
    "Martinsville",
    "Lake Village",
    "Kendallville",
    "Patricksburg",
    "Bloomingdale",
    "Mount Vernon",
    "Francesville",
    "Russellville",
    "Cross Plains",
    "New Carlisle",
    "Fountaintown",
    "Lincoln City",
    "North Judson",
    "Pine Village",
    "West Lebanon",
    "Williamsport",
    "Williamsburg",
    "Monroeville",
    "Lake Cicott",
    "New Waverly",
    "Twelve Mile",
    "Charlestown",
    "Clarksville",
    "Sellersburg",
    "Centerpoint",
    "Leavenworth",
    "Moores Hill",
    "Huntingburg",
    "Millersburg",
    "Bentonville",
    "Veedersburg",
    "Cedar Grove",
    "New Trenton",
    "Grass Creek",
    "Fort Branch",
    "Worthington",
    "Noblesville",
    "Coatesville",
    "North Salem",
    "Stilesville",
    "Knightstown",
    "Russiaville",
    "Butlerville",
    "Edwardsport",
    "Monroe City",
    "Winona Lake",
    "Silver Lake",
    "Shipshewana",
    "Crown Point",
    "Union Mills",
    "Heltonville",
    "Springville",
    "Markleville",
    "Summitville",
    "Beech Grove",
    "West Newton",
    "Bunker Hill",
    "Grissom Arb",
    "Bloomington",
    "Clear Creek",
    "Harrodsburg",
    "Stinesville",
    "Mooresville",
    "French Lick",
    "Branchville",
    "Saint Croix",
    "Boone Grove",
    "New Harmony",
    "Medaryville",
    "Greencastle",
    "Putnamville",
    "Losantville",
    "Parker City",
    "Pierceville",
    "Gwynneville",
    "Shelbyville",
    "Gentryville",
    "Mariah Hill",
    "Santa Claus",
    "Farmersburg",
    "Clarks Hill",
    "Montmorenci",
    "Sharpsville",
    "Brownsville",
    "Perrysville",
    "Terre Haute",
    "La Fontaine",
    "Hardinsburg",
    "Centerville",
    "Greens Fork",
    "Linn Grove",
    "Huntertown",
    "Zanesville",
    "Fort Wayne",
    "Hartsville",
    "Jonesville",
    "Montpelier",
    "Whitestown",
    "Zionsville",
    "Morgantown",
    "Bringhurst",
    "Burlington",
    "Logansport",
    "Henryville",
    "Marysville",
    "Grantsburg",
    "Washington",
    "Cannelburg",
    "Montgomery",
    "Plainville",
    "Clarksburg",
    "Greensburg",
    "Millhousen",
    "Saint Paul",
    "Middlebury",
    "Georgetown",
    "Greenville",
    "New Albany",
    "Brookville",
    "Owensville",
    "Somerville",
    "Bloomfield",
    "Jasonville",
    "Switz City",
    "Greenfield",
    "Lanesville",
    "Brownsburg",
    "Plainfield",
    "Greensboro",
    "Lewisville",
    "Middletown",
    "New Castle",
    "New Lisbon",
    "Springport",
    "Huntington",
    "Brownstown",
    "Wheatfield",
    "Rensselaer",
    "Bruceville",
    "Westphalia",
    "Etna Green",
    "Cedar Lake",
    "Saint John",
    "Mill Creek",
    "Alexandria",
    "Tippecanoe",
    "Deedsville",
    "Smithville",
    "Unionville",
    "Darlington",
    "New Market",
    "Rising Sun",
    "Petersburg",
    "Chesterton",
    "Valparaiso",
    "Poseyville",
    "Wadesville",
    "Bainbridge",
    "Cloverdale",
    "Reelsville",
    "Ridgeville",
    "Union City",
    "Winchester",
    "Batesville",
    "Friendship",
    "Versailles",
    "Notre Dame",
    "South Bend",
    "Scottsburg",
    "Morristown",
    "San Pierre",
    "Grovertown",
    "Graysville",
    "Bennington",
    "Buck Creek",
    "Inglefield",
    "Evansville",
    "New Goshen",
    "Prairieton",
    "Seelyville",
    "State Line",
    "Hagerstown",
    "Craigville",
    "Monticello",
    "Churubusco",
    "New Haven",
    "Earl Park",
    "Otterbein",
    "Templeton",
    "Thorntown",
    "Jamestown",
    "Helmsburg",
    "Nashville",
    "Rockfield",
    "Galveston",
    "Bethlehem",
    "Underwood",
    "Clay City",
    "Frankfort",
    "Rossville",
    "Dillsboro",
    "New Point",
    "Saint Joe",
    "Daleville",
    "Celestine",
    "Ferdinand",
    "New Paris",
    "Covington",
    "Hillsboro",
    "Oldenburg",
    "Rochester",
    "Haubstadt",
    "Francisco",
    "Princeton",
    "Fairmount",
    "Fowlerton",
    "Jonesboro",
    "Van Buren",
    "Owensburg",
    "Solsberry",
    "Westfield",
    "Fortville",
    "Wilkinson",
    "Elizabeth",
    "Mauckport",
    "Pittsboro",
    "Mooreland",
    "Spiceland",
    "Greentown",
    "Fair Oaks",
    "Remington",
    "Pennville",
    "Salamonia",
    "Commiskey",
    "Edinburgh",
    "Greenwood",
    "Trafalgar",
    "Whiteland",
    "Vincennes",
    "Wheatland",
    "Pierceton",
    "Schneider",
    "Kingsbury",
    "La Crosse",
    "Westville",
    "Tunnelton",
    "Pendleton",
    "Donaldson",
    "Loogootee",
    "Waynetown",
    "Mount Ayr",
    "Rome City",
    "Coal City",
    "Bridgeton",
    "Montezuma",
    "Rockville",
    "Cannelton",
    "Tell City",
    "Cynthiana",
    "Star City",
    "Roachdale",
    "Arlington",
    "Rushville",
    "Lakeville",
    "Mishawaka",
    "Walkerton",
    "Lexington",
    "Boggstown",
    "Flat Rock",
    "Grandview",
    "Fairbanks",
    "Lafayette",
    "Stockwell",
    "Westpoint",
    "Goldsmith",
    "Hillsdale",
    "Universal",
    "Boonville",
    "Elberfeld",
    "Lynnville",
    "Petroleum",
    "Uniondale",
    "Brookston",
    "Hoagland",
    "Woodburn",
    "Columbus",
    "Clifford",
    "Coalmont",
    "Staunton",
    "Mulberry",
    "Milltown",
    "Guilford",
    "Westport",
    "Waterloo",
    "Oakville",
    "Yorktown",
    "Birdseye",
    "Nappanee",
    "Wakarusa",
    "Glenwood",
    "Metamora",
    "Hazleton",
    "Buckskin",
    "Gas City",
    "Matthews",
    "Sweetser",
    "Newberry",
    "Scotland",
    "Sheridan",
    "Bradford",
    "Crandall",
    "Danville",
    "Dunreith",
    "Straughn",
    "Cortland",
    "Freetown",
    "Vallonia",
    "Portland",
    "Franklin",
    "Bicknell",
    "Ragsdale",
    "Sandborn",
    "Claypool",
    "Leesburg",
    "Syracuse",
    "Lagrange",
    "Griffith",
    "Highland",
    "La Porte",
    "Mitchell",
    "Williams",
    "Anderson",
    "Frankton",
    "Plymouth",
    "Converse",
    "Stanford",
    "New Ross",
    "Waveland",
    "Brooklyn",
    "Eminence",
    "Monrovia",
    "Roselawn",
    "Goodland",
    "Kentland",
    "Cromwell",
    "Ligonier",
    "Wolflake",
    "Bellmore",
    "Marshall",
    "Rosedale",
    "Spurgeon",
    "Monterey",
    "Fillmore",
    "Farmland",
    "Saratoga",
    "Napoleon",
    "Carthage",
    "Falmouth",
    "Fairland",
    "Evanston",
    "Chrisney",
    "Hatfield",
    "Richland",
    "Rockport",
    "Hamilton",
    "Carlisle",
    "Shelburn",
    "Sullivan",
    "Florence",
    "Windfall",
    "Blanford",
    "Fontanet",
    "Somerset",
    "Chandler",
    "Newburgh",
    "Tennyson",
    "Pershing",
    "Richmond",
    "Bluffton",
    "Keystone",
    "Chalmers",
    "Idaville",
    "Reynolds",
    "Decatur",
    "Grabill",
    "Grammer",
    "Boswell",
    "Lebanon",
    "Advance",
    "Burrows",
    "Lucerne",
    "Memphis",
    "Harmony",
    "Kirklin",
    "Sedalia",
    "Eckerty",
    "English",
    "Marengo",
    "Sulphur",
    "Taswell",
    "Corunna",
    "Garrett",
    "Holland",
    "Ireland",
    "Bristol",
    "Elkhart",
    "Kingman",
    "Mellott",
    "Newtown",
    "Wallace",
    "Kewanna",
    "Swayzee",
    "Midland",
    "Arcadia",
    "Atlanta",
    "Fishers",
    "Maxwell",
    "Central",
    "Corydon",
    "Laconia",
    "Palmyra",
    "Clayton",
    "Kennard",
    "Shirley",
    "Hemlock",
    "Oakford",
    "Andrews",
    "Roanoke",
    "Seymour",
    "Demotte",
    "Dunkirk",
    "Hanover",
    "Madison",
    "Needham",
    "Nineveh",
    "Oaktown",
    "Mentone",
    "Milford",
    "Hammond",
    "Munster",
    "Whiting",
    "Wanatah",
    "Bedford",
    "Oolitic",
    "Ingalls",
    "Orestes",
    "Bourbon",
    "Wingate",
    "Paragon",
    "Morocco",
    "Kimmell",
    "Orleans",
    "Freedom",
    "Gosport",
    "Spencer",
    "Bristow",
    "Leopold",
    "Stendal",
    "Winslow",
    "Portage",
    "Wheeler",
    "Griffin",
    "Winamac",
    "Manilla",
    "Granger",
    "Osceola",
    "Waldron",
    "Fremont",
    "Patriot",
    "Kempton",
    "Liberty",
    "Clinton",
    "Newport",
    "Pimento",
    "Laketon",
    "Economy",
    "Webster",
    "Buffalo",
    "Wolcott",
    "Larwill",
    "Geneva",
    "Monroe",
    "Preble",
    "Arcola",
    "Harlan",
    "Fowler",
    "Oxford",
    "Talbot",
    "Camden",
    "Cutler",
    "Delphi",
    "Yeoman",
    "Onward",
    "Walton",
    "Borden",
    "Otisco",
    "Brazil",
    "Carbon",
    "Poland",
    "Colfax",
    "Forest",
    "Elnora",
    "Aurora",
    "Ashley",
    "Auburn",
    "Butler",
    "Muncie",
    "Albany",
    "Gaston",
    "Dubois",
    "Jasper",
    "Goshen",
    "Attica",
    "Laurel",
    "Athens",
    "Delong",
    "Fulton",
    "Mackey",
    "Patoka",
    "Marion",
    "Upland",
    "Koleen",
    "Linton",
    "Carmel",
    "Cicero",
    "Depauw",
    "Ramsey",
    "Lizton",
    "Kokomo",
    "Bippus",
    "Markle",
    "Warren",
    "Medora",
    "Norman",
    "Bryant",
    "Redkey",
    "Canaan",
    "Deputy",
    "Dupont",
    "Hayden",
    "Scipio",
    "Vernon",
    "Decker",
    "Atwood",
    "Burket",
    "Warsaw",
    "Topeka",
    "Hobart",
    "Lowell",
    "Shelby",
    "Elwood",
    "Bremen",
    "Culver",
    "Shoals",
    "Denver",
    "Mexico",
    "Ladoga",
    "Linden",
    "Thayer",
    "Albion",
    "Avilla",
    "Laotto",
    "Wawaka",
    "Quincy",
    "Otwell",
    "Velpen",
    "Hebron",
    "Holton",
    "Morris",
    "Osgood",
    "Sunman",
    "Milroy",
    "Austin",
    "Hamlet",
    "Angola",
    "Hudson",
    "Orland",
    "Dugger",
    "Hymera",
    "Paxton",
    "Dayton",
    "Romney",
    "Tipton",
    "Cayuga",
    "Servia",
    "Urbana",
    "Wabash",
    "Boston",
    "Dublin",
    "Milton",
    "Ossian",
    "Poneto",
    "Berne",
    "Yoder",
    "Ambia",
    "Flora",
    "Eaton",
    "Selma",
    "Akron",
    "Lyons",
    "Finly",
    "Kurtz",
    "Tefft",
    "Mongo",
    "Stroh",
    "Leroy",
    "Hanna",
    "Avoca",
    "Huron",
    "Lapel",
    "Camby",
    "Argos",
    "Lapaz",
    "Tyner",
    "Crane",
    "Amboy",
    "Miami",
    "Alamo",
    "Brook",
    "Paoli",
    "Mecca",
    "Derby",
    "Kouts",
    "Modoc",
    "Milan",
    "Homer",
    "Wyatt",
    "Fulda",
    "Lamar",
    "Merom",
    "Vevay",
    "Hobbs",
    "Lewis",
    "Riley",
    "Lagro",
    "Roann",
    "Pekin",
    "Salem",
    "Monon",
    "Hope",
    "Nabb",
    "Cory",
    "Odon",
    "Bath",
    "Avon",
    "Howe",
    "Dyer",
    "Gary",
    "Macy",
    "Peru",
    "Rome",
    "Lynn",
    "Mays",
    "Dale",
    "Troy",
    "Knox",
    "Dana",
    "Leo",
    "Amo",
    "Ora",
  ],
  Q3 = JSON.parse(
    '["North Buena Vista","Columbus Junction","North Washington","Strawberry Point","Pacific Junction","West Burlington","Missouri Valley","Center Junction","Oxford Junction","University Park","College Springs","West Des Moines","Windsor Heights","Pleasant Valley","Correctionville","Mechanicsville","Fredericksburg","Grand Junction","Guthrie Center","New Providence","Steamboat Rock","Mount Pleasant","Melcher Dallas","Council Bluffs","Mount Sterling","Liberty Center","Crawfordsville","Buffalo Center","Sergeant Bluff","Harpers Ferry","La Porte City","Rockwell City","Gillett Grove","Dallas Center","Grundy Center","North English","Saint Donatus","North Liberty","South English","Columbus City","Saint Charles","Pleasantville","Saint Anthony","Mitchellville","Pleasant Hill","Fort Atkinson","Highlandville","Climbing Hill","Belle Plaine","Mount Auburn","Gilbertville","Independence","Sioux Rapids","New Hartford","Farnhamville","Garden Grove","Arnolds Park","Nora Springs","Charles City","Webster City","Crystal Lake","Little Sioux","Lime Springs","Gilmore City","Battle Creek","Middle Amana","Williamsburg","Spragueville","Prairie City","Libertyville","Fort Madison","Center Point","Central City","Mount Vernon","Cedar Rapids","Marshalltown","State Center","Little Cedar","Saint Ansgar","West Liberty","Sioux Center","Mc Callsburg","Shannon City","New Virginia","West Chester","Promise City","Bridgewater","Centerville","Cedar Falls","Pilot Mound","Albert City","Austinville","Clarksville","Parkersburg","Coon Rapids","West Branch","New Hampton","Farmersburg","Lost Nation","Grand Mound","Teeds Grove","Charter Oak","Drakesville","Grand River","Spirit Lake","Worthington","Estherville","Wallingford","Saint Lucas","Marble Rock","Garden City","Mount Union","Dakota City","Millersburg","South Amana","Springbrook","Martinsburg","Pilot Grove","Prairieburg","Springville","Morning Sun","Little Rock","Rock Rapids","Barnes City","Silver City","Toeterville","Braddyville","Graettinger","Carter Lake","Honey Creek","Mc Clelland","Mc Causland","New Liberty","Orange City","Rock Valley","Chillicothe","Martensdale","Saint Marys","Forest City","Eagle Grove","Fontanelle","Greenfield","Dorchester","Waterville","Cincinnati","Unionville","Kimballton","Blairstown","Shellsburg","Janesville","Plainfield","Quasqueton","Storm Lake","Linn Grove","Shell Rock","Lidderdale","Cumberland","Mason City","Clear Lake","Rock Falls","Alta Vista","Greenville","Garnavillo","Guttenberg","Saint Olaf","Goose Lake","Booneville","Bloomfield","Davis City","Masonville","Manchester","Burlington","Mediapolis","Middletown","Dyersville","Holy Cross","New Vienna","West Union","Blairsburg","Iowa Falls","New London","Swedesburg","Coralville","Langworthy","Monticello","What Cheer","Hayesville","Whittemore","Donnellson","West Point","Saint Paul","Troy Mills","Williamson","New Sharon","Stacyville","Conesville","Montpelier","Sutherland","Shenandoah","Emmetsburg","Brunsville","Pocahontas","Des Moines","Deep River","Bettendorf","Blue Grass","Long Grove","Portsmouth","Westphalia","Chatsworth","Story City","Buckingham","Clearfield","Sharpsburg","New Market","Birmingham","Farmington","Blakesburg","Washington","Fort Dodge","Lake Mills","Spillville","Sioux City","Hanlontown","New Albin","Postville","Van Horne","Dunkerton","Evansdale","Frederika","Rembrandt","Truesdale","Aplington","Lake City","Lohrville","Lanesboro","Templeton","Dougherty","Swaledale","Mc Gregor","Marquette","Charlotte","Wheatland","Aspinwall","Schleswig","Van Meter","Colesburg","Earlville","Hopkinton","Lake Park","Luxemburg","Armstrong","Arlington","Alexander","Sheffield","Jefferson","Wellsburg","Ellsworth","Stratford","Radcliffe","Hillsboro","Riceville","Livermore","Ida Grove","Homestead","Maquoketa","Lynnville","Fairfield","Lockridge","Iowa City","Lone Tree","Thornburg","Sigourney","Lone Rock","Swea City","Alburnett","Toddville","Grandview","Larchwood","Bevington","Macksburg","Patterson","Winterset","Oskaloosa","Rose Hill","Knoxville","Haverhill","Melbourne","Henderson","Carpenter","Mc Intire","Fruitland","Muscatine","Ocheyedan","Blanchard","Northboro","Shambaugh","West Bend","Westfield","Bondurant","Polk City","Urbandale","Macedonia","Underwood","Montezuma","Searsboro","Kellerton","Mount Ayr","Lake View","Wall Lake","Le Claire","Princeton","Davenport","Granville","Cambridge","Gladbrook","Keosauqua","Bonaparte","Stockport","Eddyville","Kirkville","Indianola","Ainsworth","Riverside","Lineville","Millerton","Callender","Scarville","Smithland","Northwood","Goldfield","Woolstock","Prescott","Garrison","Keystone","Waterloo","Fairbank","Hazleton","Winthrop","Marathon","Atlantic","Griswold","Clarence","Stanwood","Meservey","Plymouth","Rockwell","Thornton","Cherokee","Cleghorn","Larrabee","Woodburn","Peterson","Fostoria","Edgewood","Camanche","Low Moor","Ricketts","Westside","Dow City","Redfield","Woodward","Van Wert","Delaware","Danville","Yarmouth","Superior","Sherrill","Dolliver","Ringsted","Westgate","Clermont","Randalia","Rockford","Bradford","Farragut","Percival","Randolph","Riverton","Scranton","Morrison","Reinbeck","Stanhope","Williams","Magnolia","Mondamin","Woodbine","Winfield","Protivin","Bradgate","Humboldt","Holstein","Bellevue","La Motte","Monmouth","Killduff","Packwood","Martelle","Richland","Bancroft","Lu Verne","Houghton","Montrose","Hiawatha","Oakville","Chariton","Leighton","Columbia","Hamilton","Ferguson","Le Grand","Glenwood","Hastings","Mapleton","Moorhead","Villisca","Atalissa","Stockton","Paullina","Primghar","Clarinda","Yorktown","Ayrshire","Cylinder","Kingsley","Havelock","Johnston","Runnells","Sheldahl","Crescent","Grinnell","Brooklyn","Guernsey","Hartwick","Diagonal","Sac City","Schaller","Eldridge","Defiance","Elk Horn","Hawarden","Blockton","Cromwell","Ackworth","Carlisle","Hartford","Brighton","Allerton","Humeston","Burnside","Duncombe","Harcourt","Moorland","Thompson","Castalia","Ridgeway","Corning","Nodaway","Lansing","Moravia","Moulton","Audubon","Brayton","Luzerne","Newhall","Walford","Watkins","Raymond","Boxholm","Readlyn","Tripoli","Waverly","Stanley","Brandon","Allison","Aredale","Bristow","Knierim","Pomeroy","Carroll","Arcadia","Glidden","Manning","Ralston","Massena","Bennett","Ventura","Aurelia","Meriden","Osceola","Spencer","Dickens","Elkader","Elkport","Andover","Calamus","Clinton","De Witt","Denison","Manilla","De Soto","Granger","Minburn","Pulaski","Decatur","Greeley","Milford","Okoboji","Dubuque","Bernard","Cascade","Durango","Epworth","Zwingle","Maynard","Oelwein","Fayette","Hawkeye","Waucoma","Colwell","Popejoy","Coulter","Hampton","Latimer","Hamburg","Imogene","Thurman","Churdan","Holland","Jamaica","Randall","Corwith","Goodell","Kanawha","Buckeye","Hubbard","Gifford","Whitten","Wayland","Chester","Ottosen","Renwick","Rutland","Marengo","Parnell","Preston","Baldwin","Kellogg","Reasnor","Batavia","Swisher","Anamosa","Wyoming","Keswick","Webster","Hedrick","Titonka","Ledyard","Denmark","Fairfax","Wapello","Russell","Earlham","Fremont","Clemons","Liscomb","Emerson","Malvern","Mineola","Orchard","Castana","Whiting","Blencoe","Soldier","Lovilia","Melrose","Elliott","Red Oak","Stanton","Nichols","Calumet","Sheldon","Sanborn","Hartley","Mallard","Ruthven","Le Mars","Merrill","Laurens","Alleman","Altoona","Berwick","Elkhart","Hancock","Oakland","Treynor","Ellston","Redding","Tingley","Odebolt","Buffalo","Donahue","Walcott","Kirkman","Earling","Maurice","Hospers","Matlock","Collins","Gilbert","Maxwell","Zearing","Montour","Lincoln","Chelsea","Clutier","Elberon","Bedford","Gravity","Lorimor","Creston","Cantril","Ottumwa","Cumming","Norwalk","Wellman","Corydon","Seymour","Vincent","Decorah","Bronson","Cushing","Danbury","Hornick","Moville","Pierson","Fertile","Grafton","Kensett","Belmond","Clarion","Orient","Carbon","Waukon","Exline","Mystic","Hamlin","Atkins","Norway","Urbana","Vinton","Hudson","Beaver","Luther","Madrid","Denver","Sumner","Aurora","Lamont","Rowley","Newell","Dumont","Greene","Kesley","Jolley","Lytton","Manson","Somers","Dedham","Halbur","Lowden","Durant","Tipton","Marcus","Quimby","Washta","Nashua","Lawler","Murray","Everly","Garber","Monona","Delmar","Bryant","Welton","Deloit","Bouton","Dawson","Dexter","Linden","Waukee","Floris","Lamoni","Weldon","Dundee","Sperry","Terril","Farley","Peosta","Wadena","Chapin","Geneva","Sidney","Cooper","Rippey","Beaman","Conrad","Bagley","Bayard","Panora","Stuart","Jewell","Kamrar","Garner","Klemme","Ackley","Eldora","Dunlap","Modale","Persia","Pisgah","Cresco","Arthur","Conroy","Ladora","Victor","Andrew","Sabula","Baxter","Colfax","Monroe","Newton","Oxford","Tiffin","Morley","Onslow","Gibson","Harper","Lakota","Wesley","Algona","Fenton","Argyle","Keokuk","Coggon","Lisbon","Marion","Robins","Walker","Alvord","George","Inwood","Lester","Beacon","Bussey","Harvey","Albion","Gilman","Laurel","Rhodes","Rodney","Moscow","Wilton","Archer","Ashton","Sibley","Harris","Melvin","Curlew","Hinton","Remsen","Palmer","Plover","Varina","Ankeny","Grimes","Carson","Minden","Shelby","Walnut","Harlan","Malcom","Benton","Nemaha","Auburn","Panama","Ireton","Boyden","Huxley","Kelley","Nevada","Roland","Slater","Garwin","Dysart","Toledo","Vining","Thayer","Arispe","Milton","Agency","Lacona","Kalona","Badger","Barnum","Dayton","Gowrie","Lehigh","Leland","Calmar","Ossian","Anthon","Lawton","Adair","Plano","Udell","Exira","Dewar","Boone","Ogden","Jesup","Breda","Anita","Wiota","Lewis","Marne","Ionia","Royal","Volga","Luana","Kiron","Arion","Perry","Delhi","Elgin","Floyd","Tabor","Paton","Stout","Casey","Menlo","Britt","Woden","Alden","Union","Logan","Salem","Hardy","Galva","Amana","Miles","Mingo","Sully","Hills","Solon","Keota","Delta","Ollie","Wever","Letts","Derby","Lucas","Truro","Cedar","Otley","Pella","Tracy","Osage","Onawa","Albia","Grant","Essex","Akron","Oyens","Fonda","Rolfe","Clive","Avoca","Neola","Early","Dixon","Irwin","Alton","Traer","Lenox","Afton","Douds","Selma","Eldon","Prole","Clare","Salix","Sloan","Joice","Manly","Rowan","Gray","Alta","Webb","Vail","Adel","Leon","Ryan","Oran","Rudd","Dana","Dike","Yale","Rome","Olds","Elma","Bode","Thor","Olin","Burt","Palo","Doon","Peru","Swan","Coin","Hull","Ames","Colo","Tama","Milo","Clio","Otho","Rake","Dows","Galt","Ira","Ely","Ute","Oto"]'
  ),
  Z3 = [
    "Cottonwood Falls",
    "Fort Leavenworth",
    "South Hutchinson",
    "Prairie Village",
    "Shawnee Mission",
    "Medicine Lodge",
    "Matfield Green",
    "Baxter Springs",
    "Pretty Prairie",
    "Conway Springs",
    "Sharon Springs",
    "Bonner Springs",
    "Saint Francis",
    "Arkansas City",
    "Junction City",
    "Overland Park",
    "Neosho Rapids",
    "Council Grove",
    "Valley Center",
    "Mcconnell Afb",
    "Geuda Springs",
    "West Mineral",
    "Baldwin City",
    "Williamsburg",
    "North Newton",
    "Valley Falls",
    "Mound Valley",
    "Sylvan Grove",
    "Lincolnville",
    "Lost Springs",
    "Independence",
    "Phillipsburg",
    "Prairie View",
    "Saint George",
    "Westmoreland",
    "Little River",
    "Leonardville",
    "Garden Plain",
    "Smith Center",
    "Belle Plaine",
    "Neosho Falls",
    "Yates Center",
    "Edwardsville",
    "Pawnee Rock",
    "Cedar Point",
    "Strong City",
    "Clay Center",
    "Morganville",
    "White Cloud",
    "Garden City",
    "Pierceville",
    "Circleville",
    "Nortonville",
    "New Century",
    "Spring Hill",
    "Mullinville",
    "Leavenworth",
    "Centerville",
    "Blue Rapids",
    "Summerfield",
    "Cawker City",
    "Coffeyville",
    "Baileyville",
    "Minneapolis",
    "Long Island",
    "Havensville",
    "Saint Marys",
    "Rush Center",
    "Bunker Hill",
    "New Cambria",
    "Silver Lake",
    "South Haven",
    "Harveyville",
    "Morrowville",
    "Kansas City",
    "Westphalia",
    "Great Bend",
    "Hoisington",
    "Fort Scott",
    "Whitewater",
    "Cedar Vale",
    "Chautauqua",
    "Miltonvale",
    "Burlington",
    "Protection",
    "Maple City",
    "Farlington",
    "Enterprise",
    "Schoenchen",
    "Dodge City",
    "Fort Dodge",
    "Spearville",
    "Wellsville",
    "Fort Riley",
    "Grainfield",
    "Fall River",
    "Bluff City",
    "Winchester",
    "Grantville",
    "Cunningham",
    "Greensburg",
    "Tonganoxie",
    "Blue Mound",
    "Mound City",
    "Pleasanton",
    "Moundridge",
    "Marysville",
    "Vermillion",
    "Waterville",
    "Osawatomie",
    "Glen Elder",
    "Cherryvale",
    "White City",
    "Saint Paul",
    "Burlingame",
    "Carbondale",
    "Osage City",
    "Bennington",
    "Hutchinson",
    "Belleville",
    "Plainville",
    "Liebenthal",
    "Mc Cracken",
    "Brookville",
    "Scott City",
    "Clearwater",
    "Mount Hope",
    "Kensington",
    "Macksville",
    "Wellington",
    "Mc Farland",
    "Maple Hill",
    "Alta Vista",
    "Hollenberg",
    "Washington",
    "Marienthal",
    "New Albany",
    "Savonburg",
    "Effingham",
    "Lancaster",
    "Lake City",
    "Ellinwood",
    "Uniontown",
    "Powhattan",
    "El Dorado",
    "Rose Hill",
    "Crestline",
    "Bird City",
    "Englewood",
    "Wakefield",
    "Concordia",
    "Jamestown",
    "Coldwater",
    "Cambridge",
    "Pittsburg",
    "Frontenac",
    "Herington",
    "Lecompton",
    "Elk Falls",
    "Catharine",
    "Ellsworth",
    "Kanopolis",
    "Princeton",
    "Hill City",
    "Montezuma",
    "Oskaloosa",
    "Deerfield",
    "Nashville",
    "Lindsborg",
    "Mcpherson",
    "Marquette",
    "Hillsboro",
    "Frankfort",
    "Hillsdale",
    "Louisburg",
    "Richfield",
    "Centralia",
    "Galesburg",
    "Ness City",
    "Overbrook",
    "Mc Donald",
    "Abbyville",
    "Arlington",
    "Nickerson",
    "Partridge",
    "Courtland",
    "Manhattan",
    "Alexander",
    "La Crosse",
    "Greenwich",
    "Haysville",
    "Rossville",
    "Greenleaf",
    "Humboldt",
    "La Harpe",
    "Atchison",
    "Cummings",
    "Muscotah",
    "Hardtner",
    "Hazelton",
    "Sun City",
    "Mapleton",
    "Redfield",
    "Fairview",
    "Hiawatha",
    "Robinson",
    "Cassoday",
    "Beaumont",
    "Douglass",
    "Columbus",
    "Riverton",
    "Minneola",
    "Longford",
    "Winfield",
    "Cherokee",
    "Franklin",
    "Mulberry",
    "Jennings",
    "Norcatur",
    "Woodbine",
    "Highland",
    "Lawrence",
    "Victoria",
    "Holyrood",
    "Lorraine",
    "Richmond",
    "Grinnell",
    "Cimarron",
    "Copeland",
    "Hamilton",
    "Piedmont",
    "Coolidge",
    "Syracuse",
    "Danville",
    "Freeport",
    "Halstead",
    "Sedgwick",
    "Sublette",
    "Netawaka",
    "Mc Louth",
    "Burr Oak",
    "Edgerton",
    "Stilwell",
    "Haviland",
    "Altamont",
    "Bartlett",
    "Prescott",
    "Monument",
    "Americus",
    "Hartford",
    "Florence",
    "Elk City",
    "Sycamore",
    "Brownell",
    "Scranton",
    "Garfield",
    "Fostoria",
    "Republic",
    "Sterling",
    "Randolph",
    "Stockton",
    "Woodston",
    "Dorrance",
    "Paradise",
    "Berryton",
    "Tecumseh",
    "Wakarusa",
    "Goodland",
    "Kanorado",
    "Stafford",
    "Caldwell",
    "Mayfield",
    "Brewster",
    "Wakeeney",
    "Eskridge",
    "Benedict",
    "Fredonia",
    "Neodesha",
    "Elsmore",
    "Garnett",
    "Greeley",
    "Kincaid",
    "Claflin",
    "Bronson",
    "Garland",
    "Everest",
    "Morrill",
    "Andover",
    "Augusta",
    "Rosalia",
    "Towanda",
    "Elmdale",
    "Niotaze",
    "Scammon",
    "Ashland",
    "Gridley",
    "Waverly",
    "Wilmore",
    "Atlanta",
    "Arcadia",
    "Mc Cune",
    "Dresden",
    "Oberlin",
    "Abilene",
    "Chapman",
    "Solomon",
    "Talmage",
    "Bendena",
    "Wathena",
    "Kinsley",
    "Offerle",
    "Grenola",
    "Longton",
    "Pfeifer",
    "Holcomb",
    "Bucklin",
    "Rantoul",
    "Milford",
    "Quinter",
    "Morland",
    "Penokee",
    "Ulysses",
    "Ingalls",
    "Tribune",
    "Madison",
    "Kendall",
    "Anthony",
    "Waldron",
    "Burrton",
    "Hesston",
    "Satanta",
    "Hanston",
    "Jetmore",
    "Denison",
    "Mayetta",
    "Soldier",
    "Whiting",
    "Ozawkie",
    "Meriden",
    "Formoso",
    "Mankato",
    "Randall",
    "De Soto",
    "Gardner",
    "Mission",
    "Shawnee",
    "Leawood",
    "Kingman",
    "Murdock",
    "Norwich",
    "Chetopa",
    "Parsons",
    "Dighton",
    "Basehor",
    "Lansing",
    "Linwood",
    "Barnard",
    "Beverly",
    "Lincoln",
    "Lacygne",
    "Emporia",
    "Reading",
    "Roxbury",
    "Peabody",
    "Goessel",
    "Beattie",
    "Bucyrus",
    "Fontana",
    "Simpson",
    "Dearing",
    "Liberty",
    "Burdick",
    "Elkhart",
    "Corning",
    "Sabetha",
    "Wetmore",
    "Chanute",
    "Clayton",
    "Melvern",
    "Quenemo",
    "Osborne",
    "Delphos",
    "Tescott",
    "Burdett",
    "Olsburg",
    "Herndon",
    "Scandia",
    "Bushton",
    "Geneseo",
    "Raymond",
    "Russell",
    "Assaria",
    "Bentley",
    "Colwich",
    "Goddard",
    "Wichita",
    "Liberal",
    "Lebanon",
    "Gaylord",
    "St John",
    "Johnson",
    "Hugoton",
    "Argonia",
    "Mulvane",
    "Rexford",
    "Collyer",
    "Ogallah",
    "Wallace",
    "Clifton",
    "Hanover",
    "Mahaska",
    "Altoona",
    "Buffalo",
    "Toronto",
    "Colony",
    "Isabel",
    "Sharon",
    "Albert",
    "Olmitz",
    "Fulton",
    "Horton",
    "Benton",
    "Elbing",
    "Latham",
    "Potwin",
    "Galena",
    "Treece",
    "Aurora",
    "Glasco",
    "Le Roy",
    "Burden",
    "Dexter",
    "Girard",
    "Hepler",
    "Opolis",
    "Walnut",
    "Denton",
    "Elwood",
    "Eudora",
    "Belpre",
    "Howard",
    "Moline",
    "Walker",
    "Wilson",
    "Wright",
    "Ottawa",
    "Pomona",
    "Ensign",
    "Lamont",
    "Virgil",
    "Eureka",
    "Severy",
    "Attica",
    "Harper",
    "Newton",
    "Walton",
    "Holton",
    "Jewell",
    "Webber",
    "Olathe",
    "Lenexa",
    "Spivey",
    "Dennis",
    "Oswego",
    "Easton",
    "Parker",
    "Oakley",
    "Winona",
    "Admire",
    "Canton",
    "Windom",
    "Marion",
    "Lehigh",
    "Durham",
    "Ramona",
    "Axtell",
    "Bremen",
    "Fowler",
    "Plains",
    "Beloit",
    "Hunter",
    "Tipton",
    "Havana",
    "Dwight",
    "Wilsey",
    "Oneida",
    "Seneca",
    "Thayer",
    "Arnold",
    "Bazine",
    "Beeler",
    "Ransom",
    "Almena",
    "Lenora",
    "Norton",
    "Lyndon",
    "Vassar",
    "Portis",
    "Natoma",
    "Larned",
    "Kirwin",
    "Belvue",
    "Emmett",
    "Wamego",
    "Sawyer",
    "Atwood",
    "Ludell",
    "Buhler",
    "Plevna",
    "Sylvia",
    "Agenda",
    "Munden",
    "Norway",
    "Nekoma",
    "Gorham",
    "Salina",
    "Gypsum",
    "Andale",
    "Cheney",
    "Kismet",
    "Auburn",
    "Topeka",
    "Selden",
    "Hudson",
    "Manter",
    "Moscow",
    "Milton",
    "Oxford",
    "Levant",
    "Paxico",
    "Weskan",
    "Barnes",
    "Haddam",
    "Palmer",
    "Moran",
    "Welda",
    "Kiowa",
    "Sedan",
    "Green",
    "Clyde",
    "Udall",
    "Lewis",
    "Ellis",
    "Bogue",
    "Delia",
    "Perry",
    "Esbon",
    "Lakin",
    "Zenda",
    "Healy",
    "Allen",
    "Galva",
    "Inman",
    "Burns",
    "Tampa",
    "Oketo",
    "Meade",
    "Paola",
    "Caney",
    "Rolla",
    "Stark",
    "Utica",
    "Downs",
    "Alton",
    "Rozel",
    "Glade",
    "Logan",
    "Onaga",
    "Byers",
    "Coats",
    "Pratt",
    "Haven",
    "Turon",
    "Yoder",
    "Narka",
    "Alden",
    "Chase",
    "Lyons",
    "Ogden",
    "Riley",
    "Damar",
    "Palco",
    "Bison",
    "Lucas",
    "Luray",
    "Waldo",
    "Falun",
    "Derby",
    "Kechi",
    "Maize",
    "Viola",
    "Dover",
    "Hoxie",
    "Edson",
    "Athol",
    "Cedar",
    "Milan",
    "Colby",
    "Leoti",
    "Piqua",
    "Iola",
    "Leon",
    "Peru",
    "Weir",
    "Lebo",
    "Rock",
    "Arma",
    "Hope",
    "Troy",
    "Hays",
    "Ford",
    "Lane",
    "Gove",
    "Park",
    "Neal",
    "Hoyt",
    "Edna",
    "Olpe",
    "Home",
    "Tyro",
    "Bern",
    "Goff",
    "Erie",
    "Agra",
    "Iuka",
    "Cuba",
    "Otis",
    "Peck",
    "Alma",
    "Linn",
    "Gas",
    "Gem",
  ],
  X3 = [
    "North Middletown",
    "Mount Washington",
    "Lebanon Junction",
    "Plummers Landing",
    "South Portsmouth",
    "Reynolds Station",
    "South Carrollton",
    "South Williamson",
    "West Louisville",
    "Turners Station",
    "Russell Springs",
    "Stamping Ground",
    "Saint Catharine",
    "Shepherdsville",
    "Falls Of Rough",
    "Ages Brookside",
    "Dawson Springs",
    "Staffordsville",
    "East Bernstadt",
    "Thousandsticks",
    "Kings Mountain",
    "Marshes Siding",
    "Bradfordsville",
    "Jeffersonville",
    "Mount Sterling",
    "Robinson Creek",
    "Campbellsville",
    "Lovelaceville",
    "Kettle Island",
    "Junction City",
    "Mitchellsburg",
    "Fort Campbell",
    "Sextons Creek",
    "Elizabethtown",
    "Wallins Creek",
    "Campbellsburg",
    "Pleasureville",
    "Saint Charles",
    "Harrods Creek",
    "Nicholasville",
    "West Van Lear",
    "Bryants Store",
    "Mount Sherman",
    "Saint Francis",
    "Gravel Switch",
    "Gilbertsville",
    "Tompkinsville",
    "Cornettsville",
    "West Somerset",
    "Renfro Valley",
    "Bowling Green",
    "Lawrenceburg",
    "Eighty Eight",
    "Catlettsburg",
    "Stephensport",
    "Silver Grove",
    "Hopkinsville",
    "Mammoth Cave",
    "Flemingsburg",
    "Prestonsburg",
    "Bryantsville",
    "Williamstown",
    "Water Valley",
    "Summersville",
    "Munfordville",
    "Madisonville",
    "White Plains",
    "Masonic Home",
    "Williamsport",
    "Wittensville",
    "Independence",
    "Morning View",
    "Pippa Passes",
    "Barbourville",
    "Lowmansville",
    "Saint Helens",
    "Crab Orchard",
    "Grand Rivers",
    "Russellville",
    "West Paducah",
    "Parkers Lake",
    "Whitley City",
    "Salyersville",
    "Calvert City",
    "Summer Shade",
    "Fountain Run",
    "Mount Hermon",
    "West Liberty",
    "Central City",
    "Horse Branch",
    "Pewee Valley",
    "De Mossville",
    "Elkhorn City",
    "Fords Branch",
    "Forest Hills",
    "Science Hill",
    "Mount Olivet",
    "Mount Vernon",
    "Elliottville",
    "Simpsonville",
    "Taylorsville",
    "Sharon Grove",
    "Smiths Grove",
    "Williamsburg",
    "Cane Valley",
    "Scottsville",
    "Owingsville",
    "Middlesboro",
    "Stoney Fork",
    "Millersburg",
    "Brooksville",
    "Hardinsburg",
    "New Concord",
    "Fort Thomas",
    "Bethelridge",
    "Burkesville",
    "Maple Mount",
    "Whitesville",
    "Brownsville",
    "Muses Mills",
    "Wallingford",
    "Betsy Layne",
    "Bevinsville",
    "Wheelwright",
    "Leitchfield",
    "South Shore",
    "Worthington",
    "White Mills",
    "Holmes Mill",
    "Bonnieville",
    "Smith Mills",
    "Spottsville",
    "Mortons Gap",
    "Nortonville",
    "Fisherville",
    "Oil Springs",
    "Paintsville",
    "Ft Mitchell",
    "Hodgenville",
    "Beattyville",
    "Bear Branch",
    "Hustonville",
    "Beech Grove",
    "Brandenburg",
    "Harrodsburg",
    "Cannel City",
    "Beech Creek",
    "New Liberty",
    "Shelbyville",
    "Allensville",
    "Morganfield",
    "Springfield",
    "Hazel Green",
    "Glens Fork",
    "Gradyville",
    "Sharpsburg",
    "Burlington",
    "Petersburg",
    "Parksville",
    "Perryville",
    "Germantown",
    "Lost Creek",
    "Cloverport",
    "Mc Daniels",
    "Union Star",
    "Morgantown",
    "Alexandria",
    "California",
    "Cunningham",
    "Carrollton",
    "Worthville",
    "Olive Hill",
    "Middleburg",
    "La Fayette",
    "Winchester",
    "Goose Rock",
    "Manchester",
    "Marrowbone",
    "Curdsville",
    "Rocky Hill",
    "Bee Spring",
    "Sandy Hook",
    "Elizaville",
    "Blue River",
    "Hueysville",
    "Paint Lick",
    "Crittenden",
    "Jonesville",
    "Fancy Farm",
    "Farmington",
    "Big Clifty",
    "Caneyville",
    "Greensburg",
    "Hawesville",
    "Rineyville",
    "Vine Grove",
    "West Point",
    "Big Laurel",
    "Cumberland",
    "Grays Knob",
    "Mary Alice",
    "Hardyville",
    "Horse Cave",
    "New Castle",
    "Port Royal",
    "Smithfield",
    "Earlington",
    "Louisville",
    "Boons Camp",
    "East Point",
    "Green Road",
    "Hoskinston",
    "Mc Roberts",
    "Whitesburg",
    "Tollesboro",
    "Waynesburg",
    "Adairville",
    "Sacramento",
    "Saint Mary",
    "Washington",
    "Battletown",
    "Payneville",
    "Frenchburg",
    "Wellington",
    "Drakesboro",
    "Greenville",
    "Bloomfield",
    "Coxs Creek",
    "Moorefield",
    "Beaver Dam",
    "Centertown",
    "Fordsville",
    "Perry Park",
    "Booneville",
    "Gays Creek",
    "Lick Creek",
    "Mc Andrews",
    "Pinsonfork",
    "Shelby Gap",
    "Livingston",
    "Clearfield",
    "Georgetown",
    "Sadieville",
    "Finchville",
    "Mount Eden",
    "Mannsville",
    "Willisburg",
    "Monticello",
    "Providence",
    "Slaughters",
    "Wheatcroft",
    "Pine Ridge",
    "Versailles",
    "La Center",
    "Wickliffe",
    "Cave City",
    "Hiseville",
    "Park City",
    "Salt Lick",
    "Pineville",
    "Irvington",
    "Rochester",
    "Princeton",
    "Melbourne",
    "Arlington",
    "Dunnville",
    "Oak Grove",
    "Big Creek",
    "Fall Rock",
    "Dycusburg",
    "Owensboro",
    "Roundhill",
    "Isonville",
    "Lexington",
    "Hillsboro",
    "Mc Dowell",
    "Stanville",
    "Weeksbury",
    "Frankfort",
    "Lancaster",
    "Dry Ridge",
    "Lynnville",
    "Argillite",
    "Flatwoods",
    "Lewisport",
    "Pellville",
    "Fort Knox",
    "Closplint",
    "Cynthiana",
    "Henderson",
    "Bethlehem",
    "Pendleton",
    "Gray Hawk",
    "Hagerhill",
    "Stambaugh",
    "Tutor Key",
    "Covington",
    "Sassafras",
    "Flat Lick",
    "Pittsburg",
    "Webbville",
    "Warbranch",
    "Partridge",
    "Millstone",
    "Vanceburg",
    "Mc Kinney",
    "Ledbetter",
    "Smithland",
    "Lewisburg",
    "Eddyville",
    "Pine Knot",
    "Livermore",
    "Maysville",
    "Muldraugh",
    "Denniston",
    "Knob Lick",
    "Beechmont",
    "Bardstown",
    "Fairfield",
    "New Haven",
    "Crestwood",
    "La Grange",
    "Mistletoe",
    "Pikeville",
    "Fedscreek",
    "Mouthcard",
    "Rockhouse",
    "Shelbiana",
    "Clay City",
    "Tateville",
    "Jamestown",
    "Uniontown",
    "Rockfield",
    "Mackville",
    "Rockholds",
    "Breeding",
    "Columbia",
    "Adolphus",
    "Florence",
    "Danville",
    "Clayhole",
    "Rousseau",
    "Vancleve",
    "Garfield",
    "Mc Quady",
    "Westview",
    "Clermont",
    "Hillview",
    "Aberdeen",
    "Woodbury",
    "Fredonia",
    "Bellevue",
    "Bardwell",
    "Hitchins",
    "Yosemite",
    "Fairview",
    "Pembroke",
    "Teaberry",
    "Mayfield",
    "Symsonia",
    "Clarkson",
    "Millwood",
    "Radcliff",
    "Eastview",
    "Glendale",
    "Coalgood",
    "Coldiron",
    "Lejunior",
    "Pathfork",
    "Eminence",
    "Lockport",
    "Columbus",
    "Annville",
    "Eastwood",
    "Glenview",
    "Prospect",
    "Fairdale",
    "Van Lear",
    "Erlanger",
    "Emmalena",
    "Littcarr",
    "Pine Top",
    "Woodbine",
    "Fourmile",
    "Heidrick",
    "Magnolia",
    "Chappell",
    "Stinnett",
    "Sizerock",
    "Wendover",
    "Yeaddiss",
    "Jackhorn",
    "Jeremiah",
    "Linefork",
    "Thornton",
    "Garrison",
    "Stanford",
    "Olmstead",
    "Richmond",
    "Royalton",
    "Tomahawk",
    "Warfield",
    "Mayslick",
    "Rhodelia",
    "Beaumont",
    "Edmonton",
    "Gamaliel",
    "Crockett",
    "Powderly",
    "Nazareth",
    "New Hope",
    "Carlisle",
    "Cromwell",
    "Hartford",
    "Mc Henry",
    "Rockport",
    "Westport",
    "Ricetown",
    "Falmouth",
    "Bonnyman",
    "Buckhorn",
    "Freeburn",
    "Majestic",
    "Stopover",
    "Somerset",
    "Bronston",
    "Burnside",
    "Ferguson",
    "Brodhead",
    "Morehead",
    "Franklin",
    "Elk Horn",
    "Cerulean",
    "Sullivan",
    "Woodburn",
    "Knifley",
    "Holland",
    "Bandana",
    "Glasgow",
    "Olympia",
    "Preston",
    "Miracle",
    "Beverly",
    "Ashland",
    "Augusta",
    "Milford",
    "Jackson",
    "Webster",
    "Kirksey",
    "Newport",
    "Milburn",
    "Sanders",
    "Grayson",
    "Soldier",
    "Willard",
    "Liberty",
    "Windsor",
    "Crofton",
    "Herndon",
    "Garrard",
    "Philpot",
    "Sweeden",
    "Ravenna",
    "Eastern",
    "Garrett",
    "Grethel",
    "Langley",
    "Printer",
    "Wayland",
    "Hickman",
    "Glencoe",
    "Corinth",
    "Hickory",
    "Sedalia",
    "Greenup",
    "Russell",
    "Cecilia",
    "Bledsoe",
    "Dayhoit",
    "Gulston",
    "Cub Run",
    "Baskett",
    "Corydon",
    "Robards",
    "Sulphur",
    "Clinton",
    "Manitou",
    "Sandgap",
    "Wilmore",
    "Flatgap",
    "Latonia",
    "Hindman",
    "Topmost",
    "Artemus",
    "Girdler",
    "Trosper",
    "Buffalo",
    "Ulysses",
    "Mozelle",
    "Burdine",
    "Jenkins",
    "Blackey",
    "Cromona",
    "Letcher",
    "Mayking",
    "Premium",
    "Emerson",
    "Hampton",
    "Kuttawa",
    "Paducah",
    "Stearns",
    "Calhoun",
    "Bighill",
    "Gunlock",
    "Lebanon",
    "Loretto",
    "Raywick",
    "Pilgrim",
    "Minerva",
    "Salvisa",
    "Hestand",
    "Elkfork",
    "Wrigley",
    "Browder",
    "Cleaton",
    "Chaplin",
    "Buckner",
    "Owenton",
    "Vincent",
    "Chavies",
    "Delphia",
    "Krypton",
    "Ashcamp",
    "Belcher",
    "Hellier",
    "Jonancy",
    "Lookout",
    "Mc Carr",
    "Phyllis",
    "Raccoon",
    "Stanton",
    "Orlando",
    "Farmers",
    "Guthrie",
    "Trenton",
    "Bedford",
    "Sturgis",
    "Waverly",
    "Alvaton",
    "Oakland",
    "Campton",
    "Barlow",
    "Austin",
    "Etoile",
    "Calvin",
    "Frakes",
    "Ingram",
    "Hebron",
    "Verona",
    "Walton",
    "Foster",
    "Custer",
    "Harned",
    "Hudson",
    "Brooks",
    "Dunbar",
    "Jetson",
    "Dexter",
    "Murray",
    "Dayton",
    "Carter",
    "Denton",
    "Gracey",
    "Oneida",
    "Albany",
    "Crayne",
    "Marion",
    "Irvine",
    "Auxier",
    "Banner",
    "Beaver",
    "Harold",
    "Hi Hat",
    "Lackey",
    "Martin",
    "Melvin",
    "Minnie",
    "Fulton",
    "Sparta",
    "Warsaw",
    "Melber",
    "Sonora",
    "Baxter",
    "Benham",
    "Cawood",
    "Cranks",
    "Evarts",
    "Harlan",
    "Kenvir",
    "Loyall",
    "Putney",
    "Canmer",
    "Hanson",
    "Mc Kee",
    "Waneta",
    "Keaton",
    "Meally",
    "Thelma",
    "Kenton",
    "Carrie",
    "Garner",
    "Leburn",
    "Mallie",
    "Mousie",
    "Redfox",
    "Bimble",
    "Cannon",
    "Dewitt",
    "Hinkle",
    "Walker",
    "London",
    "Blaine",
    "Martha",
    "Louisa",
    "Helton",
    "Smilax",
    "Wooton",
    "Ermine",
    "Gordon",
    "Hallie",
    "Roxana",
    "Quincy",
    "Tiline",
    "Auburn",
    "Revelo",
    "Strunk",
    "Island",
    "Rumsey",
    "Falcon",
    "Nerinx",
    "Benton",
    "Hardin",
    "Beauty",
    "Debord",
    "Lovely",
    "Guston",
    "Burgin",
    "Center",
    "Malone",
    "Belton",
    "Bremen",
    "Dunmor",
    "Graham",
    "Boston",
    "Dundee",
    "Olaton",
    "Rosine",
    "Goshen",
    "Butler",
    "Hazard",
    "Avawam",
    "Scuddy",
    "Yerkes",
    "Belfry",
    "Canada",
    "Dorton",
    "Kimper",
    "Phelps",
    "Ransom",
    "Regina",
    "Sidney",
    "Steele",
    "Varney",
    "Virgie",
    "Eubank",
    "Wildie",
    "Bagdad",
    "Clifty",
    "Elkton",
    "Milton",
    "Sebree",
    "Corbin",
    "Rogers",
    "Midway",
    "Lucas",
    "Hulen",
    "Arjay",
    "Union",
    "Paris",
    "Whick",
    "Hazel",
    "Ghent",
    "Grahn",
    "Alpha",
    "Maceo",
    "Utica",
    "Ewing",
    "Allen",
    "Bypro",
    "David",
    "Drift",
    "Dwale",
    "Mason",
    "Lowes",
    "Wingo",
    "Upton",
    "Lynch",
    "Berry",
    "Tyner",
    "Keene",
    "River",
    "Sitka",
    "Fisty",
    "Raven",
    "Scalf",
    "Keavy",
    "Mazie",
    "Adams",
    "Asher",
    "Essie",
    "Roark",
    "Hyden",
    "Eolia",
    "Deane",
    "Burna",
    "Salem",
    "Kevil",
    "Berea",
    "Dover",
    "Ekron",
    "Means",
    "Rowdy",
    "Bulan",
    "Combs",
    "Dwarf",
    "Happy",
    "Slemp",
    "Vicco",
    "Viper",
    "Hardy",
    "Huddy",
    "Stone",
    "Slade",
    "Nancy",
    "Waddy",
    "Cadiz",
    "Drake",
    "Dixon",
    "Poole",
    "Emlyn",
    "Siler",
    "Rush",
    "Bays",
    "Almo",
    "Hima",
    "Dana",
    "Ivel",
    "Tram",
    "Boaz",
    "Totz",
    "Reed",
    "Nebo",
    "Vest",
    "Kite",
    "Dema",
    "Gray",
    "Bush",
    "Lily",
    "Lone",
    "Isom",
    "Neon",
    "Seco",
    "Waco",
    "Inez",
    "Hope",
    "Mize",
    "Ezel",
    "Saul",
    "Busy",
    "Dice",
    "Jeff",
    "Myra",
    "Clay",
    "Zoe",
    "Ary",
  ],
  eV = [
    "Saint Francisville",
    "Greenwell Springs",
    "French Settlement",
    "Pointe A La Hache",
    "Saint Martinville",
    "Lake Providence",
    "Donaldsonville",
    "Paincourtville",
    "Fort Necessity",
    "Denham Springs",
    "Saint Benedict",
    "Napoleonville",
    "Bordelonville",
    "Plain Dealing",
    "Barksdale Afb",
    "Grand Chenier",
    "Sicily Island",
    "Saint Gabriel",
    "Golden Meadow",
    "Cloutierville",
    "Pleasant Hill",
    "Saint Bernard",
    "Des Allemands",
    "Krotz Springs",
    "Breaux Bridge",
    "Abita Springs",
    "Cotton Valley",
    "Saint Maurice",
    "Church Point",
    "Prairieville",
    "Labadieville",
    "Plattenville",
    "Center Point",
    "Plaucheville",
    "Bossier City",
    "Mooringsport",
    "Lake Charles",
    "Harrisonburg",
    "Transylvania",
    "Pine Prairie",
    "Turkey Creek",
    "Ville Platte",
    "Saint Landry",
    "Avery Island",
    "White Castle",
    "Natchitoches",
    "Belle Chasse",
    "Port Sulphur",
    "Grand Coteau",
    "Madisonville",
    "Independence",
    "Saint Joseph",
    "Mount Hermon",
    "Saint Amant",
    "Pierre Part",
    "Moreauville",
    "Haynesville",
    "Summerfield",
    "Baton Rouge",
    "Chataignier",
    "Loreauville",
    "Grosse Tete",
    "New Orleans",
    "Lake Arthur",
    "Youngsville",
    "Springfield",
    "Marthaville",
    "Sterlington",
    "West Monroe",
    "Braithwaite",
    "Cheneyville",
    "Forest Hill",
    "Hall Summit",
    "Saint James",
    "Arnaudville",
    "Morgan City",
    "Centerville",
    "Garden City",
    "Pearl River",
    "Ponchatoula",
    "Farmerville",
    "Spearsville",
    "Franklinton",
    "Estherwood",
    "Evangeline",
    "Belle Rose",
    "Cottonport",
    "Marksville",
    "Simmesport",
    "Merryville",
    "Keithville",
    "Shreveport",
    "Jonesville",
    "Enterprise",
    "Wildsville",
    "Grand Cane",
    "Logansport",
    "Longstreet",
    "Sondheimer",
    "Georgetown",
    "Montgomery",
    "Jeanerette",
    "New Iberia",
    "Maringouin",
    "Plaquemine",
    "Grand Isle",
    "Livingston",
    "Collinston",
    "Boothville",
    "Lettsworth",
    "Alexandria",
    "Saint Rose",
    "Greensburg",
    "Pine Grove",
    "Mount Airy",
    "Port Barre",
    "Washington",
    "Mandeville",
    "Tangipahoa",
    "Waterproof",
    "Downsville",
    "Springhill",
    "Erwinville",
    "Port Allen",
    "Mermentau",
    "Elizabeth",
    "Duplessis",
    "Evergreen",
    "Dry Creek",
    "Longville",
    "Sugartown",
    "Bienville",
    "Jamestown",
    "Elm Grove",
    "Princeton",
    "Blanchard",
    "Greenwood",
    "Bell City",
    "Hackberry",
    "Rhinehart",
    "Mansfield",
    "Stonewall",
    "Slaughter",
    "Crowville",
    "Winnsboro",
    "Dry Prong",
    "Jonesboro",
    "Barataria",
    "Lacassine",
    "Lafayette",
    "Broussard",
    "Thibodaux",
    "Choudrant",
    "Grambling",
    "Mer Rouge",
    "Oak Ridge",
    "Provencal",
    "Fairbanks",
    "Pilottown",
    "Batchelor",
    "New Roads",
    "Pineville",
    "Flatwoods",
    "Woodworth",
    "Coushatta",
    "Archibald",
    "Chalmette",
    "Destrehan",
    "Hahnville",
    "New Sarpy",
    "Uncle Sam",
    "Garyville",
    "Leonville",
    "Opelousas",
    "Patterson",
    "Charenton",
    "Covington",
    "Talisheek",
    "Natalbany",
    "Newellton",
    "Schriever",
    "Abbeville",
    "Delcambre",
    "Kurthwood",
    "Leesville",
    "Fort Polk",
    "New Llano",
    "Shongaloo",
    "Kilbourne",
    "Oak Grove",
    "Wakefield",
    "Winnfield",
    "Gonzales",
    "Brittany",
    "Burnside",
    "Sorrento",
    "Deridder",
    "Gibsland",
    "Ringgold",
    "Haughton",
    "Oil City",
    "Dequincy",
    "Westlake",
    "Columbia",
    "Ferriday",
    "Monterey",
    "Frierson",
    "Keatchie",
    "Carville",
    "Rosedale",
    "Sunshine",
    "Metairie",
    "Westwego",
    "Jennings",
    "Carencro",
    "Galliano",
    "Lockport",
    "Raceland",
    "Simsboro",
    "Maurepas",
    "Tallulah",
    "Goldonna",
    "Powhatan",
    "Clarence",
    "Robeline",
    "Fordoche",
    "Lakeland",
    "Morganza",
    "Ventress",
    "Lecompte",
    "Glenmora",
    "Hineston",
    "Longleaf",
    "Rayville",
    "Converse",
    "Gramercy",
    "Vacherie",
    "La Place",
    "Melville",
    "Palmetto",
    "Franklin",
    "Kentwood",
    "Loranger",
    "Roseland",
    "Montegut",
    "Rosepine",
    "Hornbeck",
    "Bogalusa",
    "Dubberly",
    "Weyanoke",
    "Crowley",
    "Leblanc",
    "Oberlin",
    "Oakdale",
    "Geismar",
    "Hamburg",
    "Hessmer",
    "Mansura",
    "Arcadia",
    "Belcher",
    "Bethany",
    "Gilliam",
    "Hosston",
    "Rodessa",
    "Sulphur",
    "Grayson",
    "Cameron",
    "Aimwell",
    "Clayton",
    "Vidalia",
    "Gloster",
    "Pelican",
    "Zachary",
    "Clinton",
    "Jackson",
    "Norwood",
    "Reddell",
    "Gilbert",
    "Bentley",
    "Pollock",
    "Chatham",
    "Quitman",
    "Lafitte",
    "Marrero",
    "Roanoke",
    "Cut Off",
    "Kraemer",
    "Mathews",
    "Bastrop",
    "Ashland",
    "Melrose",
    "Natchez",
    "Calhoun",
    "Jarreau",
    "Livonia",
    "Deville",
    "Gardner",
    "Mangham",
    "Belmont",
    "Florien",
    "Negreet",
    "Paradis",
    "Lutcher",
    "Convent",
    "Paulina",
    "Reserve",
    "Lawtell",
    "Cecilia",
    "Berwick",
    "Baldwin",
    "Lacombe",
    "Slidell",
    "Hammond",
    "Tickfaw",
    "Chauvin",
    "Theriot",
    "Bernice",
    "Gueydan",
    "Maurice",
    "Anacoco",
    "Simpson",
    "Varnado",
    "Doyline",
    "Sarepta",
    "Pioneer",
    "Atlanta",
    "Branch",
    "Kinder",
    "Mittie",
    "Reeves",
    "Darrow",
    "Bunkie",
    "Dupont",
    "Ragley",
    "Singer",
    "Castor",
    "Saline",
    "Taylor",
    "Benton",
    "Vivian",
    "Starks",
    "Vinton",
    "Clarks",
    "Creole",
    "Athens",
    "Lisbon",
    "Wilson",
    "Basile",
    "Baskin",
    "Jigger",
    "Wisner",
    "Colfax",
    "Gretna",
    "Harvey",
    "Kenner",
    "Fenton",
    "Milton",
    "Gheens",
    "Larose",
    "Tullos",
    "Urania",
    "Dubach",
    "Ruston",
    "Albany",
    "Holden",
    "Walker",
    "Watson",
    "Bonita",
    "Campti",
    "Monroe",
    "Swartz",
    "Empire",
    "Venice",
    "Lottie",
    "Rougon",
    "Libuse",
    "Sieper",
    "Fisher",
    "Zwolle",
    "Meraux",
    "Violet",
    "Boutte",
    "Luling",
    "Hester",
    "Edgard",
    "Eunice",
    "Sunset",
    "Lebeau",
    "Morrow",
    "Amelia",
    "Folsom",
    "Fluker",
    "Husser",
    "Robert",
    "Donner",
    "Gibson",
    "Lillie",
    "Marion",
    "Kaplan",
    "Pitkin",
    "Slagle",
    "Cullen",
    "Heflin",
    "Minden",
    "Sibley",
    "Brusly",
    "Forest",
    "Angola",
    "Tunica",
    "Calvin",
    "Dodson",
    "Morse",
    "Rayne",
    "Grant",
    "Effie",
    "Hayes",
    "Kelly",
    "Homer",
    "Baker",
    "Pride",
    "Ethel",
    "Mamou",
    "Chase",
    "Lydia",
    "Hodge",
    "Elton",
    "Welsh",
    "Duson",
    "Scott",
    "Trout",
    "Delta",
    "Jones",
    "Flora",
    "Gorum",
    "Buras",
    "Glynn",
    "Innis",
    "Oscar",
    "Boyce",
    "Elmer",
    "Tioga",
    "Delhi",
    "Start",
    "Noble",
    "Arabi",
    "Norco",
    "Akers",
    "Amite",
    "Bourg",
    "Dulac",
    "Houma",
    "Erath",
    "Perry",
    "Evans",
    "Angie",
    "Addis",
    "Joyce",
    "Sikes",
    "Egan",
    "Iota",
    "Iowa",
    "Acme",
    "Eros",
    "Jena",
    "Olla",
    "Mora",
    "Echo",
    "Ruby",
    "Ball",
    "Lena",
    "Otis",
    "Many",
    "Cade",
    "Bush",
    "Gray",
    "Epps",
    "Ida",
    "Ama",
    "Sun",
  ],
  nV = [
    "West Boothbay Harbor",
    "Cumberland Foreside",
    "Brownville Junction",
    "Greenville Junction",
    "Lincolnville Center",
    "Cumberland Center",
    "Grand Lake Stream",
    "East Parsonsfield",
    "Old Orchard Beach",
    "Estcourt Station",
    "Chebeague Island",
    "Farmington Falls",
    "Little Deer Isle",
    "Northeast Harbor",
    "Southwest Harbor",
    "North Vassalboro",
    "East Millinocket",
    "Stockton Springs",
    "Livermore Falls",
    "Fort Kent Mills",
    "West Farmington",
    "Cranberry Isles",
    "Prospect Harbor",
    "East Vassalboro",
    "South Thomaston",
    "Boothbay Harbor",
    "Isle Of Springs",
    "Squirrel Island",
    "North Waterford",
    "Sebasco Estates",
    "North Waterboro",
    "East Livermore",
    "Mechanic Falls",
    "Fort Fairfield",
    "Bustins Island",
    "North Bridgton",
    "South Freeport",
    "North Yarmouth",
    "South Portland",
    "Cape Elizabeth",
    "New Gloucester",
    "East Blue Hill",
    "North Monmouth",
    "South Gardiner",
    "Belgrade Lakes",
    "Tenants Harbor",
    "Dover Foxcroft",
    "Columbia Falls",
    "Biddeford Pool",
    "East Waterboro",
    "West Kennebunk",
    "Saint Francis",
    "Bailey Island",
    "South Windham",
    "East Dixfield",
    "Salsbury Cove",
    "Winter Harbor",
    "East Winthrop",
    "China Village",
    "West Rockport",
    "Coopers Mills",
    "East Boothbay",
    "South Bristol",
    "Center Lovell",
    "Shirley Mills",
    "Kittery Point",
    "North Berwick",
    "South Berwick",
    "Cape Porpoise",
    "Hollis Center",
    "Kennebunkport",
    "West Newfield",
    "Lisbon Falls",
    "North Turner",
    "Clayton Lake",
    "Island Falls",
    "New Limerick",
    "Presque Isle",
    "Saint Agatha",
    "Smyrna Mills",
    "Cliff Island",
    "East Baldwin",
    "West Baldwin",
    "Peaks Island",
    "New Vineyard",
    "Birch Harbor",
    "Mount Desert",
    "Sargentville",
    "Swans Island",
    "Mount Vernon",
    "Isle Au Haut",
    "Damariscotta",
    "East Andover",
    "Mattawamkeag",
    "Passadumkeag",
    "West Enfield",
    "East Newport",
    "New Portland",
    "Norridgewock",
    "Saint Albans",
    "Lincolnville",
    "Lambert Lake",
    "East Machias",
    "Cape Neddick",
    "Parsonsfield",
    "East Poland",
    "West Poland",
    "Wytopitlock",
    "Bridgewater",
    "Crouseville",
    "Frenchville",
    "Saint David",
    "Long Island",
    "Orrs Island",
    "Scarborough",
    "South Casco",
    "Steep Falls",
    "East Wilton",
    "East Orland",
    "Brooksville",
    "Bass Harbor",
    "Seal Harbor",
    "Farmingdale",
    "South China",
    "North Haven",
    "Spruce Head",
    "Chamberlain",
    "Bryant Pond",
    "South Paris",
    "West Bethel",
    "Millinocket",
    "Springfield",
    "Sangerville",
    "North Anson",
    "Sandy Point",
    "Cherryfield",
    "Dennysville",
    "Machiasport",
    "Baileyville",
    "York Harbor",
    "West Minot",
    "Eagle Lake",
    "Grand Isle",
    "Monticello",
    "New Sweden",
    "Wallagrass",
    "Farmington",
    "New Sharon",
    "Gouldsboro",
    "Bar Harbor",
    "Frenchboro",
    "Harborside",
    "Hulls Cove",
    "Stonington",
    "Kents Hill",
    "Litchfield",
    "Manchester",
    "Waterville",
    "Vassalboro",
    "Friendship",
    "Washington",
    "Port Clyde",
    "Vinalhaven",
    "Whitefield",
    "New Harbor",
    "Round Pond",
    "Brownfield",
    "West Paris",
    "Burlington",
    "Charleston",
    "Kenduskeag",
    "Stillwater",
    "Stacyville",
    "Brownville",
    "Greenville",
    "Bowdoinham",
    "Georgetown",
    "Phippsburg",
    "Pittsfield",
    "Smithfield",
    "West Forks",
    "Winterport",
    "Harrington",
    "Meddybemps",
    "Robbinston",
    "York Beach",
    "Ocean Park",
    "Springvale",
    "Livermore",
    "Benedicta",
    "Fort Kent",
    "Limestone",
    "Madawaska",
    "Mars Hill",
    "Stockholm",
    "Van Buren",
    "Westfield",
    "Brunswick",
    "Harpswell",
    "Westbrook",
    "North Jay",
    "Kingfield",
    "Bucksport",
    "Penobscot",
    "Ellsworth",
    "Blue Hill",
    "Deer Isle",
    "Islesford",
    "Seal Cove",
    "Hallowell",
    "Readfield",
    "Matinicus",
    "Owls Head",
    "Thomaston",
    "Jefferson",
    "Newcastle",
    "Nobleboro",
    "Waldoboro",
    "Southport",
    "Wiscasset",
    "Waterford",
    "Buckfield",
    "Greenwood",
    "Greenbush",
    "Eddington",
    "Orrington",
    "Cambridge",
    "Fairfield",
    "Skowhegan",
    "Frankfort",
    "Islesboro",
    "Searsmont",
    "Searsport",
    "Thorndike",
    "Topsfield",
    "Vanceboro",
    "Jonesboro",
    "Jonesport",
    "Milbridge",
    "Princeton",
    "Bar Mills",
    "Biddeford",
    "Kennebunk",
    "Limington",
    "Shapleigh",
    "Waterboro",
    "Danville",
    "Lewiston",
    "Sabattus",
    "Mapleton",
    "Oakfield",
    "Sheridan",
    "Sinclair",
    "Washburn",
    "Bridgton",
    "Freeport",
    "Harrison",
    "Standish",
    "Yarmouth",
    "Portland",
    "Falmouth",
    "Oquossoc",
    "Phillips",
    "Rangeley",
    "Stratton",
    "Brooklin",
    "Franklin",
    "Sullivan",
    "Sedgwick",
    "Sorrento",
    "Monmouth",
    "Gardiner",
    "Randolph",
    "Winthrop",
    "Belgrade",
    "Rockland",
    "Rockport",
    "Boothbay",
    "Edgecomb",
    "Pemaquid",
    "Monhegan",
    "Fryeburg",
    "Dixfield",
    "Stoneham",
    "Bradford",
    "Lagrange",
    "Old Town",
    "Plymouth",
    "Guilford",
    "Richmond",
    "Woolwich",
    "Rockwood",
    "Caratunk",
    "Hartland",
    "Hinckley",
    "Brookton",
    "Danforth",
    "Eastport",
    "Pembroke",
    "Ogunquit",
    "Limerick",
    "Newfield",
    "Houlton",
    "Ashland",
    "Caribou",
    "Portage",
    "Sherman",
    "Windham",
    "Raymond",
    "Castine",
    "Bernard",
    "Hancock",
    "Augusta",
    "Windsor",
    "Clinton",
    "Oakland",
    "Cushing",
    "Dresden",
    "Bristol",
    "Trevett",
    "Walpole",
    "Denmark",
    "Andover",
    "Hanover",
    "Roxbury",
    "Rumford",
    "Bradley",
    "Corinth",
    "Hampden",
    "Howland",
    "Kingman",
    "Lincoln",
    "Milford",
    "Stetson",
    "Corinna",
    "Dixmont",
    "Garland",
    "Newport",
    "Topsham",
    "Bowdoin",
    "Bingham",
    "Detroit",
    "Harmony",
    "Jackman",
    "Madison",
    "Palmyra",
    "Shawmut",
    "Palermo",
    "Belfast",
    "Burnham",
    "Freedom",
    "Liberty",
    "Morrill",
    "Addison",
    "Machias",
    "Steuben",
    "Whiting",
    "Berwick",
    "Kittery",
    "Cornish",
    "Lebanon",
    "Sanford",
    "Auburn",
    "Durham",
    "Greene",
    "Lisbon",
    "Poland",
    "Turner",
    "Orient",
    "Blaine",
    "Easton",
    "Perham",
    "Sebago",
    "Gorham",
    "Naples",
    "Pownal",
    "Dryden",
    "Wilton",
    "Eustis",
    "Strong",
    "Temple",
    "Aurora",
    "Orland",
    "Sunset",
    "Vienna",
    "Albion",
    "Camden",
    "Warren",
    "Bremen",
    "Lovell",
    "Porter",
    "Bethel",
    "Canton",
    "Hebron",
    "Mexico",
    "Norway",
    "Oxford",
    "Sumner",
    "Bangor",
    "Brewer",
    "Carmel",
    "Holden",
    "Exeter",
    "Hudson",
    "Levant",
    "Medway",
    "Patten",
    "Dexter",
    "Monson",
    "Athens",
    "Canaan",
    "Brooks",
    "Monroe",
    "Calais",
    "Cutler",
    "Wesley",
    "Alfred",
    "Buxton",
    "Minot",
    "Leeds",
    "Oxbow",
    "Casco",
    "Corea",
    "Surry",
    "Wayne",
    "Union",
    "Hiram",
    "Newry",
    "Paris",
    "Orono",
    "Abbot",
    "Sebec",
    "Anson",
    "Solon",
    "Unity",
    "Waite",
    "Beals",
    "Lubec",
    "Perry",
    "Eliot",
    "Acton",
    "Moody",
    "Wells",
    "Gray",
    "Weld",
    "Hope",
    "Alna",
    "Peru",
    "Etna",
    "Winn",
    "Milo",
    "Bath",
    "Troy",
    "York",
    "Saco",
    "Jay",
    "Lee",
  ],
  aV = [
    "Aberdeen Proving Ground",
    "Andrews Air Force Base",
    "Lutherville Timonium",
    "Southern Md Facility",
    "Fort George G Meade",
    "Suburb Maryland Fac",
    "Annapolis Junction",
    "Montgomery Village",
    "Linthicum Heights",
    "Prince Frederick",
    "Chesapeake Beach",
    "Braddock Heights",
    "Washington Grove",
    "District Heights",
    "Saint Marys City",
    "Chesapeake City",
    "East New Market",
    "West Friendship",
    "Capitol Heights",
    "Fort Washington",
    "Upper Fairmount",
    "Mardela Springs",
    "Little Orleans",
    "Tracys Landing",
    "Brooklandville",
    "Sparks Glencoe",
    "Sparrows Point",
    "Broomes Island",
    "Marriottsville",
    "Mount Victoria",
    "Taylors Island",
    "Point Of Rocks",
    "Havre De Grace",
    "Upper Marlboro",
    "Charlotte Hall",
    "Lexington Park",
    "Mechanicsville",
    "Patuxent River",
    "Marion Station",
    "Saint Michaels",
    "North Bethesda",
    "Corriganville",
    "Eckhart Mines",
    "Davidsonville",
    "Gibson Island",
    "Maryland Line",
    "Port Republic",
    "Saint Leonard",
    "Fishing Creek",
    "Burkittsville",
    "Sabillasville",
    "Jarrettsville",
    "Ellicott City",
    "Silver Spring",
    "Mount Rainier",
    "Coltons Point",
    "Saint Inigoes",
    "Princess Anne",
    "Pocomoke City",
    "Mount Savage",
    "Millersville",
    "Severna Park",
    "Cockeysville",
    "Owings Mills",
    "Randallstown",
    "Reisterstown",
    "Middle River",
    "Windsor Mill",
    "Federalsburg",
    "Union Bridge",
    "Port Deposit",
    "Port Tobacco",
    "White Plains",
    "Church Creek",
    "Walkersville",
    "Friendsville",
    "Simpsonville",
    "Kennedyville",
    "Sandy Spring",
    "Burtonsville",
    "Spencerville",
    "Gaithersburg",
    "Garrett Park",
    "College Park",
    "Temple Hills",
    "Stevensville",
    "Sudlersville",
    "Tall Timbers",
    "Clear Spring",
    "Maugansville",
    "Rohrersville",
    "Williamsport",
    "Westernport",
    "Crownsville",
    "Glen Burnie",
    "Hunt Valley",
    "Fort Howard",
    "Upper Falls",
    "White Marsh",
    "Catonsville",
    "Huntingtown",
    "North Beach",
    "Templeville",
    "Westminster",
    "New Windsor",
    "Perry Point",
    "Charlestown",
    "Bryans Road",
    "Cobb Island",
    "Hughesville",
    "Indian Head",
    "Buckeystown",
    "Libertytown",
    "Rocky Ridge",
    "Bloomington",
    "Grantsville",
    "Churchville",
    "Forest Hill",
    "Clarksville",
    "Chestertown",
    "Chevy Chase",
    "Brookeville",
    "Poolesville",
    "Barnesville",
    "Beallsville",
    "Takoma Park",
    "Bladensburg",
    "Hyattsville",
    "Centreville",
    "Church Hill",
    "Grasonville",
    "Great Mills",
    "Leonardtown",
    "Piney Point",
    "Deal Island",
    "Brownsville",
    "Keedysville",
    "Saint James",
    "Parsonsburg",
    "Powellville",
    "Bishopville",
    "Whaleyville",
    "Cumberland",
    "Flintstone",
    "Lonaconing",
    "Midlothian",
    "Spring Gap",
    "Friendship",
    "Shady Side",
    "Galesville",
    "West River",
    "Curtis Bay",
    "Kingsville",
    "Long Green",
    "Perry Hall",
    "Pikesville",
    "Halethorpe",
    "Nottingham",
    "Sunderland",
    "Greensboro",
    "Manchester",
    "Sykesville",
    "North East",
    "Perryville",
    "Rising Sun",
    "Earleville",
    "Georgetown",
    "Rock Point",
    "Rhodesdale",
    "Emmitsburg",
    "Ijamsville",
    "Ladiesburg",
    "Middletown",
    "Mount Airy",
    "Myersville",
    "New Market",
    "New Midway",
    "Unionville",
    "Kitzmiller",
    "Darlington",
    "Pylesville",
    "White Hall",
    "Cooksville",
    "Millington",
    "Still Pond",
    "Cabin John",
    "Clarksburg",
    "Germantown",
    "Kensington",
    "Brandywine",
    "Cheltenham",
    "Beltsville",
    "Glenn Dale",
    "Queen Anne",
    "Queenstown",
    "California",
    "Valley Lee",
    "Chewsville",
    "Hagerstown",
    "Sharpsburg",
    "Smithsburg",
    "Pittsville",
    "Girdletree",
    "Ocean City",
    "Ellerslie",
    "Frostburg",
    "Churchton",
    "Edgewater",
    "Gambrills",
    "Baltimore",
    "Annapolis",
    "Riderwood",
    "Stevenson",
    "Woodstock",
    "Gwynn Oak",
    "Parkville",
    "Bethlehem",
    "Goldsboro",
    "Henderson",
    "Hillsboro",
    "Finksburg",
    "Hampstead",
    "Taneytown",
    "Conowingo",
    "Elk Mills",
    "Bel Alton",
    "Bryantown",
    "Ironsides",
    "Cambridge",
    "Crocheron",
    "Secretary",
    "Toddville",
    "Frederick",
    "Adamstown",
    "Brunswick",
    "Jefferson",
    "Knoxville",
    "Tuscarora",
    "Woodsboro",
    "Bittinger",
    "Gunpowder",
    "Whiteford",
    "Betterton",
    "Rock Hall",
    "Glen Echo",
    "Dickerson",
    "Rockville",
    "Brentwood",
    "Riverdale",
    "Oxon Hill",
    "Greenbelt",
    "Ingleside",
    "Hollywood",
    "Loveville",
    "Park Hall",
    "Crisfield",
    "Claiborne",
    "Royal Oak",
    "Wye Mills",
    "Boonsboro",
    "Funkstown",
    "Salisbury",
    "Fruitland",
    "Nanticoke",
    "Sharptown",
    "Snow Hill",
    "Rawlings",
    "Pasadena",
    "Brooklyn",
    "Freeland",
    "Glen Arm",
    "Rosedale",
    "Solomons",
    "Lineboro",
    "Woodbine",
    "Cecilton",
    "Benedict",
    "Faulkner",
    "La Plata",
    "Nanjemoy",
    "Woolford",
    "Linkwood",
    "Monrovia",
    "Thurmont",
    "Accident",
    "Mc Henry",
    "Aberdeen",
    "Abingdon",
    "Edgewood",
    "Fallston",
    "Perryman",
    "Highland",
    "Columbia",
    "Elkridge",
    "Glenwood",
    "Bethesda",
    "Brinklow",
    "Damascus",
    "Accokeek",
    "Suitland",
    "Crumpton",
    "Bushwood",
    "Callaway",
    "Chaptico",
    "Clements",
    "Morganza",
    "Scotland",
    "Rehobeth",
    "Tylerton",
    "Westover",
    "Mcdaniel",
    "Sherwood",
    "Tilghman",
    "Big Pool",
    "Cavetown",
    "Fairplay",
    "Quantico",
    "Willards",
    "Stockton",
    "Midland",
    "Oldtown",
    "Lothian",
    "Harwood",
    "Hanover",
    "Harmans",
    "Odenton",
    "Crofton",
    "Baldwin",
    "Glyndon",
    "Monkton",
    "Parkton",
    "Phoenix",
    "Upperco",
    "Dundalk",
    "Barstow",
    "Dunkirk",
    "Marydel",
    "Preston",
    "Ridgely",
    "Warwick",
    "Waldorf",
    "Marbury",
    "Newburg",
    "Pomfret",
    "Welcome",
    "Hurlock",
    "Madison",
    "Wingate",
    "Oakland",
    "Swanton",
    "Bel Air",
    "Belcamp",
    "Glenelg",
    "Potomac",
    "Derwood",
    "Aquasco",
    "Clinton",
    "Barclay",
    "Chester",
    "Compton",
    "Dameron",
    "Drayden",
    "Manokin",
    "Cordova",
    "Neavitt",
    "Newcomb",
    "Wittman",
    "Cascade",
    "Hancock",
    "Bivalve",
    "Tyaskin",
    "Showell",
    "Barton",
    "Laurel",
    "Arnold",
    "Severn",
    "Boring",
    "Butler",
    "Towson",
    "Dowell",
    "Owings",
    "Denton",
    "Keymar",
    "Childs",
    "Colora",
    "Elkton",
    "Vienna",
    "Benson",
    "Street",
    "Fulton",
    "Savage",
    "Jessup",
    "Dayton",
    "Lisbon",
    "Galena",
    "Massey",
    "Worton",
    "Ashton",
    "Lanham",
    "Avenue",
    "Easton",
    "Bozman",
    "Oxford",
    "Trappe",
    "Hebron",
    "Delmar",
    "Berlin",
    "Newark",
    "Pinto",
    "Deale",
    "Chase",
    "Hydes",
    "Essex",
    "Lusby",
    "Issue",
    "Crapo",
    "Joppa",
    "Olney",
    "Boyds",
    "Bowie",
    "Price",
    "Abell",
    "Helen",
    "Ridge",
    "Ewell",
    "Allen",
    "Luke",
    "Mayo",
    "Riva",
    "Fork",
    "Eden",
    "Dhs",
  ],
  oV = [
    "Newton Lower Falls",
    "Newton Upper Falls",
    "West Chesterfield",
    "Arlington Heights",
    "Brookline Village",
    "White Horse Beach",
    "Dorchester Center",
    "West Hyannisport",
    "Great Barrington",
    "West Stockbridge",
    "West Springfield",
    "North Chelmsford",
    "Newton Highlands",
    "Marshfield Hills",
    "North Marshfield",
    "East Bridgewater",
    "West Bridgewater",
    "Roxbury Crossing",
    "North Brookfield",
    "South Wellfleet",
    "West Barnstable",
    "North Dartmouth",
    "South Dartmouth",
    "North Attleboro",
    "Attleboro Falls",
    "Prides Crossing",
    "Shelburne Falls",
    "South Deerfield",
    "East Longmeadow",
    "North Billerica",
    "Wellesley Hills",
    "Needham Heights",
    "East Brookfield",
    "South Lancaster",
    "West Brookfield",
    "South Attleboro",
    "Monument Beach",
    "North Falmouth",
    "Sagamore Beach",
    "Marstons Mills",
    "South Yarmouth",
    "North Egremont",
    "South Egremont",
    "Raynham Center",
    "Westport Point",
    "Vineyard Haven",
    "South Hamilton",
    "Indian Orchard",
    "North Hatfield",
    "Milton Village",
    "South Weymouth",
    "North Weymouth",
    "North Scituate",
    "North Pembroke",
    "East Templeton",
    "Charlton Depot",
    "North Uxbridge",
    "East Cambridge",
    "North Westport",
    "East Falmouth",
    "East Sandwich",
    "West Falmouth",
    "North Chatham",
    "North Eastham",
    "South Chatham",
    "South Harwich",
    "South Orleans",
    "West Yarmouth",
    "Yarmouth Port",
    "East Freetown",
    "North Dighton",
    "North Andover",
    "Lake Pleasant",
    "Millers Falls",
    "Monroe Bridge",
    "Turners Falls",
    "Wendell Depot",
    "Feeding Hills",
    "North Amherst",
    "West Hatfield",
    "West Townsend",
    "North Reading",
    "North Waltham",
    "Newton Center",
    "Chestnut Hill",
    "South Walpole",
    "East Weymouth",
    "Jamaica Plain",
    "Charlton City",
    "New Braintree",
    "North Grafton",
    "South Grafton",
    "West Boylston",
    "West Millbury",
    "Cherry Valley",
    "Buzzards Bay",
    "East Orleans",
    "Harwich Port",
    "Hyannis Port",
    "Provincetown",
    "South Dennis",
    "West Chatham",
    "West Harwich",
    "Ashley Falls",
    "Lanesborough",
    "Williamstown",
    "North Easton",
    "South Easton",
    "East Taunton",
    "West Tisbury",
    "West Boxford",
    "West Newbury",
    "Three Rivers",
    "Chesterfield",
    "South Hadley",
    "Williamsburg",
    "Nutting Lake",
    "West Medford",
    "East Walpole",
    "Sheldonville",
    "Green Harbor",
    "North Carver",
    "South Carver",
    "East Wareham",
    "West Wareham",
    "Mattapoisett",
    "West Roxbury",
    "Gilbertville",
    "Baldwinville",
    "Northborough",
    "North Oxford",
    "Whitinsville",
    "Southborough",
    "South Boston",
    "West Methuen",
    "Centerville",
    "Dennis Port",
    "East Dennis",
    "North Truro",
    "West Dennis",
    "North Adams",
    "Sandisfield",
    "Stockbridge",
    "New Bedford",
    "Newburyport",
    "Bernardston",
    "Springfield",
    "Belchertown",
    "Easthampton",
    "Haydenville",
    "Northampton",
    "Southampton",
    "Worthington",
    "Middlefield",
    "West Groton",
    "Hanscom Afb",
    "Marlborough",
    "Newtonville",
    "West Newton",
    "Babson Park",
    "Ocean Bluff",
    "Bridgewater",
    "Bryantville",
    "Charlestown",
    "South Barre",
    "West Warren",
    "Wheelwright",
    "Westminster",
    "Hubbardston",
    "Still River",
    "Northbridge",
    "Southbridge",
    "Westborough",
    "East Boston",
    "Woods Hole",
    "Barnstable",
    "Forestdale",
    "Osterville",
    "Pittsfield",
    "Housatonic",
    "Lenox Dale",
    "Mill River",
    "Southfield",
    "Fall River",
    "Oak Bluffs",
    "Georgetown",
    "Swampscott",
    "Gloucester",
    "Manchester",
    "Marblehead",
    "Shutesbury",
    "Greenfield",
    "Charlemont",
    "Northfield",
    "Sunderland",
    "Bondsville",
    "Longmeadow",
    "Cummington",
    "Huntington",
    "Plainfield",
    "Framingham",
    "Boxborough",
    "Burlington",
    "Chelmsford",
    "Wilmington",
    "Winchester",
    "Somerville",
    "Auburndale",
    "Siasconset",
    "Bellingham",
    "Plainville",
    "Brant Rock",
    "Marshfield",
    "Middleboro",
    "Monponsett",
    "Dorchester",
    "Roslindale",
    "Ashburnham",
    "Leominster",
    "Winchendon",
    "Blackstone",
    "Brookfield",
    "Shrewsbury",
    "Sturbridge",
    "Cummaquid",
    "Wellfleet",
    "East Otis",
    "Berkshire",
    "Sheffield",
    "South Lee",
    "Tyringham",
    "Mansfield",
    "Attleboro",
    "Dartmouth",
    "Fairhaven",
    "Edgartown",
    "Cuttyhunk",
    "Haverhill",
    "Groveland",
    "Lynnfield",
    "Middleton",
    "Salisbury",
    "Topsfield",
    "Deerfield",
    "New Salem",
    "Blandford",
    "Brimfield",
    "Granville",
    "Southwick",
    "Thorndike",
    "Westfield",
    "Wilbraham",
    "Littleton",
    "Pepperell",
    "Holliston",
    "Hopkinton",
    "Woodville",
    "Billerica",
    "Dunstable",
    "Pinehurst",
    "Tewksbury",
    "Tyngsboro",
    "Wakefield",
    "Cambridge",
    "Lexington",
    "Watertown",
    "Arlington",
    "Nantucket",
    "Stoughton",
    "Braintree",
    "Brookline",
    "Wellesley",
    "Greenbush",
    "Lakeville",
    "Rochester",
    "Hyde Park",
    "Readville",
    "Petersham",
    "Royalston",
    "Fitchburg",
    "Lunenburg",
    "Templeton",
    "Jefferson",
    "Lancaster",
    "Leicester",
    "Millville",
    "Princeton",
    "Worcester",
    "Cataumet",
    "Falmouth",
    "Pocasset",
    "Sagamore",
    "Sandwich",
    "Brewster",
    "Cheshire",
    "Glendale",
    "Hinsdale",
    "Monterey",
    "Richmond",
    "Chartley",
    "Somerset",
    "Acushnet",
    "Rehoboth",
    "Westport",
    "Chilmark",
    "Menemsha",
    "Lawrence",
    "Merrimac",
    "Amesbury",
    "Hamilton",
    "Hathorne",
    "Rockport",
    "Leverett",
    "Ashfield",
    "Buckland",
    "Montague",
    "Chicopee",
    "Woronoco",
    "Hatfield",
    "Florence",
    "Townsend",
    "Carlisle",
    "Sherborn",
    "Westford",
    "Stoneham",
    "New Town",
    "Waverley",
    "Nonantum",
    "Cohasset",
    "Franklin",
    "Medfield",
    "Westwood",
    "Wrentham",
    "Weymouth",
    "Holbrook",
    "Randolph",
    "Humarock",
    "Scituate",
    "Brockton",
    "Abington",
    "Pembroke",
    "Plymouth",
    "Kingston",
    "Plympton",
    "Rockland",
    "Mattapan",
    "Brighton",
    "Winthrop",
    "Hardwick",
    "Boylston",
    "Charlton",
    "Fiskdale",
    "Manchaug",
    "Millbury",
    "Rochdale",
    "Sterling",
    "Uxbridge",
    "Fayville",
    "Hopedale",
    "Hyannis",
    "Chatham",
    "Eastham",
    "Harwich",
    "Mashpee",
    "Orleans",
    "Windsor",
    "Assonet",
    "Dighton",
    "Raynham",
    "Seekonk",
    "Swansea",
    "Berkley",
    "Taunton",
    "Andover",
    "Methuen",
    "Beverly",
    "Boxford",
    "Byfield",
    "Danvers",
    "Ipswich",
    "Newbury",
    "Peabody",
    "Whately",
    "Colrain",
    "Warwick",
    "Wendell",
    "Chester",
    "Hampden",
    "Holyoke",
    "Russell",
    "Holland",
    "Amherst",
    "Shirley",
    "Ashland",
    "Bedford",
    "Concord",
    "Maynard",
    "Lincoln",
    "Sudbury",
    "Wayland",
    "Reading",
    "Everett",
    "Medford",
    "Melrose",
    "Waltham",
    "Belmont",
    "Foxboro",
    "Norfolk",
    "Norwood",
    "Walpole",
    "Needham",
    "Hingham",
    "Norwell",
    "Duxbury",
    "Elmwood",
    "Halifax",
    "Hanover",
    "Manomet",
    "Whitman",
    "Wareham",
    "Roxbury",
    "Allston",
    "Chelsea",
    "Gardner",
    "Harvard",
    "Clinton",
    "Douglas",
    "Grafton",
    "Linwood",
    "Rutland",
    "Spencer",
    "Webster",
    "Milford",
    "Cotuit",
    "Dennis",
    "Becket",
    "Dalton",
    "Easton",
    "Norton",
    "Saugus",
    "Nahant",
    "Rowley",
    "Wenham",
    "Conway",
    "Erving",
    "Orange",
    "Agawam",
    "Ludlow",
    "Monson",
    "Palmer",
    "Goshen",
    "Granby",
    "Hadley",
    "Groton",
    "Hudson",
    "Natick",
    "Woburn",
    "Dracut",
    "Lowell",
    "Malden",
    "Boston",
    "Newton",
    "Weston",
    "Canton",
    "Dedham",
    "Medway",
    "Millis",
    "Sharon",
    "Quincy",
    "Milton",
    "Accord",
    "Carver",
    "Hanson",
    "Marion",
    "Revere",
    "Oakham",
    "Warren",
    "Devens",
    "Auburn",
    "Berlin",
    "Holden",
    "Oxford",
    "Dudley",
    "Sutton",
    "Paxton",
    "Bolton",
    "Mendon",
    "Truro",
    "Adams",
    "Lenox",
    "Savoy",
    "Drury",
    "Essex",
    "Salem",
    "Heath",
    "Wales",
    "Leeds",
    "Ashby",
    "Acton",
    "Waban",
    "Dover",
    "Minot",
    "Onset",
    "Barre",
    "Athol",
    "Upton",
    "Otis",
    "Lynn",
    "Gill",
    "Rowe",
    "Ware",
    "Ayer",
    "Stow",
    "Avon",
    "Hull",
    "Lee",
  ],
  rV = [
    "Houghton Lake Heights",
    "Sault Sainte Marie",
    "Saint Clair Shores",
    "University Center",
    "Harrison Township",
    "Commerce Township",
    "Clinton Township",
    "Sterling Heights",
    "Huntington Woods",
    "Bloomfield Hills",
    "Dearborn Heights",
    "Hickory Corners",
    "Berrien Springs",
    "De Tour Village",
    "Drummond Island",
    "Somerset Center",
    "Michigan Center",
    "Mackinac Island",
    "Pointe Aux Pins",
    "Madison Heights",
    "West Bloomfield",
    "Berrien Center",
    "Harbor Springs",
    "Mount Pleasant",
    "Rives Junction",
    "South Boardman",
    "South Rockwood",
    "Pleasant Ridge",
    "Drayton Plains",
    "Bruce Crossing",
    "Harsens Island",
    "Grand Junction",
    "Eben Junction",
    "Thompsonville",
    "Benton Harbor",
    "Beaver Island",
    "Mackinaw City",
    "Iron Mountain",
    "Cross Village",
    "Traverse City",
    "Atlantic Mine",
    "National City",
    "Crystal Falls",
    "Pleasant Lake",
    "Cedar Springs",
    "Comstock Park",
    "Copper Harbor",
    "Columbiaville",
    "Lake Leelanau",
    "Manitou Beach",
    "Mount Clemens",
    "New Baltimore",
    "National Mine",
    "Chippewa Lake",
    "Houghton Lake",
    "Saint Charles",
    "Whitmore Lake",
    "Highland Park",
    "Grosse Pointe",
    "Grand Marais",
    "Hubbard Lake",
    "Central Lake",
    "Hagar Shores",
    "Saint Joseph",
    "Stevensville",
    "Battle Creek",
    "Walloon Lake",
    "Indian River",
    "Mullett Lake",
    "Maple Rapids",
    "Eaton Rapids",
    "Vermontville",
    "Mount Morris",
    "Swartz Creek",
    "Williamsburg",
    "Breckenridge",
    "Harbor Beach",
    "East Lansing",
    "Spring Arbor",
    "Byron Center",
    "Grand Rapids",
    "North Branch",
    "Saint Ignace",
    "Hermansville",
    "Lambertville",
    "Sylvan Beach",
    "Keego Harbor",
    "Auburn Hills",
    "South Branch",
    "Johannesburg",
    "Coopersville",
    "Presque Isle",
    "Higgins Lake",
    "North Street",
    "Fort Gratiot",
    "Smiths Creek",
    "Three Rivers",
    "White Pigeon",
    "Port Sanilac",
    "Bloomingdale",
    "Lincoln Park",
    "Harper Woods",
    "Barton City",
    "Black River",
    "Harrisville",
    "Shelbyville",
    "Middleville",
    "New Buffalo",
    "Edwardsburg",
    "Boyne Falls",
    "East Jordan",
    "Lake George",
    "Saint Johns",
    "Rapid River",
    "Foster City",
    "Grand Ledge",
    "Potterville",
    "Grand Blanc",
    "Interlochen",
    "Old Mission",
    "Saint Louis",
    "Mosherville",
    "North Adams",
    "Copper City",
    "Lake Linden",
    "South Range",
    "Port Austin",
    "Webberville",
    "Williamston",
    "Stockbridge",
    "Clarksville",
    "Hubbardston",
    "Lake Odessa",
    "Schoolcraft",
    "Cannonsburg",
    "Suttons Bay",
    "Cement City",
    "Fowlerville",
    "Center Line",
    "Little Lake",
    "Perronville",
    "Ottawa Lake",
    "Carson City",
    "Howard City",
    "White Cloud",
    "Walled Lake",
    "Walkerville",
    "West Branch",
    "Trout Creek",
    "Grand Haven",
    "Hudsonville",
    "Spring Lake",
    "Millersburg",
    "Rogers City",
    "Prudenville",
    "Saint Helen",
    "Frankenmuth",
    "Anchorville",
    "Marine City",
    "Saint Clair",
    "Centreville",
    "Constantine",
    "Carsonville",
    "Deckerville",
    "Forestville",
    "Minden City",
    "New Lothrop",
    "Breedsville",
    "South Haven",
    "Bridgewater",
    "Garden City",
    "River Rouge",
    "Sylvan Lake",
    "Shingleton",
    "Elk Rapids",
    "Cloverdale",
    "Pinconning",
    "Essexville",
    "Watervliet",
    "Eau Claire",
    "Three Oaks",
    "Union Pier",
    "Union City",
    "Montgomery",
    "Burlington",
    "East Leroy",
    "Cassopolis",
    "Boyne City",
    "Charlevoix",
    "Goetzville",
    "Trout Lake",
    "Westphalia",
    "Bark River",
    "Watersmeet",
    "North Star",
    "Jonesville",
    "Litchfield",
    "Dodgeville",
    "Dollar Bay",
    "Painesdale",
    "East Tawas",
    "Tawas City",
    "Whittemore",
    "Iron River",
    "Grass Lake",
    "Springport",
    "Rapid City",
    "Grandville",
    "Imlay City",
    "Otter Lake",
    "Silverwood",
    "Glen Arbor",
    "Maple City",
    "Blissfield",
    "Sand Creek",
    "Cedarville",
    "Gould City",
    "Eastpointe",
    "Washington",
    "Filer City",
    "Michigamme",
    "Scottville",
    "Big Rapids",
    "Stephenson",
    "Temperance",
    "Petersburg",
    "Cedar Lake",
    "Greenville",
    "Birmingham",
    "Hazel Park",
    "Southfield",
    "New Hudson",
    "South Lyon",
    "Farmington",
    "Lake Orion",
    "White Lake",
    "Union Lake",
    "Ortonville",
    "White Pine",
    "Vanderbilt",
    "Ferrysburg",
    "West Olive",
    "Bridgeport",
    "Carrollton",
    "Fair Haven",
    "Marysville",
    "East China",
    "Port Huron",
    "Brown City",
    "Manistique",
    "Laingsburg",
    "Shaftsburg",
    "Millington",
    "Unionville",
    "Manchester",
    "Allen Park",
    "Belleville",
    "Melvindale",
    "Grosse Ile",
    "New Boston",
    "Northville",
    "Greenbush",
    "Plainwell",
    "Fennville",
    "Saugatuck",
    "Mancelona",
    "Ellsworth",
    "Covington",
    "Nashville",
    "Kawkawlin",
    "Frankfort",
    "Riverside",
    "Coldwater",
    "Marcellus",
    "Bay Shore",
    "Burt Lake",
    "Cheboygan",
    "Topinabee",
    "Wolverine",
    "Kincheloe",
    "Gladstone",
    "Kingsford",
    "Quinnesec",
    "Charlotte",
    "Dimondale",
    "Carp Lake",
    "Good Hart",
    "Otisville",
    "Beaverton",
    "Marenisco",
    "Wakefield",
    "Fife Lake",
    "Bannister",
    "Middleton",
    "Perrinton",
    "Riverdale",
    "Hillsdale",
    "Pittsford",
    "Kearsarge",
    "Port Hope",
    "Caseville",
    "Sebewaing",
    "Dansville",
    "Long Lake",
    "Stambaugh",
    "Blanchard",
    "Clarklake",
    "Kalamazoo",
    "Galesburg",
    "Vicksburg",
    "Caledonia",
    "Kent City",
    "Sand Lake",
    "Northport",
    "Deerfield",
    "Mc Millan",
    "Naubinway",
    "New Haven",
    "Roseville",
    "Bear Lake",
    "Ishpeming",
    "Marquette",
    "Free Soil",
    "Ludington",
    "Menominee",
    "Edenville",
    "Lake City",
    "Luna Pier",
    "Six Lakes",
    "Vestaburg",
    "Fruitport",
    "Twin Lake",
    "Whitehall",
    "Royal Oak",
    "Rochester",
    "Waterford",
    "Clarkston",
    "Davisburg",
    "Lakeville",
    "Pentwater",
    "Rose City",
    "Greenland",
    "Mass City",
    "Ontonagon",
    "Reed City",
    "Allendale",
    "Jamestown",
    "Roscommon",
    "Birch Run",
    "Chesaning",
    "Applegate",
    "Lexington",
    "Henderson",
    "Cass City",
    "Fairgrove",
    "Richville",
    "Ann Arbor",
    "Whittaker",
    "Ypsilanti",
    "Flat Rock",
    "Wyandotte",
    "Riverview",
    "Southgate",
    "Hamtramck",
    "Harrietta",
    "Au Train",
    "Munising",
    "Hamilton",
    "Ossineke",
    "Bellaire",
    "Eastport",
    "Standish",
    "Sterling",
    "Woodland",
    "Hastings",
    "Freeport",
    "Bay City",
    "Benzonia",
    "Lake Ann",
    "Bridgman",
    "Buchanan",
    "Lakeside",
    "New Troy",
    "Sherwood",
    "Marshall",
    "Tekonsha",
    "Dowagiac",
    "Vandalia",
    "Eckerman",
    "Paradise",
    "Pickford",
    "Harrison",
    "Frederic",
    "Grayling",
    "Escanaba",
    "Channing",
    "Mulliken",
    "Sunfield",
    "Bellevue",
    "Levering",
    "Pellston",
    "Petoskey",
    "Flushing",
    "Goodrich",
    "Montrose",
    "Bessemer",
    "Ironwood",
    "Kingsley",
    "Mayfield",
    "Elm Hall",
    "Frontier",
    "Somerset",
    "Chassell",
    "Houghton",
    "Bay Port",
    "Owendale",
    "Onondaga",
    "Portland",
    "Rosebush",
    "Shepherd",
    "Brooklyn",
    "Napoleon",
    "Comstock",
    "Nazareth",
    "Richland",
    "Kalkaska",
    "Rockford",
    "Idlewild",
    "Metamora",
    "Clifford",
    "Tecumseh",
    "Brighton",
    "Lakeland",
    "Pinckney",
    "Hartland",
    "Cohoctah",
    "Newberry",
    "Engadine",
    "Richmond",
    "Brethren",
    "Copemish",
    "Eastlake",
    "Manistee",
    "Wellston",
    "Champion",
    "Negaunee",
    "Republic",
    "Fountain",
    "Walhalla",
    "Barryton",
    "Stanwood",
    "Spalding",
    "Falmouth",
    "Carleton",
    "La Salle",
    "Lakeview",
    "Mcbrides",
    "Sheridan",
    "Lewiston",
    "Casnovia",
    "Montague",
    "Muskegon",
    "Franklin",
    "Ferndale",
    "Oak Park",
    "Highland",
    "Hesperia",
    "Rothbury",
    "Prescott",
    "Bergland",
    "Rockland",
    "Fairview",
    "Macatawa",
    "Freeland",
    "Allenton",
    "Goodells",
    "Columbus",
    "Burr Oak",
    "Leonidas",
    "Croswell",
    "Marlette",
    "Sandusky",
    "Germfask",
    "Gulliver",
    "Bancroft",
    "Fostoria",
    "Gagetown",
    "Kingston",
    "Mayville",
    "Hartford",
    "Lawrence",
    "Mattawan",
    "Dearborn",
    "Plymouth",
    "Rockwood",
    "Westland",
    "Cadillac",
    "Glennie",
    "Lincoln",
    "Chatham",
    "Deerton",
    "Trenary",
    "Wetmore",
    "Allegan",
    "Bradley",
    "Burnips",
    "Hopkins",
    "Wayland",
    "Douglas",
    "Pullman",
    "Lachine",
    "Kewadin",
    "Au Gres",
    "Twining",
    "Dowling",
    "Bentley",
    "Linwood",
    "Elberta",
    "Harbert",
    "Bronson",
    "Bedford",
    "Ceresco",
    "Barbeau",
    "Brimley",
    "Hulbert",
    "Kinross",
    "Rudyard",
    "Farwell",
    "Cornell",
    "Perkins",
    "Loretto",
    "Lansing",
    "Alanson",
    "Davison",
    "Genesee",
    "Gladwin",
    "Saginaw",
    "Wheeler",
    "Pompeii",
    "Reading",
    "Waldron",
    "Calumet",
    "Hancock",
    "Hubbell",
    "Toivola",
    "Bad Axe",
    "Haslett",
    "Belding",
    "Orleans",
    "Saranac",
    "Caspian",
    "Gaastra",
    "Weidman",
    "Jackson",
    "Concord",
    "Hanover",
    "Norvell",
    "Portage",
    "Augusta",
    "Oshtemo",
    "Belmont",
    "Wyoming",
    "Allouez",
    "Baldwin",
    "Addison",
    "Britton",
    "Clayton",
    "Clinton",
    "Morenci",
    "Palmyra",
    "Gregory",
    "Hamburg",
    "Arcadia",
    "Onekama",
    "Big Bay",
    "Skandia",
    "Mecosta",
    "Daggett",
    "Ingalls",
    "Wallace",
    "Coleman",
    "Midland",
    "Sanford",
    "Mc Bain",
    "Merritt",
    "Newport",
    "Samaria",
    "Crystal",
    "Fenwick",
    "Stanton",
    "Pierson",
    "Trufant",
    "Atlanta",
    "Hillman",
    "Ravenna",
    "Brohman",
    "Newaygo",
    "Fremont",
    "Clawson",
    "Berkley",
    "Pontiac",
    "Oakland",
    "Leonard",
    "Milford",
    "New Era",
    "Luzerne",
    "Gaylord",
    "Conklin",
    "Holland",
    "Jenison",
    "Zeeland",
    "Hemlock",
    "Merrill",
    "Algonac",
    "Memphis",
    "Nottawa",
    "Sturgis",
    "Corunna",
    "Morrice",
    "Decatur",
    "Kendall",
    "Paw Paw",
    "Chelsea",
    "Inkster",
    "Livonia",
    "Romulus",
    "Trenton",
    "Detroit",
    "Redford",
    "Buckley",
    "Curran",
    "Mikado",
    "Spruce",
    "Rumely",
    "Martin",
    "Otsego",
    "Moline",
    "Alpena",
    "Herron",
    "Turner",
    "Baraga",
    "Skanee",
    "Watton",
    "Delton",
    "Auburn",
    "Munger",
    "Beulah",
    "Coloma",
    "Baroda",
    "Galien",
    "Sawyer",
    "Quincy",
    "Athens",
    "Albion",
    "Brutus",
    "Dafter",
    "Dewitt",
    "Eureka",
    "Fowler",
    "Garden",
    "Norway",
    "Sagola",
    "Vulcan",
    "Olivet",
    "Conway",
    "Fenton",
    "Gaines",
    "Lennon",
    "Linden",
    "Burton",
    "Rhodes",
    "Ramsay",
    "Ashley",
    "Elwell",
    "Ithaca",
    "Sumner",
    "Camden",
    "Jerome",
    "Moscow",
    "Nisula",
    "Pelkie",
    "Sidnaw",
    "Filion",
    "Elkton",
    "Pigeon",
    "Okemos",
    "Leslie",
    "Pewamo",
    "Smyrna",
    "Oscoda",
    "Horton",
    "Munith",
    "Climax",
    "Fulton",
    "Scotts",
    "Lowell",
    "Sparta",
    "Ahmeek",
    "Mohawk",
    "Branch",
    "Luther",
    "Almont",
    "Attica",
    "Dryden",
    "Hadley",
    "Lapeer",
    "Empire",
    "Leland",
    "Adrian",
    "Hudson",
    "Jasper",
    "Onsted",
    "Tipton",
    "Weston",
    "Howell",
    "Hessel",
    "Curtis",
    "Armada",
    "Fraser",
    "Macomb",
    "Warren",
    "Kaleva",
    "Arnold",
    "Palmer",
    "Custer",
    "Morley",
    "Rodney",
    "Carney",
    "Harris",
    "Nadeau",
    "Powers",
    "Wilson",
    "Azalia",
    "Dundee",
    "Maybee",
    "Monroe",
    "Edmore",
    "Sidney",
    "Bailey",
    "Holton",
    "Bitely",
    "Oxford",
    "Shelby",
    "Lupton",
    "Hersey",
    "Marion",
    "Tustin",
    "Comins",
    "Elmira",
    "Waters",
    "Lamont",
    "Nunica",
    "Onaway",
    "Oakley",
    "Emmett",
    "Mendon",
    "Argyle",
    "Decker",
    "Melvin",
    "Snover",
    "Durand",
    "Vernon",
    "Owosso",
    "Deford",
    "Vassar",
    "Bangor",
    "Covert",
    "Gobles",
    "Lacota",
    "Lawton",
    "Dexter",
    "Saline",
    "Willis",
    "Taylor",
    "Canton",
    "Ecorse",
    "Manton",
    "Mesick",
    "Glenn",
    "Alden",
    "Lanse",
    "Honor",
    "Niles",
    "Sodus",
    "Homer",
    "Jones",
    "Union",
    "Afton",
    "Tower",
    "Clare",
    "Eagle",
    "Elsie",
    "Nahma",
    "Wells",
    "Felch",
    "Ralph",
    "Atlas",
    "Flint",
    "Grawn",
    "Allen",
    "Osseo",
    "Kinde",
    "Mason",
    "Ionia",
    "Lyons",
    "Alpha",
    "Amasa",
    "Parma",
    "Chase",
    "Irons",
    "Cedar",
    "Omena",
    "Moran",
    "Romeo",
    "Utica",
    "Gwinn",
    "Paris",
    "Remus",
    "Milan",
    "Coral",
    "Gowen",
    "Grant",
    "Wixom",
    "Holly",
    "Mears",
    "Alger",
    "Evart",
    "Leroy",
    "Sears",
    "Marne",
    "Hawks",
    "Posen",
    "Brant",
    "Avoca",
    "Capac",
    "Jeddo",
    "Casco",
    "Colon",
    "Palms",
    "Cooks",
    "Seney",
    "Byron",
    "Perry",
    "Akron",
    "Reese",
    "Salem",
    "Wayne",
    "Dorr",
    "Alba",
    "Omer",
    "Lake",
    "Bath",
    "Ovid",
    "Rock",
    "Oden",
    "Clio",
    "Acme",
    "Alma",
    "Ruth",
    "Ubly",
    "Holt",
    "Muir",
    "Palo",
    "Hale",
    "Winn",
    "Alto",
    "Riga",
    "Hope",
    "Erie",
    "Troy",
    "Novi",
    "Hart",
    "Ewen",
    "Burt",
    "Yale",
    "Peck",
    "Caro",
    "Boon",
    "Ada",
    "Ray",
    "Ida",
    "Mio",
  ],
  tV = [
    "South International Falls",
    "Norwood Young America",
    "Marine On Saint Croix",
    "Inver Grove Heights",
    "International Falls",
    "Thief River Falls",
    "South Saint Paul",
    "Minnetonka Beach",
    "Saint Bonifacius",
    "East Grand Forks",
    "Blooming Prairie",
    "North Saint Paul",
    "Spring Lake Park",
    "Parkers Prairie",
    "Elko New Market",
    "Saint Paul Park",
    "Minnesota Lake",
    "Lester Prairie",
    "New York Mills",
    "Pelican Rapids",
    "Red Lake Falls",
    "Minnesota City",
    "Saint Francis",
    "Detroit Lakes",
    "Vernon Center",
    "Young America",
    "Ah Gwah Ching",
    "Taylors Falls",
    "Grand Portage",
    "Mountain Lake",
    "Spring Valley",
    "Saint Vincent",
    "Saint Hilaire",
    "Sturgeon Lake",
    "Redwood Falls",
    "Mountain Iron",
    "Saint Stephen",
    "Browns Valley",
    "Reads Landing",
    "Cottage Grove",
    "Saint Charles",
    "Saint Michael",
    "Granite Falls",
    "Little Canada",
    "Circle Pines",
    "Good Thunder",
    "Lake Crystal",
    "Madison Lake",
    "Kettle River",
    "Chisago City",
    "North Branch",
    "Grand Marais",
    "Bingham Lake",
    "Pequot Lakes",
    "Dodge Center",
    "West Concord",
    "Clarks Grove",
    "Cannon Falls",
    "Eden Prairie",
    "Spring Grove",
    "Grand Rapids",
    "Lake Lillian",
    "Lake Bronson",
    "Middle River",
    "Little Falls",
    "Grand Meadow",
    "Stewartville",
    "Fergus Falls",
    "Willow River",
    "Walnut Grove",
    "Buffalo Lake",
    "Sacred Heart",
    "Beaver Creek",
    "Belle Plaine",
    "Collegeville",
    "Saint Joseph",
    "Saint Martin",
    "Long Prairie",
    "Zumbro Falls",
    "New Richland",
    "Breckenridge",
    "Rollingstone",
    "Silver Creek",
    "Hanley Falls",
    "Minneapolis",
    "White Earth",
    "Sauk Rapids",
    "Garden City",
    "Saint Clair",
    "Springfield",
    "New Germany",
    "Federal Dam",
    "Center City",
    "Barnesville",
    "Fifty Lakes",
    "Fort Ripley",
    "Lake Hubert",
    "Castle Rock",
    "Mantorville",
    "Holmes City",
    "Pine Island",
    "Maple Grove",
    "Crystal Bay",
    "Maple Plain",
    "Spring Park",
    "Howard Lake",
    "Brownsville",
    "La Crescent",
    "Lake George",
    "Park Rapids",
    "Stanchfield",
    "Spring Lake",
    "Knife River",
    "Two Harbors",
    "Angle Inlet",
    "Lake Benton",
    "Silver Lake",
    "Naytahwaush",
    "Strandquist",
    "Eden Valley",
    "Lake Wilson",
    "Saint Peter",
    "Worthington",
    "Twin Valley",
    "Battle Lake",
    "Bird Island",
    "Meadowlands",
    "Saint Cloud",
    "Cold Spring",
    "Holdingford",
    "Paynesville",
    "Sauk Centre",
    "Browerville",
    "Forest Lake",
    "Saint James",
    "Butterfield",
    "Albertville",
    "South Haven",
    "Arden Hills",
    "Pennington",
    "Graceville",
    "Ortonville",
    "Eagle Lake",
    "Sleepy Eye",
    "Moose Lake",
    "Chanhassen",
    "Hackensack",
    "Pine River",
    "Clara City",
    "Montevideo",
    "Georgetown",
    "Clearbrook",
    "Merrifield",
    "Farmington",
    "Vermillion",
    "Saint Paul",
    "Burnsville",
    "Alexandria",
    "Evansville",
    "Kensington",
    "Blue Earth",
    "Albert Lea",
    "Hollandale",
    "Twin Lakes",
    "Elbow Lake",
    "Minnetonka",
    "Swan River",
    "Deer River",
    "Squaw Lake",
    "Heron Lake",
    "New London",
    "Littlefork",
    "Kabetogama",
    "Bellingham",
    "Beaver Bay",
    "Silver Bay",
    "Oak Island",
    "Montgomery",
    "New Prague",
    "Waterville",
    "Cottonwood",
    "Hutchinson",
    "Litchfield",
    "Grove City",
    "Waite Park",
    "Brownsdale",
    "Rose Creek",
    "Round Lake",
    "Clitherall",
    "Deer Creek",
    "Brook Park",
    "Rock Creek",
    "Nielsville",
    "Morristown",
    "Northfield",
    "Strathcona",
    "Crane Lake",
    "Hoyt Lakes",
    "Prior Lake",
    "Clear Lake",
    "Green Isle",
    "New Auburn",
    "New Munich",
    "Grey Eagle",
    "West Union",
    "Eagle Bend",
    "Janesville",
    "Stillwater",
    "Lewisville",
    "Clearwater",
    "Maple Lake",
    "Monticello",
    "Clarkfield",
    "Hill City",
    "Lake Park",
    "Wolf Lake",
    "Blackduck",
    "Tenstrike",
    "Beardsley",
    "Pemberton",
    "Wrenshall",
    "Watertown",
    "Cass Lake",
    "Longville",
    "Lindstrom",
    "Rush City",
    "Hitterdal",
    "Schroeder",
    "Westbrook",
    "Crosslake",
    "Lakeville",
    "Rosemount",
    "Claremont",
    "Winnebago",
    "Chatfield",
    "Lanesboro",
    "Ostrander",
    "Glenville",
    "Frontenac",
    "Wanamingo",
    "Excelsior",
    "Long Lake",
    "Caledonia",
    "Cambridge",
    "Coleraine",
    "Bowstring",
    "Lakefield",
    "Kandiyohi",
    "Prinsburg",
    "Donaldson",
    "Lancaster",
    "Big Falls",
    "Birchdale",
    "Cleveland",
    "Le Center",
    "Hendricks",
    "Newfolden",
    "Princeton",
    "Flensburg",
    "Swanville",
    "Courtland",
    "Lafayette",
    "Ellsworth",
    "Rochester",
    "Elizabeth",
    "Ottertail",
    "Richville",
    "Underwood",
    "Goodridge",
    "Henriette",
    "Pine City",
    "Sandstone",
    "Finlayson",
    "Pipestone",
    "Woodstock",
    "Crookston",
    "Lamberton",
    "Faribault",
    "Nerstrand",
    "Kanaranzi",
    "Roosevelt",
    "Greenbush",
    "Brookston",
    "Embarrass",
    "Floodwood",
    "Nett Lake",
    "Side Lake",
    "Elk River",
    "Zimmerman",
    "Arlington",
    "Henderson",
    "Greenwald",
    "Rockville",
    "Ellendale",
    "Kerkhoven",
    "Lake City",
    "Millville",
    "Plainview",
    "Lake Elmo",
    "Willernie",
    "Wolverton",
    "Annandale",
    "Wood Lake",
    "Jacobson",
    "Mcgregor",
    "Tamarack",
    "Mc Grath",
    "Palisade",
    "Callaway",
    "Ponsford",
    "Richwood",
    "Kelliher",
    "Oak Park",
    "Mapleton",
    "Cromwell",
    "Victoria",
    "Pillager",
    "Almelund",
    "Comstock",
    "Dilworth",
    "Moorhead",
    "Brainerd",
    "Deerwood",
    "Garrison",
    "Hastings",
    "Randolph",
    "Hayfield",
    "Garfield",
    "Bricelyn",
    "Fountain",
    "Peterson",
    "Rushford",
    "Freeborn",
    "Hartland",
    "Dennison",
    "Red Wing",
    "Zumbrota",
    "Norcross",
    "Champlin",
    "Rockford",
    "Benedict",
    "Cohasset",
    "Goodland",
    "Keewatin",
    "Nashwauk",
    "Pengilly",
    "Taconite",
    "Blomkest",
    "Humboldt",
    "Karlstad",
    "Northome",
    "Marietta",
    "Isabella",
    "Baudette",
    "Williams",
    "Kilkenny",
    "Le Sueur",
    "Marshall",
    "Minneota",
    "Brownton",
    "Mahnomen",
    "Alvarado",
    "Fairmont",
    "Northrop",
    "Sherburn",
    "Foreston",
    "Royalton",
    "Sargeant",
    "Chandler",
    "Nicollet",
    "Brewster",
    "Rushmore",
    "Bluffton",
    "Grasston",
    "Hinckley",
    "Edgerton",
    "Beltrami",
    "Mcintosh",
    "Glenwood",
    "Starbuck",
    "Clements",
    "Seaforth",
    "Franklin",
    "Renville",
    "Lonsdale",
    "Hardwick",
    "Magnolia",
    "Wannaska",
    "Chisholm",
    "Virginia",
    "Shakopee",
    "Big Lake",
    "Santiago",
    "Winthrop",
    "Belgrade",
    "Freeport",
    "Richmond",
    "Owatonna",
    "Donnelly",
    "Appleton",
    "Clontarf",
    "Holloway",
    "Clarissa",
    "Verndale",
    "Lakeland",
    "La Salle",
    "Campbell",
    "Lewiston",
    "Stockton",
    "Montrose",
    "Swatara",
    "Andover",
    "Audubon",
    "Rochert",
    "Bemidji",
    "Ponemah",
    "Puposky",
    "Redlake",
    "Waskish",
    "Clinton",
    "Correll",
    "Mankato",
    "Comfrey",
    "New Ulm",
    "Searles",
    "Carlton",
    "Cloquet",
    "Holyoke",
    "Cologne",
    "Hamburg",
    "Norwood",
    "Waconia",
    "Maynard",
    "Wyoming",
    "Glyndon",
    "Gonvick",
    "Leonard",
    "Shevlin",
    "Hovland",
    "Jeffers",
    "Storden",
    "Ironton",
    "Jenkins",
    "Hampton",
    "Mendota",
    "Brandon",
    "Miltona",
    "Delavan",
    "Huntley",
    "Kiester",
    "Harmony",
    "Preston",
    "Hayward",
    "Goodhue",
    "Barrett",
    "Hoffman",
    "Wendell",
    "Hopkins",
    "Loretto",
    "Wayzata",
    "Navarre",
    "Houston",
    "Laporte",
    "Calumet",
    "Bigfork",
    "Talmoon",
    "Marcell",
    "Jackson",
    "Okabena",
    "Ogilvie",
    "Willmar",
    "Atwater",
    "Pennock",
    "Raymond",
    "Sunburg",
    "Hallock",
    "Kennedy",
    "Madison",
    "Finland",
    "Elysian",
    "Ivanhoe",
    "Balaton",
    "Russell",
    "Taunton",
    "Glencoe",
    "Stewart",
    "Winsted",
    "Stephen",
    "Granada",
    "Dunnell",
    "Trimont",
    "Welcome",
    "Watkins",
    "Buckman",
    "Hillman",
    "Lastrup",
    "Cushing",
    "Randall",
    "Lansing",
    "Waltham",
    "Slayton",
    "Bigelow",
    "Lismore",
    "Reading",
    "Wilmont",
    "Halstad",
    "Hendrum",
    "Oronoco",
    "Henning",
    "Kerrick",
    "Holland",
    "Ruthton",
    "Erskine",
    "Fertile",
    "Fosston",
    "Farwell",
    "Villard",
    "Plummer",
    "Sanborn",
    "Belview",
    "Wabasso",
    "Fairfax",
    "Webster",
    "Kenneth",
    "Luverne",
    "Warroad",
    "Brimson",
    "Babbitt",
    "Biwabik",
    "Eveleth",
    "Gilbert",
    "Hibbing",
    "Makinen",
    "Melrude",
    "Saginaw",
    "Gaylord",
    "Kimball",
    "Brooten",
    "Melrose",
    "Sartell",
    "Medford",
    "Alberta",
    "Hancock",
    "Danvers",
    "Murdock",
    "Burtrum",
    "Staples",
    "Wheaton",
    "Kellogg",
    "Mazeppa",
    "Wabasha",
    "Aldrich",
    "Menahga",
    "Waldorf",
    "Bayport",
    "Newport",
    "Scandia",
    "Madelia",
    "Foxhome",
    "Rothsay",
    "Buffalo",
    "Hanover",
    "Waverly",
    "Aitkin",
    "Bethel",
    "Frazee",
    "Solway",
    "Wilton",
    "Gilman",
    "Odessa",
    "Hanska",
    "Barnum",
    "Sawyer",
    "Wright",
    "Carver",
    "Chaska",
    "Backus",
    "Walker",
    "Outing",
    "Watson",
    "Harris",
    "Shafer",
    "Felton",
    "Hawley",
    "Bagley",
    "Lutsen",
    "Windom",
    "Baxter",
    "Crosby",
    "Nisswa",
    "Kasson",
    "Carlos",
    "Nelson",
    "Osakis",
    "Easton",
    "Elmore",
    "Canton",
    "Wykoff",
    "Conger",
    "Emmons",
    "Geneva",
    "Kenyon",
    "Herman",
    "Dayton",
    "Rogers",
    "Eitzen",
    "Akeley",
    "Braham",
    "Grandy",
    "Isanti",
    "Marble",
    "Spicer",
    "Margie",
    "Mizpah",
    "Ranier",
    "Dawson",
    "Kasota",
    "Garvin",
    "Waubun",
    "Argyle",
    "Gatzke",
    "Grygla",
    "Viking",
    "Warren",
    "Truman",
    "Ceylon",
    "Ormsby",
    "Darwin",
    "Dassel",
    "Cosmos",
    "Milaca",
    "Onamia",
    "Wahkon",
    "Bowlus",
    "Upsala",
    "Motley",
    "Austin",
    "Dexter",
    "Elkton",
    "Le Roy",
    "Racine",
    "Currie",
    "Dovray",
    "Adrian",
    "Perley",
    "Shelly",
    "Dalton",
    "Erhard",
    "Perham",
    "Vergas",
    "Vining",
    "Jasper",
    "Climax",
    "Winger",
    "Lengby",
    "Euclid",
    "Fisher",
    "Mentor",
    "Brooks",
    "Revere",
    "Milroy",
    "Morgan",
    "Hector",
    "Danube",
    "Morton",
    "Olivia",
    "Dundas",
    "Warsaw",
    "Badger",
    "Roseau",
    "Alborn",
    "Angora",
    "Aurora",
    "Canyon",
    "Cotton",
    "Forbes",
    "Kinney",
    "Soudan",
    "Winton",
    "Duluth",
    "Jordan",
    "Savage",
    "Becker",
    "Gibbon",
    "Albany",
    "Elrosa",
    "Roscoe",
    "Chokio",
    "Morris",
    "Benson",
    "Bertha",
    "Hewitt",
    "Dumont",
    "Tintah",
    "Sebeka",
    "Wadena",
    "Waseca",
    "Darfur",
    "Nashua",
    "Altura",
    "Dakota",
    "Winona",
    "Cokato",
    "Delano",
    "Porter",
    "Cedar",
    "Anoka",
    "Ogema",
    "Osage",
    "Hines",
    "Redby",
    "Foley",
    "Barry",
    "Amboy",
    "Essig",
    "Mayer",
    "Remer",
    "Milan",
    "Stacy",
    "Sabin",
    "Tofte",
    "Emily",
    "Frost",
    "Wells",
    "Mabel",
    "Alden",
    "Welch",
    "Ashby",
    "Hamel",
    "Mound",
    "Osseo",
    "Hokah",
    "Nevis",
    "Dalbo",
    "Bovey",
    "Warba",
    "Effie",
    "Alpha",
    "Halma",
    "Noyes",
    "Loman",
    "Tyler",
    "Tracy",
    "Ghent",
    "Plato",
    "Bejou",
    "Pease",
    "Pierz",
    "Adams",
    "Taopi",
    "Avoca",
    "Fulda",
    "Leota",
    "Borup",
    "Byron",
    "Dover",
    "Eyota",
    "Askov",
    "Bruno",
    "Ihlen",
    "Gully",
    "Trail",
    "Cyrus",
    "Lowry",
    "Oklee",
    "Lucan",
    "Vesta",
    "Wanda",
    "Hills",
    "Steen",
    "Swift",
    "Salol",
    "Britt",
    "Tower",
    "Elgin",
    "Afton",
    "Homer",
    "Utica",
    "Canby",
    "Rice",
    "Esko",
    "Bena",
    "Ulen",
    "Wirt",
    "Mora",
    "Boyd",
    "Arco",
    "Lynd",
    "Oslo",
    "Bock",
    "Isle",
    "Lyle",
    "Iona",
    "Flom",
    "Gary",
    "Dent",
    "Buhl",
    "Cook",
    "Iron",
    "Twig",
    "Avon",
    "Hope",
    "Hugo",
    "Odin",
    "Kent",
    "Echo",
    "Max",
    "Ada",
    "Ely",
    "Orr",
  ],
  lV = [
    "Stennis Space Center",
    "Greenwood Springs",
    "Mississippi State",
    "North Carrollton",
    "Crystal Springs",
    "Bay Saint Louis",
    "Lake Cormorant",
    "Pass Christian",
    "Mount Pleasant",
    "Michigan City",
    "Mc Call Creek",
    "Ocean Springs",
    "Plantersville",
    "Holly Springs",
    "Blue Mountain",
    "Robinsonville",
    "Bellefontaine",
    "Hickory Flat",
    "Winstonville",
    "Calhoun City",
    "Slate Spring",
    "Friars Point",
    "Olive Branch",
    "Gore Springs",
    "Union Church",
    "Sandersville",
    "Collinsville",
    "Silver Creek",
    "Walnut Grove",
    "Bogue Chitto",
    "Philadelphia",
    "Panther Burn",
    "Rolling Fork",
    "Taylorsville",
    "Independence",
    "Tiplersville",
    "Blue Springs",
    "Water Valley",
    "Mound Bayou",
    "French Camp",
    "Hermanville",
    "Port Gibson",
    "Mount Olive",
    "Hattiesburg",
    "Leakesville",
    "Diamondhead",
    "Pearlington",
    "Silver City",
    "Mayersville",
    "Valley Park",
    "Bay Springs",
    "Eastabuchie",
    "Porterville",
    "Minter City",
    "Morgan City",
    "Little Rock",
    "Brooksville",
    "Poplarville",
    "New Augusta",
    "Pelahatchie",
    "Piney Woods",
    "Harperville",
    "Harrisville",
    "Winterville",
    "Centreville",
    "Coffeeville",
    "Holly Bluff",
    "Washington",
    "Carrollton",
    "Enterprise",
    "Cedarbluff",
    "Montpelier",
    "West Point",
    "Clarksdale",
    "Georgetown",
    "Hazlehurst",
    "State Line",
    "Diberville",
    "Long Beach",
    "Moss Point",
    "Pascagoula",
    "Heidelberg",
    "Ellisville",
    "University",
    "Lauderdale",
    "Monticello",
    "Thomastown",
    "Mooreville",
    "Brookhaven",
    "Sandy Hook",
    "Potts Camp",
    "Smithville",
    "Kilmichael",
    "Starkville",
    "Batesville",
    "Booneville",
    "Sebastopol",
    "Delta City",
    "Mendenhall",
    "Perkinston",
    "Doddsville",
    "Charleston",
    "Burnsville",
    "Tishomingo",
    "New Albany",
    "Greenville",
    "Glen Allan",
    "Hollandale",
    "Stoneville",
    "Buckatunna",
    "Waynesboro",
    "Louisville",
    "Yazoo City",
    "Smithdale",
    "Kosciusko",
    "Alligator",
    "Cleveland",
    "Big Creek",
    "Pittsboro",
    "Mc Carley",
    "Van Vleet",
    "Stonewall",
    "Jonestown",
    "Rena Lara",
    "Horn Lake",
    "Southaven",
    "Meadville",
    "Tie Plant",
    "Lakeshore",
    "Lexington",
    "Mantachie",
    "Nettleton",
    "Escatawpa",
    "Vancleave",
    "Rose Hill",
    "Harriston",
    "Bassfield",
    "Abbeville",
    "Waterford",
    "Toccopola",
    "Lumberton",
    "Daleville",
    "Newhebron",
    "Greenwood",
    "Itta Bena",
    "Ridgeland",
    "Red Banks",
    "Caledonia",
    "Duck Hill",
    "Conehatta",
    "Shuqualak",
    "Courtland",
    "Nicholson",
    "Whitfield",
    "Hillsboro",
    "Indianola",
    "Inverness",
    "Ruleville",
    "Sunflower",
    "Swan Lake",
    "Arkabutla",
    "Coldwater",
    "Senatobia",
    "Tylertown",
    "Vicksburg",
    "Mathiston",
    "Woodville",
    "Noxapater",
    "Tillatoba",
    "Mc Adams",
    "Gunnison",
    "Merigold",
    "Rosedale",
    "Vardaman",
    "Woodland",
    "Ackerman",
    "Pattison",
    "Seminary",
    "Hernando",
    "Brooklyn",
    "Lucedale",
    "Waveland",
    "Gulfport",
    "Tougaloo",
    "Midnight",
    "Paulding",
    "Vossburg",
    "Stringer",
    "Prentiss",
    "Meridian",
    "Toomsuba",
    "Oak Vale",
    "Carthage",
    "Saltillo",
    "Schlater",
    "Swiftown",
    "Columbus",
    "Crawford",
    "Columbia",
    "Foxworth",
    "Victoria",
    "Aberdeen",
    "Hamilton",
    "Lawrence",
    "Crenshaw",
    "Carriere",
    "Mc Neill",
    "Picayune",
    "Beaumont",
    "Fernwood",
    "Magnolia",
    "Pontotoc",
    "Randolph",
    "Marietta",
    "New Site",
    "Florence",
    "Sandhill",
    "Richland",
    "Anguilla",
    "Mc Henry",
    "Parchman",
    "Moorhead",
    "Cascilla",
    "Glendora",
    "Tutwiler",
    "Metcalfe",
    "Walthall",
    "Bentonia",
    "Satartia",
    "Natchez",
    "Corinth",
    "Gloster",
    "Liberty",
    "Mc Cool",
    "Ashland",
    "Houston",
    "Okolona",
    "Trebloc",
    "Pachuta",
    "Quitman",
    "Shubuta",
    "Coahoma",
    "Farrell",
    "Sherard",
    "Gallman",
    "Collins",
    "Mc Lain",
    "Grenada",
    "Elliott",
    "Holcomb",
    "Saucier",
    "Clinton",
    "Edwards",
    "Raymond",
    "Jackson",
    "Goodman",
    "Pickens",
    "Belzoni",
    "Tremont",
    "Gautier",
    "Fayette",
    "Moselle",
    "De Kalb",
    "Preston",
    "Sumrall",
    "Baldwyn",
    "Guntown",
    "Shannon",
    "Artesia",
    "Madison",
    "Byhalia",
    "Gattman",
    "Prairie",
    "Stewart",
    "Decatur",
    "Hickory",
    "Sturgis",
    "Richton",
    "Chatawa",
    "Sherman",
    "Thaxton",
    "Wheeler",
    "Crowder",
    "Darling",
    "Lambert",
    "Brandon",
    "Puckett",
    "Flowood",
    "Pulaski",
    "Braxton",
    "Raleigh",
    "Wiggins",
    "Philipp",
    "Falkner",
    "Belmont",
    "Redwood",
    "Chatham",
    "Wayside",
    "Oakland",
    "Tinsley",
    "Vaughan",
    "Sibley",
    "Rienzi",
    "Crosby",
    "Sallis",
    "Benoit",
    "Beulah",
    "Duncan",
    "Shelby",
    "Banner",
    "Mantee",
    "Vaiden",
    "Houlka",
    "Dublin",
    "Wesson",
    "Nesbit",
    "Biloxi",
    "Bolton",
    "Cruger",
    "Durant",
    "Tchula",
    "Louise",
    "Fulton",
    "Golden",
    "Hurley",
    "Lorman",
    "Carson",
    "Laurel",
    "Scooba",
    "Oxford",
    "Taylor",
    "Purvis",
    "Bailey",
    "Marion",
    "Jayess",
    "Sontag",
    "Madden",
    "Tupelo",
    "Belden",
    "Verona",
    "Mayhew",
    "Steens",
    "Camden",
    "Canton",
    "Sharon",
    "Kokomo",
    "Becker",
    "Winona",
    "Chunky",
    "Newton",
    "Sardis",
    "Mccomb",
    "Summit",
    "Algoma",
    "Falcon",
    "Forest",
    "Ludlow",
    "Morton",
    "Pinola",
    "Sumner",
    "Ripley",
    "Walnut",
    "Dennis",
    "Dundee",
    "Sledge",
    "Tunica",
    "Myrtle",
    "Arcola",
    "Leland",
    "Eupora",
    "Scobey",
    "Benton",
    "Ethel",
    "Boyle",
    "Scott",
    "Derma",
    "Bruce",
    "Coila",
    "Sidon",
    "Pheba",
    "Walls",
    "Petal",
    "Roxie",
    "Neely",
    "Terry",
    "Utica",
    "Byram",
    "Isola",
    "Grace",
    "Louin",
    "Paris",
    "Money",
    "Flora",
    "Lamar",
    "Amory",
    "Union",
    "Macon",
    "Sarah",
    "Ovett",
    "Osyka",
    "Belen",
    "Marks",
    "Vance",
    "Pearl",
    "Magee",
    "Tippo",
    "Dumas",
    "Clara",
    "Maben",
    "Glen",
    "Pace",
    "Shaw",
    "Weir",
    "Lula",
    "Lyon",
    "Bude",
    "Kiln",
    "West",
    "Moss",
    "Soso",
    "Tula",
    "Lena",
    "Ruth",
    "Como",
    "Pope",
    "Ecru",
    "Star",
    "Lake",
    "Cary",
    "D Lo",
    "Mize",
    "Drew",
    "Rome",
    "Enid",
    "Webb",
    "Iuka",
    "Etta",
    "Avon",
  ],
  iV = JSON.parse(
    '["Whiteman Air Force Base","Burlington Junction","Conception Junction","El Dorado Springs","Excelsior Springs","Fort Leonard Wood","Portage Des Sioux","South Greenfield","Lake Saint Louis","Sainte Genevieve","Maryland Heights","Caplinger Mills","South West City","Saint Elizabeth","Montgomery City","Kimberling City","Sedgewickville","New Bloomfield","Climax Springs","Cape Girardeau","Jerico Springs","Jefferson City","Mount Sterling","Willow Springs","Caruthersville","French Village","Rockaway Beach","Mountain Grove","Sunrise Beach","Pleasant Hill","Harrisonville","Chestnutridge","Highlandville","Saint Patrick","Missouri City","Stewartsville","Cross Timbers","Mountain View","Carl Junction","House Springs","Rocky Comfort","Fredericktown","Gravois Mills","Edgar Springs","Bowling Green","Pleasant Hope","Saint Charles","Appleton City","Sweet Springs","Ponce De Leon","Point Lookout","Mineral Point","Williamsville","Saint Joseph","Mid Missouri","Poplar Bluff","Breckenridge","Williamsburg","Holts Summit","Kingdom City","Burfordville","Millersville","Old Appleton","Russellville","Saint Thomas","Prairie Home","Lock Springs","Hornersville","Robertsville","Saint Albans","Walnut Grove","Martinsville","New Franklin","Peace Valley","Pottersville","Middle Brook","Blue Springs","Grain Valley","Independence","Crystal City","Phillipsburg","Higginsville","Mount Vernon","Williamstown","Moscow Mills","Philadelphia","East Prairie","New Florence","Portageville","Bonnots Mill","Camden Point","Devils Elbow","Saint Robert","Clifton Hill","Jacksonville","Saint Peters","Valles Mines","Chesterfield","Reeds Spring","Green Castle","Bradleyville","Kissee Mills","Walnut Shade","Raymondville","Summersville","Marthasville","Benton City","Martinsburg","Butterfield","Golden City","Mindenmines","Marble Hill","Osage Beach","Macks Creek","Gordonville","Garden City","Keytesville","Kansas City","Pilot Grove","Cherryville","Gilman City","Pattonsburg","Lake Spring","Gray Summit","Saint Clair","Villa Ridge","Springfield","New Hampton","Forest City","Brandsville","West Plains","Lees Summit","Carterville","Herculaneum","Warrensburg","Knob Noster","Marionville","Pierce City","Stotts City","Chillicothe","Mooresville","New Cambria","Wolf Island","Monroe City","Stoutsville","Rocky Mount","Loose Creek","Bakersfield","Gainesville","Hardenville","Braggadocio","Green Ridge","Hughesville","Saint James","Clarksville","Platte City","Humansville","Morrisville","Waynesville","Worthington","Powersville","Centerville","Lesterville","Fairdealing","Cottleville","Bonne Terre","Valley Park","Saint Louis","Shelbyville","Schell City","Wright City","Mill Spring","Rogersville","Grovespring","Kirksville","Eagle Rock","Shell Knob","Sturdivant","Hallsville","Harrisburg","Neelyville","Lake Ozark","Linn Creek","Pocahontas","Whitewater","Carrollton","East Lynne","Alexandria","Smithville","Plattsburg","Centertown","Wooldridge","Blackwater","Otterville","Davisville","Steelville","Greenfield","Windyville","Clarksdale","Union Star","Luebbering","Washington","Owensville","Darlington","Bois D Arc","Fair Grove","Blythedale","Eagleville","Cainsville","Blairstown","Mound City","Pilot Knob","La Russell","Cedar Hill","High Ridge","Morse Mill","Centerview","Kingsville","Bates City","Wellington","Monticello","Hawk Point","Old Monroe","New Boston","Brookfield","Charleston","California","Clarksburg","High Point","Bellflower","Middletown","Wellsville","Versailles","New Madrid","Tallapoosa","Stark City","Conception","Koshkonong","Koeltztown","Westphalia","Rockbridge","Thornfield","Bragg City","Perryville","Curryville","Flemington","Unionville","New London","Huntsville","Wentzville","West Alton","Lowry City","Bloomsdale","Saint Mary","Park Hills","Farmington","Florissant","Earth City","Arrow Rock","Malta Bend","Coatsville","Queen City","Scott City","Birch Tree","Bloomfield","Green City","Cedarcreek","Kirbyville","Taneyville","Moundville","Greenville","Wappapello","Marshfield","Grant City","Rosendale","Rock Port","Rush Hill","Cassville","Amsterdam","Rich Hill","Rockville","Cole Camp","Glenallen","Hartsburg","Centralia","Rocheport","Rushville","Camdenton","Stoutland","Dutchtown","Friedheim","Oak Ridge","Ellsinore","Van Buren","Strasburg","Cleveland","Creighton","Rothville","Brunswick","Salisbury","Lead Hill","Boonville","Dadeville","Long Lane","Louisburg","Jamesport","Maysville","Weatherby","Catawissa","New Haven","Gasconade","King City","Stanberry","Ash Grove","Brookline","Strafford","Deepwater","Hermitage","Pittsburg","Weaubleau","Wheatland","Armstrong","Caulfield","Annapolis","Belleview","Grandview","Greenwood","Lone Jack","Oak Grove","Neck City","Webb City","Grubville","Hillsboro","Kimmswick","Mapaville","Chilhowee","Knox City","Lynchburg","Concordia","Lexington","Freistatt","La Grange","Lewistown","Whiteside","Marceline","Meadville","Pineville","Tiff City","Brinktown","Princeton","Tuscumbia","Jamestown","High Hill","Jonesburg","Rhineland","Morehouse","Wentworth","Clearmont","Maryville","Pickering","Ravenwood","Theodosia","Altenburg","Uniontown","Houstonia","Louisiana","Frankford","Riverside","Fair Play","Henrietta","Ellington","Flinthill","Foristell","New Melle","Blackwell","Knob Lick","Hazelwood","Bridgeton","Saint Ann","Blackburn","Lancaster","Hunnewell","Bell City","Brownwood","Grayridge","Cape Fair","Humphreys","Hollister","Powersite","Ridgedale","Elk Creek","Hartshorn","Deerfield","Truesdale","Warrenton","Richwoods","Caledonia","Patterson","Allendale","Hartville","Mansfield","Brashear","Greentop","Novinger","Amazonia","Fillmore","Savannah","Westboro","Laddonia","Vandalia","Thompson","Seligman","Washburn","Columbia","Sturgeon","Broseley","Harviell","Rombauer","Hamilton","Kingston","Portland","Steedman","Tebbetts","Auxvasse","Montreal","Bosworth","Norborne","Peculiar","Stockton","Triplett","Billings","Chadwick","Garrison","Oldfield","Wyaconda","Bunceton","Cook Sta","Leasburg","Lockwood","Altamont","Gallatin","Cardwell","Clarkton","Whiteoak","Campbell","Beaufort","Lonedell","Sullivan","Morrison","Republic","Spickard","Hatfield","Ridgeway","Montrose","Maitland","Franklin","Viburnum","Carthage","Sarcoxie","Barnhart","Fletcher","Hematite","Imperial","Hurdland","Eldridge","Napoleon","Halltown","La Belle","Elsberry","Winfield","Browning","Wheeling","Anderson","La Plata","Marquand","Hannibal","Anniston","Bertrand","Holliday","Santa Fe","Florence","Syracuse","Lilbourn","Matthews","Fairview","Newtonia","Guilford","Skidmore","Freeburg","Isabella","Tecumseh","Mc Bride","La Monte","Smithton","Dearborn","Edgerton","Brighton","Dunnegan","Half Way","Richland","Saverton","Rayville","Richmond","Reynolds","Doniphan","Gatewood","Defiance","O Fallon","Bismarck","Leadwood","Marshall","Glenwood","Rutledge","Commerce","Vanduser","Sikeston","Blodgett","Eminence","Clarence","Shelbina","Blue Eye","Bronaugh","Richards","Belgrade","Irondale","Piedmont","Fordland","Sheridan","Bolckow","Fairfax","Wheaton","Liberal","Milford","Edwards","Lincoln","Leopold","Ashland","De Kalb","Faucett","Braymer","Cowgill","Jackson","De Witt","Fremont","Grandin","Raymore","Freeman","Spokane","Wayland","Kearney","Liberty","Cameron","Lathrop","Trimble","Bourbon","Everton","Buffalo","Jameson","Winston","Squires","Vanzant","Holcomb","Kennett","Labadie","Pacific","Stanton","Rosebud","Hermann","Mc Fall","Turners","Willard","Trenton","Bethany","Clinton","Calhoun","Windsor","Preston","Fayette","Glasgow","Arcadia","Des Arc","Ironton","Buckner","Duenweg","Oronogo","Purcell","De Soto","Dittmer","Liguori","Novelty","Lebanon","Mayview","Waverly","Truxton","Bucklin","Laclede","Linneus","Goodman","Lanagan","Atlanta","Excello","Maywood","Palmyra","Brumley","Fortuna","Mc Girk","Madison","Barnett","Canalou","Kewanee","Marston","Diamond","Saginaw","Barnard","Hopkins","Parnell","Chamois","Pontiac","Deering","Holland","Wardell","Brazeau","Sedalia","Newburg","Ashburn","Waldron","Aldrich","Bolivar","Crocker","Livonia","Lucerne","Moberly","Redford","Augusta","Collins","Osceola","Doe Run","Ballwin","Glencoe","Gilliam","Downing","Granger","Memphis","Chaffee","Perkins","Montier","Lentner","Leonard","Advance","Pollock","Winigan","Newtown","Branson","Forsyth","Bucyrus","Houston","Huggins","Licking","Success","Harwood","Sheldon","Treloar","Cascade","Lowndes","Diggins","Elkland","Niangua","Seymour","Norwood","Helena","Tarkio","Watson","Farber","Mexico","Exeter","Golden","Monett","Adrian","Amoret","Butler","Drexel","Foster","Warsaw","Patton","Agency","Easton","Kidder","Mokane","Fulton","Bogard","Belton","Archie","Mendon","Sumner","Dalton","Bruner","Clever","Sparta","Kahoka","Revere","Turney","Eugene","Henley","Lohman","Arcola","Urbana","Coffey","Osborn","Jadwin","Arbyrd","Gibson","Malden","Senath","Berger","Gerald","Leslie","Albany","Gentry","Laredo","Quincy","Oregon","Pomona","Vulcan","Levasy","Sibley","Jasper","Joplin","Asbury","Avilla","Arnold","Festus","Pevely","Holden","Leeton","Newark","Plevna","Baring","Falcon","Conway","Corder","Odessa","Aurora","Miller","Verona","Canton","Durham","Purdin","Ludlow","Powell","Anabel","Bevier","Callao","Vienna","Taylor","Mercer","Kaiser","Iberia","Latham","Tipton","Laurie","Stover","Catron","Gideon","Granby","Neosho","Racine","Seneca","Stella","Graham","Myrtle","Thayer","Argyle","Brixey","Wasola","Zanoni","Cooter","Gobler","Steele","Farrar","Frohna","Beulah","Jerome","Annada","Farley","Weston","Eudora","Laquey","Center","Higbee","Renick","Camden","Hardin","Lawson","Orrick","Bunker","Naylor","Roscoe","Eureka","Fenton","Grover","Nelson","Slater","Arbela","Benton","Morley","Winona","Bethel","Bernie","Dexter","Dudley","Puxico","Galena","Hurley","Harris","Protem","Rueter","Eunice","Cabool","Nevada","Walker","Dutzow","Potosi","Mc Gee","Denver","Macomb","Gibbs","Cosby","Purdy","Lamar","Ionia","Gipsy","Zalma","Fagus","Qulin","Roach","Daisy","Delta","Ozark","Luray","Mosby","Gower","Wesco","Tunas","Amity","Lenox","Salem","Drury","Rives","Union","Bland","Urich","Craig","Moody","Bixby","Reeds","Edina","Dover","Ewing","Foley","Olney","Silex","Chula","Utica","Elmer","Ethel","Macon","Belle","Vichy","Eldon","Olean","Ulman","Wyatt","Paris","Parma","Risco","Clyde","Alton","Couch","Noble","Udall","Hayti","Rolla","Eolia","Dixon","Perry","Cairo","Clark","Black","Briar","Miami","Gorin","Kelso","Emden","Essex","Crane","Lampe","Milan","Plato","Yukon","Cadet","Clubb","Silva","Worth","Graff","Hume","Fisk","Polo","Hale","Stet","Tina","Nixa","Holt","Cuba","Boss","Galt","Alba","Alma","Emma","Troy","Dawn","Noel","Elmo","Linn","Meta","Dora","Mora","Duke","Polk","Oxly","Oran","Roby","Solo","Metz","Milo","Tiff","Lodi","Rea","Ava"]'
  ),
  sV = [
    "White Sulphur Springs",
    "East Glacier Park",
    "Gallatin Gateway",
    "West Yellowstone",
    "Columbia Falls",
    "Lake Mc Donald",
    "Jefferson City",
    "Saint Ignatius",
    "Thompson Falls",
    "Pompeys Pillar",
    "Malmstrom Afb",
    "Fort Harrison",
    "Virginia City",
    "Medicine Lake",
    "Saint Xavier",
    "Warm Springs",
    "Coffee Creek",
    "Forest Grove",
    "Hungry Horse",
    "West Glacier",
    "Willow Creek",
    "Sand Springs",
    "Canyon Creek",
    "Twin Bridges",
    "Stevensville",
    "Crow Agency",
    "Lodge Grass",
    "Great Falls",
    "Black Eagle",
    "Sand Coulee",
    "Fort Benton",
    "Grass Range",
    "Martin City",
    "Three Forks",
    "Philipsburg",
    "East Helena",
    "Mc Allister",
    "Silver Star",
    "Martinsdale",
    "Saint Regis",
    "Seeley Lake",
    "Musselshell",
    "Silver Gate",
    "Heart Butte",
    "Powderville",
    "Hot Springs",
    "Trout Creek",
    "Sweet Grass",
    "Saint Marie",
    "Wise River",
    "Fort Smith",
    "Radersburg",
    "Miles City",
    "Bloomfield",
    "Polebridge",
    "Raynesford",
    "Marysville",
    "Wolf Creek",
    "Frenchtown",
    "Clyde Park",
    "Cooke City",
    "Livingston",
    "Springdale",
    "Whitewater",
    "Deer Lodge",
    "Gold Creek",
    "Grantsdale",
    "Wolf Point",
    "Culbertson",
    "Plentywood",
    "Reed Point",
    "Big Timber",
    "Judith Gap",
    "Ballantine",
    "Garryowen",
    "Bearcreek",
    "Red Lodge",
    "Fort Shaw",
    "Sun River",
    "Geraldine",
    "Big Sandy",
    "Flaxville",
    "Whitetail",
    "Lewistown",
    "Kalispell",
    "Whitefish",
    "Manhattan",
    "Box Elder",
    "Inverness",
    "Whitehall",
    "De Borgia",
    "Helmville",
    "Corvallis",
    "Pinesdale",
    "Bainville",
    "Homestead",
    "Lame Deer",
    "Absarokee",
    "Park City",
    "Greycliff",
    "Fairfield",
    "Fort Peck",
    "Harlowton",
    "Broadview",
    "Hogeland",
    "Townsend",
    "Fromberg",
    "Stockett",
    "Floweree",
    "Highwood",
    "Peerless",
    "Glendive",
    "Anaconda",
    "Winifred",
    "Lakeside",
    "Belgrade",
    "Browning",
    "Cut Bank",
    "Drummond",
    "Gildford",
    "Cardwell",
    "Moccasin",
    "Stanford",
    "Whitlash",
    "Brockway",
    "Harrison",
    "Sheridan",
    "Ringling",
    "Alberton",
    "Superior",
    "Missoula",
    "Milltown",
    "Melstone",
    "Emigrant",
    "Gardiner",
    "Elliston",
    "Garrison",
    "Florence",
    "Hamilton",
    "Fairview",
    "Brockton",
    "Colstrip",
    "Hathaway",
    "Lonepine",
    "Paradise",
    "Antelope",
    "Redstone",
    "Columbus",
    "Fishtail",
    "Melville",
    "Ethridge",
    "Sunburst",
    "Glentana",
    "Hinsdale",
    "Richland",
    "Vandalia",
    "Shepherd",
    "Billings",
    "Jackson",
    "Polaris",
    "Chinook",
    "Winston",
    "Bridger",
    "Roberts",
    "Capitol",
    "Ekalaka",
    "Hammond",
    "Cascade",
    "Monarch",
    "Neihart",
    "Volborg",
    "Lindsay",
    "Willard",
    "Buffalo",
    "Bigfork",
    "Bozeman",
    "Big Sky",
    "Brusett",
    "Cohagen",
    "Ryegate",
    "Hingham",
    "Kremlin",
    "Rudyard",
    "Boulder",
    "Ravalli",
    "Big Arm",
    "Proctor",
    "Rollins",
    "Augusta",
    "Lincoln",
    "Chester",
    "Fortine",
    "Rexford",
    "Stryker",
    "Cameron",
    "Saltese",
    "Clinton",
    "Roundup",
    "Wilsall",
    "Winnett",
    "Zortman",
    "Dupuyer",
    "Broadus",
    "Mildred",
    "Lambert",
    "Ashland",
    "Ingomar",
    "Sumatra",
    "Forsyth",
    "Rosebud",
    "Outlook",
    "Raymond",
    "Reserve",
    "Melrose",
    "Rapelje",
    "Mc Leod",
    "Choteau",
    "Pendroy",
    "Lothair",
    "Oilmont",
    "Bighorn",
    "Sanders",
    "Glasgow",
    "Larslan",
    "Shawmut",
    "Two Dot",
    "Huntley",
    "Dillon",
    "Wisdom",
    "Decker",
    "Hardin",
    "Harlem",
    "Turner",
    "Zurich",
    "Toston",
    "Belfry",
    "Joliet",
    "Roscoe",
    "Alzada",
    "Vaughn",
    "Carter",
    "Kinsey",
    "Scobey",
    "Richey",
    "Plevna",
    "Denton",
    "Hilger",
    "Marion",
    "Somers",
    "Jordan",
    "Lavina",
    "Clancy",
    "Geyser",
    "Hobson",
    "Charlo",
    "Polson",
    "Dayton",
    "Helena",
    "Joplin",
    "Eureka",
    "Circle",
    "Norris",
    "Haugan",
    "Bonner",
    "Condon",
    "Teigen",
    "Dodson",
    "Loring",
    "Conrad",
    "Ledger",
    "Valier",
    "Biddle",
    "Ovando",
    "Fallon",
    "Conner",
    "Victor",
    "Savage",
    "Sidney",
    "Poplar",
    "Birney",
    "Angela",
    "Plains",
    "Dagmar",
    "Westby",
    "Divide",
    "Ramsay",
    "Dutton",
    "Galata",
    "Shelby",
    "Hysham",
    "Frazer",
    "Nashua",
    "Opheim",
    "Wibaux",
    "Custer",
    "Laurel",
    "Worden",
    "Busby",
    "Pryor",
    "Wyola",
    "Lloyd",
    "Edgar",
    "Boyes",
    "Simms",
    "Ismay",
    "Baker",
    "Moore",
    "Coram",
    "Essex",
    "Olney",
    "Mosby",
    "Havre",
    "Basin",
    "Arlee",
    "Pablo",
    "Ronan",
    "Libby",
    "Trego",
    "Alder",
    "Ennis",
    "Huson",
    "Malta",
    "Brady",
    "Otter",
    "Olive",
    "Terry",
    "Darby",
    "Crane",
    "Froid",
    "Dixon",
    "Heron",
    "Noxon",
    "Butte",
    "Bynum",
    "Power",
    "Kevin",
    "Acton",
    "Dell",
    "Glen",
    "Lima",
    "Hays",
    "Boyd",
    "Belt",
    "Loma",
    "Kila",
    "Babb",
    "Hall",
    "Elmo",
    "Troy",
    "Vida",
    "Pony",
    "Lolo",
    "Pray",
    "Saco",
    "Avon",
    "Sula",
    "Molt",
    "Ulm",
    "Roy",
    "Nye",
  ],
  uV = [
    "South Sioux City",
    "Mc Cool Junction",
    "Republican City",
    "Beaver Crossing",
    "Weeping Water",
    "Willow Island",
    "Nebraska City",
    "Platte Center",
    "Pleasant Dale",
    "Cedar Rapids",
    "Saint Edward",
    "Saint Helena",
    "Blue Springs",
    "Grand Island",
    "Hayes Center",
    "Saint Libory",
    "Crab Orchard",
    "North Platte",
    "Battle Creek",
    "Meadow Grove",
    "Newman Grove",
    "Silver Creek",
    "Central City",
    "St Columbans",
    "Cedar Bluffs",
    "Fort Calhoun",
    "Rising City",
    "Cedar Creek",
    "Plattsmouth",
    "Clay Center",
    "Westerville",
    "Dakota City",
    "Big Springs",
    "Bloomington",
    "Beaver City",
    "Wilsonville",
    "Steele City",
    "Pawnee City",
    "Springfield",
    "Morse Bluff",
    "Scottsbluff",
    "Staplehurst",
    "Hay Springs",
    "Clearwater",
    "Harrisburg",
    "Petersburg",
    "Hemingford",
    "Pleasanton",
    "David City",
    "Louisville",
    "South Bend",
    "Hartington",
    "Saronville",
    "West Point",
    "Broken Bow",
    "Mason City",
    "Gothenburg",
    "North Bend",
    "Bennington",
    "Moorefield",
    "Stockville",
    "Smithfield",
    "Wood River",
    "Culbertson",
    "Saint Paul",
    "Springview",
    "Bloomfield",
    "Sutherland",
    "Broadwater",
    "Bridgeport",
    "Brownville",
    "Table Rock",
    "Stromsburg",
    "Falls City",
    "Dorchester",
    "Offutt Afb",
    "Valparaiso",
    "Litchfield",
    "Alexandria",
    "North Loup",
    "Washington",
    "Guide Rock",
    "Brunswick",
    "Ainsworth",
    "Johnstown",
    "Long Pine",
    "Elm Creek",
    "Riverdale",
    "Greenwood",
    "Coleridge",
    "Valentine",
    "Crookston",
    "Wood Lake",
    "Lodgepole",
    "Fairfield",
    "Eddyville",
    "Lexington",
    "Newcastle",
    "Wakefield",
    "Waterbury",
    "Nickerson",
    "Boys Town",
    "Benkelman",
    "Cambridge",
    "Barneston",
    "Hordville",
    "Marquette",
    "Dannebrog",
    "Elk Creek",
    "Heartwell",
    "Creighton",
    "Winnetoon",
    "Wellfleet",
    "Stapleton",
    "Fullerton",
    "Steinauer",
    "Plainview",
    "Indianola",
    "Papillion",
    "Ellsworth",
    "Rushville",
    "Whiteclay",
    "Loup City",
    "Rockville",
    "Belvidere",
    "Davenport",
    "Winnebago",
    "Arlington",
    "Blue Hill",
    "Red Cloud",
    "Henderson",
    "Hastings",
    "Holstein",
    "Roseland",
    "Brewster",
    "Primrose",
    "Alliance",
    "Bellwood",
    "Brainard",
    "Surprise",
    "Randolph",
    "Champion",
    "Imperial",
    "Merriman",
    "Trumbull",
    "Clarkson",
    "Schuyler",
    "Bancroft",
    "Callaway",
    "Comstock",
    "Crawford",
    "Marsland",
    "Chappell",
    "Scribner",
    "Waterloo",
    "Fairmont",
    "Milligan",
    "Shickley",
    "Campbell",
    "Franklin",
    "Hildreth",
    "Riverton",
    "Arapahoe",
    "Holbrook",
    "Beatrice",
    "Clatonia",
    "Cortland",
    "Pickrell",
    "Virginia",
    "Lewellen",
    "Spalding",
    "Doniphan",
    "Phillips",
    "Stamford",
    "Palisade",
    "Stratton",
    "Atkinson",
    "Chambers",
    "Endicott",
    "Fairbury",
    "Plymouth",
    "Sterling",
    "Tecumseh",
    "Keystone",
    "Ogallala",
    "Bushnell",
    "Niobrara",
    "Verdigre",
    "Belgrade",
    "Lawrence",
    "Superior",
    "Syracuse",
    "Unadilla",
    "Burchard",
    "Lewiston",
    "Bertrand",
    "Holdrege",
    "Columbus",
    "Humphrey",
    "Humboldt",
    "Bellevue",
    "La Vista",
    "Minatare",
    "Mitchell",
    "Lakeside",
    "Harrison",
    "Carleton",
    "Reynolds",
    "Thedford",
    "Thurston",
    "Walthill",
    "Bartlett",
    "Benedict",
    "Bradshaw",
    "Juniata",
    "Kenesaw",
    "Oakdale",
    "Orchard",
    "Dunning",
    "Bristow",
    "Spencer",
    "Amherst",
    "Kearney",
    "Ravenna",
    "Shelton",
    "Decatur",
    "Oakland",
    "Tekamah",
    "Linwood",
    "Ulysses",
    "Elmwood",
    "Murdock",
    "Nehawka",
    "Fordyce",
    "Wauneta",
    "Elsmere",
    "Kilgore",
    "Deweese",
    "Glenvil",
    "Harvard",
    "Howells",
    "Anselmo",
    "Sargent",
    "Emerson",
    "Hubbard",
    "Jackson",
    "Chadron",
    "Whitney",
    "Overton",
    "Concord",
    "Maskell",
    "Fremont",
    "Uehling",
    "Winslow",
    "Elkhorn",
    "Haigler",
    "Grafton",
    "Naponee",
    "Maywood",
    "Hendley",
    "Liberty",
    "Oshkosh",
    "Burwell",
    "Hyannis",
    "Whitman",
    "Greeley",
    "Wolbach",
    "Giltner",
    "Hampton",
    "Orleans",
    "Trenton",
    "Farwell",
    "Lemoyne",
    "Newport",
    "Kimball",
    "Crofton",
    "Hickman",
    "Malcolm",
    "Martell",
    "Raymond",
    "Sprague",
    "Waverly",
    "Lincoln",
    "Dickens",
    "Hershey",
    "Maxwell",
    "Wallace",
    "Norfolk",
    "Madison",
    "Chapman",
    "Johnson",
    "Douglas",
    "Palmyra",
    "Talmage",
    "Du Bois",
    "Venango",
    "Atlanta",
    "Creston",
    "Lindsay",
    "Osceola",
    "Mc Cook",
    "Bartley",
    "Danbury",
    "Lebanon",
    "Shubert",
    "Bassett",
    "De Witt",
    "Swanton",
    "Western",
    "Ashland",
    "Ceresco",
    "Memphis",
    "Melbeta",
    "Morrill",
    "Cordova",
    "Garland",
    "Goehner",
    "Milford",
    "Bingham",
    "Stanton",
    "Bruning",
    "Chester",
    "Deshler",
    "Hubbell",
    "Rosalie",
    "Arcadia",
    "Kennard",
    "Carroll",
    "Hoskins",
    "Winside",
    "Inavale",
    "Ericson",
    "Gresham",
    "Neligh",
    "Arthur",
    "Purdum",
    "Albion",
    "Gibbon",
    "Miller",
    "Odessa",
    "Dwight",
    "Manley",
    "Murray",
    "Belden",
    "Laurel",
    "Magnet",
    "Enders",
    "Nenzel",
    "Sparks",
    "Dalton",
    "Gurley",
    "Potter",
    "Sidney",
    "Inland",
    "Sutton",
    "Rogers",
    "Beemer",
    "Wisner",
    "Ansley",
    "Oconto",
    "Arnold",
    "Sumner",
    "Farnam",
    "Hooper",
    "Snyder",
    "Valley",
    "Exeter",
    "Geneva",
    "Ohiowa",
    "Strang",
    "Upland",
    "Curtis",
    "Eustis",
    "Edison",
    "Oxford",
    "Filley",
    "Wymore",
    "Elwood",
    "Scotia",
    "Aurora",
    "Amelia",
    "Oneill",
    "Stuart",
    "Mullen",
    "Boelus",
    "Daykin",
    "Diller",
    "Jansen",
    "Axtell",
    "Minden",
    "Wilcox",
    "Paxton",
    "Center",
    "Bennet",
    "Denton",
    "Hallam",
    "Panama",
    "Walton",
    "Taylor",
    "Tilden",
    "Clarks",
    "Archer",
    "Palmer",
    "Angora",
    "Bayard",
    "Auburn",
    "Julian",
    "Nemaha",
    "Nelson",
    "Ruskin",
    "Dunbar",
    "Lorton",
    "Madrid",
    "Loomis",
    "Mclean",
    "Osmond",
    "Pierce",
    "Duncan",
    "Monroe",
    "Shelby",
    "Dawson",
    "Stella",
    "Verdon",
    "Friend",
    "Tobias",
    "Wilber",
    "Gretna",
    "Ithaca",
    "Prague",
    "Weston",
    "Gering",
    "Mcgrew",
    "Seward",
    "Gordon",
    "Ashton",
    "Hazard",
    "Pilger",
    "Gilead",
    "Hebron",
    "Halsey",
    "Seneca",
    "Pender",
    "Elyria",
    "Herman",
    "Bladen",
    "Elgin",
    "Royal",
    "Butte",
    "Lynch",
    "Naper",
    "Craig",
    "Lyons",
    "Bruno",
    "Avoca",
    "Eagle",
    "Union",
    "Wynot",
    "Edgar",
    "Leigh",
    "Merna",
    "Homer",
    "Cozad",
    "Allen",
    "Dixon",
    "Ponca",
    "Dodge",
    "Omaha",
    "Parks",
    "Adams",
    "Odell",
    "Lisco",
    "Ashby",
    "Cairo",
    "Ragan",
    "Emmet",
    "Ewing",
    "Inman",
    "Brule",
    "Mills",
    "Wausa",
    "Davey",
    "Firth",
    "Brady",
    "Tryon",
    "Genoa",
    "Brock",
    "Hardy",
    "Elsie",
    "Grant",
    "Hadar",
    "Salem",
    "Crete",
    "Colon",
    "Malmo",
    "Wahoo",
    "Yutan",
    "Lyman",
    "Utica",
    "Byron",
    "Blair",
    "Wayne",
    "Abie",
    "Alvo",
    "Cody",
    "Ames",
    "Alda",
    "Alma",
    "Page",
    "Elba",
    "Cook",
    "Roca",
    "Peru",
    "Burr",
    "Otoe",
    "Funk",
    "Polk",
    "Rulo",
    "Mead",
    "Macy",
    "Waco",
    "York",
    "Ayr",
    "Ong",
    "Max",
    "Dix",
    "Oak",
    "Bee",
    "Ord",
  ],
  dV = [
    "North Las Vegas",
    "Crescent Valley",
    "Paradise Valley",
    "Battle Mountain",
    "Amargosa Valley",
    "Incline Village",
    "Indian Springs",
    "Coyote Springs",
    "Silver Springs",
    "Round Mountain",
    "Mountain City",
    "West Wendover",
    "Virginia City",
    "Washoe Valley",
    "Blue Diamond",
    "Boulder City",
    "Gardnerville",
    "Spring Creek",
    "Bunkerville",
    "Cal Nev Ari",
    "Searchlight",
    "Zephyr Cove",
    "Carson City",
    "Ruby Valley",
    "Silver City",
    "Crystal Bay",
    "Nellis Afb",
    "Silverpeak",
    "Mc Dermitt",
    "Winnemucca",
    "Wellington",
    "Sun Valley",
    "The Lakes",
    "Henderson",
    "Logandale",
    "Las Vegas",
    "Glenbrook",
    "Stateline",
    "Tuscarora",
    "Goldfield",
    "Yerington",
    "Hawthorne",
    "Manhattan",
    "Wadsworth",
    "Duckwater",
    "Mesquite",
    "Laughlin",
    "Jarbidge",
    "Lamoille",
    "Montello",
    "Golconda",
    "Caliente",
    "Lovelock",
    "Overton",
    "Jackpot",
    "Orovada",
    "Fernley",
    "Mercury",
    "Pahrump",
    "Tonopah",
    "Gerlach",
    "Mc Gill",
    "Fallon",
    "Minden",
    "Carlin",
    "Owyhee",
    "Eureka",
    "Austin",
    "Panaca",
    "Pioche",
    "Dayton",
    "Luning",
    "Schurz",
    "Beatty",
    "Empire",
    "Sparks",
    "Moapa",
    "Sloan",
    "Genoa",
    "Deeth",
    "Wells",
    "Denio",
    "Valmy",
    "Alamo",
    "Smith",
    "Gabbs",
    "Imlay",
    "Nixon",
    "Verdi",
    "Baker",
    "Jean",
    "Elko",
    "Dyer",
    "Hiko",
    "Mina",
    "Reno",
    "Lund",
    "Ruth",
    "Ely",
  ],
  cV = [
    "Gilmanton Iron Works",
    "Center Tuftonboro",
    "West Chesterfield",
    "West Stewartstown",
    "Waterville Valley",
    "West Peterborough",
    "Center Barnstead",
    "Mount Washington",
    "Center Strafford",
    "Center Sandwich",
    "Wolfeboro Falls",
    "North Stratford",
    "North Woodstock",
    "North Haverhill",
    "West Nottingham",
    "Newton Junction",
    "Moultonborough",
    "North Sandwich",
    "Center Ossipee",
    "East Wakefield",
    "Melvin Village",
    "South Tamworth",
    "Enfield Center",
    "East Hampstead",
    "Center Harbor",
    "Center Conway",
    "North Walpole",
    "Bretton Woods",
    "Twin Mountain",
    "South Newbury",
    "East Kingston",
    "Hampton Falls",
    "North Hampton",
    "South Acworth",
    "Georges Mills",
    "Eaton Center",
    "North Conway",
    "Sanbornville",
    "West Ossipee",
    "Chesterfield",
    "Westmoreland",
    "West Swanzey",
    "West Lebanon",
    "Lyndeborough",
    "Hillsborough",
    "Peterborough",
    "East Andover",
    "North Sutton",
    "South Sutton",
    "Milton Mills",
    "Cornish Flat",
    "New Hampton",
    "Mirror Lake",
    "Silver Lake",
    "Fitzwilliam",
    "Harrisville",
    "Marlborough",
    "Lyme Center",
    "Francestown",
    "Mont Vernon",
    "New Ipswich",
    "East Candia",
    "Londonderry",
    "North Salem",
    "Rollinsford",
    "Somersworth",
    "Springfield",
    "Charlestown",
    "Sanbornton",
    "Winnisquam",
    "Wonalancet",
    "Winchester",
    "Drewsville",
    "Whitefield",
    "Holderness",
    "Chichester",
    "Sugar Hill",
    "Woodsville",
    "Greenfield",
    "Greenville",
    "Litchfield",
    "New Boston",
    "Manchester",
    "Bennington",
    "Canterbury",
    "Contoocook",
    "New London",
    "Pittsfield",
    "East Derry",
    "Nottingham",
    "Portsmouth",
    "New Castle",
    "Barrington",
    "Farmington",
    "New Durham",
    "Washington",
    "Plainfield",
    "Barnstead",
    "Gilmanton",
    "Alton Bay",
    "Intervale",
    "Kearsarge",
    "Effingham",
    "Wolfeboro",
    "Colebrook",
    "Jefferson",
    "Lancaster",
    "Pittsburg",
    "Glencliff",
    "Wentworth",
    "Woodstock",
    "Littleton",
    "Bethlehem",
    "Franconia",
    "Haverhill",
    "Brookline",
    "Goffstown",
    "Merrimack",
    "Dunbarton",
    "Salisbury",
    "Deerfield",
    "Northwood",
    "Greenland",
    "Hampstead",
    "Newfields",
    "Newmarket",
    "Rye Beach",
    "Rochester",
    "Strafford",
    "Claremont",
    "Lochmere",
    "Meredith",
    "Bartlett",
    "Chocorua",
    "Tamworth",
    "Ashuelot",
    "Sullivan",
    "Hinsdale",
    "Spofford",
    "Stoddard",
    "Groveton",
    "Randolph",
    "Plymouth",
    "Thornton",
    "Piermont",
    "Hooksett",
    "Bradford",
    "Franklin",
    "Henniker",
    "Atkinson",
    "Danville",
    "Kingston",
    "Plaistow",
    "Seabrook",
    "Stratham",
    "Lempster",
    "Grantham",
    "Belmont",
    "Laconia",
    "Gilford",
    "Freedom",
    "Jackson",
    "Madison",
    "Ossipee",
    "Swanzey",
    "Jaffrey",
    "Alstead",
    "Walpole",
    "Ashland",
    "Bristol",
    "Campton",
    "Grafton",
    "Lincoln",
    "Enfield",
    "Hanover",
    "Lebanon",
    "Amherst",
    "Milford",
    "Bedford",
    "Hancock",
    "Andover",
    "Danbury",
    "Newbury",
    "Suncook",
    "Concord",
    "Chester",
    "Fremont",
    "Raymond",
    "Windham",
    "Hampton",
    "Sandown",
    "Madbury",
    "Acworth",
    "Cornish",
    "Meriden",
    "Newport",
    "Sunapee",
    "Tilton",
    "Conway",
    "Dublin",
    "Gilsum",
    "Marlow",
    "Nelson",
    "Rindge",
    "Berlin",
    "Gorham",
    "Hebron",
    "Rumney",
    "Warren",
    "Lisbon",
    "Canaan",
    "Monroe",
    "Orford",
    "Hollis",
    "Hudson",
    "Nashua",
    "Pelham",
    "Temple",
    "Wilton",
    "Antrim",
    "Elkins",
    "Warner",
    "Wilmot",
    "Loudon",
    "Auburn",
    "Candia",
    "Epping",
    "Exeter",
    "Newton",
    "Durham",
    "Milton",
    "Goshen",
    "Alton",
    "Keene",
    "Errol",
    "Milan",
    "Weare",
    "Epsom",
    "Derry",
    "Salem",
    "Dover",
    "Union",
    "Guild",
    "Glen",
    "Troy",
    "Bath",
    "Etna",
    "Lyme",
    "Pike",
    "Hill",
    "Lee",
    "Bow",
    "Rye",
  ],
  hV = [
    "Township Of Washington",
    "Cape May Court House",
    "Point Pleasant Beach",
    "Egg Harbor Township",
    "Manchester Township",
    "Whitehouse Station",
    "Princeton Junction",
    "Atlantic Highlands",
    "Millstone Township",
    "Schooleys Mountain",
    "Hasbrouck Heights",
    "Lawrence Township",
    "Monmouth Junction",
    "Picatinny Arsenal",
    "South Bound Brook",
    "South Hackensack",
    "Englewood Cliffs",
    "Deerfield Street",
    "Woodbury Heights",
    "South Plainfield",
    "West Long Branch",
    "Neshanic Station",
    "Berkeley Heights",
    "North Plainfield",
    "Egg Harbor City",
    "North Arlington",
    "East Rutherford",
    "Harrington Park",
    "Ridgefield Park",
    "Gloucester City",
    "Waterford Works",
    "Monroe Township",
    "North Brunswick",
    "Avon By The Sea",
    "Mount Arlington",
    "Convent Station",
    "Seaside Heights",
    "Hancocks Bridge",
    "Wallpack Center",
    "Cliffside Park",
    "Franklin Lakes",
    "Palisades Park",
    "Woodcliff Lake",
    "Joint Base Mdl",
    "Haddon Heights",
    "Cape May Point",
    "South Seaville",
    "Dividing Creek",
    "Port Elizabeth",
    "Sergeantsville",
    "East Brunswick",
    "Monmouth Beach",
    "Mountain Lakes",
    "Pompton Plains",
    "Lake Hopatcong",
    "Barnegat Light",
    "Island Heights",
    "Normandy Beach",
    "Liberty Corner",
    "Highland Lakes",
    "New Providence",
    "Pleasantville",
    "Port Republic",
    "Atlantic City",
    "Rochelle Park",
    "Mount Ephraim",
    "Merchantville",
    "Sea Isle City",
    "Harrisonville",
    "National Park",
    "Franklinville",
    "West New York",
    "Three Bridges",
    "New Brunswick",
    "Highland Park",
    "Fort Monmouth",
    "Bradley Beach",
    "Little Silver",
    "Port Monmouth",
    "Lake Hiawatha",
    "Green Village",
    "Morris Plains",
    "Mount Freedom",
    "Lanoka Harbor",
    "Pompton Lakes",
    "Basking Ridge",
    "Bernardsville",
    "Franklin Park",
    "Scotch Plains",
    "Elizabethport",
    "Great Meadows",
    "Stewartsville",
    "West Deptford",
    "Somers Point",
    "Estell Manor",
    "Mays Landing",
    "Margate City",
    "Ventnor City",
    "Elmwood Park",
    "Midland Park",
    "Saddle River",
    "Little Ferry",
    "Saddle Brook",
    "Browns Mills",
    "Mount Laurel",
    "Chesterfield",
    "Sicklerville",
    "Collingswood",
    "South Dennis",
    "Stone Harbor",
    "Heislerville",
    "South Orange",
    "Mullica Hill",
    "Williamstown",
    "North Bergen",
    "Pottersville",
    "Lambertville",
    "Glen Gardner",
    "Port Reading",
    "Kendall Park",
    "Lincoln Park",
    "Cedar Knolls",
    "Florham Park",
    "East Hanover",
    "Forked River",
    "Seaside Park",
    "Bloomingdale",
    "Little Falls",
    "Newfoundland",
    "West Milford",
    "Martinsville",
    "Hillsborough",
    "Mountainside",
    "Roselle Park",
    "Hackettstown",
    "Phillipsburg",
    "East Windsor",
    "West Windsor",
    "Leeds Point",
    "Landisville",
    "Newtonville",
    "Bergenfield",
    "New Milford",
    "Willingboro",
    "Maple Shade",
    "Mount Holly",
    "Wrightstown",
    "Cherry Hill",
    "Cedar Brook",
    "Haddonfield",
    "West Berlin",
    "Dennisville",
    "Green Creek",
    "Mauricetown",
    "Port Norris",
    "Cedar Grove",
    "East Orange",
    "Essex Fells",
    "West Orange",
    "Short Hills",
    "Mount Royal",
    "Monroeville",
    "Jersey City",
    "High Bridge",
    "Little York",
    "Perth Amboy",
    "South Amboy",
    "South River",
    "Asbury Park",
    "Englishtown",
    "Farmingdale",
    "Long Branch",
    "Morganville",
    "Ocean Grove",
    "Spring Lake",
    "Cream Ridge",
    "Long Valley",
    "Mount Tabor",
    "Beach Haven",
    "Mantoloking",
    "Pedricktown",
    "Penns Grove",
    "Bound Brook",
    "Bridgewater",
    "Branchville",
    "Middleville",
    "Tranquility",
    "Springfield",
    "Changewater",
    "Johnsonburg",
    "Port Murray",
    "Brigantine",
    "Northfield",
    "Oceanville",
    "Wallington",
    "Rutherford",
    "Wood Ridge",
    "Hackensack",
    "Park Ridge",
    "Ridgefield",
    "River Edge",
    "Birmingham",
    "Burlington",
    "Chatsworth",
    "Hainesport",
    "Juliustown",
    "Moorestown",
    "New Lisbon",
    "Vincentown",
    "New Gretna",
    "Bordentown",
    "Barrington",
    "Pennsauken",
    "Ocean City",
    "Ocean View",
    "Rio Grande",
    "Strathmere",
    "Whitesboro",
    "Cedarville",
    "Dorchester",
    "Bloomfield",
    "Glen Ridge",
    "Livingston",
    "Belleville",
    "Bridgeport",
    "Clarksboro",
    "Swedesboro",
    "Union City",
    "Baptistown",
    "Bloomsbury",
    "Flemington",
    "Frenchtown",
    "Quakertown",
    "Readington",
    "Whitehouse",
    "Hightstown",
    "Pennington",
    "Titusville",
    "Woodbridge",
    "Plainsboro",
    "Piscataway",
    "Old Bridge",
    "Sayreville",
    "Shrewsbury",
    "Fair Haven",
    "Allenhurst",
    "Colts Neck",
    "Middletown",
    "Imlaystown",
    "Parsippany",
    "Pine Brook",
    "Pequannock",
    "Succasunna",
    "Millington",
    "Morristown",
    "New Vernon",
    "Manahawkin",
    "West Creek",
    "Lavallette",
    "Ocean Gate",
    "Pine Beach",
    "Toms River",
    "Pennsville",
    "Bedminster",
    "Belle Mead",
    "Blawenburg",
    "Rocky Hill",
    "Somerville",
    "Ogdensburg",
    "Stillwater",
    "Swartswood",
    "Kenilworth",
    "Plainfield",
    "Blairstown",
    "Buttzville",
    "Washington",
    "Hammonton",
    "Edgewater",
    "Lyndhurst",
    "Carlstadt",
    "Moonachie",
    "Allendale",
    "Fair Lawn",
    "Ho Ho Kus",
    "Ridgewood",
    "Glen Rock",
    "Teterboro",
    "Cresskill",
    "Englewood",
    "Hillsdale",
    "Northvale",
    "Lumberton",
    "Pemberton",
    "Riverside",
    "Cookstown",
    "Blackwood",
    "Clementon",
    "Gibbsboro",
    "Runnemede",
    "Somerdale",
    "Stratford",
    "Bridgeton",
    "Fortescue",
    "Greenwich",
    "Millville",
    "Rosenhayn",
    "Fairfield",
    "Maplewood",
    "Montclair",
    "Irvington",
    "Gibbstown",
    "Glassboro",
    "Mickleton",
    "Paulsboro",
    "Thorofare",
    "Westville",
    "Weehawken",
    "Annandale",
    "Pittstown",
    "Princeton",
    "Middlesex",
    "Spotswood",
    "Cliffwood",
    "Eatontown",
    "Highlands",
    "Keansburg",
    "Oceanport",
    "Wickatunk",
    "Allentown",
    "Roosevelt",
    "Allenwood",
    "Manasquan",
    "Montville",
    "Riverdale",
    "Mine Hill",
    "Budd Lake",
    "Ledgewood",
    "Brookside",
    "Tuckerton",
    "New Egypt",
    "Beachwood",
    "Lakehurst",
    "Oak Ridge",
    "Hawthorne",
    "Deepwater",
    "Woodstown",
    "Far Hills",
    "Gladstone",
    "Pluckemin",
    "Zarephath",
    "Stockholm",
    "Greendell",
    "Hopatcong",
    "Lafayette",
    "Westfield",
    "Elizabeth",
    "Allamuchy",
    "Belvidere",
    "Minotola",
    "Richland",
    "Longport",
    "Fairview",
    "Fort Lee",
    "Garfield",
    "Waldwick",
    "Demarest",
    "Montvale",
    "Westwood",
    "Columbus",
    "Jobstown",
    "Rancocas",
    "Riverton",
    "Florence",
    "Roebling",
    "Glendora",
    "Bellmawr",
    "Voorhees",
    "Lawnside",
    "Magnolia",
    "Cape May",
    "Tuckahoe",
    "Wildwood",
    "Woodbine",
    "Leesburg",
    "Vineland",
    "Caldwell",
    "Millburn",
    "Roseland",
    "Grenloch",
    "Richwood",
    "Deptford",
    "Newfield",
    "Harrison",
    "Secaucus",
    "Rosemont",
    "Stockton",
    "Hopewell",
    "Carteret",
    "Cranbury",
    "Dunellen",
    "Helmetta",
    "Metuchen",
    "Milltown",
    "Red Bank",
    "Adelphia",
    "Freehold",
    "Leonardo",
    "Lincroft",
    "Marlboro",
    "Navesink",
    "Oakhurst",
    "Sea Girt",
    "Denville",
    "Flanders",
    "Hibernia",
    "Rockaway",
    "Randolph",
    "Gillette",
    "Stirling",
    "Whippany",
    "Barnegat",
    "Lakewood",
    "Bayville",
    "Waretown",
    "Ringwood",
    "Paterson",
    "Kingston",
    "Skillman",
    "Flagtown",
    "Manville",
    "Somerset",
    "Franklin",
    "Glenwood",
    "Montague",
    "Stanhope",
    "Cranford",
    "Watchung",
    "Vauxhall",
    "Hillside",
    "Columbia",
    "Delaware",
    "Broadway",
    "Absecon",
    "Cologne",
    "Linwood",
    "Dorothy",
    "Oakland",
    "Wyckoff",
    "Maywood",
    "Closter",
    "Emerson",
    "Haworth",
    "Norwood",
    "Oradell",
    "Paramus",
    "Teaneck",
    "Tenafly",
    "Beverly",
    "Marlton",
    "Medford",
    "Palmyra",
    "Winslow",
    "Audubon",
    "Marmora",
    "Delmont",
    "Fairton",
    "Newport",
    "Wenonah",
    "Clayton",
    "Bayonne",
    "Hoboken",
    "Califon",
    "Ringoes",
    "Clinton",
    "Hampton",
    "Lebanon",
    "Milford",
    "Oldwick",
    "Stanton",
    "Windsor",
    "Trenton",
    "Colonia",
    "Sewaren",
    "Keasbey",
    "Belford",
    "Holmdel",
    "Keyport",
    "Matawan",
    "Neptune",
    "Tennent",
    "Brielle",
    "Boonton",
    "Landing",
    "Netcong",
    "Wharton",
    "Chatham",
    "Chester",
    "Madison",
    "Mendham",
    "Jackson",
    "Clifton",
    "Passaic",
    "Haskell",
    "Wanaque",
    "Haledon",
    "Alloway",
    "Quinton",
    "Peapack",
    "Raritan",
    "Hamburg",
    "Mc Afee",
    "Andover",
    "Augusta",
    "Glasser",
    "Fanwood",
    "Garwood",
    "Roselle",
    "Elwood",
    "Pomona",
    "Milmay",
    "Mizpah",
    "Mahwah",
    "Ramsey",
    "Bogota",
    "Leonia",
    "Alpine",
    "Dumont",
    "Berlin",
    "Camden",
    "Oaklyn",
    "Avalon",
    "Goshen",
    "Villas",
    "Shiloh",
    "Verona",
    "Orange",
    "Newark",
    "Nutley",
    "Mantua",
    "Pitman",
    "Sewell",
    "Malaga",
    "Kearny",
    "Avenel",
    "Dayton",
    "Edison",
    "Iselin",
    "Parlin",
    "Belmar",
    "Hazlet",
    "Howell",
    "Rumson",
    "Towaco",
    "Butler",
    "Ironia",
    "Kenvil",
    "Hewitt",
    "Totowa",
    "Warren",
    "Sussex",
    "Vernon",
    "Layton",
    "Newton",
    "Sparta",
    "Linden",
    "Rahway",
    "Summit",
    "Oxford",
    "Vienna",
    "Asbury",
    "Buena",
    "Fords",
    "Dover",
    "Brick",
    "Wayne",
    "Salem",
    "Elmer",
    "Norma",
    "Lyons",
    "Clark",
    "Union",
    "Lodi",
    "Atco",
    "Ewan",
    "Deal",
    "Hope",
  ],
  gV = [
    "White Sands Missile Range",
    "High Rolls Mountain Park",
    "Holloman Air Force Base",
    "Truth Or Consequences",
    "Santo Domingo Pueblo",
    "Continental Divide",
    "Mexican Springs",
    "Tierra Amarilla",
    "Taos Ski Valley",
    "Ranchos De Taos",
    "Pueblo Of Acoma",
    "Radium Springs",
    "Cochiti Pueblo",
    "Spaceport City",
    "Elephant Butte",
    "Clines Corners",
    "Arenas Valley",
    "Ruidoso Downs",
    "Ohkay Owingeh",
    "Jemez Springs",
    "Sheep Springs",
    "San Cristobal",
    "Kirtland Afb",
    "Santa Teresa",
    "Mesilla Park",
    "Sunland Park",
    "Fort Stanton",
    "San Patricio",
    "Fort Wingate",
    "Jemez Pueblo",
    "Cochiti Lake",
    "Williamsburg",
    "Arroyo Hondo",
    "Ojo Caliente",
    "Tres Piedras",
    "Bosque Farms",
    "Cedar Crest",
    "Sandia Park",
    "Albuquerque",
    "Lake Arthur",
    "Casa Blanca",
    "Saint Vrain",
    "Fort Sumner",
    "Whites City",
    "Santa Clara",
    "Fort Bayard",
    "Pinos Altos",
    "Silver City",
    "Anton Chico",
    "Church Rock",
    "Vanderwagen",
    "Buena Vista",
    "Guadalupita",
    "Wagon Mound",
    "Youngsville",
    "Pena Blanca",
    "Flora Vista",
    "Conchas Dam",
    "San Antonio",
    "Arroyo Seco",
    "Mountainair",
    "Rio Rancho",
    "New Laguna",
    "San Rafael",
    "Fence Lake",
    "Angel Fire",
    "Eagle Nest",
    "Cannon Afb",
    "Las Cruces",
    "Chamberino",
    "San Miguel",
    "Loco Hills",
    "Mule Creek",
    "Santa Rosa",
    "Crossroads",
    "Los Alamos",
    "White Rock",
    "Crownpoint",
    "Smith Lake",
    "Rainsville",
    "Alamogordo",
    "Cloudcroft",
    "Sacramento",
    "Vallecitos",
    "Bernalillo",
    "San Ysidro",
    "Farmington",
    "Bloomfield",
    "Navajo Dam",
    "Villanueva",
    "Trementina",
    "Santa Cruz",
    "Monticello",
    "San Acacia",
    "Des Moines",
    "Bluewater",
    "San Fidel",
    "Broadview",
    "Fairacres",
    "Lordsburg",
    "Lovington",
    "Carrizozo",
    "Jamestown",
    "Cleveland",
    "Ojo Feliz",
    "Chaparral",
    "Mescalero",
    "Orogrande",
    "Tucumcari",
    "Mcalister",
    "Nara Visa",
    "Hernandez",
    "La Madera",
    "Medanales",
    "Milnesand",
    "Algodones",
    "Counselor",
    "Ponderosa",
    "Fruitland",
    "Waterflow",
    "Las Vegas",
    "Montezuma",
    "Cerrillos",
    "Hillsboro",
    "Magdalena",
    "Polvadera",
    "Red River",
    "Cedarvale",
    "Gladstone",
    "Grenville",
    "Los Lunas",
    "Pie Town",
    "Glenwood",
    "Hagerman",
    "Pinehill",
    "Cimarron",
    "Springer",
    "Ute Park",
    "Garfield",
    "Dona Ana",
    "Mesquite",
    "Carlsbad",
    "Lakewood",
    "Buckhorn",
    "Mosquero",
    "Mcdonald",
    "Maljamar",
    "Monument",
    "Columbus",
    "Brimhall",
    "Mentmore",
    "Rehoboth",
    "Tohatchi",
    "Timberon",
    "Tularosa",
    "Lindrith",
    "Canjilon",
    "Espanola",
    "Los Ojos",
    "Portales",
    "Placitas",
    "Corrales",
    "Kirtland",
    "La Plata",
    "Shiprock",
    "Sanostee",
    "San Jose",
    "Serafina",
    "Edgewood",
    "Santa Fe",
    "Glorieta",
    "Chamisal",
    "Costilla",
    "El Prado",
    "Estancia",
    "Mcintosh",
    "Moriarty",
    "Tijeras",
    "Quemado",
    "Reserve",
    "Roswell",
    "Paguate",
    "Maxwell",
    "Melrose",
    "Anthony",
    "La Mesa",
    "Mesilla",
    "Artesia",
    "Faywood",
    "Hachita",
    "Hanover",
    "Mimbres",
    "Redrock",
    "La Loma",
    "Newkirk",
    "Caprock",
    "Capitan",
    "Glencoe",
    "Lincoln",
    "Picacho",
    "Ruidoso",
    "Prewitt",
    "Gamerco",
    "Thoreau",
    "Yatahey",
    "Valmora",
    "Watrous",
    "Mayhill",
    "Sunspot",
    "San Jon",
    "Gallina",
    "Abiquiu",
    "Alcalde",
    "Canones",
    "Cebolla",
    "Chimayo",
    "Cordova",
    "El Rito",
    "Truchas",
    "Velarde",
    "La Jara",
    "Nageezi",
    "Newcomb",
    "Tererro",
    "Rociada",
    "Sapello",
    "Stanley",
    "Tesuque",
    "Caballo",
    "Winston",
    "Claunch",
    "La Joya",
    "Veguita",
    "Socorro",
    "Lemitar",
    "Penasco",
    "Trampas",
    "Torreon",
    "Willard",
    "Amistad",
    "Capulin",
    "Clayton",
    "Jarales",
    "Peralta",
    "Isleta",
    "Aragon",
    "Dexter",
    "Cubero",
    "Grants",
    "Laguna",
    "Clovis",
    "Texico",
    "Taiban",
    "Rincon",
    "Berino",
    "Loving",
    "Malaga",
    "Bayard",
    "Hurley",
    "Tyrone",
    "Vaughn",
    "Cuervo",
    "Solano",
    "Playas",
    "Animas",
    "Eunice",
    "Corona",
    "Tinnie",
    "Deming",
    "Gallup",
    "Navajo",
    "Chacon",
    "Holman",
    "La Luz",
    "Coyote",
    "Embudo",
    "Petaca",
    "Causey",
    "Rogers",
    "Regina",
    "Blanco",
    "Ilfeld",
    "Ribera",
    "Garita",
    "Amalia",
    "Carson",
    "Questa",
    "Vadito",
    "Valdez",
    "Encino",
    "Folsom",
    "Bosque",
    "Datil",
    "Milan",
    "Miami",
    "Raton",
    "Grady",
    "Hatch",
    "Salem",
    "Organ",
    "Cliff",
    "Mills",
    "Rodeo",
    "Hobbs",
    "Tatum",
    "Hondo",
    "Nogal",
    "Ramah",
    "Ocate",
    "Pinon",
    "House",
    "Logan",
    "Chama",
    "Dixon",
    "Dulce",
    "Elida",
    "Floyd",
    "Kenna",
    "Lingo",
    "Aztec",
    "Pecos",
    "Arrey",
    "Derry",
    "Cerro",
    "Llano",
    "Sedan",
    "Belen",
    "Luna",
    "Yeso",
    "Vado",
    "Hope",
    "Gila",
    "Alto",
    "Zuni",
    "Mora",
    "Bent",
    "Weed",
    "Bard",
    "Quay",
    "Dora",
    "Cuba",
    "Rowe",
    "Lamy",
    "Taos",
    "Tome",
    "Roy",
    "Jal",
    "Pep",
  ],
  mV = JSON.parse(
    '["Port Jefferson Station","Shelter Island Heights","White Sulphur Springs","Farmersville Station","Thousand Island Park","Annandale On Hudson","Springfield Gardens","South Richmond Hill","Castleton On Hudson","Slaterville Springs","East Atlantic Beach","Guilderland Center","Blue Mountain Lake","Niagara University","Cornwall On Hudson","Springfield Center","Rotterdam Junction","Cold Spring Harbor","Huntington Station","Hastings On Hudson","Bible School Park","Saint Bonaventure","Hopewell Junction","Saint Regis Falls","Skaneateles Falls","Richfield Springs","South Glens Falls","Greenfield Center","Westhampton Beach","Ardsley On Hudson","West Clarksville","Conewango Valley","Smithville Flats","South New Berlin","Ellenburg Center","Stuyvesant Falls","Davenport Center","Wappingers Falls","Dickinson Center","Salisbury Center","Wellesley Island","Henderson Harbor","Pierrepont Manor","North Brookfield","Saint Johnsville","Glenwood Landing","Rockville Centre","Franklin Springs","Mc Connellsville","Washington Mills","Burlington Flats","East Springfield","Long Island City","South Ozone Park","Schodack Landing","De Kalb Junction","Rensselaer Falls","Saratoga Springs","Callicoon Center","Cochecton Center","Livingston Manor","Malden On Hudson","Middle Granville","Briarcliff Manor","Croton On Hudson","Jefferson Valley","Yorktown Heights","Coeymans Hollow","Rensselaerville","South Bethlehem","Chenango Bridge","Van Buren Point","Ellenburg Depot","South Kortright","Clinton Corners","Pleasant Valley","Clarence Center","Van Hornesville","Fishers Landing","Palatine Bridge","Franklin Square","Port Washington","Massapequa Park","North Tonawanda","Clifton Springs","East Bloomfield","West Bloomfield","Fort Montgomery","Sterling Forest","Washingtonville","Salisbury Mills","West Burlington","Oakland Gardens","Jackson Heights","Cambria Heights","West Haverstraw","Rock City Falls","Center Moriches","South Jamesport","Lake Huntington","South Fallsburg","Greenfield Park","Huletts Landing","North Granville","East Williamson","Granite Springs","Cortlandt Manor","Preston Hollow","Little Genesee","Alfred Station","Chenango Forks","East Pharsalia","South Plymouth","Au Sable Forks","Schuyler Falls","Blodgett Mills","West Davenport","Collins Center","Brainardsville","Fort Covington","West Coxsackie","Alexandria Bay","Natural Bridge","Sackets Harbor","Three Mile Bay","Constableville","Livonia Center","East Rochester","West Henrietta","Atlantic Beach","West Hempstead","Roslyn Heights","Williston Park","Stella Niagara","Holland Patent","New York Mills","Oriskany Falls","Apulia Station","Blooming Grove","Central Valley","Greenwood Lake","Highland Falls","Highland Mills","Thompson Ridge","Cuddebackville","Central Square","East Worcester","Lake Peekskill","Middle Village","Queens Village","East Greenbush","West Sand Lake","Valley Cottage","Cranberry Lake","North Lawrence","West Stockholm","Porter Corners","Pattersonville","Central Bridge","Charlotteville","North Blenheim","Sharon Springs","Reading Center","Coopers Plains","Fishers Island","East Northport","Port Jefferson","Shelter Island","Fremont Center","Jeffersonville","Kauneonga Lake","Loch Sheldrake","Mongaup Valley","Westbrookville","Bolton Landing","Putnam Station","Ontario Center","Goldens Bridge","Silver Springs","Voorheesville","Corbettsville","Whitney Point","East Randolph","Ellicottville","Franklinville","Little Valley","Westons Mills","Scipio Center","Union Springs","Maple Springs","Sinclairville","North Pitcher","South Otselic","North Norwich","Lyon Mountain","Morrisonville","Columbiaville","Malden Bridge","North Chatham","Halcottsville","Margaretville","Bovina Center","East Meredith","Sidney Center","Lagrangeville","Stanfordville","Athol Springs","North Collins","Elizabethtown","Moriah Center","Darien Center","East Pembroke","New Baltimore","Cornwallville","Lake Pleasant","Raquette Lake","West Winfield","La Fargeville","New Woodstock","Hubbardsville","Leonardsville","Honeoye Falls","New Hyde Park","East Rockaway","Locust Valley","Point Lookout","Valley Stream","Niagara Falls","Vernon Center","Baldwinsville","East Syracuse","Seneca Castle","Campbell Hall","Mountainville","Bernhards Bay","Cherry Valley","Garrattsville","Schuyler Lake","West Edmeston","Colliersville","Gilbertsville","Portlandville","Mahopac Falls","Putnam Valley","College Point","Fresh Meadows","East Elmhurst","Richmond Hill","Rockaway Park","East Schodack","Hoosick Falls","North Hoosick","Staten Island","Bear Mountain","Spring Valley","Lawrenceville","Brasher Falls","Hannawa Falls","Ballston Lake","Mechanicville","Schuylerville","Victory Mills","Quaker Street","Richmondville","Montour Falls","Cameron Mills","North Babylon","Central Islip","East Setauket","Islip Terrace","West Sayville","Bridgehampton","East Moriches","Middle Island","Highland Lake","Kiamesha Lake","Mountain Dale","Thompsonville","Newark Valley","Mount Tremper","Walker Valley","Diamond Point","Kattskill Bay","Baldwin Place","Bedford Hills","Pleasantville","West Harrison","Strykersville","Dormansville","Slingerlands","Castle Creek","Harpursville","Johnson City","South Dayton","Great Valley","Poplar Ridge","Silver Creek","Cherry Creek","Findley Lake","Mooers Forks","Rouses Point","East Chatham","West Lebanon","Copake Falls","Fleischmanns","New Kingston","Harpersfield","Castle Point","Dover Plains","Hughsonville","Poughkeepsie","Bowmansville","East Amherst","East Concord","Grand Island","North Boston","Orchard Park","Spring Brook","Wales Center","North Hudson","Olmstedville","Schroon Lake","Bloomingdale","Keene Valley","North Bangor","Rainbow Lake","Saranac Lake","Vermontville","Whippleville","Gloversville","East Bethany","Haines Falls","Tannersville","Little Falls","Adams Center","Cape Vincent","Philadelphia","Beaver Falls","Mount Morris","North Greece","Fort Johnson","Old Westbury","East Norwich","Old Bethpage","Sylvan Beach","Verona Beach","New Hartford","Westernville","Westmoreland","Delphi Falls","Fayetteville","Oaks Corners","Sparrow Bush","Knowlesville","Pennellville","Williamstown","Mount Vision","Wells Bridge","West Oneonta","Forest Hills","Saint Albans","Howard Beach","Far Rockaway","Breezy Point","Averill Park","Cherry Plain","Cropseyville","Johnsonville","Schaghticoke","Valley Falls","Tomkins Cove","Chippewa Bay","Newton Falls","Raymondville","Rooseveltown","South Colton","Ballston Spa","Clifton Park","Middle Grove","Watkins Glen","Seneca Falls","Perkinsville","Hammondsport","Painted Post","West Babylon","Brightwaters","Farmingville","Miller Place","Wading River","East Hampton","Hampton Bays","Mastic Beach","Bloomingburg","Grahamsville","North Branch","Phillipsport","Tioga Center","Willseyville","Brooktondale","Jacksonville","Lake Katrine","Mount Marion","Bakers Mills","Lake Luzerne","Pottersville","Eagle Bridge","Hudson Falls","Middle Falls","South Butler","Pultneyville","Croton Falls","Mohegan Lake","Mount Vernon","Port Chester","White Plains","New Rochelle","Java Village","Portageville","Clarksville","Guilderland","Newtonville","Centerville","Black Creek","Whitesville","Glen Aubrey","West Valley","Cattaraugus","Forestville","Bemus Point","Dewittville","Pine Valley","Mount Upton","Plattsburgh","New Lebanon","Old Chatham","Spencertown","Hollowville","Mellenville","Cincinnatus","Little York","Grand Gorge","East Branch","Trout Creek","Pine Plains","East Aurora","North Evans","South Wales","Springville","Ticonderoga","Crown Point","Lake Placid","Paul Smiths","Tupper Lake","Caroga Lake","South Byron","East Durham","East Jewett","Hensonville","Prattsville","South Cairo","Indian Lake","Hoffmeister","Jordanville","Middleville","Black River","Evans Mills","Felts Mills","Brantingham","Lyons Falls","Martinsburg","Port Leyden","West Leyden","Harrisville","Springwater","Chittenango","Morrisville","Adams Basin","Churchville","North Chili","Scottsville","Spencerport","Auriesville","Fort Hunter","Fultonville","Tribes Hill","Canajoharie","Floral Park","Carle Place","Garden City","East Meadow","Island Park","Farmingdale","Ransomville","Durhamville","Alder Creek","Bridgewater","Clark Mills","Sangerfield","Skaneateles","Canandaigua","Port Gibson","Shortsville","Circleville","New Hampton","New Milford","Pine Island","Southfields","Tuxedo Park","New Windsor","Rock Tavern","Port Jervis","Lyndonville","Sandy Creek","West Monroe","Cooperstown","Cold Spring","Little Neck","Kew Gardens","East Nassau","Poestenkill","Stephentown","Wynantskill","Garnerville","Pearl River","Stony Point","Nicholville","Piercefield","Chase Mills","Oswegatchie","Parishville","Burnt Hills","Schenectady","Gallupville","Middleburgh","Sloansville","Warnerville","West Fulton","Beaver Dams","Mecklenburg","Prattsburgh","Great River","Lindenhurst","Mount Sinai","Ocean Beach","Rocky Point","Saint James","Sound Beach","Stony Brook","East Marion","East Quogue","New Suffolk","Southampton","Westhampton","Hortonville","Hurleyville","Kenoza Lake","Narrowsburg","Forestburgh","Summitville","Youngsville","Trumansburg","Bloomington","Olivebridge","Spring Glen","Stone Ridge","Ulster Park","West Hurley","West Shokan","Clintondale","Glens Falls","Chestertown","Lake George","North Creek","North River","Stony Creek","Warrensburg","Fort Edward","Sodus Point","Cross River","Dobbs Ferry","Lincolndale","Mount Kisco","North Salem","Pound Ridge","South Salem","Eastchester","Cowlesville","Gainesville","Java Center","Silver Lake","Rock Stream","East Berne","Feura Bush","Watervliet","Friendship","Canaseraga","Wellsville","Port Crane","Binghamton","Perrysburg","Versailles","King Ferry","Port Byron","Chautauqua","Greenhurst","Horseheads","New Berlin","Bainbridge","Mc Donough","Keeseville","Churubusco","West Chazy","Austerlitz","Kinderhook","Niverville","Stottville","Stuyvesant","Ancramdale","Craryville","Elizaville","Germantown","Livingston","East Homer","Bloomville","Downsville","Fishs Eddy","Masonville","Rhinecliff","Salt Point","Staatsburg","Stormville","Crittenden","West Falls","New Russia","Port Henry","Wilmington","Chateaugay","Lake Clear","Hogansburg","Broadalbin","Northville","Greenville","Hannacroix","Lanesville","Maplecrest","Palenville","Speculator","Cold Brook","Dolgeville","Belleville","Brownville","Depauville","Great Bend","Mannsville","Castorland","Copenhagen","Deer River","Scottsburg","South Lima","Clockville","Georgetown","Wampsville","Bouckville","Brookfield","Munnsville","West Eaton","Fort Plain","Great Neck","Cedarhurst","Long Beach","Massapequa","Oyster Bay","Hicksville","Middleport","Model City","Youngstown","Forestport","Lee Center","Stittville","Waterville","Whitesboro","Bridgeport","Jamesville","La Fayette","Plainville","Farmington","Bloomfield","Manchester","Middletown","Slate Hill","Sugar Loaf","Unionville","West Point","Montgomery","Vails Gate","Constantia","Fair Haven","Maple View","New Lisbon","Whitestone","Ozone Park","Petersburg","Rensselaer","Haverstraw","Orangeburg","Sloatsburg","West Nyack","Brier Hill","De Peyster","Gouverneur","Hailesboro","Morristown","Ogdensburg","Waddington","Round Lake","Stillwater","Gansevoort","Duanesburg","Cobleskill","Howes Cave","Interlaken","Troupsburg","Holtsville","Amityville","Blue Point","Brookhaven","Centereach","Centerport","East Islip","Huntington","Kings Park","Lake Grove","Ronkonkoma","West Islip","Amagansett","Manorville","Remsenburg","Sagaponack","Sag Harbor","Water Mill","Monticello","Barryville","Burlingham","Claryville","Parksville","White Lake","Woodbourne","Bearsville","Big Indian","Boiceville","Chichester","Ellenville","High Falls","Kerhonkson","Saugerties","Plattekill","Queensbury","Adirondack","Brant Lake","Cleverdale","Silver Bay","North Rose","Union Hill","Williamson","Mamaroneck","Bronxville","North Java","Branchport","Keuka Park","Allentown","Yorkshire","East Otto","Kill Buck","Limestone","Portville","Salamanca","Steamburg","Martville","Montezuma","Weedsport","Jamestown","Cassadaga","Ellington","Frewsburg","Lily Dale","Westfield","Big Flats","Breesport","Pine City","Van Etten","Wellsburg","Earlville","Sherburne","Cadyville","Champlain","Dannemora","Ellenburg","Claverack","Hillsdale","Davenport","Treadwell","Barrytown","Hyde Park","Millbrook","Millerton","Poughquag","Rhinebeck","Getzville","Lake View","Lancaster","Tonawanda","Severance","Mineville","Port Kent","Ray Brook","Upper Jay","Willsboro","Witherbee","Constable","Owls Head","Johnstown","Stratford","Alexander","Coxsackie","Elka Park","Lexington","Round Top","West Kill","Long Lake","Eagle Bay","Frankfort","Old Forge","Watertown","Fort Drum","Ellisburg","Henderson","Glenfield","Caledonia","Dansville","Groveland","Lakeville","Leicester","Canastota","Cazenovia","De Ruyter","Erieville","Peterboro","Solsville","Brockport","Henrietta","Pittsford","Rochester","Amsterdam","Esperance","Nelliston","Manhasset","Albertson","Glen Cove","Glen Head","Greenvale","Hempstead","Uniondale","Oceanside","Roosevelt","Sea Cliff","Levittown","Mill Neck","Plainview","North Bay","Barneveld","Blossvale","Boonville","Cassville","Chadwicks","Clayville","Deansboro","Yorkville","Brewerton","Kirkville","Liverpool","Marcellus","Mottville","Bullville","Otisville","Pine Bush","Clarendon","Waterport","Cleveland","New Haven","Schenevus","Worcester","Fly Creek","Patterson","Glen Oaks","Sunnyside","Rego Park","Ridgewood","Woodhaven","Bellerose","Sand Lake","Palisades","Childwold","Heuvelton","Richville","Star Lake","Waterford","Fultonham","Jefferson","Schoharie","Greenwood","Bay Shore","Brentwood","Deer Park","Greenlawn","Nesconset","Northport","Patchogue","Smithtown","Hauppauge","Wyandanch","Riverhead","Aquebogue","Calverton","Cutchogue","Greenport","Jamesport","Mattituck","Wainscott","Callicoon","Cochecton","Fallsburg","Glen Spey","Glen Wild","Long Eddy","Neversink","Obernburg","Pond Eddy","Rock Hill","Smallwood","Swan Lake","Woodridge","Wurtsboro","Apalachin","Berkshire","Smithboro","Freeville","Cottekill","Cragsmoor","Highmount","Lake Hill","Phoenicia","Pine Hill","Port Ewen","Rosendale","Shandaken","Wawarsing","West Camp","West Park","Woodstock","New Paltz","Johnsburg","Wevertown","Cambridge","Cossayuna","Granville","Greenwich","Whitehall","Red Creek","Chappaqua","Hartsdale","Hawthorne","Irvington","Larchmont","Maryknoll","Peekskill","Scarsdale","Shenorock","Shrub Oak","Tarrytown","Thornwood","Verplanck","Varysburg","Middlesex","Rushville","Altamont","Coeymans","Glenmont","Westerlo","Angelica","Caneadea","Fillmore","Houghton","Richburg","Rushford","Endicott","Killawog","Kirkwood","Ouaquaga","Sandusky","Allegany","Hinsdale","Randolph","Meridian","Sterling","Fredonia","Sheridan","Ashville","Falconer","Lakewood","Mayville","Portland","Stockton","Millport","Guilford","Plymouth","Philmont","Cortland","Marathon","Stamford","Arkville","Delancey","Franklin","Meridale","Billings","Fishkill","Red Hook","Wingdale","Clarence","Glenwood","Sardinia","Westport","Brushton","Gabriels","Mayfield","Oakfield","Stafford","Pavilion","Surprise","Catskill","Freehold","Oak Hill","Herkimer","Thendara","Carthage","Chaumont","Deferiet","Limerick","Lorraine","Brooklyn","Lowville","Hamilton","Clarkson","Fairport","Penfield","Sprakers","Freeport","Lawrence","Lynbrook","Malverne","Westbury","Woodmere","Bayville","Bellmore","Bethpage","Woodbury","New York","Appleton","Lewiston","Lockport","Hinckley","Knoxboro","Oriskany","Prospect","Sauquoit","Sherrill","Westdale","Woodgate","Camillus","Elbridge","Marietta","Syracuse","Bellvale","Harriman","Westtown","Cornwall","Maybrook","Newburgh","Huguenot","Hannibal","Hastings","Lycoming","Richland","Redfield","Maryland","Edmeston","Hartwick","Roseboom","Westford","Unadilla","Brewster","Garrison","Flushing","Elmhurst","Woodside","Rosedale","Brainard","Blauvelt","Hillburn","New City","Piermont","Sparkill","Wanakena","Winthrop","Delanson","Carlisle","Waterloo","Bradford","Campbell","Canisteo","Cohocton","Pulteney","Rexville","Woodhull","Bellport","Copiague","Holbrook","Melville","Islandia","Sayville","Shoreham","Eastport","Moriches","Southold","Ferndale","Richford","Lockwood","Newfield","Kingston","Connelly","Glenford","Napanoch","Gardiner","Highland","Marlboro","Wallkill","Riparius","Comstock","Fort Ann","Hartford","Savannah","Walworth","Buchanan","Crompond","Elmsford","Harrison","Millwood","Montrose","Ossining","Purchase","Valhalla","Waccabuc","Tuckahoe","Penn Yan","Lakemont","Selkirk","Belfast","Bolivar","Andover","Belmont","Conklin","Deposit","Endwell","Nineveh","Windsor","Delevan","Freedom","Gowanda","Machias","Moravia","Dunkirk","Brocton","Celoron","Kennedy","Sherman","Chemung","Pitcher","Norwich","Redford","Saranac","Chatham","Valatie","Mc Graw","Truxton","Harford","Roxbury","Hancock","Bangall","Chelsea","Glenham","Pawling","Verbank","Wassaic","Chaffee","Collins","Farnham","Hamburg","Holland","Lawtons","Marilla","Buffalo","Minerva","Newcomb","Paradox","Batavia","Linwood","Earlton","Ashland","Purling","Windham","Newport","Antwerp","Calcium","Clayton","Plessis","Redwood","Theresa","Croghan","Denmark","Conesus","Geneseo","Hemlock","Livonia","Piffard","Madison","Mumford","Webster","Hagaman","Mineola","Baldwin","Hewlett","Merrick","Jericho","Syosset","Seaford","Wantagh","Gasport","Newfane","Sanborn","Clinton","Manlius","Memphis","Warners","Fishers","Honeoye","Stanley","Chester","Florida","Howells","Johnson","Warwick","Fancher","Kendall","Mallory","Minetto","Phoenix","Pulaski","Laurens","Milford","Oneonta","Mahopac","Astoria","Bayside","Maspeth","Jamaica","Arverne","Buskirk","Grafton","Hoosick","Melrose","Suffern","Congers","Tallman","Thiells","Edwards","Hammond","Massena","Norfolk","Norwood","Potsdam","Pyrites","Russell","Rexford","Corinth","Alplaus","Burdett","Fayette","Romulus","Willard","Wayland","Addison","Arkport","Atlanta","Cameron","Corning","Hornell","Lindley","Babylon","Bayport","Bohemia","Commack","Medford","Oakdale","Montauk","Peconic","Shirley","Yaphank","Hankins","Liberty","Nichols","Spencer","Waverly","Mc Lean","Lansing","Tillson","Clemons","Hampton","Shushan","Macedon","Ontario","Palmyra","Wolcott","Amawalk","Ardsley","Bedford","Katonah","Yonkers","Castile","Wyoming","Bellona","Dresden","Alcove","Cohoes","Delmar","Latham","Medusa","Ravena","Albany","Alfred","Almond","Tunnel","Vestal","Dayton","Auburn","Aurora","Cayuga","Irving","Clymer","Panama","Ripley","Lowman","Elmira","Smyrna","Greene","Oxford","Altona","Mooers","Canaan","Ancram","Copake","Hudson","Preble","Willet","Denver","Hamden","Hobart","Sidney","Walton","Amenia","Beacon","Holmes","Tivoli","Angola","Boston","Colden","Moriah","Bombay","Malone","Bergen","Le Roy","Athens","Climax","Durham","Hunter","Jewett","Piseco","Sabael","Mohawk","Poland","Dexter","Rodman","Retsof","Sonyea","Dalton","Oneida","Hamlin","Hilton","Mendon","Elmont","Inwood","Roslyn","Barker","Olcott","Wilson","Camden","Remsen","Taberg","Vernon","Verona","Cicero","Fabius","Jordan","Nedrow","Pompey","Geneva","Gorham","Naples","Phelps","Victor","Goshen","Monroe","Walden","Medina","Albion","Holley","Morton","Fulton","Lacona","Mexico","Oswego","Parish","Altmar","Orwell","Morris","Carmel","Corona","Hollis","Berlin","Nassau","Monsey","Nanuet","Pomona","Tappan","Canton","Colton","Helena","Hermon","Lisbon","Madrid","Galway","Hadley","Gilboa","Summit","Alpine","Cayuta","Hector","Odessa","Tyrone","Jasper","Kanona","Savona","Selden","Laurel","Mastic","Orient","Quogue","Speonk","Bethel","Eldred","Harris","Roscoe","Barton","Candor","Dryden","Groton","Ithaca","Accord","Esopus","Glasco","Hurley","Rifton","Shokan","Willow","Milton","Modena","Argyle","Marion","Newark","Armonk","Purdys","Somers","Pelham","Arcade","Attica","Warsaw","Dundee","Himrod","Berne","Ceres","Swain","Bronx","Lisle","Maine","Olean","Genoa","Locke","Gerry","Niobe","Afton","Chazy","Ghent","Homer","Andes","Delhi","Akron","Alden","Brant","Depew","Derby","Essex","Keene","Lewis","Burke","Moira","Basom","Corfu","Byron","Cairo","Leeds","Wells","Inlet","Ilion","Adams","Oxbow","Greig","Turin","Nunda","Eaton","Fonda","Marcy","Utica","Minoa","Tully","Ionia","Arden","Otego","Nyack","Wayne","Avoca","Coram","Islip","Ridge","Upton","Yulan","Owego","Athol","Hague","Salem","Alton","Clyde","Lyons","Sodus","Bliss","Perry","Knox","Troy","Alma","Cuba","Hume","Scio","Leon","Otto","Cato","Stow","Erin","Peru","Eden","Elma","Elba","Acra","Avon","Lima","York","Hunt","Rush","Burt","Rome","Clay","Hall","Kent","Fine","Ovid","Lodi","Bath","Etna","Ruby","Rose","Dale","Pike","Jay","Ava","Rye"]'
  ),
  pV = [
    "Lewiston Woodville",
    "Rutherford College",
    "Pope Army Airfield",
    "Little Switzerland",
    "Wrightsville Beach",
    "Glendale Springs",
    "Ocean Isle Beach",
    "Connelly Springs",
    "Kill Devil Hills",
    "Mccutcheon Field",
    "North Wilkesboro",
    "Boiling Springs",
    "Pleasant Garden",
    "Jackson Springs",
    "Margarettsville",
    "Mineral Springs",
    "Laurel Springs",
    "West Jefferson",
    "Black Mountain",
    "Linville Falls",
    "Mount Pleasant",
    "Atlantic Beach",
    "Harkers Island",
    "Sherrills Ford",
    "Kings Mountain",
    "Roanoke Rapids",
    "Lake Junaluska",
    "East Flat Rock",
    "Hendersonville",
    "Barium Springs",
    "Scaly Mountain",
    "Southern Pines",
    "Carolina Beach",
    "Tarawa Terrace",
    "Elizabeth City",
    "Granite Quarry",
    "Pilot Mountain",
    "Cedar Mountain",
    "Moravian Falls",
    "Green Mountain",
    "Blounts Creek",
    "Elizabethtown",
    "Barnardsville",
    "Collettsville",
    "Granite Falls",
    "Morehead City",
    "Prospect Hill",
    "Lake Waccamaw",
    "Knotts Island",
    "Poplar Branch",
    "Powells Point",
    "Winston-Salem",
    "Bessemer City",
    "Browns Summit",
    "Mc Leansville",
    "Scotland Neck",
    "Maggie Valley",
    "Mountain Home",
    "Harrellsville",
    "Wilsons Mills",
    "Pollocksville",
    "Lemon Springs",
    "Robersonville",
    "Eagle Springs",
    "Pleasant Hill",
    "Franklinville",
    "Lumber Bridge",
    "Rutherfordton",
    "Pisgah Forest",
    "Fuquay Varina",
    "Holly Springs",
    "Willow Spring",
    "Seven Springs",
    "Millers Creek",
    "Roaring River",
    "Swepsonville",
    "Taylorsville",
    "Glade Valley",
    "Grassy Creek",
    "Warrensville",
    "Powellsville",
    "Sunset Beach",
    "Cedar Island",
    "Marshallberg",
    "Emerald Isle",
    "Cherry Point",
    "Fayetteville",
    "Point Harbor",
    "Manns Harbor",
    "Stumpy Point",
    "Macclesfield",
    "Belews Creek",
    "Tobaccoville",
    "Kernersville",
    "Mc Adenville",
    "Robbinsville",
    "Murfreesboro",
    "Mount Mourne",
    "Iron Station",
    "Huntersville",
    "Mount Gilead",
    "Castle Hayne",
    "Sneads Ferry",
    "Jacksonville",
    "Camp Lejeune",
    "Hillsborough",
    "Hurdle Mills",
    "Proctorville",
    "East Spencer",
    "Chimney Rock",
    "Newton Grove",
    "White Plains",
    "Balsam Grove",
    "Lake Toxaway",
    "Indian Trail",
    "Blowing Rock",
    "Valle Crucis",
    "Stantonsburg",
    "Hamptonville",
    "Stony Point",
    "Piney Creek",
    "Roaring Gap",
    "Minneapolis",
    "Chocowinity",
    "Mills River",
    "Weaverville",
    "Glen Alpine",
    "Jonas Ridge",
    "South Mills",
    "Salter Path",
    "Yanceyville",
    "Cerro Gordo",
    "Spring Lake",
    "Thomasville",
    "Kenansville",
    "Rocky Mount",
    "Franklinton",
    "Youngsville",
    "Cherryville",
    "High Shoals",
    "Mount Holly",
    "Fontana Dam",
    "Walstonburg",
    "Gibsonville",
    "Summerfield",
    "Buies Creek",
    "Waynesville",
    "Swanquarter",
    "Mooresville",
    "Statesville",
    "Turnersburg",
    "Union Grove",
    "Hot Springs",
    "Williamston",
    "Bakersville",
    "Spruce Pine",
    "Spring Hope",
    "Rich Square",
    "Holly Ridge",
    "Midway Park",
    "Cedar Grove",
    "Chapel Hill",
    "Rocky Point",
    "Winterville",
    "Mill Spring",
    "Cedar Falls",
    "Barnesville",
    "Red Springs",
    "Saint Pauls",
    "China Grove",
    "Forest City",
    "Union Mills",
    "Laurel Hill",
    "Misenheimer",
    "Lawsonville",
    "Sandy Ridge",
    "Walnut Cove",
    "Bryson City",
    "Morrisville",
    "Wake Forest",
    "Sugar Grove",
    "Mount Olive",
    "Black Creek",
    "Yadkinville",
    "Burlington",
    "Ansonville",
    "Lilesville",
    "Scottville",
    "Banner Elk",
    "Washington",
    "Merry Hill",
    "Bladenboro",
    "Wilmington",
    "Oak Island",
    "Ridgecrest",
    "Harrisburg",
    "Kannapolis",
    "Gloucester",
    "Providence",
    "Bear Creek",
    "Siler City",
    "Hayesville",
    "Mooresboro",
    "Fair Bluff",
    "Riegelwood",
    "Tabor City",
    "Whiteville",
    "Fort Bragg",
    "Cumberland",
    "Hope Mills",
    "Jarvisburg",
    "Kitty Hawk",
    "Mocksville",
    "Beulaville",
    "Chinquapin",
    "Battleboro",
    "Lewisville",
    "Rural Hall",
    "Walkertown",
    "Gatesville",
    "Hobbsville",
    "High Point",
    "Stokesdale",
    "Greensboro",
    "Lillington",
    "Edneyville",
    "Horse Shoe",
    "Tuckasegee",
    "Pine Level",
    "Smithfield",
    "Lincolnton",
    "Jamesville",
    "Sharpsburg",
    "Kure Beach",
    "Grantsboro",
    "Maple Hill",
    "Timberlake",
    "Bellarthur",
    "Greenville",
    "Grimesland",
    "Rockingham",
    "Stoneville",
    "Reidsville",
    "Mount Ulla",
    "Autryville",
    "Laurinburg",
    "New London",
    "Mount Airy",
    "State Road",
    "Marshville",
    "Middleburg",
    "Townsville",
    "Knightdale",
    "Rolesville",
    "Wilkesboro",
    "Jonesville",
    "Burnsville",
    "Altamahaw",
    "Haw River",
    "Saxapahaw",
    "Snow Camp",
    "Hiddenite",
    "Mc Farlan",
    "Peachland",
    "Wadesboro",
    "Fleetwood",
    "Jefferson",
    "Crossnore",
    "Montezuma",
    "White Oak",
    "Shallotte",
    "Southport",
    "Alexander",
    "Leicester",
    "Swannanoa",
    "Asheville",
    "Hildebran",
    "Morganton",
    "Patterson",
    "Williston",
    "Claremont",
    "Pittsboro",
    "Culberson",
    "Brasstown",
    "Lattimore",
    "Polkville",
    "Brunswick",
    "Chadbourn",
    "Clarendon",
    "Evergreen",
    "Hallsboro",
    "Bridgeton",
    "Cove City",
    "Vanceboro",
    "Currituck",
    "Harbinger",
    "Nags Head",
    "Lexington",
    "Southmont",
    "Cooleemee",
    "Rose Hill",
    "Albertson",
    "Rougemont",
    "Pfafftown",
    "Louisburg",
    "Cramerton",
    "Corapeake",
    "Creedmoor",
    "Hookerton",
    "Snow Hill",
    "Jamestown",
    "Oak Ridge",
    "Hollister",
    "Littleton",
    "Bunnlevel",
    "Hazelwood",
    "Flat Rock",
    "Engelhard",
    "Fairfield",
    "Cullowhee",
    "Dillsboro",
    "Glenville",
    "Four Oaks",
    "Middlesex",
    "Princeton",
    "Maysville",
    "La Grange",
    "Pink Hill",
    "Highlands",
    "Mars Hill",
    "Cornelius",
    "Paw Creek",
    "Pineville",
    "Charlotte",
    "Highfalls",
    "Pinehurst",
    "Pinebluff",
    "Nashville",
    "Whitakers",
    "Garysburg",
    "Pendleton",
    "Richlands",
    "Swansboro",
    "Stonewall",
    "Vandemere",
    "Hampstead",
    "Belvidere",
    "Farmville",
    "Randleman",
    "Lumberton",
    "Wentworth",
    "Cleveland",
    "Gold Hill",
    "Salisbury",
    "Cliffside",
    "Ellenboro",
    "Henrietta",
    "Lake Lure",
    "Salemburg",
    "Albemarle",
    "Richfield",
    "Stanfield",
    "Germanton",
    "Pine Hall",
    "Westfield",
    "Henderson",
    "Warrenton",
    "Zionville",
    "Goldsboro",
    "Pikeville",
    "Boonville",
    "East Bend",
    "Micaville",
    "Alamance",
    "Crumpler",
    "Elk Park",
    "Linville",
    "Plumtree",
    "Belhaven",
    "Pinetown",
    "Aulander",
    "Colerain",
    "Tar Heel",
    "Clarkton",
    "Longwood",
    "Calabash",
    "Winnabow",
    "Fairview",
    "Montreat",
    "Rhodhiss",
    "Atlantic",
    "Beaufort",
    "Sealevel",
    "Leasburg",
    "Goldston",
    "Fallston",
    "Lawndale",
    "Havelock",
    "New Bern",
    "Coinjock",
    "Shawboro",
    "Hatteras",
    "Rodanthe",
    "Wanchese",
    "Wallburg",
    "Magnolia",
    "Pinetops",
    "Bethania",
    "Clemmons",
    "Davidson",
    "Gastonia",
    "Whitsett",
    "Bat Cave",
    "Fletcher",
    "Zirconia",
    "Scranton",
    "Ocracoke",
    "Troutman",
    "Cashiers",
    "Whittier",
    "Broadway",
    "Deep Run",
    "Glenwood",
    "Old Fort",
    "Franklin",
    "Marshall",
    "Everetts",
    "Hamilton",
    "Oak City",
    "Matthews",
    "West End",
    "Aberdeen",
    "Carthage",
    "Lakeview",
    "Castalia",
    "Potecasi",
    "Seaboard",
    "Woodland",
    "Carrboro",
    "Alliance",
    "Arapahoe",
    "Hobucken",
    "Oriental",
    "Atkinson",
    "Hertford",
    "Falkland",
    "Fountain",
    "Columbus",
    "Asheboro",
    "Seagrove",
    "Fairmont",
    "Marietta",
    "Pembroke",
    "Woodleaf",
    "Rockwell",
    "Caroleen",
    "Spindale",
    "Roseboro",
    "Harrells",
    "Pinnacle",
    "Cherokee",
    "Sapphire",
    "Columbia",
    "Kittrell",
    "New Hill",
    "Ridgeway",
    "Creswell",
    "Plymouth",
    "Deep Gap",
    "Ferguson",
    "Mc Grady",
    "Thurmond",
    "Traphill",
    "Elm City",
    "Saratoga",
    "Polkton",
    "Creston",
    "Lansing",
    "Newland",
    "Pineola",
    "Pantego",
    "Kelford",
    "Roxobel",
    "Windsor",
    "Council",
    "Bolivia",
    "Candler",
    "Skyland",
    "Valdese",
    "Concord",
    "Midland",
    "Newport",
    "Hickory",
    "Catawba",
    "Conover",
    "Terrell",
    "Bennett",
    "Moncure",
    "Andrews",
    "Edenton",
    "Stedman",
    "Aydlett",
    "Corolla",
    "Linwood",
    "Welcome",
    "Advance",
    "Calypso",
    "Teachey",
    "Wallace",
    "Conetoe",
    "Tarboro",
    "Belmont",
    "Stanley",
    "Sunbury",
    "Bullock",
    "Clayton",
    "Roxboro",
    "Stovall",
    "Sedalia",
    "Enfield",
    "Halifax",
    "Hobgood",
    "Tillery",
    "Kipling",
    "Ahoskie",
    "Cofield",
    "Raeford",
    "Harmony",
    "Webster",
    "Comfort",
    "Trenton",
    "Cumnock",
    "Sanford",
    "Kinston",
    "Hassell",
    "Parmele",
    "Penland",
    "Robbins",
    "Cameron",
    "Red Oak",
    "Henrico",
    "Jackson",
    "Bayboro",
    "Lowland",
    "Merritt",
    "Willard",
    "Winfall",
    "Simpson",
    "Grifton",
    "Liberty",
    "Ramseur",
    "Trinity",
    "Cordova",
    "Ellerbe",
    "Hoffman",
    "Marston",
    "Parkton",
    "Rowland",
    "Shannon",
    "Madison",
    "Mayodan",
    "Spencer",
    "Clinton",
    "Garland",
    "Ivanhoe",
    "Norwood",
    "Oakboro",
    "Danbury",
    "Brevard",
    "Penrose",
    "Wingate",
    "Wendell",
    "Zebulon",
    "Raleigh",
    "Norlina",
    "Vaughan",
    "Fremont",
    "Purlear",
    "Graham",
    "Mebane",
    "Ennice",
    "Sparta",
    "Morven",
    "Aurora",
    "Edward",
    "Dublin",
    "Leland",
    "Supply",
    "Drexel",
    "Lenoir",
    "Hudson",
    "Camden",
    "Shiloh",
    "Smyrna",
    "Stella",
    "Blanch",
    "Milton",
    "Pelham",
    "Maiden",
    "Newton",
    "Bonlee",
    "Topton",
    "Marble",
    "Murphy",
    "Grover",
    "Shelby",
    "Bolton",
    "Nakina",
    "Falcon",
    "Godwin",
    "Linden",
    "Grandy",
    "Moyock",
    "Buxton",
    "Frisco",
    "Manteo",
    "Denton",
    "Faison",
    "Warsaw",
    "Bahama",
    "Durham",
    "Alexis",
    "Dallas",
    "Lowell",
    "Roduco",
    "Butner",
    "Oxford",
    "Climax",
    "Colfax",
    "Julian",
    "Weldon",
    "Angier",
    "Mamers",
    "Olivia",
    "Canton",
    "Etowah",
    "Gerton",
    "Naples",
    "Tuxedo",
    "Winton",
    "Scotts",
    "Balsam",
    "Benson",
    "Crouse",
    "Denver",
    "Marion",
    "Newell",
    "Biscoe",
    "Candor",
    "Bailey",
    "Conway",
    "Gaston",
    "Severn",
    "Hubert",
    "Efland",
    "Burgaw",
    "Currie",
    "Semora",
    "Bethel",
    "Stokes",
    "Saluda",
    "Sophia",
    "Staley",
    "Hamlet",
    "Norman",
    "Maxton",
    "Ruffin",
    "Landis",
    "Bostic",
    "Harris",
    "Turkey",
    "Gibson",
    "Wagram",
    "Locust",
    "Ararat",
    "Dobson",
    "Lowgap",
    "Siloam",
    "Almond",
    "Rosman",
    "Monroe",
    "Waxhaw",
    "Manson",
    "Garner",
    "Dudley",
    "Boomer",
    "Lucama",
    "Wilson",
    "Kelly",
    "Arden",
    "Icard",
    "Davis",
    "Stacy",
    "Bynum",
    "Tyner",
    "Warne",
    "Casar",
    "Delco",
    "Dover",
    "Ernul",
    "Barco",
    "Maple",
    "Salvo",
    "Waves",
    "Speed",
    "Gates",
    "Maury",
    "Coats",
    "Erwin",
    "Clyde",
    "Sylva",
    "Kenly",
    "Micro",
    "Selma",
    "Ether",
    "Ayden",
    "Tryon",
    "Orrum",
    "Faith",
    "Badin",
    "Toast",
    "Elkin",
    "Macon",
    "Roper",
    "Boone",
    "Vilas",
    "Ronda",
    "Elon",
    "Todd",
    "Bath",
    "Enka",
    "Gulf",
    "Earl",
    "Waco",
    "Wade",
    "Avon",
    "Bunn",
    "Eure",
    "Stem",
    "Dunn",
    "Dana",
    "Como",
    "Olin",
    "Vale",
    "Nebo",
    "Otto",
    "Star",
    "Troy",
    "Vass",
    "Lynn",
    "Eden",
    "King",
    "Apex",
    "Cary",
    "Wise",
    "Hays",
    "Sims",
    "Ash",
    "Rex",
  ],
  yV = [
    "Grand Forks Afb",
    "Sentinel Butte",
    "Saint Michael",
    "Golden Valley",
    "Saint Anthony",
    "Churchs Ferry",
    "New Rockford",
    "Grassy Butte",
    "Watford City",
    "Saint Thomas",
    "Starkweather",
    "Forest River",
    "Valley City",
    "Fort Totten",
    "Minnewaukan",
    "Willow City",
    "Powers Lake",
    "Dunn Center",
    "Grand Forks",
    "New Leipzig",
    "Cooperstown",
    "New England",
    "Turtle Lake",
    "White Earth",
    "Devils Lake",
    "Fort Ransom",
    "Abercrombie",
    "Cannon Ball",
    "South Heart",
    "Litchville",
    "Argusville",
    "Tower City",
    "West Fargo",
    "Carrington",
    "Grace City",
    "Cartwright",
    "Coleharbor",
    "Glen Ullin",
    "Petersburg",
    "Lidgerwood",
    "Saint John",
    "Fort Yates",
    "Richardton",
    "Montpelier",
    "Spiritwood",
    "Park River",
    "Burlington",
    "Donnybrook",
    "Hurdsfield",
    "Hettinger",
    "Pillsbury",
    "Wimbledon",
    "Fairfield",
    "Bottineau",
    "Casselton",
    "Davenport",
    "Wheatland",
    "Osnabrock",
    "Ellendale",
    "Fullerton",
    "Strasburg",
    "Glenfield",
    "Northwood",
    "Hannaford",
    "Pettibone",
    "Granville",
    "Karlsruhe",
    "Alexander",
    "Riverdale",
    "Underwood",
    "New Salem",
    "Christine",
    "Fairmount",
    "Hankinson",
    "Selfridge",
    "Dickinson",
    "Gladstone",
    "Jamestown",
    "Cleveland",
    "Courtenay",
    "Woodworth",
    "Ypsilanti",
    "Blanchard",
    "Galesburg",
    "Hillsboro",
    "Caledonia",
    "Fordville",
    "Minot Afb",
    "Fessenden",
    "Williston",
    "Lansford",
    "Westhope",
    "Scranton",
    "Bowbells",
    "Columbus",
    "Bismarck",
    "Driscoll",
    "Sterling",
    "Absaraka",
    "Mapleton",
    "Halliday",
    "Killdeer",
    "Marshall",
    "Sheyenne",
    "Braddock",
    "Hazelton",
    "Larimore",
    "Mekinock",
    "Reynolds",
    "Thompson",
    "Robinson",
    "Fredonia",
    "Napoleon",
    "Anamoose",
    "Voltaire",
    "Mandaree",
    "Arnegard",
    "Garrison",
    "Washburn",
    "Benedict",
    "Roseglen",
    "New Town",
    "Parshall",
    "Michigan",
    "Bathgate",
    "Cavalier",
    "Glasston",
    "Hamilton",
    "Mountain",
    "Walhalla",
    "Enderlin",
    "Glenburn",
    "Sherwood",
    "Mantador",
    "Mooreton",
    "Wahpeton",
    "Wyndmere",
    "Belcourt",
    "Dunseith",
    "Cogswell",
    "Goodrich",
    "Mcclusky",
    "Marmarth",
    "Belfield",
    "Buchanan",
    "Streeter",
    "Hansboro",
    "Rocklake",
    "Clifford",
    "Cummings",
    "Mayville",
    "Portland",
    "Edinburg",
    "Fairdale",
    "Berthold",
    "Des Lacs",
    "Chaseley",
    "Sykeston",
    "Mcgregor",
    "Wildrose",
    "Kathryn",
    "Sanborn",
    "Maddock",
    "Warwick",
    "Maxbass",
    "Newburg",
    "Flaxton",
    "Lignite",
    "Baldwin",
    "Menoken",
    "Buffalo",
    "Gardner",
    "Grandin",
    "Harwood",
    "Kindred",
    "Leonard",
    "Langdon",
    "Ambrose",
    "Fortuna",
    "Manning",
    "Kintyre",
    "Mchenry",
    "Arvilla",
    "Emerado",
    "Inkster",
    "Niagara",
    "Raleigh",
    "Shields",
    "Binford",
    "Edgeley",
    "Lamoure",
    "Balfour",
    "Deering",
    "Norwich",
    "Zeeland",
    "Stanton",
    "Flasher",
    "Palermo",
    "Stanley",
    "Mcville",
    "Crystal",
    "Drayton",
    "Pembina",
    "Wolford",
    "Brocket",
    "Hampden",
    "Webster",
    "Sheldon",
    "Walcott",
    "Rolette",
    "Gwinner",
    "Rutland",
    "Denhoff",
    "Luverne",
    "Pingree",
    "Egeland",
    "Grafton",
    "Douglas",
    "Kenmare",
    "Grenora",
    "Trenton",
    "Reeder",
    "Fingal",
    "Oriska",
    "Rogers",
    "Esmond",
    "Oberon",
    "Medora",
    "Antler",
    "Kramer",
    "Souris",
    "Bowman",
    "Portal",
    "Moffit",
    "Amenia",
    "Arthur",
    "Horace",
    "Hunter",
    "Hannah",
    "Milton",
    "Calvin",
    "Munich",
    "Nekoma",
    "Sarles",
    "Forbes",
    "Crosby",
    "Noonan",
    "Linton",
    "Manvel",
    "Carson",
    "Jessie",
    "Sutton",
    "Regent",
    "Dawson",
    "Steele",
    "Tappen",
    "Tuttle",
    "Berlin",
    "Dickey",
    "Marion",
    "Verona",
    "Gackle",
    "Bantry",
    "Towner",
    "Ashley",
    "Wishek",
    "Mercer",
    "Wilton",
    "Beulah",
    "Almont",
    "Mandan",
    "Hebron",
    "Dahlen",
    "Lakota",
    "Center",
    "Hensel",
    "Edmore",
    "Lawton",
    "Lisbon",
    "Mcleod",
    "Mohall",
    "Tolley",
    "Barney",
    "Colfax",
    "Cayuga",
    "Forman",
    "Havana",
    "Milnor",
    "Stirum",
    "Martin",
    "Amidon",
    "Taylor",
    "Finley",
    "Sharon",
    "Kensal",
    "Medina",
    "Bisbee",
    "Buxton",
    "Hatton",
    "Hoople",
    "Lankin",
    "Carpio",
    "Makoti",
    "Sawyer",
    "Surrey",
    "Harvey",
    "Bowdon",
    "Cathay",
    "Epping",
    "Dazey",
    "Leeds",
    "Tokio",
    "Rhame",
    "Regan",
    "Fargo",
    "Maida",
    "Wales",
    "Alsen",
    "Oakes",
    "Dodge",
    "Hague",
    "Beach",
    "Golva",
    "Gilby",
    "Elgin",
    "Drake",
    "Upham",
    "Velva",
    "Keene",
    "Butte",
    "Hazen",
    "Plaza",
    "Aneta",
    "Pekin",
    "Tolna",
    "Neche",
    "Balta",
    "Rugby",
    "Crary",
    "Agate",
    "Rolla",
    "Solen",
    "Lefor",
    "Cando",
    "Perth",
    "Adams",
    "Minto",
    "Pisek",
    "Minot",
    "Ryder",
    "Alamo",
    "Tioga",
    "Nome",
    "Knox",
    "York",
    "Wing",
    "Erie",
    "Page",
    "Mott",
    "Kulm",
    "Lehr",
    "Ruso",
    "Ross",
    "Penn",
    "Mylo",
    "Hope",
    "Zahl",
    "Ayr",
    "Jud",
    "Max",
    "Zap",
    "Ray",
  ],
  fV = JSON.parse(
    '["Washington Court House","South Bloomingville","Lakeside Marblehead","Mount Saint Joseph","Ridgeville Corners","Saint Clairsville","Broadview Heights","Isle Saint George","Unionville Center","North Kingsville","South Charleston","North Georgetown","Canal Winchester","East Springfield","Saint Louisville","Columbia Station","North Ridgeville","Westfield Center","New Straitsville","Commercial Point","Franklin Furnace","North Bloomfield","New Philadelphia","Magnetic Springs","North Lewisburg","Washingtonville","Sulphur Springs","Mount Blanchard","North Fairfield","New Springfield","New Bloomington","West Alexandria","West Manchester","West Portsmouth","West Farmington","Port Washington","North Baltimore","Mc Cutchenville","New Marshfield","Powhatan Point","College Corner","Christiansburg","East Liverpool","East Palestine","East Rochester","West Lafayette","New Washington","North Robinson","North Royalton","Kelleys Island","Berlin Heights","Jeffersonville","Yellow Springs","Old Washington","Liberty Center","Sinking Spring","Mingo Junction","Mount Pleasant","Summit Station","Russells Point","West Mansfield","Sheffield Lake","Mount Sterling","West Jefferson","New Middletown","Tuppers Plains","Mcconnelsville","Chandlersville","East Fultonham","Columbus Grove","Scioto Furnace","Jackson Center","Port Jefferson","North Lawrence","Cuyahoga Falls","Milford Center","Pleasant Plain","Little Hocking","Fredericksburg","West Millgrove","Upper Sandusky","East Cleveland","Williamsfield","New Hampshire","New Knoxville","Martins Ferry","Mechanicstown","Sherrodsville","Mechanicsburg","North Hampton","New Waterford","Chagrin Falls","North Olmsted","Maple Heights","Olmsted Falls","Pleasantville","Milledgeville","East Claridon","Spring Valley","Pleasant City","Camp Dennison","Mount Victory","Union Furnace","Hammondsville","Fredericktown","Mount Liberty","Bellefontaine","Berlin Center","North Jackson","Chippewa Lake","Sharon Center","Burkettsville","Fort Recovery","Pleasant Hill","White Cottage","Junction City","New Lexington","Garrettsville","Fort Jennings","Richmond Dale","South Webster","Green Springs","Kettlersville","Mineral Ridge","Newcomerstown","South Lebanon","New Matamoras","Marshallville","Bowling Green","Milton Center","Spencerville","Jeromesville","Jacksonville","Fayetteville","Russellville","Collinsville","West Chester","Donnelsville","New Carlisle","South Vienna","Tremont City","New Richmond","Newtonsville","Williamsburg","Martinsville","Port William","Independence","Strongsville","Lewis Center","Pickerington","Bloomingburg","Reynoldsburg","Terrace Park","Benton Ridge","Williamstown","Walnut Creek","Bloomingdale","Steubenville","Tiltonsville","Mount Vernon","Proctorville","Buckeye Lake","Kirkersville","Belle Center","East Liberty","Rushsylvania","West Liberty","North Benton","Ludlow Falls","Farmersville","Phillipsburg","Chesterville","Mount Gilead","Duncan Falls","Belle Valley","Port Clinton","Williamsport","Vaughnsville","Wheelersburg","Fort Loramie","Canal Fulton","Middlebranch","Robertsville","North Canton","Munroe Falls","Bristolville","Leavittsburg","Newton Falls","Gnadenhutten","Mineral City","Uhrichsville","Middle Point","New Plymouth","Grand Rapids","Bentonville","Cherry Fork","Loudonville","Perrysville","Hockingport","Nelsonville","Saint Johns","Saint Marys","Waynesfield","Barnesville","Hamersville","Higginsport","Saint Paris","Springfield","Blanchester","Clarksville","Salineville","Summitville","Bakersville","Gates Mills","Rocky River","Bay Village","Brecksville","Hollansburg","New Madison","Mark Center","Westerville","Millersport","Stoutsville","Sugar Grove","Pettisville","Chesterland","Middlefield","Bowersville","Wilberforce","Quaker City","Senecaville","Harrisville","New Bavaria","Carbon Hill","Haydenville","Laurelville","Murray City","Big Prairie","Holmesville","Millersburg","Monroeville","Bladensburg","Martinsburg","Grand River","Painesville","South Point","Willow Wood","Jacksontown","Brownsville","Harbor View","South Solon","Lake Milton","Lowellville","Valley City","Long Bottom","Maria Stein","Saint Henry","West Milton","Beallsville","New Lebanon","Chesterhill","New Concord","Frazeysburg","Sarahsville","Summerfield","Dexter City","Clay Center","Middle Bass","Rocky Ridge","Grover Hill","Crooksville","Mount Perry","Circleville","New Holland","Streetsboro","West Elkton","Continental","Miller City","Chillicothe","Bourneville","Londonderry","South Salem","East Sparta","East Canton","Mesopotamia","Orangeville","Southington","Stone Creek","Wilkesville","Harveysburg","Kings Mills","Waynesville","Lower Salem","Wingett Run","Apple Creek","Mount Eaton","Pemberville","Stony Ridge","Manchester","Blue Creek","West Union","Winchester","Hayesville","Austinburg","Kingsville","Rock Creek","Unionville","Carbondale","Sharpsburg","The Plains","New Bremen","Wapakoneta","Morristown","Bridgeport","Jacobsburg","Georgetown","Mount Orab","Cincinnati","Middletown","Seven Mile","Somerville","Carrollton","Miamiville","Owensville","New Vienna","Wilmington","Wellsville","Columbiana","Hanoverton","Kensington","West Point","Blissfield","Conesville","Plainfield","Walhonding","Gettysburg","Greenville","New Weston","North Star","Versailles","Union City","Hicksville","Birmingham","Lithopolis","New Albany","Grove City","Harrisburg","Lockbourne","Crown City","Gallipolis","Rio Grande","Cedarville","Cumberland","Salesville","North Bend","Mount Cory","New Athens","New Rumley","Deersville","Tippecanoe","Greenfield","Mowrystown","Rockbridge","Mount Hope","New London","Dillonvale","Piney Fork","Smithfield","Brinkhaven","Centerburg","Willoughby","Chesapeake","Kitts Hill","Alexandria","Huntsville","Middleburg","Zanesfield","Wellington","Waterville","Whitehouse","Plain City","North Lima","Petersburg","Youngstown","Green Camp","Homerville","Litchfield","Langsville","Middleport","Reedsville","Lewisville","Woodsfield","Clarington","Graysville","Brookville","Germantown","Miamisburg","Cardington","Zanesville","Adamsville","Oak Harbor","Put In Bay","Thornville","Brady Lake","Cloverdale","Clarksburg","Bainbridge","Hallsville","Gibsonburg","Friendship","Lucasville","Mc Dermott","Portsmouth","Bettsville","Bloomville","New Riegel","Beach City","Louisville","Waynesburg","Northfield","Brookfield","Sandyville","Stillwater","Sugarcreek","Tuscarawas","Marysville","Maineville","Springboro","Doylestown","West Salem","Smithville","Montpelier","West Unity","Jerry City","Perrysburg","Beaverdam","Lafayette","Ashtabula","Jefferson","Amesville","Coolville","Guysville","Millfield","Uniopolis","Alledonia","Fairpoint","Shadyside","Fairfield","Leesville","Westville","Woodstock","Reesville","Homeworth","Coshocton","Chatfield","Crestline","Cleveland","Beachwood","Brookpark","Palestine","Yorkshire","Evansport","Kilbourne","Ostrander","Vermilion","Baltimore","Lancaster","Rushville","Blacklick","Groveport","Huntsburg","Montville","Bellbrook","Jamestown","Byesville","Cambridge","Kimbolton","Lore City","Miamitown","Arlington","Van Buren","Roundhead","Mc Guffey","Bowerston","Hillsboro","Lynchburg","Lakeville","Nashville","Winesburg","Greenwich","New Haven","Amsterdam","Brilliant","Yorkville","Wickliffe","Rock Camp","Granville","Johnstown","Pataskala","Lewistown","Avon Lake","Ellsworth","Greenford","Struthers","Caledonia","Brunswick","Wadsworth","Chickasaw","Coldwater","Montezuma","Covington","Tipp City","Jerusalem","Englewood","Stockport","Blue Rock","Fultonham","Roseville","Williston","Cynthiana","Stockdale","Wakefield","Rootstown","Deerfield","Lewisburg","New Paris","Ottoville","Bellville","Mansfield","Frankfort","Woodville","Haverhill","Flat Rock","Maplewood","Pemberton","Greentown","Hartville","Limaville","Massillon","Macedonia","Twinsburg","Barberton","Peninsula","Tallmadge","Richfield","Uniontown","Mc Donald","Somerdale","Strasburg","Ohio City","Venedocia","Willshire","Mc Arthur","Macksburg","Waterford","Watertown","Alvordton","Blakeslee","Dunbridge","Risingsun","Walbridge","Hoytville","Tontogany","Northwood","Bloomdale","Bluffton","Savannah","Sullivan","Conneaut","Pierpont","Chauncey","Glouster","Buckland","Bethesda","Bellaire","Colerain","Lafferty","Flushing","Piedmont","Holloway","Aberdeen","Feesburg","Sardinia","Hamilton","Overpeck","Rosewood","Felicity","Loveland","Leetonia","Lakewood","Westlake","Pitsburg","Rossburg","Defiance","Sherwood","Delaware","Castalia","Sandusky","Thurston","Hilliard","Columbus","Galloway","Archbold","Metamora","Cheshire","Thompson","Fairborn","Fairview","Addyston","Harrison","Ridgeway","Freeport","Hopedale","Mc Clure","Napoleon","Highland","Leesburg","Glenmont","Killbuck","Bellevue","Oak Hill","Wellston","Bergholz","Irondale","Richmond","Stratton","Wolf Run","Danville","Eastlake","Scottown","Waterloo","De Graff","Lakeview","Lagrange","Monclova","Neapolis","Sylvania","Campbell","Canfield","Damascus","Prospect","Hinckley","Portland","Syracuse","Rockford","Bradford","Casstown","Fletcher","Stafford","Hannibal","Vandalia","Hopewell","Nashport","Caldwell","Graytown","Haviland","Paulding","Glenford","Moxahala","Somerset","Ashville","Randolph","Eldorado","Glandorf","Plymouth","Kingston","Fostoria","Old Fort","Republic","Alliance","Brewster","Magnolia","Lakemore","Mogadore","Fairlawn","Burghill","Cortland","Farmdale","Hartford","Dennison","Broadway","Richwood","Van Wert","Franklin","Oregonia","Bartlett","Coal Run","Marietta","Sterling","Orrville","Edgerton","Millbury","Rossford","Harpster","Sycamore","Peebles","Delphos","Ashland","Andover","Windsor","Buchtel","Stewart","Trimble","Minster","Belmont","Glencoe","Lansing","Maynard","Warnock","Bannock","Decatur","Shandon","Trenton","Augusta","Dellroy","Malvern","Catawba","Batavia","Milford","Neville","Midland","Bucyrus","Bedford","Ansonia","Arcanum","Sunbury","Carroll","Fayette","Swanton","Wauseon","Bidwell","Patriot","Thurman","Chardon","Newbury","Novelty","Parkman","Clifton","Buffalo","Derwent","Kipling","Arcadia","Findlay","Mc Comb","Dunkirk","Deshler","Grelton","Holgate","Malinta","Okolona","Collins","Norwalk","Willard","Wakeman","Coalton","Jackson","Rayland","Toronto","Gambier","Madison","Ironton","Gratiot","Amherst","Grafton","Oberlin","Holland","Sedalia","Sebring","Seville","Spencer","Chester","Pomeroy","Rutland","Conover","Potsdam","Cameron","Clayton","Marengo","Norwich","Dresden","Trinway","Curtice","Lacarne","Antwerp","Melrose","Oakwood","Corning","Shawnee","Tarlton","Piketon","Waverly","Atwater","Ravenna","Wayland","Windham","Diamond","Belmore","Leipsic","Pandora","Ontario","Adelphi","Burgoon","Fremont","Lindsey","Vickery","Minford","Melmore","Botkins","Houston","Minerva","Navarre","Clinton","Hubbard","Kinsman","Bolivar","Midvale","Raymond","Zaleski","Lebanon","Beverly","Fleming","Newport","Vincent","Whipple","Burbank","Creston","Rittman","Wooster","Pioneer","Stryker","Bradner","Lemoyne","Portage","Rudolph","Haskins","Wharton","Seaman","Harrod","Nankin","Dorset","Geneva","Orwell","Athens","Albany","Barton","Blaine","Ripley","Monroe","Okeana","Oxford","Urbana","Medway","Amelia","Bethel","Goshen","Moscow","Sabina","Elkton","Lisbon","Negley","Rogers","Winona","Fresno","Warsaw","Galion","Oceola","Euclid","Osgood","Farmer","Jewell","Ashley","Galena","Powell","Radnor","Amanda","Bremen","Dublin","Vinton","Burton","Dayton","Cleves","Hooven","Jenera","Rawson","Vanlue","Kenton","Forest","Jewett","Colton","Hamler","Berlin","Empire","Howard","Mentor","Croton","Hebron","Newark","Quincy","Elyria","Kipton","Lorain","Berkey","Maumee","Toledo","Oregon","London","Beloit","Marion","La Rue","Martel","Morral","Medina","Racine","Celina","Mendon","Laings","Malaga","Sardis","Edison","Fulton","Iberia","Shauck","Sparta","Elmore","Gypsum","Martin","Orient","Beaver","Jasper","Latham","Aurora","Mantua","Camden","Gratis","Verona","Dupont","Kalida","Ottawa","Butler","Shelby","Shiloh","Helena","Rarden","Alvada","Attica","Bascom","Kansas","Tiffin","Russia","Sidney","Maximo","Wilmot","Canton","Hudson","Fowler","Girard","Masury","Vienna","Warren","Baltic","Dundee","Convoy","Creola","Hamden","Morrow","Barlow","Belpre","Cutler","Lowell","Dalton","Kidron","Shreve","Kunkle","Cygnet","Luckey","Custar","Weston","Nevada","Gomer","Cairo","Shade","Neffs","Cable","Mingo","Chilo","Salem","Keene","Berea","Solon","Huron","Milan","Amlin","Brice","Delta","Lyons","Alpha","Xenia","Alger","Cadiz","Logan","Charm","Adena","Perry","Pedro","Homer","Heath","Utica","Waldo","Laura","Piqua","Malta","Philo","Genoa","Cecil","Latty","Payne","Derby","Hiram","Eaton","Lucas","Clyde","Otway","Stout","Paris","Green","Akron","Niles","Dover","Irwin","Elgin","Scott","Mason","Bryan","Wayne","Carey","Kirby","Lynx","Lima","Nova","Polk","Rome","Ross","Enon","Cuba","Tiro","Kerr","Dola","Scio","Etna","Avon","Lodi","Troy","Kent","Anna","Bath","Stow","Zoar","Wren","Reno","Edon","Ney","Ada","Ava","Ray"]'
  ),
  vV = [
    "Oklahoma City",
    "Medicine Park",
    "Mountain View",
    "Mountain Park",
    "Webbers Falls",
    "S Coffeyville",
    "Ratliff City",
    "Spencerville",
    "Pauls Valley",
    "Rush Springs",
    "Thackerville",
    "Rentiesville",
    "Cleo Springs",
    "Locust Grove",
    "Council Hill",
    "Broken Arrow",
    "Collinsville",
    "Sand Springs",
    "Bartlesville",
    "Fort Towson",
    "Chattanooga",
    "Weatherford",
    "Custer City",
    "Elmore City",
    "Holdenville",
    "Connerville",
    "Shady Point",
    "Burneyville",
    "Wright City",
    "Fort Gibson",
    "Nicoma Park",
    "North Miami",
    "Haileyville",
    "Saint Louis",
    "Marble City",
    "Fort Supply",
    "Burlington",
    "Stringtown",
    "Greenfield",
    "Bennington",
    "Cartwright",
    "Union City",
    "Gene Autry",
    "Lone Grove",
    "Boise City",
    "Centrahoma",
    "Bluejacket",
    "Kellyville",
    "Manchester",
    "Pond Creek",
    "Deer Creek",
    "Whitefield",
    "Mannsville",
    "Tishomingo",
    "Mill Creek",
    "Ponca City",
    "Kingfisher",
    "Whitesboro",
    "Washington",
    "Broken Bow",
    "Smithville",
    "Wainwright",
    "Stillwater",
    "Hartshorne",
    "Sweetwater",
    "Countyline",
    "Grandfield",
    "Burns Flat",
    "Westville",
    "Hitchcock",
    "Fort Cobb",
    "Gracemont",
    "Park Hill",
    "Tahlequah",
    "Lexington",
    "Fort Sill",
    "Indiahoma",
    "Big Cabin",
    "Drumright",
    "Twin Oaks",
    "Covington",
    "Hillsdale",
    "Maysville",
    "Wynnewood",
    "Stratford",
    "Chickasha",
    "Mccurtain",
    "Altus Afb",
    "Addington",
    "Wapanucka",
    "Blackwell",
    "Hennessey",
    "Roosevelt",
    "Lone Wolf",
    "Wilburton",
    "Davenport",
    "Overbrook",
    "Blanchard",
    "Newcastle",
    "Eagletown",
    "Millerton",
    "Dougherty",
    "Wheatland",
    "Henryetta",
    "Barnsdall",
    "Wyandotte",
    "Cleveland",
    "Indianola",
    "Mcalester",
    "Pittsburg",
    "Wardville",
    "Fittstown",
    "Stonewall",
    "Earlsboro",
    "Tuskahoma",
    "Claremore",
    "Frederick",
    "Hollister",
    "Dill City",
    "Mooreland",
    "Stilwell",
    "Cherokee",
    "Elk City",
    "Longdale",
    "Southard",
    "Bokchito",
    "Anadarko",
    "Carnegie",
    "Piedmont",
    "Healdton",
    "Springer",
    "Coalgate",
    "Fletcher",
    "Geronimo",
    "Sterling",
    "Randlett",
    "Mannford",
    "Shamrock",
    "Shattuck",
    "Drummond",
    "Fairmont",
    "Waukomis",
    "Hennepin",
    "Ninnekah",
    "Pocasset",
    "Eldorado",
    "Headrick",
    "Ringling",
    "Hastings",
    "Kaw City",
    "Talihina",
    "Fanshawe",
    "Heavener",
    "Chandler",
    "Wellston",
    "Crescent",
    "Langston",
    "Marshall",
    "Meridian",
    "Marietta",
    "Battiest",
    "Valliant",
    "Checotah",
    "Hitchita",
    "Fairview",
    "Isabella",
    "Ringwood",
    "Kingston",
    "Chouteau",
    "Spavinaw",
    "Muskogee",
    "Morrison",
    "Billings",
    "Red Rock",
    "Delaware",
    "Weleetka",
    "Okmulgee",
    "Schulter",
    "Pawhuska",
    "Skiatook",
    "Commerce",
    "Fairland",
    "Jennings",
    "Canadian",
    "Alderson",
    "Fitzhugh",
    "Tecumseh",
    "Cheyenne",
    "Crawford",
    "Seminole",
    "Cromwell",
    "Sallisaw",
    "Comanche",
    "Goodwell",
    "Hardesty",
    "Davidson",
    "Loveland",
    "Glenpool",
    "Oakhurst",
    "Ochelata",
    "Sentinel",
    "Woodward",
    "Proctor",
    "Amorita",
    "Watonga",
    "Achille",
    "Colbert",
    "Hendrix",
    "Kenefic",
    "Platter",
    "Lookeba",
    "Calumet",
    "El Reno",
    "Mustang",
    "Ardmore",
    "Cookson",
    "Hulbert",
    "Welling",
    "Boswell",
    "Clarita",
    "Walters",
    "Bristow",
    "Sapulpa",
    "Clinton",
    "Arapaho",
    "Colcord",
    "Oakwood",
    "Seiling",
    "Camargo",
    "Carrier",
    "Douglas",
    "Kremlin",
    "Lindsay",
    "Bradley",
    "Medford",
    "Granite",
    "Buffalo",
    "Laverne",
    "Rosston",
    "Stigler",
    "Lequire",
    "Wetumka",
    "Olustee",
    "Waurika",
    "Coleman",
    "Milburn",
    "Bromide",
    "Newkirk",
    "Tonkawa",
    "Cashion",
    "Okarche",
    "Red Oak",
    "Honobia",
    "Bokoshe",
    "Cameron",
    "Leflore",
    "Guthrie",
    "Mulhall",
    "Orlando",
    "Purcell",
    "Haworth",
    "Pickens",
    "Ringold",
    "Eufaula",
    "Stidham",
    "Chester",
    "Lebanon",
    "Ketchum",
    "Langley",
    "Sulphur",
    "Boynton",
    "Haskell",
    "Marland",
    "Lenapah",
    "Arcadia",
    "Bethany",
    "Choctaw",
    "Spencer",
    "Newalla",
    "Preston",
    "Burbank",
    "Fairfax",
    "Shidler",
    "Hallett",
    "Maramec",
    "Terlton",
    "Ralston",
    "Cushing",
    "Glencoe",
    "Perkins",
    "Crowder",
    "Blocker",
    "Quinton",
    "Savanna",
    "Francis",
    "Shawnee",
    "Wanette",
    "Antlers",
    "Clayton",
    "Nashoba",
    "Catoosa",
    "Chelsea",
    "Oologah",
    "Bowlegs",
    "Sasakwa",
    "Moffett",
    "Muldrow",
    "Texhoma",
    "Manitou",
    "Leonard",
    "Redbird",
    "Wagoner",
    "Cordell",
    "Hopeton",
    "Freedom",
    "Waynoka",
    "Carmen",
    "Goltry",
    "Helena",
    "Beaver",
    "Forgan",
    "Turpin",
    "Carter",
    "Texola",
    "Canton",
    "Okeene",
    "Durant",
    "Albany",
    "Calera",
    "Albert",
    "Apache",
    "Binger",
    "Cement",
    "Hinton",
    "Concho",
    "Graham",
    "Wilson",
    "Tatums",
    "Moodys",
    "Sawyer",
    "Kenton",
    "Norman",
    "Lehigh",
    "Tupelo",
    "Lawton",
    "Temple",
    "Vinita",
    "Kiefer",
    "Milfay",
    "Mounds",
    "Oilton",
    "Butler",
    "Thomas",
    "Kansas",
    "Leedey",
    "Putnam",
    "Taloga",
    "Arnett",
    "Garber",
    "Lahoma",
    "Hunter",
    "Tuttle",
    "Verden",
    "Wakita",
    "Lamont",
    "Mangum",
    "Willow",
    "Hollis",
    "Vinson",
    "Calvin",
    "Stuart",
    "Atwood",
    "Dustin",
    "Martha",
    "Terral",
    "Braman",
    "Nardin",
    "Gotebo",
    "Snyder",
    "Hobart",
    "Panola",
    "Arkoma",
    "Pocola",
    "Hodgen",
    "Monroe",
    "Panama",
    "Poteau",
    "Wister",
    "Stroud",
    "Carney",
    "Meeker",
    "Prague",
    "Sparks",
    "Dibble",
    "Bethel",
    "Garvin",
    "Golden",
    "Idabel",
    "Watson",
    "Madill",
    "Disney",
    "Salina",
    "Strang",
    "Braggs",
    "Oktaha",
    "Warner",
    "Lucien",
    "Nowata",
    "Castle",
    "Okemah",
    "Edmond",
    "Harrah",
    "Luther",
    "Morris",
    "Hominy",
    "Wynona",
    "Cardin",
    "Picher",
    "Quapaw",
    "Pawnee",
    "Ripley",
    "Blanco",
    "Mcloud",
    "Macomb",
    "Albion",
    "Finley",
    "Moyers",
    "Rattan",
    "Durham",
    "Hammon",
    "Reydon",
    "Talala",
    "Konawa",
    "Wewoka",
    "Roland",
    "Marlow",
    "Foster",
    "Duncan",
    "Guymon",
    "Hooker",
    "Tyrone",
    "Tipton",
    "Owasso",
    "Sperry",
    "Coweta",
    "Porter",
    "Ramona",
    "Colony",
    "Bessie",
    "Canute",
    "Dacoma",
    "Mutual",
    "Sharon",
    "Bunch",
    "Watts",
    "Aline",
    "Atoka",
    "Caney",
    "Daisy",
    "Balko",
    "Erick",
    "Sayre",
    "Geary",
    "Caddo",
    "Cyril",
    "Eakly",
    "Hydro",
    "Yukon",
    "Tussy",
    "Peggs",
    "Grant",
    "Soper",
    "Swink",
    "Keyes",
    "Noble",
    "Cache",
    "Elgin",
    "Faxon",
    "Meers",
    "Devol",
    "Welch",
    "Depew",
    "Slick",
    "Tulsa",
    "Eucha",
    "Grove",
    "Fargo",
    "Bison",
    "Paoli",
    "Amber",
    "Minco",
    "Gould",
    "Kinta",
    "Keota",
    "Lamar",
    "Altus",
    "Blair",
    "Elmer",
    "Oscar",
    "Ravia",
    "Dover",
    "Loyal",
    "Omega",
    "Gowen",
    "Spiro",
    "Tryon",
    "Coyle",
    "Wayne",
    "Byars",
    "Hanna",
    "Adair",
    "Pryor",
    "Davis",
    "Porum",
    "Perry",
    "Boley",
    "Paden",
    "Jones",
    "Beggs",
    "Dewar",
    "Avant",
    "Osage",
    "Afton",
    "Miami",
    "Kiowa",
    "Krebs",
    "Allen",
    "Asher",
    "Foyil",
    "Inola",
    "Velma",
    "Adams",
    "Bixby",
    "Jenks",
    "Copan",
    "Dewey",
    "Rocky",
    "Lane",
    "Gate",
    "Mead",
    "Kemp",
    "Hugo",
    "Felt",
    "Oaks",
    "Vici",
    "Gage",
    "Enid",
    "Alex",
    "Nash",
    "Hoyt",
    "Duke",
    "Ryan",
    "Howe",
    "Muse",
    "Agra",
    "Leon",
    "Rufe",
    "Ames",
    "Meno",
    "Rose",
    "Taft",
    "Wann",
    "Prue",
    "Yale",
    "Roff",
    "Maud",
    "Snow",
    "Gore",
    "Gans",
    "Vian",
    "Loco",
    "Okay",
    "Vera",
    "Corn",
    "Foss",
    "Alva",
    "Jet",
    "Fox",
    "Jay",
    "Fay",
    "May",
    "Ada",
  ],
  CV = [
    "Mount Hood Parkdale",
    "Christmas Valley",
    "Milton Freewater",
    "Government Camp",
    "New Pine Creek",
    "Gleneden Beach",
    "Crawfordsville",
    "Saint Benedict",
    "Rockaway Beach",
    "Tolovana Park",
    "Columbia City",
    "Cascade Locks",
    "Central Point",
    "Cave Junction",
    "Klamath Falls",
    "Sprague River",
    "Cottage Grove",
    "Junction City",
    "Pleasant Hill",
    "Jordan Valley",
    "Rhododendron",
    "Cannon Beach",
    "Saint Helens",
    "Myrtle Point",
    "Powell Butte",
    "Camas Valley",
    "Idleyld Park",
    "Myrtle Creek",
    "Mount Vernon",
    "Prairie City",
    "Jacksonville",
    "Camp Sherman",
    "Warm Springs",
    "Fort Klamath",
    "Lincoln City",
    "Scotts Mills",
    "Happy Valley",
    "Independence",
    "Grass Valley",
    "Pacific City",
    "North Powder",
    "Forest Grove",
    "North Plains",
    "Beavercreek",
    "Eagle Creek",
    "Lake Oswego",
    "Oregon City",
    "Wilsonville",
    "Deer Island",
    "Port Orford",
    "Canyonville",
    "Canyon City",
    "Butte Falls",
    "Eagle Point",
    "Rogue River",
    "Grants Pass",
    "Wilderville",
    "Crater Lake",
    "Silver Lake",
    "Summer Lake",
    "Springfield",
    "Walterville",
    "South Beach",
    "Brownsville",
    "Mount Angel",
    "Bridal Veil",
    "Grand Ronde",
    "Summerville",
    "Tygh Valley",
    "Gales Creek",
    "Mcminnville",
    "Baker City",
    "Bridgeport",
    "Huntington",
    "Brightwood",
    "Marylhurst",
    "Clatskanie",
    "North Bend",
    "Prineville",
    "Gold Beach",
    "Wedderburn",
    "Terrebonne",
    "Days Creek",
    "Scottsburg",
    "Winchester",
    "Long Creek",
    "Frenchglen",
    "Hood River",
    "White City",
    "Shady Cove",
    "Wolf Creek",
    "Blue River",
    "Fall Creek",
    "Otter Rock",
    "Sweet Home",
    "Harrisburg",
    "Saint Paul",
    "Falls City",
    "Cloverdale",
    "Pilot Rock",
    "Enterprise",
    "The Dalles",
    "Corvallis",
    "Philomath",
    "Clackamas",
    "Gladstone",
    "West Linn",
    "Arch Cape",
    "Warrenton",
    "Scappoose",
    "Broadbent",
    "Brookings",
    "Reedsport",
    "Sutherlin",
    "Arlington",
    "Princeton",
    "Gold Hill",
    "Chiloquin",
    "Gilchrist",
    "Fort Rock",
    "Swisshome",
    "Depoe Bay",
    "Eddyville",
    "Seal Rock",
    "Tidewater",
    "Mill City",
    "Riverside",
    "Aumsville",
    "Jefferson",
    "Silverton",
    "Sublimity",
    "Lexington",
    "Troutdale",
    "Rickreall",
    "Garibaldi",
    "Manzanita",
    "Oceanside",
    "Tillamook",
    "Pendleton",
    "Hermiston",
    "Stanfield",
    "La Grande",
    "Beaverton",
    "Cornelius",
    "Hillsboro",
    "Lafayette",
    "Willamina",
    "Hereford",
    "Richland",
    "Blodgett",
    "Estacada",
    "Damascus",
    "Portland",
    "Vernonia",
    "Allegany",
    "Coos Bay",
    "Coquille",
    "Lakeside",
    "Langlois",
    "Brothers",
    "Gardiner",
    "Glendale",
    "Roseburg",
    "Yoncalla",
    "Dayville",
    "John Day",
    "Kimberly",
    "Monument",
    "Prospect",
    "Williams",
    "Crescent",
    "Lakeview",
    "Alvadore",
    "Cheshire",
    "Creswell",
    "Deadwood",
    "Florence",
    "Mapleton",
    "Oakridge",
    "Westlake",
    "Waldport",
    "Cascadia",
    "Crabtree",
    "Ironside",
    "Jamieson",
    "Westfall",
    "Woodburn",
    "Boardman",
    "Fairview",
    "Monmouth",
    "Bay City",
    "Neskowin",
    "Umatilla",
    "Antelope",
    "Tualatin",
    "Sherwood",
    "Mitchell",
    "Sheridan",
    "Halfway",
    "Sumpter",
    "Molalla",
    "Welches",
    "Astoria",
    "Hammond",
    "Seaside",
    "Rainier",
    "Paulina",
    "La Pine",
    "Redmond",
    "Sisters",
    "Dillard",
    "Oakland",
    "Tenmile",
    "Winston",
    "Mikkalo",
    "Diamond",
    "Drewsey",
    "Medford",
    "Ashland",
    "Phoenix",
    "Ashwood",
    "O Brien",
    "Bonanza",
    "Merrill",
    "Midland",
    "Chemult",
    "Paisley",
    "Blachly",
    "Marcola",
    "Westfir",
    "Logsden",
    "Newport",
    "Yachats",
    "Lebanon",
    "Tangent",
    "Juntura",
    "Ontario",
    "Gervais",
    "Hubbard",
    "Detroit",
    "Stayton",
    "Heppner",
    "Irrigon",
    "Corbett",
    "Gresham",
    "Nehalem",
    "Netarts",
    "Wheeler",
    "Meacham",
    "Lostine",
    "Wallowa",
    "Shaniko",
    "Manning",
    "Carlton",
    "Newberg",
    "Yamhill",
    "Haines",
    "Durkee",
    "Monroe",
    "Boring",
    "Colton",
    "Mulino",
    "Warren",
    "Bandon",
    "Powers",
    "Agness",
    "Azalea",
    "Elkton",
    "Riddle",
    "Tiller",
    "Umpqua",
    "Wilbur",
    "Condon",
    "Seneca",
    "Fields",
    "Talent",
    "Culver",
    "Madras",
    "Merlin",
    "Murphy",
    "Beatty",
    "Eugene",
    "Dexter",
    "Dorena",
    "Elmira",
    "Lorane",
    "Lowell",
    "Veneta",
    "Walton",
    "Neotsu",
    "Siletz",
    "Toledo",
    "Albany",
    "Foster",
    "Halsey",
    "Adrian",
    "Brogan",
    "Harper",
    "Aurora",
    "Donald",
    "Keizer",
    "Idanha",
    "Mehama",
    "Turner",
    "Dallas",
    "Beaver",
    "Athena",
    "Weston",
    "Imbler",
    "Imnaha",
    "Joseph",
    "Maupin",
    "Mosier",
    "Buxton",
    "Gaston",
    "Timber",
    "Fossil",
    "Dayton",
    "Dundee",
    "Oxbow",
    "Unity",
    "Alsea",
    "Canby",
    "Sandy",
    "Ophir",
    "Sixes",
    "Drain",
    "Glide",
    "Bates",
    "Burns",
    "Crane",
    "Hines",
    "Riley",
    "Odell",
    "Trail",
    "Kerby",
    "Selma",
    "Dairy",
    "Malin",
    "Plush",
    "Lyons",
    "Shedd",
    "Arock",
    "Nyssa",
    "Salem",
    "Gates",
    "Rufus",
    "Wasco",
    "Adams",
    "Helix",
    "Ukiah",
    "Elgin",
    "Union",
    "Dufur",
    "Banks",
    "Spray",
    "Amity",
    "Post",
    "Bend",
    "Keno",
    "Adel",
    "Noti",
    "Vida",
    "Otis",
    "Scio",
    "Vale",
    "Ione",
    "Kent",
    "Moro",
    "Hebo",
    "Echo",
    "Cove",
    "Bly",
  ],
  kV = JSON.parse(
    '["Columbia Cross Roads","Feasterville Trevose","Pennsylvania Furnace","Pocono Lake Preserve","Mount Pleasant Mills","Washington Crossing","Mount Holly Springs","Shawnee On Delaware","Cranberry Township","Lincoln University","Delaware Water Gap","Cambridge Springs","North Springfield","Blue Ridge Summit","Kleinfeltersville","Huntingdon Valley","Middlebury Center","Westmoreland City","East Mc Keesport","North Versailles","Granville Summit","Upper Black Eddy","North Washington","Northern Cambria","Pine Grove Mills","Saint Petersburg","Glen Riddle Lima","East Springfield","West Springfield","Big Cove Tannery","Rockhill Furnace","Huntington Mills","East Stroudsburg","Fairview Village","Plymouth Meeting","New Philadelphia","Schuylkill Haven","Chandlers Valley","East Vandergrift","Porters Sideling","Natrona Heights","East Pittsburgh","New Berlinville","Shoemakersville","East Smithfield","Trumbauersville","Connoquenessing","University Park","Chester Springs","Mineral Springs","Boiling Springs","Chester Heights","Clifton Heights","Mc Clellandtown","West Leisenring","Mc Connellsburg","Mc Connellstown","Rochester Mills","Mc Alisterville","East Petersburg","Washington Boro","Newton Hamilton","Buck Hill Falls","Marshalls Creek","East Greenville","Montgomeryville","Fort Washington","King Of Prussia","Washingtonville","Harrison Valley","West Middletown","Mc Knightstown","Mc Sherrystown","West Elizabeth","New Enterprise","Roaring Spring","Line Lexington","Mechanicsville","Milford Square","Plumsteadville","Point Pleasant","Fairless Hills","Saint Benedict","Saint Boniface","Albrightsville","Beaver Meadows","Kennett Square","Fairmount City","Lecontes Mills","New Cumberland","Elizabethville","Newtown Square","Chestnut Ridge","East Millsboro","Lemont Furnace","Mount Braddock","South Mountain","Upperstrasburg","Crystal Spring","Fort Littleton","Mapleton Depot","Sprankle Mills","East Waterford","New Providence","New Wilmington","West Pittsburg","Fredericksburg","Schaefferstown","Laurys Station","Old Zionsville","Lattimer Mines","East Smethport","Jackson Center","West Middlesex","Brodheadsville","Minisink Hills","Perkiomenville","Merion Station","Gwynedd Valley","Lafayette Hill","Sassamansville","Marion Heights","Northumberland","New Bloomfield","New Germantown","Dingmans Ferry","Summit Station","Beaver Springs","Port Trevorton","West Salisbury","Herrick Center","Little Meadows","South Montrose","Roaring Branch","Hendersonville","West Alexander","Pleasant Mount","South Sterling","New Kensington","Mount Pleasant","New Alexandria","Pleasant Unity","York New Salem","East Rochester","Bradfordwoods","Mc Kees Rocks","Spring Church","South Heights","Buffalo Mills","Bechtelsville","Douglassville","Lenhartsville","Shartlesville","Hollidaysburg","Warren Center","Blooming Glen","Fountainville","Kintnersville","Slippery Rock","Mineral Point","Saint Michael","Chest Springs","Sinnamahoning","State College","Sadsburyville","Birchrunville","New Bethlehem","Strattanville","Osceola Mills","Conneaut Lake","Conneautville","Mechanicsburg","New Kingstown","Walnut Bottom","Garnet Valley","Prospect Park","Connellsville","Dickerson Run","Star Junction","Pleasant Hall","Wells Tannery","Harrisonville","Rices Landing","Warriors Mark","Three Springs","Chambersville","Glen Campbell","Marion Center","Reynoldsville","Oakland Mills","Clarks Summit","Elizabethtown","Silver Spring","Willow Street","Breinigsville","Center Valley","Schnecksville","Hunlock Creek","Cogan Station","Montoursville","Picture Rocks","Port Allegany","Sheakleyville","Pocono Summit","Schwenksville","Gilbertsville","Lehigh Valley","Martins Creek","Mc Ewensville","Coal Township","Shermans Dale","Mahanoy Plane","Hummels Wharf","Hidden Valley","New Baltimore","Lawrenceville","Pleasantville","Fredericktown","Harrison City","East Prospect","Seven Valleys","West Pittston","Arendtsville","Bendersville","York Springs","Brackenridge","Allison Park","West Mifflin","Turtle Creek","North Apollo","Rural Valley","Beaver Falls","New Brighton","Shippingport","Manns Choice","Six Mile Run","Lyon Station","Wernersville","Duncansville","East Freedom","Williamsburg","Le Raysville","Stevensville","Riegelsville","Carversville","Forest Grove","Richlandtown","Sellersville","Spinnerstown","Portersville","West Sunbury","Fallentimber","Nesquehoning","Lake Harmony","Port Matilda","Spring Mills","Cochranville","Kemblesville","Toughkenamon","West Chester","Southeastern","Phoenixville","Saint Peters","Valley Forge","Shippenville","Lickingville","Curwensville","New Millport","West Decatur","Mifflinville","Spartansburg","Shippensburg","Williamstown","Philadelphia","Concordville","Mill Village","Belle Vernon","Fayette City","Gibbon Glade","Keisterville","Markleysburg","Merrittstown","Point Marion","East Hickory","West Hickory","Chambersburg","Fannettsburg","Fayetteville","Saint Thomas","Burnt Cabins","Warfordsburg","Garards Fort","Mount Morris","New Freeport","Spruce Creek","Blairs Mills","Shirleysburg","Brush Valley","Lucernemines","West Lebanon","Punxsutawney","Thompsontown","Bird In Hand","Bowmansville","Millersville","Peach Bottom","Ellwood City","Campbelltown","Mount Gretna","Germansville","Sybertsville","Harveys Lake","Sweet Valley","Wilkes Barre","Mountain Top","Williamsport","Jersey Shore","Jersey Mills","Derrick City","Mount Jewett","Clarks Mills","Bartonsville","Mountainhome","Mount Pocono","Pocono Manor","Pocono Pines","Tannersville","Salfordville","Willow Grove","Collegeville","Conshohocken","Harleysville","Spring House","Spring Mount","Zieglerville","Danielsville","Mount Bethel","Mount Carmel","Elliottsburg","Shinglehouse","Friedensburg","Klingerstown","Mahanoy City","New Ringgold","Port Clinton","Shamokin Dam","Central City","Hooversville","Muncy Valley","Friendsville","South Gibson","New Columbia","Clintonville","Grand Valley","Spring Creek","Burgettstown","Bentleyville","Meadow Lands","Scenery Hill","Newfoundland","Preston Park","South Canaan","Jacobs Creek","Laughlintown","New Florence","Factoryville","Franklintown","Spring Grove","Stewartstown","Wrightsville","West Reading","Abbottstown","Biglerville","East Berlin","Littlestown","Bridgeville","Buena Vista","Curtisville","Rural Ridge","Bethel Park","Monroeville","Cowansville","Worthington","New Galilee","Schellsburg","Riddlesburg","Mount Aetna","Rehrersburg","Strausstown","Virginville","Martinsburg","Lumberville","Pipersville","Southampton","Morrisville","East Butler","Forestville","Harrisville","Carrolltown","Aquashicola","Bowmanstown","Summit Hill","Sandy Ridge","Centre Hall","Madisonburg","Philipsburg","Coatesville","Downingtown","Honey Brook","Parker Ford","Spring City","Turkey City","Callensburg","Curllsville","Snydersburg","Luthersburg","Frenchville","Glen Richey","Pottersdale","Beech Creek","Mc Elhattan","Mackeyville","Orangeville","Centerville","Harmonsburg","Hummelstown","Millersburg","Drexel Hill","Marcus Hook","Springfield","Ridley Park","Sharon Hill","Upper Darby","Wallingford","Chadds Ford","Brandy Camp","Dagus Mines","Johnsonburg","Saint Marys","Cranesville","Harborcreek","Brownsville","Indian Head","Normalville","Perryopolis","Waltersburg","Marienville","Fort Loudon","Greencastle","Mercersburg","Rouzerville","Shady Grove","Willow Hill","Carmichaels","Clarksville","Rogersville","James Creek","Robertsdale","Mount Union","Blairsville","Cherry Tree","Strongstown","Falls Creek","Stump Creek","Summerville","Honey Grove","Mifflintown","Gordonville","Intercourse","Landisville","New Holland","Quarryville","West Willow","Enon Valley","New Bedford","Villa Maria","Newmanstown","Coopersburg","Fogelsville","New Tripoli","Trexlertown","Milnesville","Saint Johns","Beach Haven","Shickshinny","Wapwallopen","White Haven","Hughesville","Lairdsville","Custer City","Duke Center","Hazel Hurst","Turtlepoint","Sharpsville","Allensville","Kresgeville","Pocono Lake","Saylorsburg","Stroudsburg","Bala Cynwyd","Elkins Park","North Wales","Cherryville","Northampton","Stockertown","Turbotville","Potts Grove","Millerstown","New Buffalo","Coudersport","Girardville","Minersville","Port Carbon","Saint Clair","Spring Glen","Valley View","Barnesville","Paxtonville","Penns Creek","Selinsgrove","Troxelville","Jennerstown","Shanksville","Wellersburg","Davidsville","Eagles Mere","Forest City","New Milford","Springville","Susquehanna","Sabinsville","Mifflinburg","West Milton","Cooperstown","Sugar Grove","Youngsville","Monongahela","Beallsville","Eighty Four","Finleyville","Gastonville","Richeyville","Taylorstown","Van Voorhis","West Finley","Coal Center","White Mills","Sutersville","West Newton","Bradenville","Forbes Road","Jones Mills","Murrysville","New Stanton","Vandergrift","Lake Winola","Tunkhannock","New Freedom","Thomasville","North Irwin","Gettysburg","New Oxford","Peach Glen","Bakerstown","Dravosburg","Russellton","Warrendale","Coraopolis","South Park","Mckeesport","Springdale","Wilmerding","Pittsburgh","Kittanning","Ford Cliff","Manorville","Georgetown","Darlington","Breezewood","Clearville","Fishertown","Centerport","Geigertown","Mohrsville","Morgantown","Pine Forge","Womelsdorf","Curryville","Burlington","New Albany","Springtown","Doylestown","Bedminster","Buckingham","Penns Park","Quakertown","Silverdale","Warminster","Warrington","Eau Claire","Evans City","Karns City","Zelienople","Marsteller","Beaverdale","South Fork","Summerhill","Twin Rocks","Vintondale","Jim Thorpe","Parryville","Aaronsburg","Bellefonte","Mingoville","Rebersburg","Brandamore","Immaculata","Landenberg","Lewisville","Mendenhall","New London","Nottingham","Parkesburg","Unionville","West Grove","East Brady","Rimersburg","Tylersburg","Troutville","Clearfield","Morrisdale","Wallaceton","Lock Haven","North Bend","Bloomsburg","Stillwater","Adamsville","Cochranton","Guys Mills","Titusville","Linesville","Saegertown","Springboro","Plainfield","Summerdale","Berrysburg","Grantville","Middletown","Harrisburg","Brookhaven","Crum Lynne","Gradyville","Swarthmore","Glen Mills","James City","North East","Union City","Brier Hill","Brownfield","Chalk Hill","Fairchance","Farmington","Grindstone","Leisenring","New Geneva","Smithfield","Vanderbilt","Clarington","Doylesburg","Spring Run","State Line","Waynesboro","Hustontown","Graysville","Greensboro","Waynesburg","Wind Ridge","Alexandria","Huntingdon","Petersburg","Mill Creek","Black Lick","Clarksburg","Dixonville","Homer City","Northpoint","Smicksburg","Coolspring","Worthville","Brookville","Sykesville","Port Royal","Carbondale","Chinchilla","Fleetville","Bainbridge","Brownstown","Christiana","Martindale","Mountville","Terre Hill","New Castle","Hillsville","Catasauqua","East Texas","Slatington","Zionsville","Bear Creek","Shavertown","Antes Fort","Montgomery","Unityville","Waterville","Greenville","Grove City","Sandy Lake","Belleville","Mc Veytown","Reedsville","Yeagertown","Kunkletown","Canadensis","Henryville","Swiftwater","Green Lane","Sumneytown","Earlington","Tylersport","Bryn Athyn","Cheltenham","Jenkintown","Norristown","Bridgeport","Eagleville","Kulpsville","Mont Clare","Royersford","West Point","Hellertown","Treichlers","Walnutport","Watsontown","Locust Gap","Snydertown","Landisburg","Marysville","Lackawaxen","Cross Fork","Pottsville","Branchdale","Frackville","Locustdale","Lost Creek","Middleport","Orwigsburg","Pine Grove","Sacramento","Shenandoah","Tower City","Zion Grove","Beavertown","Middleburg","Confluence","Meyersdale","Sipesville","Cairnbrook","Hollsopple","Forksville","Hillsgrove","Lenoxville","Union Dale","Great Bend","Hop Bottom","Mainesburg","Morris Run","New Berlin","White Deer","Rouseville","Kennerdell","Pittsfield","Washington","Canonsburg","Claysville","Prosperity","California","Beach Lake","Gouldsboro","Lake Ariel","Milanville","Tyler Hill","Greensburg","Grapeville","Hannastown","Hutchinson","Loyalhanna","Ruffs Dale","Slickville","Stahlstown","Youngstown","Laceyville","Dallastown","Emigsville","Fawn Grove","Lewisberry","Loganville","Manchester","Mount Wolf","Shrewsbury","Wellsville","York Haven","Mount Penn","Fairfield","Bairdford","Creighton","Elizabeth","Glassport","Indianola","Leetsdale","Homestead","Sewickley","Leechburg","Ford City","Oak Ridge","Templeton","Yatesboro","Aliquippa","Hookstown","Rochester","Alum Bank","New Paris","Osterburg","Bernville","Birdsboro","Boyertown","Earlville","Fleetwood","Maxatawny","Mertztown","Robesonia","Claysburg","Monroeton","Sugar Run","Wyalusing","Ottsville","Pineville","Langhorne","Levittown","Branchton","Hilliards","Saxonburg","Johnstown","Cassandra","Ebensburg","Nanty Glo","Blandburg","Gallitzin","Driftwood","Palmerton","Lehighton","Weatherly","Blanchard","Boalsburg","Milesburg","Moshannon","Snow Shoe","Glenmoore","Lionville","Thorndale","Wagontown","Kimberton","Pottstown","Limestone","Vowinckel","Lamartine","Glen Hope","Houtzdale","Smithmill","Grassflat","Kylertown","Shawville","Mill Hall","Catawissa","Millville","Wilburton","Hartstown","Meadville","Townville","Riceville","Camp Hill","Highspire","Wiconisco","Bryn Mawr","Essington","Glenolden","Haverford","Lansdowne","Havertown","Villanova","Brockport","Byrnedale","Weedville","Lake City","Waterford","Wattsburg","Uniontown","Lake Lynn","Masontown","New Salem","Wickhaven","Cooksburg","Lemasters","Mont Alto","Zullinger","Waterfall","Jefferson","Nemacolin","Broad Top","Cassville","Orbisonia","Shade Gap","Saltsburg","Commodore","Creekside","Hillsdale","Josephine","Mc Intyre","Plumville","De Lancey","Oliveburg","Knox Dale","Cocolamus","Richfield","Peckville","Old Forge","Blue Ball","Conestoga","East Earl","Goodville","Mount Joy","Reamstown","Reinholds","Smoketown","Strasburg","Lancaster","Adamstown","Jonestown","Myerstown","Bethlehem","Whitehall","Slatedale","Allentown","Conyngham","Rock Glen","Sugarloaf","Glen Lyon","Nanticoke","Nescopeck","Shawanese","Cedar Run","Slate Run","Trout Run","Lewis Run","Smethport","Jamestown","Hermitage","Stoneboro","Wheatland","Granville","Lewistown","Mattawana","Analomink","Long Pond","Tobyhanna","Blakeslee","Pennsburg","Franconia","Souderton","Flourtown","Wynnewood","Blue Bell","Frederick","Worcester","Pen Argyl","Leck Kill","Montandon","Riverside","Trevorton","Duncannon","Ickesburg","Liverpool","Loysville","Matamoras","Greentown","Gilberton","Llewellyn","Tuscarora","Nuremberg","Fort Hill","Markleton","Salisbury","Stoystown","Tire Hill","Hallstead","Lanesboro","Wellsboro","Blossburg","Covington","Knoxville","Mansfield","Millerton","Westfield","Allenwood","Hartleton","Laurelton","Lewisburg","Vicksburg","Cranberry","Clarendon","Sheffield","Bear Lake","Atlasburg","Charleroi","Langeloth","Mc Donald","New Eagle","Ellsworth","Millsboro","Southview","Vestaburg","Allenport","Daisytown","Stockdale","Honesdale","Lake Como","Lakeville","Poyntelle","Starlight","Starrucca","Pricedale","Adamsburg","Hostetter","Hyde Park","Jeannette","New Derry","Scottdale","Southwest","Youngwood","Nicholson","Mehoopany","Meshoppen","Dillsburg","Glen Rock","Glenville","Rossville","West Lawn","West Penn","West York","Cashtown","Gardners","Idaville","Orrtanna","Cheswick","Clairton","Coulters","Gibsonia","Crescent","Greenock","Sturgeon","Tarentum","Wildwood","Braddock","Carnegie","Duquesne","Glenshaw","Imperial","Pitcairn","Schenley","Elderton","Shelocta","Freeport","Mc Grann","Sagamore","Seminole","Ambridge","Industry","Defiance","Hopewell","Loysburg","Woodbury","Hereford","Kutztown","Leesport","Limekiln","Bellwood","Sylvania","Camptown","Chalfont","Ferndale","Hilltown","Holicong","New Hope","Perkasie","Richboro","Rushland","Solebury","Zionhill","Bensalem","Fenelton","Petrolia","Prospect","Valencia","Nicktown","Spangler","Parkhill","Ashville","Hastings","Emporium","Ashfield","Junedale","Lansford","Tresckow","Clarence","Millheim","Orviston","Woodward","Avondale","Pocopson","Westtown","Uwchland","Elverson","Hawthorn","Burnside","Mahaffey","Penfield","Beccaria","Coalport","Smokerun","Westover","Drifting","Grampian","Hawk Run","Karthaus","Winburne","Woodland","Castanea","Loganton","Westport","Woolrich","Atlantic","Hydetown","Carlisle","Grantham","Newville","Broomall","Edgemont","Folcroft","Thornton","Benezett","De Young","Edinboro","Fairview","Fairbank","Isabella","La Belle","Leckrone","Melcroft","Mill Run","Ohiopyle","Republic","Endeavor","Tionesta","Amberson","Orrstown","Scotland","Needmore","Crucible","Dilliner","Holbrook","Sycamore","Entriken","Neelyton","Saltillo","Heilwood","Marchand","Penn Run","Rossiter","Starford","Dilltown","Robinson","Hamilton","Ringgold","Brockway","Archbald","Elmhurst","La Plume","Olyphant","Scranton","Columbia","Holtwood","Hopeland","Kirkwood","Lampeter","Marietta","Paradise","Bessemer","Edinburg","Annville","Cornwall","Richland","Alburtis","Limeport","Macungie","Orefield","Hazleton","Ebervale","Freeland","Harleigh","Pittston","Plymouth","Kingston","Bradford","Fredonia","Transfer","Red Hill","Abington","Gladwyne","Glenside","Narberth","Creamery","Hatfield","Lansdale","Lederach","Mainland","Skippack","Danville","Nazareth","Wind Gap","Portland","Dalmatia","Dornsife","Elysburg","Kulpmont","Shamokin","Bushkill","Millrift","Tamiment","Roulette","Brockton","Cressona","Ringtown","Coaldale","Kelayres","Sheppton","Freeburg","Mc Clure","Somerset","Fairhope","Friedens","Quecreek","Rockwood","Clifford","Thompson","Montrose","Brackney","Brooklyn","Kingsley","Millmont","Winfield","Oil City","Franklin","Emlenton","Tidioute","Columbus","Lawrence","Cokeburg","Marianna","Strabane","Westland","Damascus","Equinunk","Lakewood","Prompton","Sterling","Monessen","Trafford","Smithton","Alverton","Armbrust","Avonmore","Champion","Claridge","Crabtree","Herminie","Ligonier","Torrance","Airville","New Park","Railroad","Red Lion","Steelton","Clinton","Harwick","Oakdale","Wexford","Ingomar","Oakmont","Cadogan","Distant","Nu Mine","Widnoon","Freedom","Midland","Fombell","Bedford","Everett","Hyndman","Artemas","Blandon","Hamburg","Kempton","Mohnton","Reading","Altoona","Gillett","Towanda","Danboro","Erwinna","Furlong","Jamison","Lahaska","Newtown","Wycombe","Bristol","Croydon","Callery","Chicora","Harmony","Lyndora","Renfrew","Belsano","Loretto","Portage","Wilmore","Cresson","Flinton","Glasgow","Fleming","Chatham","Lyndell","Malvern","Pomeroy","Devault","Foxburg","Clarion","Lucinda","Mayport","Fryburg","Kossuth","La Jose","Du Bois","Rockton","Brisbin","Allport","Numidia","Aristes","Berwick","Venango","Lemoyne","Newburg","Dauphin","Halifax","Hershey","Ardmore","Chester","Norwood","Woodlyn","Cheyney","Ridgway","Mc Kean","Allison","Cardale","Hopwood","Everson","Concord","Dry Run","Roxbury","Bobtown","Nineveh","Spraggs","Hesston","Indiana","Alverda","Arcadia","Aultman","Mentcle","Big Run","Timblin","Walston","Corsica","Mifflin","Waverly","Bausman","Drumore","Ephrata","Kinzers","Manheim","Maytown","Stevens","Talmage","Pulaski","Lebanon","Palmyra","Quentin","Rexmont","Drifton","Wyoming","Luzerne","Ralston","Cyclone","Gifford","Rixford","Farrell","Carlton","Burnham","Gilbert","Reeders","Scotrun","Salford","Telford","Dresher","Hatboro","Horsham","Oreland","Wyncote","Audubon","Gwynedd","Sunbury","Herndon","Paxinos","Newport","Milford","Greeley","Paupack","Rowland","Shohola","Galeton","Genesee","Ulysses","Ashland","Cumbola","Lavelle","Mar Lin","Seltzer","Tremont","Andreas","Quakake","Tamaqua","Kreamer","Addison","Boswell","Boynton","Garrett","Jenners","Kantner","Springs","Windber","Dushore","Laporte","Mildred","Harford","Jackson","Elkland","Liberty","Osceola","Swengel","Weikert","Russell","Garland","Hickory","Houston","Venetia","Dunlevy","Waymart","Webster","Calumet","Darragh","Delmont","Donegal","Larimer","Latrobe","Madison","Mammoth","Norvelt","Rillton","Whitney","Bolivar","Codorus","Hanover","Windsor","Oberlin","Aspers","Bunola","Morgan","Presto","Verona","Parker","Adrian","Dayton","Beaver","Conway","Monaca","Koppel","Saxton","Bethel","Bowers","Temple","Topton","Sproul","Tipton","Tyrone","Canton","Grover","Athens","Ulster","Durham","Dublin","Revere","Butler","Boyers","Herman","Sarver","Elmora","Emeigh","Colver","Revloc","Sidman","Coupon","Dysart","Patton","Coburn","Howard","Julian","Lemont","Atglen","Berwyn","Kelton","Modena","Oxford","Suplee","Fisher","Leeper","Marble","Irvona","Madera","Morann","Bigler","Munson","Olanta","Renovo","Benton","Lykens","Pillow","Folsom","Holmes","Morton","Kersey","Wilcox","Albion","Girard","Dawson","Dunbar","Hiller","Martin","Newell","Oliver","Lurgan","Marion","Quincy","Aleppo","Mather","Calvin","Dudley","Clymer","Ernest","Armagh","Valier","Mexico","Dalton","Jermyn","Jessup","Moscow","Moosic","Taylor","Ransom","Denver","Lititz","Narvon","Penryn","Pequea","Refton","Rheems","Witmer","Volant","Wampum","Coplay","Emmaus","Weston","Cambra","Dallas","Lehman","Duryea","Linden","Ludlow","Crosby","Eldred","Hadley","Mercer","Sharon","Milroy","Cresco","Effort","Sciota","Skytop","Colmar","Woxall","Ambler","Cedars","Bangor","Easton","Tatamy","Dewart","Milton","Rebuck","Tafton","Austin","Auburn","Gordon","Hegins","Mary D","Pitman","Ravine","Delano","Mcadoo","Oneida","Ursina","Acosta","Berlin","Listie","Jerome","Seanor","Dimock","Gibson","Lawton","Gaines","Morris","Nelson","Seneca","Irvine","Warren","Bulger","Donora","Elrama","Joffre","Midway","Slovan","Avella","Roscoe","Hamlin","Hawley","Apollo","Ardara","Bovard","Export","Hunker","Lowber","Rector","Salina","United","Wendel","Seward","Brogue","Craley","Etters","Felton","Cuddy","Baden","Imler","Queen","Bally","Barto","Newry","Milan","Sayre","Wysox","Bruin","Cabot","Dunlo","Elton","Lilly","Salix","Paoli","Devon","Exton","Crown","Sligo","Ramey","Lanse","Lamar","Enola","Gratz","Aston","Darby","Lenni","Media","Wayne","Force","Corry","Elgin","Hibbs","Ronco","Smock","Uledi","White","Brave","Clune","Coral","Gipsy","Beyer","Anita","Sigel","Akron","Leola","Ronks","Neffs","Drums","Muncy","Clark","Blain","Mills","Shunk","Lopez","Arnot","Tioga","Utica","Venus","Tiona","Amity","Cecil","Denbo","Orson","Arona","Derry","Irwin","Luxor","Manor","Tarrs","Wyano","Yukon","Falls","Noxen","Delta","Dover","Wood","Oley","Alba","Troy","Rome","Mars","Knox","Hyde","Avis","Erie","Adah","Gans","Todd","Home","Kent","Bart","Lawn","Kane","Palm","Oaks","Bath","Muir","Gray","Polk","Reno","Muse","Elco","Acme","Penn","York","Elm","Gap","Ono","Rew"]'
  ),
  wV = [
    "Wood River Junction",
    "North Smithfield",
    "North Providence",
    "Prudence Island",
    "East Providence",
    "North Kingstown",
    "West Greenwich",
    "East Greenwich",
    "Little Compton",
    "North Scituate",
    "Central Falls",
    "West Kingston",
    "West Warwick",
    "Slatersville",
    "Block Island",
    "Saunderstown",
    "Narragansett",
    "Harrisville",
    "Charlestown",
    "Hope Valley",
    "Barrington",
    "Adamsville",
    "Middletown",
    "Portsmouth",
    "Fiskeville",
    "Forestdale",
    "Greenville",
    "Mapleville",
    "Cumberland",
    "Woonsocket",
    "Providence",
    "Smithfield",
    "Peace Dale",
    "Jamestown",
    "Chepachet",
    "Clayville",
    "Pawtucket",
    "Riverside",
    "Hopkinton",
    "Rockville",
    "Wakefield",
    "Coventry",
    "Tiverton",
    "Glendale",
    "Manville",
    "Cranston",
    "Johnston",
    "Bradford",
    "Carolina",
    "Shannock",
    "Kingston",
    "Westerly",
    "Bristol",
    "Warwick",
    "Newport",
    "Harmony",
    "Oakland",
    "Pascoag",
    "Lincoln",
    "Rumford",
    "Ashaway",
    "Wyoming",
    "Warren",
    "Greene",
    "Albion",
    "Foster",
    "Exeter",
    "Kenyon",
    "Slocum",
    "Hope",
  ],
  SV = [
    "Saint Helena Island",
    "Hilton Head Island",
    "North Myrtle Beach",
    "Daufuskie Island",
    "North Charleston",
    "Sullivans Island",
    "Mc Clellanville",
    "Wadmalaw Island",
    "Galivants Ferry",
    "Little Mountain",
    "Boiling Springs",
    "Saint Matthews",
    "Charleston Afb",
    "Mount Pleasant",
    "Murrells Inlet",
    "Pawleys Island",
    "Travelers Rest",
    "Calhoun Falls",
    "North Augusta",
    "Sandy Springs",
    "Parris Island",
    "Moncks Corner",
    "Saint Stephen",
    "Isle Of Palms",
    "Mount Croghan",
    "Davis Station",
    "Edisto Island",
    "Coosawhatchie",
    "Heath Springs",
    "West Columbia",
    "Bennettsville",
    "Mountain Rest",
    "Pacolet Mills",
    "Bowling Green",
    "Hickory Grove",
    "Saint Andrews",
    "Lowndesville",
    "New Ellenton",
    "Graniteville",
    "Beech Island",
    "Russellville",
    "Johns Island",
    "Chesterfield",
    "Cottageville",
    "Society Hill",
    "Saint George",
    "Jenkinsville",
    "Timmonsville",
    "Johnsonville",
    "Fountain Inn",
    "Simpsonville",
    "Crocketville",
    "Early Branch",
    "Little River",
    "Myrtle Beach",
    "Liberty Hill",
    "Mount Carmel",
    "Silverstreet",
    "Ridge Spring",
    "Cross Anchor",
    "Greeleyville",
    "Gloverville",
    "Montmorenci",
    "Warrenville",
    "Williamston",
    "Cordesville",
    "Goose Creek",
    "Summerville",
    "Folly Beach",
    "Great Falls",
    "Jacksonboro",
    "Little Rock",
    "Harleyville",
    "Reevesville",
    "Ware Shoals",
    "Hardeeville",
    "Bishopville",
    "Clarks Hill",
    "Plum Branch",
    "Westminster",
    "Springfield",
    "Branchville",
    "Spartanburg",
    "Fingerville",
    "White Stone",
    "Mc Connells",
    "Clearwater",
    "Honea Path",
    "Blackville",
    "Port Royal",
    "Charleston",
    "Blacksburg",
    "Blackstock",
    "Turbeville",
    "Green Pond",
    "Walterboro",
    "Darlington",
    "Hartsville",
    "Dorchester",
    "Ridgeville",
    "Georgetown",
    "Greenville",
    "Tigerville",
    "Ninety Six",
    "Cross Hill",
    "Mountville",
    "Gray Court",
    "Mc Cormick",
    "Parksville",
    "Prosperity",
    "Long Creek",
    "West Union",
    "Eutawville",
    "Holly Hill",
    "Orangeburg",
    "Rowesville",
    "Ballentine",
    "Blythewood",
    "State Park",
    "White Rock",
    "Campobello",
    "Fairforest",
    "Mayesville",
    "Wedgefield",
    "Jonesville",
    "Abbeville",
    "Allendale",
    "La France",
    "Pendleton",
    "Townville",
    "Williston",
    "Jamestown",
    "Pineville",
    "Pinopolis",
    "Adams Run",
    "Hollywood",
    "Fort Lawn",
    "Jefferson",
    "Summerton",
    "Islandton",
    "Lake View",
    "Edgefield",
    "Winnsboro",
    "Effingham",
    "Lake City",
    "Cleveland",
    "Greenwood",
    "Varnville",
    "Green Sea",
    "Ridgeland",
    "Westville",
    "Fort Mill",
    "Lancaster",
    "Lynchburg",
    "Batesburg",
    "Leesville",
    "Lexington",
    "Centenary",
    "Chappells",
    "Fair Play",
    "Reidville",
    "Hemingway",
    "Kingstree",
    "Rock Hill",
    "Due West",
    "Vaucluse",
    "Sycamore",
    "Anderson",
    "Ehrhardt",
    "Barnwell",
    "Beaufort",
    "Bluffton",
    "Seabrook",
    "Edgemoor",
    "Richburg",
    "Pageland",
    "New Zion",
    "Sardinia",
    "Williams",
    "Johnston",
    "Ridgeway",
    "Florence",
    "Pamplico",
    "Scranton",
    "Conestee",
    "Marietta",
    "Piedmont",
    "Yemassee",
    "Pineland",
    "Van Wyck",
    "Waterloo",
    "Columbia",
    "Blenheim",
    "Newberry",
    "Whitmire",
    "Richland",
    "Tamassee",
    "Walhalla",
    "Six Mile",
    "Eastover",
    "Converse",
    "Glendale",
    "Gramling",
    "Wellford",
    "Woodruff",
    "Pinewood",
    "Shaw Afb",
    "Carlisle",
    "Lockhart",
    "Donalds",
    "Wagener",
    "Jackson",
    "Langley",
    "Windsor",
    "Fairfax",
    "Bamberg",
    "Denmark",
    "Sheldon",
    "Hanahan",
    "Bonneau",
    "Cameron",
    "Awendaw",
    "Ravenel",
    "Gaffney",
    "Chester",
    "Patrick",
    "Manning",
    "Canadys",
    "Round O",
    "Trenton",
    "Andrews",
    "Mauldin",
    "Taylors",
    "Bradley",
    "Brunson",
    "Garnett",
    "Gifford",
    "Hampton",
    "Nichols",
    "Tillman",
    "Bethune",
    "Cassatt",
    "Kershaw",
    "Clinton",
    "Laurens",
    "Elliott",
    "Gilbert",
    "Swansea",
    "Gresham",
    "Mullins",
    "Sellers",
    "Mc Coll",
    "Wallace",
    "Pomaria",
    "Kinards",
    "Cordova",
    "Elloree",
    "Central",
    "Clemson",
    "Liberty",
    "Pickens",
    "Gadsden",
    "Hopkins",
    "Monetta",
    "Arcadia",
    "Chesnee",
    "Clifton",
    "Cowpens",
    "Drayton",
    "Landrum",
    "Pacolet",
    "Pauline",
    "Roebuck",
    "Startex",
    "Dalzell",
    "Horatio",
    "Rembert",
    "Buffalo",
    "Nesmith",
    "Salters",
    "Catawba",
    "Salley",
    "Martin",
    "Belton",
    "Pelzer",
    "Lobeco",
    "Ladson",
    "Mc Bee",
    "Cheraw",
    "Alcolu",
    "Ruffin",
    "Smoaks",
    "Dillon",
    "Grover",
    "Olanta",
    "Coward",
    "Slater",
    "Hodges",
    "Estill",
    "Furman",
    "Scotia",
    "Conway",
    "Okatie",
    "Camden",
    "Lugoff",
    "Joanna",
    "Chapin",
    "Gaston",
    "Pelion",
    "Marion",
    "Seneca",
    "Bowman",
    "Neeses",
    "Norway",
    "Santee",
    "Easley",
    "Norris",
    "Sunset",
    "Saluda",
    "Duncan",
    "Enoree",
    "Sumter",
    "Clover",
    "Sharon",
    "Smyrna",
    "Aiken",
    "Ulmer",
    "Starr",
    "Hilda",
    "Cross",
    "Huger",
    "Lando",
    "Gable",
    "Lodge",
    "Lamar",
    "Lydia",
    "Hamer",
    "Latta",
    "Blair",
    "Greer",
    "Luray",
    "Miley",
    "Aynor",
    "Longs",
    "Loris",
    "Elgin",
    "Cayce",
    "Modoc",
    "Rains",
    "Tatum",
    "Newry",
    "Salem",
    "North",
    "Vance",
    "Inman",
    "Lyman",
    "Moore",
    "Union",
    "Cades",
    "Bath",
    "Olar",
    "Elko",
    "Dale",
    "Ruby",
    "Fork",
    "Rion",
    "Troy",
    "Clio",
    "Peak",
    "Cope",
    "Irmo",
    "Ward",
    "Mayo",
    "Lane",
    "York",
    "Iva",
    "Una",
  ],
  bV = [
    "Wessington Springs",
    "North Sioux City",
    "Big Stone City",
    "Saint Lawrence",
    "Valley Springs",
    "Fort Thompson",
    "Belle Fourche",
    "Saint Charles",
    "Ellsworth Afb",
    "New Underwood",
    "New Effington",
    "Saint Francis",
    "Little Eagle",
    "Mount Vernon",
    "Lake Preston",
    "Union Center",
    "Prairie City",
    "Wounded Knee",
    "Mission Hill",
    "Cherry Creek",
    "Springfield",
    "Chamberlain",
    "Gann Valley",
    "Garden City",
    "Willow Lake",
    "South Shore",
    "Mc Laughlin",
    "Buffalo Gap",
    "Eagle Butte",
    "Timber Lake",
    "New Holland",
    "Hot Springs",
    "Twin Brooks",
    "Lake Norden",
    "Ree Heights",
    "Long Valley",
    "Lower Brule",
    "Bridgewater",
    "White River",
    "Dell Rapids",
    "Sioux Falls",
    "Claire City",
    "Fort Pierre",
    "Centerville",
    "Lesterville",
    "Plankinton",
    "White Lake",
    "Wessington",
    "Mound City",
    "Lake Andes",
    "Vermillion",
    "Morristown",
    "Trail City",
    "Clear Lake",
    "Whitehorse",
    "Strandburg",
    "Milesville",
    "Castlewood",
    "Alexandria",
    "Camp Crook",
    "Saint Onge",
    "Harrisburg",
    "Black Hawk",
    "Fort Meade",
    "Rapid City",
    "Gettysburg",
    "Woonsocket",
    "Pine Ridge",
    "Northville",
    "Chancellor",
    "Hitchcock",
    "Brookings",
    "Claremont",
    "Frederick",
    "Stratford",
    "Pickstown",
    "Carpenter",
    "Watertown",
    "Kranzburg",
    "Mc Intosh",
    "Grenville",
    "Glencross",
    "Ridgeview",
    "Smithwick",
    "Stockholm",
    "Bonesteel",
    "Estelline",
    "Belvidere",
    "Arlington",
    "Wentworth",
    "Spearfish",
    "Whitewood",
    "Canistota",
    "Long Lake",
    "Lake City",
    "Mud Butte",
    "White Owl",
    "Garretson",
    "Flandreau",
    "Box Elder",
    "Hill City",
    "Lodgepole",
    "Batesland",
    "Manderson",
    "Porcupine",
    "Brentford",
    "Frankfort",
    "Mansfield",
    "Beresford",
    "Elk Point",
    "Jefferson",
    "Stickney",
    "Scotland",
    "Aberdeen",
    "Columbia",
    "Houghton",
    "Westport",
    "Florence",
    "Bullhead",
    "Fairburn",
    "Mitchell",
    "Pierpont",
    "Harrison",
    "Edgemont",
    "Oelrichs",
    "Cresbard",
    "Faulkton",
    "Parkston",
    "Highmore",
    "Holabird",
    "Interior",
    "Iroquois",
    "Deadwood",
    "Fairview",
    "Worthing",
    "Kennebec",
    "Reliance",
    "Montrose",
    "Langford",
    "Piedmont",
    "Carthage",
    "Hartford",
    "Humboldt",
    "Keystone",
    "Sisseton",
    "Artesian",
    "Mellette",
    "Redfield",
    "Parmelee",
    "Alcester",
    "Mobridge",
    "Gayville",
    "Tuthill",
    "Tyndall",
    "Barnard",
    "Kimball",
    "Pukwana",
    "Nisland",
    "Herreid",
    "Pollock",
    "Bradley",
    "Raymond",
    "Burbank",
    "Wakonda",
    "Wallace",
    "Keldron",
    "Wakpala",
    "Watauga",
    "Hermosa",
    "Pringle",
    "Bristol",
    "Webster",
    "Andover",
    "Astoria",
    "Goodwin",
    "Toronto",
    "Corsica",
    "Delmont",
    "Ipswich",
    "Rockham",
    "Milbank",
    "Revillo",
    "Fairfax",
    "Gregory",
    "Herrick",
    "Midland",
    "Buffalo",
    "Harrold",
    "Freeman",
    "Stephan",
    "Wanblee",
    "De Smet",
    "Chester",
    "Madison",
    "Rutland",
    "Winfred",
    "Spencer",
    "Amherst",
    "Britton",
    "Sturgis",
    "Brandon",
    "Lebanon",
    "Tolstoy",
    "Rosholt",
    "Letcher",
    "Mission",
    "Rosebud",
    "Glenham",
    "Yankton",
    "Cavour",
    "Virgil",
    "Wolsey",
    "Martin",
    "Aurora",
    "Elkton",
    "Ferney",
    "Groton",
    "Warner",
    "Newell",
    "Geddes",
    "Platte",
    "Wagner",
    "Vienna",
    "Walker",
    "Custer",
    "Roslyn",
    "Waubay",
    "Brandt",
    "Isabel",
    "Lantry",
    "Armour",
    "Bowdle",
    "Hosmer",
    "Roscoe",
    "Orient",
    "Seneca",
    "Labolt",
    "Marvin",
    "Dallas",
    "Philip",
    "Bryant",
    "Miller",
    "Fulton",
    "Ludlow",
    "Pierre",
    "Olivet",
    "Dimock",
    "Kaylor",
    "Kadoka",
    "Alpena",
    "Draper",
    "Okaton",
    "Oldham",
    "Badger",
    "Ramona",
    "Canton",
    "Hudson",
    "Lennox",
    "Oacoma",
    "Presho",
    "Vivian",
    "Eureka",
    "Veblen",
    "Enning",
    "Norris",
    "Canova",
    "Fedora",
    "Howard",
    "Baltic",
    "Colton",
    "Crooks",
    "Renner",
    "Colman",
    "Caputa",
    "Owanka",
    "Scenic",
    "Lemmon",
    "Meadow",
    "Corona",
    "Ortley",
    "Peever",
    "Summit",
    "Wilmot",
    "Oglala",
    "Ashton",
    "Doland",
    "Tulare",
    "Turton",
    "Okreek",
    "Colome",
    "Hamill",
    "Winner",
    "Witten",
    "Hurley",
    "Marion",
    "Monroe",
    "Parker",
    "Viborg",
    "Akaska",
    "Dupree",
    "Huron",
    "Allen",
    "Tabor",
    "Sinai",
    "Volga",
    "Bruce",
    "White",
    "Hecla",
    "Dante",
    "Marty",
    "Clark",
    "Irene",
    "Henry",
    "Ethan",
    "Onaka",
    "Burke",
    "Hayti",
    "Hazel",
    "Emery",
    "Ralph",
    "Redig",
    "Blunt",
    "Menno",
    "Tripp",
    "Murdo",
    "Erwin",
    "Nunda",
    "Salem",
    "Leola",
    "Faith",
    "Howes",
    "Lyons",
    "Trent",
    "Quinn",
    "Wasta",
    "Bison",
    "Hoven",
    "Conde",
    "Hayes",
    "Onida",
    "Ideal",
    "Davis",
    "Selby",
    "Utica",
    "Volin",
    "Yale",
    "Avon",
    "Bath",
    "Vale",
    "Gary",
    "Oral",
    "Reva",
    "Lane",
    "Lead",
    "Nemo",
    "Eden",
    "Wood",
    "Egan",
    "Wall",
    "Kyle",
    "Agar",
    "Java",
    "Tea",
  ],
  MV = [
    "Red Boiling Springs",
    "Bloomington Springs",
    "Cumberland Furnace",
    "Beersheba Springs",
    "Strawberry Plains",
    "Castalian Springs",
    "Thompsons Station",
    "Milligan College",
    "Kingston Springs",
    "Lookout Mountain",
    "New Johnsonville",
    "Mc Lemoresville",
    "Signal Mountain",
    "Tennessee Ridge",
    "Hurricane Mills",
    "Laurel Bloomery",
    "South Pittsburg",
    "Cumberland City",
    "Cumberland Gap",
    "Crockett Mills",
    "Goodlettsville",
    "Estill Springs",
    "Powder Springs",
    "Gruetli Laager",
    "Grand Junction",
    "Hickory Valley",
    "Jefferson City",
    "Bethel Springs",
    "Mount Pleasant",
    "Tellico Plains",
    "Oliver Springs",
    "Woodland Mills",
    "Buffalo Valley",
    "Pleasant Shade",
    "Chestnut Mound",
    "Hendersonville",
    "West Knoxville",
    "Andersonville",
    "Roan Mountain",
    "Pleasant View",
    "Lone Mountain",
    "Parrottsville",
    "Pleasant Hill",
    "Morris Chapel",
    "Surgoinsville",
    "Cottage Grove",
    "Primm Springs",
    "Mountain City",
    "Milledgeville",
    "Dixon Springs",
    "Mitchellville",
    "Sharps Chapel",
    "Mountain Home",
    "College Grove",
    "Friendsville",
    "Elizabethton",
    "Ashland City",
    "Chapmansboro",
    "New Tazewell",
    "Crab Orchard",
    "Whites Creek",
    "Bath Springs",
    "Decaturville",
    "Bean Station",
    "Russellville",
    "Pickwick Dam",
    "Mount Carmel",
    "Wildersville",
    "Whitleyville",
    "Shady Valley",
    "Lawrenceburg",
    "Saint Joseph",
    "Fayetteville",
    "Philadelphia",
    "Stantonville",
    "Spring Creek",
    "Cornersville",
    "Williamsport",
    "Madisonville",
    "South Fulton",
    "Silver Point",
    "Cross Plains",
    "Murfreesboro",
    "Pigeon Forge",
    "Collierville",
    "Gordonsville",
    "Bumpus Mills",
    "Indian Mound",
    "Westmoreland",
    "Maynardville",
    "Johnson City",
    "Jonesborough",
    "Palmersville",
    "Mount Juliet",
    "Bell Buckle",
    "Shelbyville",
    "La Follette",
    "Buena Vista",
    "Cedar Grove",
    "Hollow Rock",
    "Jacks Creek",
    "Summitville",
    "Old Hickory",
    "Scotts Hill",
    "White Bluff",
    "Greeneville",
    "Collegedale",
    "Lupton City",
    "Soddy Daisy",
    "Chattanooga",
    "Church Hill",
    "Rogersville",
    "Brownsville",
    "Springville",
    "Centerville",
    "Tiptonville",
    "Five Points",
    "Lenoir City",
    "Beech Bluff",
    "Chapel Hill",
    "Spring Hill",
    "Clarksville",
    "Spring City",
    "Springfield",
    "White House",
    "Fosterville",
    "Sevierville",
    "Brush Creek",
    "Blountville",
    "Piney Flats",
    "Mcminnville",
    "Rock Island",
    "Fall Branch",
    "Cypress Inn",
    "Nolensville",
    "Briceville",
    "Unionville",
    "Louisville",
    "Charleston",
    "Auburntown",
    "Bradyville",
    "Readyville",
    "Clarksburg",
    "Huntingdon",
    "Clairfield",
    "Beechgrove",
    "Manchester",
    "Arnold Afb",
    "Friendship",
    "Maury City",
    "Crossville",
    "Sugar Tree",
    "Alexandria",
    "Dowelltown",
    "Smithville",
    "Somerville",
    "Clarkrange",
    "Winchester",
    "Rutherford",
    "Frankewing",
    "Goodspring",
    "Minor Hill",
    "Thorn Hill",
    "Tracy City",
    "Morristown",
    "Whitesburg",
    "Sale Creek",
    "Kyles Ford",
    "Sneedville",
    "Pocahontas",
    "Whiteville",
    "Mooresburg",
    "Duck River",
    "Gainesboro",
    "New Market",
    "White Pine",
    "Summertown",
    "Petersburg",
    "Flintville",
    "Adamsville",
    "Sequatchie",
    "Georgetown",
    "Cokercreek",
    "Sweetwater",
    "Cunningham",
    "Deer Lodge",
    "Union City",
    "Livingston",
    "Lobelville",
    "Copperhill",
    "Turtletown",
    "Cookeville",
    "Evensville",
    "Graysville",
    "Cedar Hill",
    "Greenbrier",
    "Christiana",
    "Eagleville",
    "Huntsville",
    "Gatlinburg",
    "Millington",
    "Germantown",
    "Bluff City",
    "Cottontown",
    "Hartsville",
    "Collinwood",
    "Waynesboro",
    "Greenfield",
    "Gladeville",
    "Lake City",
    "Oak Ridge",
    "Big Sandy",
    "Pikeville",
    "Maryville",
    "Tallassee",
    "Cleveland",
    "Mc Donald",
    "Caryville",
    "Jacksboro",
    "Mc Kenzie",
    "Trezevant",
    "Henderson",
    "Harrogate",
    "Speedwell",
    "Hillsboro",
    "Tullahoma",
    "Fruitvale",
    "Hermitage",
    "Nashville",
    "Charlotte",
    "Dyersburg",
    "La Grange",
    "Rossville",
    "Williston",
    "Jamestown",
    "Pall Mall",
    "Belvidere",
    "Yorkville",
    "Lynnville",
    "Monteagle",
    "Birchwood",
    "Middleton",
    "Saulsbury",
    "Olivehill",
    "Bulls Gap",
    "Lexington",
    "Mansfield",
    "Granville",
    "Dandridge",
    "Knoxville",
    "Iron City",
    "Westpoint",
    "Hohenwald",
    "Greenback",
    "Englewood",
    "Riceville",
    "Lafayette",
    "Whiteside",
    "Lewisburg",
    "Hampshire",
    "Southside",
    "Lynchburg",
    "Coalfield",
    "Sunbright",
    "Byrdstown",
    "Conasauga",
    "Grandview",
    "Lascassas",
    "La Vergne",
    "Helenwood",
    "Arlington",
    "Brunswick",
    "Ellendale",
    "Riddleton",
    "Lancaster",
    "Kingsport",
    "Covington",
    "Drummonds",
    "Flag Pond",
    "Limestone",
    "Arrington",
    "Brentwood",
    "Watertown",
    "Wartrace",
    "Normandy",
    "Holladay",
    "Rockford",
    "Townsend",
    "Woodbury",
    "Bruceton",
    "Westport",
    "Shawanee",
    "Tazewell",
    "Hartford",
    "Gallaway",
    "Grimsley",
    "Huntland",
    "Sherwood",
    "Bradford",
    "Humboldt",
    "Idlewild",
    "Prospect",
    "Rutledge",
    "Washburn",
    "Altamont",
    "Coalmont",
    "Bakewell",
    "Harrison",
    "Ooltewah",
    "Silerton",
    "Saltillo",
    "Savannah",
    "Buchanan",
    "Bon Aqua",
    "Nunnelly",
    "Corryton",
    "Heiskell",
    "Wynnburg",
    "Ethridge",
    "Mulberry",
    "Dellrose",
    "Chewalla",
    "Oakfield",
    "Whitwell",
    "Columbia",
    "Culleoka",
    "Santa Fe",
    "Ten Mile",
    "Woodlawn",
    "Wartburg",
    "Hornbeak",
    "Crawford",
    "Ducktown",
    "Old Fort",
    "Reliance",
    "Monterey",
    "Harriman",
    "Kingston",
    "Rockwood",
    "Ridgetop",
    "Rockvale",
    "Winfield",
    "Carthage",
    "Big Rock",
    "Bethpage",
    "Gallatin",
    "Portland",
    "Brighton",
    "Burlison",
    "Luttrell",
    "Morrison",
    "Campaign",
    "Fairview",
    "Franklin",
    "Clinton",
    "Walland",
    "Jellico",
    "Newcomb",
    "Pioneer",
    "Lavinia",
    "Hampton",
    "Watauga",
    "Enville",
    "Del Rio",
    "Newport",
    "Gadsden",
    "Antioch",
    "Joelton",
    "Madison",
    "Parsons",
    "Liberty",
    "Dickson",
    "Slayden",
    "Vanleer",
    "Newbern",
    "Tigrett",
    "Trimble",
    "Laconia",
    "Oakland",
    "Allardt",
    "Decherd",
    "Sewanee",
    "Trenton",
    "Ardmore",
    "Pulaski",
    "Chuckey",
    "Mosheim",
    "Lowland",
    "Talbott",
    "Bolivar",
    "Hornsby",
    "Stanton",
    "Puryear",
    "Stewart",
    "Mc Ewen",
    "Waverly",
    "Ridgely",
    "Henning",
    "Loretto",
    "Calhoun",
    "Jackson",
    "Denmark",
    "Belfast",
    "Decatur",
    "Palmyra",
    "Lancing",
    "Oakdale",
    "Samburg",
    "Rickman",
    "Orlinda",
    "Robbins",
    "Seymour",
    "Memphis",
    "Cordova",
    "Elmwood",
    "Hickman",
    "Bristol",
    "Munford",
    "Spencer",
    "Telford",
    "Clifton",
    "Dresden",
    "Dukedom",
    "Gleason",
    "Quebeck",
    "Walling",
    "Lebanon",
    "Norris",
    "Camden",
    "Atwood",
    "Pegram",
    "Arthur",
    "Pruden",
    "Celina",
    "Bogota",
    "Finley",
    "Braden",
    "Moscow",
    "Wilder",
    "Kenton",
    "Gibson",
    "Medina",
    "Elkton",
    "Blaine",
    "Midway",
    "Mohawk",
    "Palmer",
    "Pelham",
    "Apison",
    "Hixson",
    "Counce",
    "Shiloh",
    "Eidson",
    "Darden",
    "Reagan",
    "Sardis",
    "Butler",
    "Mascot",
    "Powell",
    "Ripley",
    "Loudon",
    "Athens",
    "Etowah",
    "Finger",
    "Michie",
    "Selmer",
    "Pinson",
    "Mercer",
    "Jasper",
    "Vonore",
    "Petros",
    "Allons",
    "Allred",
    "Alpine",
    "Hilham",
    "Monroe",
    "Linden",
    "Benton",
    "Delano",
    "Farner",
    "Baxter",
    "Dayton",
    "Milton",
    "Smyrna",
    "Oneida",
    "Dunlap",
    "Tipton",
    "Unicoi",
    "Smartt",
    "Martin",
    "Sharon",
    "Sparta",
    "Norene",
    "Alcoa",
    "Luray",
    "Eagan",
    "Bybee",
    "Cosby",
    "Alamo",
    "Bells",
    "Burns",
    "Lenox",
    "Macon",
    "Cowan",
    "Eaton",
    "Milan",
    "Afton",
    "Toone",
    "Crump",
    "Huron",
    "Henry",
    "Paris",
    "Lyles",
    "Trade",
    "Gates",
    "Halls",
    "Leoma",
    "Elora",
    "Kelso",
    "Niota",
    "Ramer",
    "Medon",
    "Guild",
    "Rugby",
    "Obion",
    "Rives",
    "Ocoee",
    "Adams",
    "Elgin",
    "Kodak",
    "Dover",
    "Atoka",
    "Mason",
    "Erwin",
    "Viola",
    "Lutts",
    "Doyle",
    "Duff",
    "Yuma",
    "Moss",
    "Dyer",
    "Como",
    "Only",
    "Erin",
    "Taft",
    "Guys",
    "Troy",
    "Eads",
    "Eva",
  ],
  BV = JSON.parse(
    '["Big Bend National Park","Naval Air Station Jrb","Little River Academy","North Richland Hills","Jbsa Ft Sam Houston","South Padre Island","Sutherland Springs","Tennessee Colony","Dripping Springs","Mount Enterprise","Richland Springs","College Station","New Summerfield","Carrizo Springs","Sulphur Springs","Roaring Springs","Rio Grande City","Harker Heights","Universal City","Round Mountain","Walnut Springs","Hughes Springs","Fredericksburg","Elysian Fields","Fort Mc Kavett","Blooming Grove","Corpus Christi","Falcon Heights","Mount Pleasant","Goodfellow Afb","Port Mansfield","Bleiblerville","Jbsa Randolph","Jbsa Lackland","Cranfills Gap","West Columbia","Point Comfort","Port O Connor","Douglassville","Spring Branch","New Braunfels","Copperas Cove","Grand Prairie","Balch Springs","Missouri City","Plantersville","Roans Prairie","Cotton Center","Village Mills","North Houston","South Houston","Sullivan City","Sulphur Bluff","Sierra Blanca","Mountain Home","Brackettville","Artesia Wells","Hallettsville","Valley Spring","Horseshoe Bay","Ransom Canyon","Colorado City","Chapman Ranch","Mineral Wells","Fort Stockton","Dallardsville","San Augustine","Sterling City","Knickerbocker","Apple Springs","Chappell Hill","Wichita Falls","Heidenheimer","Saint Hedwig","Johnson City","Valley Mills","Lake Jackson","Marble Falls","Cross Plains","Mont Belvieu","Jacksonville","Farmersville","Ben Franklin","Flower Mound","San Elizario","Stephenville","Fayetteville","South Plains","Mount Vernon","Port Bolivar","Collinsville","Fort Hancock","Hebbronville","Orange Grove","Center Point","Prairie Hill","Three Rivers","Buchanan Dam","China Spring","Madisonville","Daingerfield","Martinsville","Port Aransas","Mauriceville","Aransas Pass","Garciasville","Breckenridge","Throckmorton","Water Valley","Pflugerville","Laughlin Afb","Grand Saline","Prairie View","Mirando City","East Bernard","Sheppard Afb","Raymondville","Liberty Hill","Crystal City","Archer City","Campbellton","Cedar Creek","San Antonio","Laguna Park","Brookesmith","Prairie Lea","Port Lavaca","Brownsville","Los Fresnos","Port Isabel","Santa Maria","Summerfield","Wallisville","Westminster","Rock Island","Canyon Lake","Millersview","Gainesville","Valley View","Duncanville","Lake Dallas","Pilot Point","Meyersville","Rising Star","Rocksprings","Lingleville","Morgan Mill","Honey Grove","Schulenburg","Friendswood","League City","High Island","Justiceburg","Willow City","Garden City","Wrightsboro","Whitewright","Van Alstyne","Gordonville","Hale Center","Chillicothe","Channelview","Galena Park","Scottsville","Caddo Mills","Port Arthur","Port Neches","Sabine Pass","Karnes City","Panna Maria","Arthur City","Pattonville","Littlefield","Centerville","George West","Shallowater","North Zulch","Collegeport","Castroville","Goldthwaite","Nacogdoches","Bridge City","Orangefield","Long Branch","Weatherford","Clarksville","Joinerville","Selman City","Shelbyville","Santa Elena","Colleyville","Haltom City","Buffalo Gap","Wills Point","Ben Wheeler","Bloomington","New Waverly","Burkburnett","San Perlita","Floresville","Denver City","San Ygnacio","Huntington","Windthorst","Jourdanton","Pleasanton","San Felipe","Cat Spring","Pipe Creek","Vanderpool","Smithville","Nolanville","New Boston","Falfurrias","Somerville","Martindale","Los Indios","San Benito","Santa Rosa","Skellytown","White Deer","Queen City","Robert Lee","Santa Anna","Blue Ridge","Samnorwood","Wellington","Eagle Lake","Paint Rock","Gatesville","Carrollton","Richardson","Cedar Hill","Seagoville","Lake Creek","Lewisville","The Colony","Little Elm","Lelia Lake","Concepcion","Gardendale","Waxahachie","Midlothian","Fort Bliss","Bluff Dale","West Point","Mc Caulley","Sugar Land","Texas City","Whitesboro","Gladewater","Mc Queeney","Petersburg","Pottsville","Hallsville","Jonesville","San Marcos","Brownsboro","Los Ebanos","Mount Calm","Ropesville","Whitharral","Big Spring","Greenville","Wolfe City","Vanderbilt","Kirbyville","Fort Davis","Falls City","Kingsville","Cunningham","Springlake","Sweet Home","Darrouzett","Bruceville","Cedar Lane","Eagle Pass","Rio Medina","Burlington","Forestburg","Montgomery","Burkeville","Deweyville","Sweetwater","Agua Dulce","Farnsworth","Boys Ranch","Palo Pinto","Springtown","Livingston","Royse City","Laird Hill","New London","Brookeland","Coldspring","Pointblank","Whitehouse","San Isidro","Fort Worth","Brownfield","San Angelo","Christoval","Pennington","Colmesneil","Huntsville","Brookshire","Grandfalls","Washington","Glen Flora","Hungerford","Schwertner","Cedar Park","Georgetown","Round Rock","Bridgeport","South Bend","Batesville","Frankston","Palestine","Charlotte","Christine","Bellville","Fort Hood","Pendleton","Elmendorf","Texarkana","Old Ocean","Liverpool","Terlingua","Silverton","Brownwood","Chriesman","Deanville","Harlingen","Rio Hondo","Pittsburg","Panhandle","Bloomburg","Childress","Bluegrove","Henrietta","Whiteface","Gouldbusk","Goldsboro","Copeville","Josephine","Princeton","Jonesboro","Crosbyton","Lancaster","Sunnyvale","Pecan Gap","Thomaston","Big Wells","Clarendon","Benavides","San Diego","Desdemona","Goldsmith","Telegraph","Barksdale","Forreston","Canutillo","Dodd City","Telephone","La Grange","Ledbetter","Round Top","Sylvester","Dougherty","Kendleton","Needville","Rosenberg","Thompsons","Scroggins","Fairfield","Streetman","Seagraves","Dickinson","Galveston","Hitchcock","La Marque","Gilchrist","Stonewall","Weesatche","Leesville","Pottsboro","Southmayd","White Oak","Kingsbury","Plainview","Abernathy","Estelline","Lumberton","Sour Lake","Deer Park","Highlands","Rochester","Driftwood","Wimberley","Murchison","La Blanca","Covington","Hillsboro","Levelland","Grapeland","Dell City","Salt Flat","Jacksboro","Francitas","Valentine","Nederland","Grandview","Rio Vista","Armstrong","Kerrville","Roosevelt","Knox City","Brookston","Fowlerton","Lexington","Normangee","Cleveland","Groesbeck","Tehuacana","Kingsland","Wolfforth","Mc Gregor","Jefferson","Matagorda","Van Vleck","Wadsworth","Buckholts","Thorndale","Westbrook","New Caney","Pinehurst","Splendora","Masterson","Lone Star","Chatfield","Corsicana","Blackwell","Wildorado","Beckville","Poolville","Lazbuddie","Sheffield","Camp Wood","Balmorhea","Toyahvale","Woodsboro","New Baden","Ballinger","Henderson","Laneville","Ingleside","Hermleigh","Stratford","Glen Rose","Aspermont","Old Glory","Arlington","Grapevine","Kennedale","Mansfield","Southlake","Dyess Afb","Sanderson","Cookville","Del Valle","Spicewood","Centralia","Woodville","Hillister","Big Sandy","Fruitvale","Telferner","Riverside","Hempstead","Lane City","Iowa Park","Oklaunion","Sebastian","La Vernia","Stockdale","Greenwood","Winnsboro","Newcastle","Montalba","Rockport","Holliday","Megargel","Scotland","Industry","Muleshoe","Red Rock","Beeville","Normanna","Skidmore","Bartlett","Atascosa","Somerset","Von Ormy","Converse","Meridian","Redwater","Brazoria","Danciger","Angleton","Freeport","Pearland","Rosharon","Millican","Wellborn","Marathon","Quitaque","Caldwell","Fentress","Lockhart","Seadrift","La Feria","Leesburg","Marietta","Nazareth","Hankamer","Gallatin","Maydelle","Bellevue","Petrolia","Tennyson","Rockwood","Mckinney","Sheridan","Columbus","Alleyton","Bulverde","Comanche","Muenster","Van Horn","Hutchins","Mesquite","Hereford","Klondike","Hochheim","Westhoff","Nordheim","Yorktown","Asherton","Catarina","Realitos","Eastland","Bardwell","Maypearl","Tornillo","Randolph","Ellinger","Flatonia","Floydada","Richmond","Fulshear","Simonton","Stafford","Pearsall","Seminole","Santa Fe","Berclair","Gonzales","Alanreed","Tom Bean","Longview","Anderson","Navasota","Richards","Geronimo","Edmonson","Lakeview","Hamilton","Spearman","Saratoga","Kingwood","Hufsmith","Bellaire","Pasadena","La Porte","Seabrook","Harleton","Marshall","Woodlawn","Channing","Canadian","Malakoff","Trinidad","Chandler","Edinburg","La Villa","Mercedes","Progreso","San Juan","Penelope","Granbury","Brashear","Saltillo","Crockett","Lovelady","Ratcliff","Campbell","Commerce","Lone Oak","Stinnett","Barnhart","La Salle","Hamshire","Beaumont","Ben Bolt","Alvarado","Burleson","Cleburne","Stamford","Crandall","Bergheim","Kendalia","Junction","Benjamin","Powderly","Fieldton","Lampasas","Dime Box","Giddings","Daisetta","Coolidge","Thornton","Lipscomb","Oakville","Whitsett","Bluffton","New Deal","Odonnell","New Home","Rochelle","Crawford","Elm Mott","Calliham","Fredonia","Pontotoc","Bay City","Blessing","Midfield","Palacios","El Indio","La Coste","Rockdale","Montague","Ringgold","Saint Jo","Magnolia","Douglass","Garrison","Richland","Bon Wier","Wiergate","Maryneal","Banquete","Driscoll","Robstown","Perryton","Carthage","De Berry","Coyanosa","Imperial","Corrigan","Goodrich","Onalaska","Bushland","Amarillo","Presidio","Umbarger","Big Lake","Rio Frio","Saragosa","Austwell","Franklin","Wheelock","Rockwall","Hemphill","Pineland","Broaddus","Oakhurst","Shepherd","Portland","Cherokee","San Saba","Eldorado","Fluvanna","Salineno","Winfield","Veribest","Carlsbad","Vancourt","Manchaca","Groveton","Woodlake","Doucette","Ore City","Mc Camey","Comstock","Edgewood","Victoria","Mcfaddin","Pattison","Monahans","Danevang","El Campo","Mobeetie","Shamrock","Florence","Coupland","Paradise","La Pryor","Elkhart","Andrews","Zavalla","Wayside","New Ulm","Bandera","Tarpley","Bastrop","Mc Dade","Rosanky","Seymour","Mineral","Holland","Killeen","Helotes","Macdona","Clifton","Iredell","Kopperl","De Kalb","Danbury","Blanket","Bertram","Maxwell","Atlanta","Kildare","Mc Leod","Avinger","Dimmitt","Anahuac","Baytown","Stowell","Bledsoe","Burkett","Coleman","Prosper","Melissa","Garwood","Glidden","Oakland","Fischer","De Leon","Gustine","Proctor","Lindsay","Rosston","Oglesby","Purmela","Cee Vee","Paducah","Lorenzo","Dalhart","Kerrick","Texline","Addison","Coppell","Rowlett","Garland","Ackerly","Roanoke","Dickens","Notrees","Penwell","Red Oak","Milford","Anthony","El Paso","Rosebud","Chilton","Ivanhoe","Ladonia","Leonard","Ravenna","Trenton","Carmine","Muldoon","Lockney","Crowell","Beasley","Orchard","Wortham","Bigfoot","Bacliff","Belmont","Harwood","Waelder","Denison","Sherman","Kilgore","Schertz","Staples","Memphis","Carlton","Thicket","Kountze","Silsbee","Houston","Huffman","Tomball","Cypress","Hockley","Webster","Karnack","Hartley","Weinert","Haskell","O Brien","Eustace","Mcallen","Edcouch","Hargill","Hidalgo","La Joya","Mission","Penitas","Weslaco","Aquilla","Brandon","Hubbard","Mertens","Whitney","Sundown","Cresson","Pickton","Kennard","Coahoma","Celeste","Quinlan","Sanford","Mertzon","La Ward","Evadale","Premont","Lillian","Lueders","Gillett","Kaufman","Terrell","Comfort","Guthrie","Riviera","Blossom","Chicota","Amherst","Kempner","Cotulla","Encinal","Moulton","Sublime","Lincoln","Buffalo","Oakwood","Concord","Marquez","Romayor","Liberty","Raywood","Follett","Higgins","Castell","Mentone","Lubbock","Woodway","Lenorah","Stanton","Elmaton","Markham","Pledger","Quemado","Natalia","D Hanis","Midland","Cameron","Davilla","Loraine","Matador","Cushing","Chireno","Graford","Clayton","Millsap","Peaster","Farwell","Leggett","Redford","Bagwell","Detroit","Bayside","Refugio","Bremond","Calvert","Mumford","Wingate","Winters","Overton","Bronson","Gregory","Joaquin","Timpson","Texhoma","Bullard","Lindale","Rainbow","Delmita","Bedford","Crowley","Tuscola","Abilene","Wellman","Woodson","Leander","Mc Neil","Trinity","Chester","Spurger","Midkiff","Sabinal","Del Rio","Langtry","Nursery","Placedo","Barstow","Wickett","Brenham","Wharton","Allison","Briscoe","Wheeler","Electra","Harrold","Granger","Jarrell","Walburg","Pandora","Decatur","Slidell","Hawkins","Mineola","Quitman","Neches","Cayuga","Lufkin","Diboll","Pollok","Fulton","Claude","Leming","Poteet","Kenney","Wallis","Enochs","Medina","Pawnee","Pettus","Tuleta","Temple","Belton","Rogers","Salado","Boerne","Adkins","Blanco","Morgan","Sweeny","Manvel","Kurten","Alpine","Encino","Zephyr","Briggs","Burnet","Luling","Putnam","Combes","Lozano","Olmito","Bivins","Linden","Winnie","Reklaw","Morton","Bronte","Silver","Valera","Novice","Celina","Frisco","Weston","Nevada","Dodson","Altair","Weimar","Energy","Sidney","Lowake","Irving","Sachse","Desoto","Wilmer","Dallas","Lamesa","Cooper","Denton","Argyle","Aubrey","Justin","Ponder","Sanger","Mcadoo","Hedley","Carbon","Gorman","Ranger","Odessa","Ferris","Palmer","Avalon","Fabens","Dublin","Marlin","Reagan","Bailey","Bonham","Windom","Fresno","Kirvin","Teague","Dilley","Harper","Fannin","Goliad","Smiley","Ottine","Lefors","Mclean","Gunter","Sadler","Easton","Judson","Bedias","Cibolo","Marion","Seguin","Turkey","Gruver","Quanah","Batson","Humble","Spring","Barker","Crosby","Waskom","Athens","Poynor","Itasca","Abbott","Malone","Paluxy","Latexo","Forsan","Borger","Fritch","Bryson","Jermyn","Perrin","Ganado","Lolita","Jasper","Groves","Guerra","Sandia","Godley","Joshua","Hamlin","Hawley","Ecleto","Hobson","Kenedy","Forney","Mabank","Rosser","Scurry","Waring","Sarita","Girard","Jayton","Ingram","London","Munday","Deport","Roxton","Sumner","Lometa","Shiner","Yoakum","Jewett","Dayton","Devers","Hardin","Booker","Dinero","Idalou","Slaton","Tahoka","Wilson","Melvin","Axtell","Hewitt","Lorena","Riesel","Tilden","Midway","Tarzan","Devine","Yancey","Menard","Milano","Mullin","Priddy","Nocona","Sunset","Conroe","Willis","Dobbin","Porter","Cactus","Sunray","Naples","Flomot","Etoile","Kerens","Powell","Dawson","Purdon","Newton","Roscoe","Bishop","Adrian","Orange","Gordon","Mingus","Strawn","Panola","Dennis","Bovina","Friona","Girvin","Camden","Moscow","Canyon","Leakey","Bogata","Annona","Tivoli","Hearne","Norton","Rowena","Minden","Mathis","Sinton","Snyder","Albany","Center","Tenaha","Winona","Grulla","Sonora","Euless","Haslet","Keller","Merkel","Dryden","Meadow","Mereta","Austin","Warren","Gilmer","Rankin","Uvalde","Concan","Knippa","Utopia","Canton","Waller","Burton","Laredo","Oilton","Boling","Lissie","Louise","Pierce","Vernon","Lasara","Lyford","Taylor","Thrall","Kermit","Newark","Alvord","Golden","Yantis","Plains","Graham","Loving","Zapata","Lopeno","Lytle","Peggy","Sealy","Maple","Elgin","Paige","Tynan","Hooks","Simms","Damon","Alvin","Clute","Bryan","Early","Bangs","Lyons","Snook","Baird","Clyde","Groom","Cuney","Wells","Byers","Talpa","Allen","Plano","Lavon","Quail","Evant","Mound","Crane","Ozona","Ralls","Wylie","Welch","Enloe","Cuero","Afton","Freer","Cisco","Olden","Ennis","Italy","Clint","Satin","Ector","Gober","Savoy","Warda","Rotan","Aiken","Talco","Donie","Moore","Kemah","Nixon","Pampa","Bells","Tioga","Shiro","Morse","Votaw","Alief","Larue","Alamo","Donna","Pharr","Bynum","Irene","Anton","Smyer","Lipan","Tolar","Cumby","Knott","Merit","China","Alice","Keene","Venus","Anson","Avoca","Runge","Goree","Paris","Petty","Earth","Olton","Spade","Sudan","Leona","Flynn","Kosse","Mexia","Llano","Brady","Doole","Moody","Leroy","Mason","Hondo","Gause","Bowie","Dumas","Omaha","Cason","Sacul","Woden","Barry","Frost","Nolan","Vidor","Santo","Aledo","Whitt","Iraan","Marfa","Emory","Point","Avery","Pecos","Toyah","Miami","Miles","Price","Tatum","Milam","Edroy","Moran","Tyler","Flint","Troup","Caddo","Happy","Kress","Tulia","Hurst","Ovalo","Trent","Manor","Diana","Dodge","Pyote","Bruni","Egypt","Kamay","Odell","Hutto","Rhome","Chico","Tokio","Olney","Troy","Gail","Maud","Nash","Dale","Hart","Rusk","Alto","Tell","Voss","Anna","Nada","Eden","Eola","Myra","Flat","Dawn","Krum","Spur","Rice","Lott","Plum","Roby","Loop","Post","Doss","Cost","Howe","Iola","Hico","Katy","Rule","Buda","Kyle","Kemp","Elsa","Linn","Blum","Como","Dike","Edna","Buna","Nome","Elmo","Hunt","Bend","Hull","Lohn","Voca","Eddy","Mart","Ross","West","Waco","Lodi","Mico","Hext","Star","Call","Waka","Vega","Gary","Azle","Alba","Orla","Fate","Odem","Taft","Dunn","Nemo","Roma","Lawn","Wall","Fred","Inez","Weir","Poth","Wink","Boyd","Hye","May","Era","Guy","Pep","Rye","Tow","Art","Ace","Ira","Arp","Tye","Van"]'
  ),
  PV = [
    "Duck Creek Village",
    "West Valley City",
    "Saratoga Springs",
    "Bear River City",
    "North Salt Lake",
    "Montezuma Creek",
    "Monument Valley",
    "Dammeron Valley",
    "Cache Junction",
    "Bingham Canyon",
    "Salt Lake City",
    "Fountain Green",
    "Mount Pleasant",
    "Eagle Mountain",
    "Pleasant Grove",
    "Mountain Home",
    "Fort Duchesne",
    "American Fork",
    "Brigham City",
    "Grouse Creek",
    "Kanarraville",
    "Mount Carmel",
    "South Jordan",
    "Cedar Valley",
    "Spanish Fork",
    "Saint George",
    "Minersville",
    "Park Valley",
    "East Carbon",
    "Centerville",
    "Woods Cross",
    "Castle Dale",
    "Green River",
    "Orangeville",
    "Cannonville",
    "Henrieville",
    "Circleville",
    "Garden City",
    "West Jordan",
    "Mexican Hat",
    "Lake Powell",
    "Centerfield",
    "Spring City",
    "Grantsville",
    "Rush Valley",
    "Springville",
    "New Harmony",
    "Santa Clara",
    "Toquerville",
    "Pine Valley",
    "Greenville",
    "Collinston",
    "Deweyville",
    "Honeyville",
    "Providence",
    "Smithfield",
    "Wellsville",
    "Kenilworth",
    "Wellington",
    "Dutch John",
    "Clearfield",
    "Farmington",
    "Huntington",
    "Brian Head",
    "Cedar City",
    "Orderville",
    "Leamington",
    "Monticello",
    "Whiterocks",
    "Heber City",
    "Enterprise",
    "Springdale",
    "Washington",
    "Hanksville",
    "Huntsville",
    "Riverside",
    "Snowville",
    "Tremonton",
    "Clarkston",
    "Hyde Park",
    "Millville",
    "Sunnyside",
    "Bountiful",
    "Kaysville",
    "Fruitland",
    "Roosevelt",
    "Cleveland",
    "Escalante",
    "Panguitch",
    "Newcastle",
    "Paragonah",
    "Greenwich",
    "Marysvale",
    "Richfield",
    "Annabella",
    "Koosharem",
    "Coalville",
    "Park City",
    "Santaquin",
    "Wallsburg",
    "Hurricane",
    "La Verkin",
    "Rockville",
    "Fielding",
    "Plymouth",
    "Lewiston",
    "Paradise",
    "Richmond",
    "Hill Afb",
    "Syracuse",
    "Altamont",
    "Bluebell",
    "Duchesne",
    "Antimony",
    "Thompson",
    "Glendale",
    "Fillmore",
    "Hinckley",
    "Oak City",
    "Garrison",
    "Junction",
    "Kingston",
    "Laketown",
    "Randolph",
    "Woodruff",
    "Riverton",
    "Herriman",
    "Blanding",
    "Fairview",
    "Gunnison",
    "Mayfield",
    "Sterling",
    "Elsinore",
    "Glenwood",
    "Stockton",
    "Wendover",
    "Randlett",
    "Mapleton",
    "Bicknell",
    "Teasdale",
    "Milford",
    "Corinne",
    "Garland",
    "Portage",
    "Willard",
    "Cornish",
    "Trenton",
    "Altonah",
    "Tabiona",
    "Talmage",
    "Clawson",
    "Boulder",
    "Parowan",
    "Lynndyl",
    "Croydon",
    "Midvale",
    "Chester",
    "Ephraim",
    "Fayette",
    "Redmond",
    "Henefer",
    "Bonanza",
    "Lapoint",
    "Tridell",
    "Elberta",
    "Central",
    "Gunlock",
    "Hildale",
    "Beaver",
    "Howell",
    "Mantua",
    "Mendon",
    "Newton",
    "Helper",
    "Manila",
    "Layton",
    "Ferron",
    "Tropic",
    "Modena",
    "Summit",
    "Eureka",
    "Holden",
    "Kanosh",
    "Meadow",
    "Scipio",
    "Morgan",
    "Draper",
    "La Sal",
    "Axtell",
    "Moroni",
    "Aurora",
    "Salina",
    "Sigurd",
    "Joseph",
    "Monroe",
    "Sevier",
    "Oakley",
    "Dugway",
    "Ibapah",
    "Tooele",
    "Vernon",
    "Jensen",
    "Vernal",
    "Alpine",
    "Lindon",
    "Goshen",
    "Payson",
    "Midway",
    "Virgin",
    "Torrey",
    "Hooper",
    "Hyrum",
    "Logan",
    "Price",
    "Hanna",
    "Myton",
    "Neola",
    "Emery",
    "Hatch",
    "Bryce",
    "Cisco",
    "Beryl",
    "Levan",
    "Nephi",
    "Alton",
    "Kanab",
    "Delta",
    "Magna",
    "Sandy",
    "Aneth",
    "Bluff",
    "Manti",
    "Wales",
    "Kamas",
    "Provo",
    "Salem",
    "Ivins",
    "Leeds",
    "Lyman",
    "Ogden",
    "Elmo",
    "Moab",
    "Mona",
    "Echo",
    "Peoa",
    "Lehi",
    "Orem",
    "Veyo",
    "Eden",
    "Loa",
    "Roy",
  ],
  HV = [
    "Saint Johnsbury Center",
    "Hartland Four Corners",
    "East Saint Johnsbury",
    "White River Junction",
    "Westminster Station",
    "Bridgewater Corners",
    "Middletown Springs",
    "North Ferrisburgh",
    "Manchester Center",
    "Montgomery Center",
    "Craftsbury Common",
    "South Londonderry",
    "North Springfield",
    "North Bennington",
    "South Burlington",
    "Underhill Center",
    "Highgate Springs",
    "Saint Albans Bay",
    "Belvidere Center",
    "East Wallingford",
    "Northfield Falls",
    "North Montpelier",
    "Waterbury Center",
    "West Brattleboro",
    "East Middlebury",
    "Saint Johnsbury",
    "Lower Waterford",
    "Highgate Center",
    "Sheldon Springs",
    "North Hyde Park",
    "Randolph Center",
    "South Strafford",
    "Thetford Center",
    "East Charleston",
    "Greensboro Bend",
    "West Charleston",
    "North Clarendon",
    "East Montpelier",
    "West Dummerston",
    "South Woodstock",
    "East Arlington",
    "Mc Indoe Falls",
    "Essex Junction",
    "East Berkshire",
    "East Fairfield",
    "Enosburg Falls",
    "Jeffersonville",
    "North Thetford",
    "Newport Center",
    "Center Rutland",
    "West Townshend",
    "West Wardsboro",
    "North Hartland",
    "South Royalton",
    "South Ryegate",
    "East Hardwick",
    "Lyndon Center",
    "West Danville",
    "North Concord",
    "Beecher Falls",
    "Isle La Motte",
    "East Randolph",
    "East Thetford",
    "Cuttingsville",
    "East Poultney",
    "Bellows Falls",
    "Cambridgeport",
    "Saxtons River",
    "South Newfane",
    "Williamsville",
    "North Pomfret",
    "South Pomfret",
    "West Hartford",
    "Proctorsville",
    "North Pownal",
    "East Ryegate",
    "Saint Albans",
    "East Corinth",
    "West Fairlee",
    "West Newbury",
    "West Topsham",
    "Williamstown",
    "West Rutland",
    "Graniteville",
    "Websterville",
    "Jacksonville",
    "West Halifax",
    "Perkinsville",
    "Ferrisburgh",
    "East Dorset",
    "West Rupert",
    "Lyndonville",
    "Island Pond",
    "Bakersfield",
    "Lake Elmore",
    "Morrisville",
    "Wells River",
    "Beebe Plain",
    "Forest Dale",
    "Mount Holly",
    "Wallingford",
    "West Pawlet",
    "East Calais",
    "South Barre",
    "Londonderry",
    "Westminster",
    "Brattleboro",
    "Bridgewater",
    "Brownsville",
    "Springfield",
    "Stockbridge",
    "Starksboro",
    "Middlebury",
    "Bennington",
    "Manchester",
    "Shaftsbury",
    "East Burke",
    "Passumpsic",
    "West Burke",
    "Burlington",
    "Colchester",
    "Huntington",
    "Jonesville",
    "East Haven",
    "Montgomery",
    "Grand Isle",
    "North Hero",
    "South Hero",
    "Waterville",
    "Eden Mills",
    "Brookfield",
    "Post Mills",
    "Washington",
    "Craftsbury",
    "Derby Line",
    "Greensboro",
    "North Troy",
    "Chittenden",
    "Fair Haven",
    "Killington",
    "Pittsfield",
    "Montpelier",
    "East Barre",
    "Marshfield",
    "Northfield",
    "Plainfield",
    "Waitsfield",
    "East Dover",
    "West Dover",
    "Whitingham",
    "Wilmington",
    "Taftsville",
    "New Haven",
    "Vergennes",
    "Granville",
    "Salisbury",
    "Arlington",
    "Bondville",
    "Readsboro",
    "Sheffield",
    "Charlotte",
    "Hinesburg",
    "Shelburne",
    "Underhill",
    "Williston",
    "Guildhall",
    "Lunenburg",
    "Fairfield",
    "Cambridge",
    "Hyde Park",
    "Strafford",
    "Tunbridge",
    "Westfield",
    "Castleton",
    "Hydeville",
    "Pittsford",
    "Waterbury",
    "Worcester",
    "Townshend",
    "Wardsboro",
    "Woodstock",
    "Cavendish",
    "Gaysville",
    "Rochester",
    "Bridport",
    "Shoreham",
    "Stamford",
    "Danville",
    "Hardwick",
    "Winooski",
    "Richmond",
    "Westford",
    "Franklin",
    "Richford",
    "Bradford",
    "Randolph",
    "Thetford",
    "Vershire",
    "Coventry",
    "Irasburg",
    "Bomoseen",
    "Florence",
    "Poultney",
    "Moretown",
    "Woodbury",
    "Marlboro",
    "Ascutney",
    "Hartford",
    "Hartland",
    "Plymouth",
    "Bristol",
    "Monkton",
    "Roxbury",
    "Hancock",
    "Whiting",
    "Peacham",
    "Jericho",
    "Concord",
    "Averill",
    "Fairfax",
    "Sheldon",
    "Swanton",
    "Alburgh",
    "Johnson",
    "Wolcott",
    "Chelsea",
    "Corinth",
    "Fairlee",
    "Newbury",
    "Topsham",
    "Newport",
    "Orleans",
    "Rutland",
    "Belmont",
    "Brandon",
    "Proctor",
    "Adamant",
    "Grafton",
    "Jamaica",
    "Newfane",
    "Barnard",
    "Norwich",
    "Quechee",
    "Reading",
    "Windsor",
    "Chester",
    "Orwell",
    "Ripton",
    "Dorset",
    "Pownal",
    "Rupert",
    "Groton",
    "Barnet",
    "Lyndon",
    "Sutton",
    "Milton",
    "Granby",
    "Canaan",
    "Gilman",
    "Norton",
    "Moscow",
    "Albany",
    "Barton",
    "Glover",
    "Lowell",
    "Morgan",
    "Benson",
    "Pawlet",
    "Calais",
    "Warren",
    "Putney",
    "Vernon",
    "Bethel",
    "Sharon",
    "Wilder",
    "Ludlow",
    "Weston",
    "Essex",
    "Stowe",
    "Derby",
    "Danby",
    "Wells",
    "Barre",
    "Cabot",
    "Peru",
    "Eden",
    "Troy",
  ],
  LV = [
    "King And Queen Court House",
    "Virginia State University",
    "Natural Bridge Station",
    "Charlotte Court House",
    "Saint Stephens Church",
    "Rappahannock Academy",
    "Chincoteague Island",
    "Amelia Court House",
    "Montpelier Station",
    "North Chesterfield",
    "South Chesterfield",
    "Woods Cross Roads",
    "Gloucester Point",
    "Paeonian Springs",
    "Woodberry Forest",
    "Buffalo Junction",
    "Providence Forge",
    "Rockbridge Baths",
    "Colonial Heights",
    "Temperanceville",
    "Charlottesville",
    "Madison Heights",
    "Augusta Springs",
    "Fairfax Station",
    "Mouth Of Wilson",
    "Cluster Springs",
    "Little Plymouth",
    "Wicomico Church",
    "Patrick Springs",
    "Pleasant Valley",
    "Wallops Island",
    "Greenbackville",
    "Jenkins Bridge",
    "Steeles Tavern",
    "Brandy Station",
    "Millers Tavern",
    "Cross Junction",
    "Staffordsville",
    "Mechanicsville",
    "Pennington Gap",
    "Christiansburg",
    "Meadows Of Dan",
    "Hampden Sydney",
    "Natural Bridge",
    "Mc Gaheysville",
    "Mount Crawford",
    "Fort Blackmore",
    "Orkney Springs",
    "Fredericksburg",
    "North Tazewell",
    "Colonial Beach",
    "East Stone Gap",
    "Barren Springs",
    "Virginia Beach",
    "Craddockville",
    "Clifton Forge",
    "Fort Defiance",
    "Stuarts Draft",
    "Williamsville",
    "Coleman Falls",
    "Lawrenceville",
    "Meredithville",
    "Keen Mountain",
    "Pilgrims Knob",
    "Lynch Station",
    "Bowling Green",
    "Drakes Branch",
    "Richardsville",
    "Indian Valley",
    "Stephens City",
    "Manakin Sabot",
    "Stanardsville",
    "Isle Of Wight",
    "Saint Charles",
    "Fort Mitchell",
    "Barboursville",
    "Prince George",
    "Bent Mountain",
    "Port Republic",
    "Mount Jackson",
    "Garrisonville",
    "Burkes Garden",
    "Pounding Mill",
    "Big Stone Gap",
    "Cripple Creek",
    "Rural Retreat",
    "Wachapreague",
    "North Garden",
    "Howardsville",
    "Spout Spring",
    "Fishersville",
    "Mount Sidney",
    "West Augusta",
    "Warm Springs",
    "White Plains",
    "Charles City",
    "Chesterfield",
    "Jeffersonton",
    "Cartersville",
    "Center Cross",
    "Tappahannock",
    "Falls Church",
    "Fort Belvoir",
    "Mount Vernon",
    "Star Tannery",
    "Independence",
    "Ruckersville",
    "Crystal Hill",
    "South Boston",
    "Collinsville",
    "Battery Park",
    "Williamsburg",
    "Shacklefords",
    "Stevensville",
    "Rollins Fork",
    "King William",
    "Purcellville",
    "Lovettsville",
    "Port Haywood",
    "Christchurch",
    "Barhamsville",
    "Cape Charles",
    "Willis Wharf",
    "Edwardsville",
    "Locust Grove",
    "Rhoadesville",
    "Gordonsville",
    "Harrisonburg",
    "Lacey Spring",
    "Singers Glen",
    "Swords Creek",
    "Nickelsville",
    "Fishers Hill",
    "Spotsylvania",
    "Spring Grove",
    "Tannersville",
    "Jewell Ridge",
    "Glade Spring",
    "Martinsville",
    "Newport News",
    "Belle Haven",
    "Davis Wharf",
    "Locustville",
    "Modest Town",
    "Pungoteague",
    "Earlysville",
    "Scottsville",
    "Jetersville",
    "Sweet Briar",
    "Mount Solon",
    "Churchville",
    "Craigsville",
    "Middlebrook",
    "Mint Spring",
    "Weyers Cave",
    "Hot Springs",
    "Glen Wilton",
    "Long Island",
    "Ruther Glen",
    "Laurel Fork",
    "Wylliesburg",
    "Stevensburg",
    "Church Road",
    "Centreville",
    "Dunn Loring",
    "Great Falls",
    "West Mclean",
    "Springfield",
    "Copper Hill",
    "Bremo Bluff",
    "Kents Store",
    "Boones Mill",
    "Rocky Mount",
    "Clear Brook",
    "White Marsh",
    "Hadensville",
    "Vernon Hill",
    "Stanleytown",
    "Head Waters",
    "King George",
    "Merry Point",
    "White Stone",
    "Locust Dale",
    "Cobbs Creek",
    "Baskerville",
    "Clarksville",
    "Church View",
    "Locust Hill",
    "Piney River",
    "Marionville",
    "Heathsville",
    "Sandy Level",
    "Gainesville",
    "Chester Gap",
    "Sperryville",
    "Haynesville",
    "Bridgewater",
    "Timberville",
    "Fort Valley",
    "Sugar Grove",
    "Branchville",
    "Drewryville",
    "Stony Creek",
    "Cedar Bluff",
    "Falls Mills",
    "Bentonville",
    "Front Royal",
    "Coles Point",
    "Mount Holly",
    "Sandy Point",
    "Austinville",
    "Max Meadows",
    "Buena Vista",
    "Fort Monroe",
    "Fort Eustis",
    "Mappsville",
    "New Church",
    "Wattsville",
    "Batesville",
    "Covesville",
    "Free Union",
    "White Hall",
    "Appomattox",
    "Greenville",
    "Huddleston",
    "Big Island",
    "Blue Ridge",
    "Cloverdale",
    "Eagle Rock",
    "Troutville",
    "Valentines",
    "Shortt Gap",
    "New Canton",
    "Buckingham",
    "Port Royal",
    "Hillsville",
    "Midlothian",
    "Berryville",
    "White Post",
    "New Castle",
    "Paint Bank",
    "Rixeyville",
    "Cumberland",
    "Sutherland",
    "Dunnsville",
    "Merrifield",
    "Alexandria",
    "Rectortown",
    "Upperville",
    "The Plains",
    "Somerville",
    "Fork Union",
    "Glade Hill",
    "Union Hall",
    "Winchester",
    "Middletown",
    "Stephenson",
    "Pearisburg",
    "Rich Creek",
    "Ripplemead",
    "Gloucester",
    "Gum Spring",
    "Sandy Hook",
    "State Farm",
    "Scottsburg",
    "Glen Allen",
    "Montpelier",
    "Blue Grass",
    "Carrollton",
    "Carrsville",
    "Smithfield",
    "West Point",
    "Kilmarnock",
    "Nuttsville",
    "Blackwater",
    "Jonesville",
    "Middleburg",
    "Round Hill",
    "Trevilians",
    "Brightwood",
    "Hallieford",
    "Chase City",
    "South Hill",
    "Deltaville",
    "Hardyville",
    "Water View",
    "Blacksburg",
    "Shawsville",
    "Lovingston",
    "Nellysford",
    "Montebello",
    "Jamesville",
    "Machipongo",
    "Nassawadox",
    "Blackstone",
    "Burkeville",
    "Unionville",
    "Rileyville",
    "Shenandoah",
    "Claudville",
    "Pittsville",
    "Disputanta",
    "Nokesville",
    "Woodbridge",
    "Amissville",
    "Flint Hill",
    "Washington",
    "Brownsburg",
    "Keezletown",
    "Penn Laird",
    "Castlewood",
    "Weber City",
    "Maurertown",
    "Toms Brook",
    "New Market",
    "Quicksburg",
    "Boissevain",
    "Pocahontas",
    "Meadowview",
    "Appalachia",
    "Saint Paul",
    "Wytheville",
    "Chesapeake",
    "Petersburg",
    "Portsmouth",
    "Waynesboro",
    "Assawoman",
    "Greenbush",
    "Hacksneck",
    "Harborton",
    "Greenwood",
    "Iron Gate",
    "Evergreen",
    "Arlington",
    "Fort Myer",
    "Lyndhurst",
    "Deerfield",
    "Villamont",
    "Rocky Gap",
    "Daleville",
    "Fincastle",
    "Davenport",
    "Mavisdale",
    "Whitewood",
    "Lynchburg",
    "Altavista",
    "Brookneal",
    "Ladysmith",
    "Fancy Gap",
    "Lambsburg",
    "Ruthville",
    "Keysville",
    "Red House",
    "Mitchells",
    "Birchleaf",
    "Clintwood",
    "Dinwiddie",
    "Mc Kenney",
    "Champlain",
    "Chantilly",
    "Annandale",
    "Newington",
    "Broad Run",
    "Calverton",
    "Delaplane",
    "Warrenton",
    "Remington",
    "Sumerduck",
    "Brucetown",
    "Eggleston",
    "Ware Neck",
    "Goochland",
    "Elk Creek",
    "Troutdale",
    "Virgilina",
    "Beaverdam",
    "Rockville",
    "Mc Dowell",
    "Jamestown",
    "Bruington",
    "Mattaponi",
    "Walkerton",
    "Irvington",
    "Lancaster",
    "Morattico",
    "Rose Hill",
    "Philomont",
    "Waterford",
    "Kenbridge",
    "Lunenburg",
    "Grimstead",
    "New Point",
    "La Crosse",
    "Hartfield",
    "Arrington",
    "Gladstone",
    "Birdsnest",
    "Capeville",
    "Eastville",
    "Franktown",
    "Lottsburg",
    "Reedville",
    "Burr Hill",
    "Sutherlin",
    "Farmville",
    "Green Bay",
    "Catharpin",
    "Haymarket",
    "Belspring",
    "New River",
    "Castleton",
    "Woodville",
    "Fairfield",
    "Fulks Run",
    "Cleveland",
    "Dungannon",
    "Gate City",
    "Strasburg",
    "Woodstock",
    "Broadford",
    "Chilhowie",
    "Saltville",
    "Courtland",
    "Thornburg",
    "Claremont",
    "Wakefield",
    "Bluefield",
    "Richlands",
    "Stratford",
    "Speedwell",
    "Lightfoot",
    "Covington",
    "Lexington",
    "Atlantic",
    "Hallwood",
    "Horntown",
    "Oak Hall",
    "Nelsonia",
    "Onancock",
    "Parksley",
    "Low Moor",
    "Mannboro",
    "Clifford",
    "New Hope",
    "Millboro",
    "Goodview",
    "Montvale",
    "Buchanan",
    "Oriskany",
    "Rawlings",
    "Warfield",
    "Big Rock",
    "Evington",
    "Rustburg",
    "Woodford",
    "Woodlawn",
    "Randolph",
    "Richmond",
    "Millwood",
    "Culpeper",
    "Clinchco",
    "Mc Clure",
    "Laneview",
    "Greenway",
    "Marshall",
    "Casanova",
    "Bealeton",
    "Goldvein",
    "Callaway",
    "Glen Lyn",
    "Pembroke",
    "Achilles",
    "Ordinary",
    "Wicomico",
    "Beaumont",
    "Columbia",
    "Oilville",
    "Whitetop",
    "Skippers",
    "Nathalie",
    "Sandston",
    "Fieldale",
    "Ridgeway",
    "Doe Hill",
    "Monterey",
    "Dahlgren",
    "Sealston",
    "Bluemont",
    "Hamilton",
    "Sterling",
    "Leesburg",
    "Victoria",
    "Rochelle",
    "Wolftown",
    "Bohannon",
    "Cardinal",
    "Skipwith",
    "Roseland",
    "Schuyler",
    "New Kent",
    "Cheriton",
    "Townsend",
    "Wardtown",
    "Nottoway",
    "Somerset",
    "Woolwine",
    "Callands",
    "Dry Fork",
    "Ringgold",
    "Powhatan",
    "Meherrin",
    "Prospect",
    "Fort Lee",
    "Dumfries",
    "Occoquan",
    "Quantico",
    "Triangle",
    "Hiwassee",
    "Viewtown",
    "Elliston",
    "Vesuvius",
    "Broadway",
    "Linville",
    "Grottoes",
    "Rosedale",
    "Duffield",
    "Edinburg",
    "Hartwood",
    "Stafford",
    "Horsepen",
    "Tazewell",
    "Abingdon",
    "Damascus",
    "Montross",
    "Crockett",
    "Yorktown",
    "Danville",
    "Franklin",
    "Hopewell",
    "Manassas",
    "Poquoson",
    "Staunton",
    "Accomac",
    "Painter",
    "Sanford",
    "Tangier",
    "Withams",
    "Keswick",
    "Amherst",
    "Pamplin",
    "Crimora",
    "Thaxton",
    "Bastian",
    "Roanoke",
    "Alberta",
    "Dolphin",
    "Freeman",
    "Gasburg",
    "Brodnax",
    "Oakwood",
    "Vansant",
    "Wolford",
    "Arvonia",
    "Dillwyn",
    "Concord",
    "Milford",
    "Dugspur",
    "Red Oak",
    "Moseley",
    "Chester",
    "Elkwood",
    "Rapidan",
    "Wilsons",
    "Loretto",
    "Clifton",
    "Herndon",
    "Fairfax",
    "Mc Lean",
    "Catlett",
    "Markham",
    "Midland",
    "Palmyra",
    "Penhook",
    "Redwood",
    "Narrows",
    "Newport",
    "Crozier",
    "Maidens",
    "Quinque",
    "Jarratt",
    "Halifax",
    "Ashland",
    "Doswell",
    "Hanover",
    "Studley",
    "Henrico",
    "Bassett",
    "Spencer",
    "Windsor",
    "Newtown",
    "Manquin",
    "Mollusk",
    "Ben Hur",
    "Ashburn",
    "Lincoln",
    "Bumpass",
    "Mineral",
    "Haywood",
    "Madison",
    "Oakpark",
    "Radiant",
    "Hudgins",
    "Mathews",
    "Boydton",
    "Jamaica",
    "Topping",
    "Urbanna",
    "Shipman",
    "Norwood",
    "Wingina",
    "Quinton",
    "Seaview",
    "Burgess",
    "Ophelia",
    "Stanley",
    "Cascade",
    "Chatham",
    "Keeling",
    "Bristow",
    "Newbern",
    "Parrott",
    "Pulaski",
    "Farnham",
    "Village",
    "Catawba",
    "Raphine",
    "Glasgow",
    "Bergton",
    "Criders",
    "Honaker",
    "Lebanon",
    "Hiltons",
    "Boykins",
    "Newsoms",
    "Partlow",
    "Dendron",
    "Elberon",
    "Waverly",
    "Amonate",
    "Red Ash",
    "Mendota",
    "Kinsale",
    "Oldhams",
    "Andover",
    "Coeburn",
    "Ivanhoe",
    "Seaford",
    "Bedford",
    "Bristol",
    "Emporia",
    "Hampton",
    "Norfolk",
    "Radford",
    "Suffolk",
    "Bloxom",
    "Keller",
    "Quinby",
    "Tasley",
    "Crozet",
    "Esmont",
    "Monroe",
    "Swoope",
    "Verona",
    "Bacova",
    "Moneta",
    "Forest",
    "Grundy",
    "Hurley",
    "Gladys",
    "Naruna",
    "Corbin",
    "Sparta",
    "Cullen",
    "Phenix",
    "Boston",
    "Lignum",
    "Breaks",
    "Carson",
    "Dewitt",
    "Hustle",
    "Reston",
    "Lorton",
    "Oakton",
    "Vienna",
    "Orlean",
    "Willis",
    "Ferrum",
    "Dutton",
    "Maryus",
    "Schley",
    "Severn",
    "Clover",
    "Mustoe",
    "Rescue",
    "Mascot",
    "Jersey",
    "Aylett",
    "Lively",
    "Dryden",
    "Keokee",
    "Dulles",
    "Louisa",
    "Dundas",
    "Pratts",
    "Foster",
    "Bracey",
    "Nelson",
    "Saluda",
    "Mc Coy",
    "Lanexa",
    "Exmore",
    "Oyster",
    "Callao",
    "Orange",
    "Ararat",
    "Stuart",
    "Blairs",
    "Gretna",
    "Dublin",
    "Draper",
    "Huntly",
    "Sharps",
    "Warsaw",
    "Vinton",
    "Goshen",
    "Dayton",
    "Elkton",
    "Hinton",
    "Atkins",
    "Marion",
    "Capron",
    "Sedley",
    "Brooke",
    "Sussex",
    "Bishop",
    "Linden",
    "Zacata",
    "Lackey",
    "Norton",
    "Mears",
    "Melfa",
    "Onley",
    "Saxis",
    "Keene",
    "Selma",
    "Hardy",
    "Goode",
    "Lowry",
    "Bland",
    "Ceres",
    "Ebony",
    "Maxie",
    "Raven",
    "Boyce",
    "Haysi",
    "Ammon",
    "Caret",
    "Burke",
    "Paris",
    "Check",
    "Floyd",
    "Henry",
    "Wirtz",
    "Hayes",
    "Fries",
    "Alton",
    "Axton",
    "Norge",
    "Toano",
    "Dogue",
    "Ninde",
    "Weems",
    "Ewing",
    "Aldie",
    "Aroda",
    "Banco",
    "Etlan",
    "Syria",
    "Diggs",
    "Gwynn",
    "North",
    "Onemo",
    "Susan",
    "Pilot",
    "Riner",
    "Afton",
    "Faber",
    "Crewe",
    "Luray",
    "Critz",
    "Vesta",
    "Dante",
    "Basye",
    "Surry",
    "Bandy",
    "Doran",
    "Emory",
    "Hague",
    "Pound",
    "Galax",
    "Salem",
    "Rowe",
    "Cana",
    "Saxe",
    "Reva",
    "Nora",
    "Ford",
    "Hume",
    "Troy",
    "Gore",
    "Bena",
    "Dyke",
    "Zuni",
    "Hood",
    "Leon",
    "Moon",
    "Wake",
    "Tyro",
    "Hurt",
    "Java",
    "Rice",
    "Ivor",
    "Ruby",
    "Yale",
    "Wise",
    "Ivy",
    "Bee",
    "Ark",
    "Dhs",
  ],
  WV = [
    "Fairchild Air Force Base",
    "Bainbridge Island",
    "Mountlake Terrace",
    "Copalis Crossing",
    "University Place",
    "North Bonneville",
    "Snoqualmie Pass",
    "Anderson Island",
    "Nine Mile Falls",
    "East Wenatchee",
    "South Cle Elum",
    "Metaline Falls",
    "Blakely Island",
    "North Lakewood",
    "Airway Heights",
    "Spokane Valley",
    "West Richland",
    "Battle Ground",
    "Brush Prairie",
    "Electric City",
    "Copalis Beach",
    "Pacific Beach",
    "Port Townsend",
    "Black Diamond",
    "Mercer Island",
    "South Prairie",
    "Friday Harbor",
    "Sedro Woolley",
    "Granite Falls",
    "Camano Island",
    "Otis Orchards",
    "College Place",
    "Point Roberts",
    "Chelan Falls",
    "Port Angeles",
    "Wilson Creek",
    "Grand Coulee",
    "Ocean Shores",
    "Port Hadlock",
    "Maple Valley",
    "Port Orchard",
    "White Salmon",
    "Silver Creek",
    "Paradise Inn",
    "Lopez Island",
    "Mount Vernon",
    "Lake Stevens",
    "Liberty Lake",
    "Medical Lake",
    "Kettle Falls",
    "East Olympia",
    "Lummi Island",
    "Benton City",
    "Leavenworth",
    "Clallam Bay",
    "Castle Rock",
    "Rock Island",
    "Coulee City",
    "Amanda Park",
    "Port Ludlow",
    "Federal Way",
    "Woodinville",
    "Port Gamble",
    "South Colby",
    "Centerville",
    "Oysterville",
    "Bonney Lake",
    "Camp Murray",
    "Mcchord Afb",
    "Deer Harbor",
    "Shaw Island",
    "Marblemount",
    "Newman Lake",
    "Grays River",
    "Walla Walla",
    "Maple Falls",
    "Ridgefield",
    "Silverlake",
    "Bridgeport",
    "Waterville",
    "Moses Lake",
    "Royal City",
    "Cosmopolis",
    "Humptulips",
    "Coupeville",
    "Oak Harbor",
    "North Bend",
    "Ravensdale",
    "Snoqualmie",
    "Rollingbay",
    "Silverdale",
    "Manchester",
    "Southworth",
    "Ellensburg",
    "Dallesport",
    "Goldendale",
    "Trout Lake",
    "Harrington",
    "Conconully",
    "Coulee Dam",
    "Elmer City",
    "Bay Center",
    "South Bend",
    "Long Beach",
    "Ocean Park",
    "Eatonville",
    "Gig Harbor",
    "Fox Island",
    "Longbranch",
    "Steilacoom",
    "Burlington",
    "Mill Creek",
    "Darrington",
    "Marysville",
    "Four Lakes",
    "Greenacres",
    "Valleyford",
    "Springdale",
    "Littlerock",
    "Bellingham",
    "Farmington",
    "Saint John",
    "Brownstown",
    "White Swan",
    "Ritzville",
    "Washtucna",
    "Clarkston",
    "Kennewick",
    "Wenatchee",
    "Ardenvoir",
    "Peshastin",
    "Carlsborg",
    "La Center",
    "Vancouver",
    "Washougal",
    "Ryderwood",
    "Mansfield",
    "Palisades",
    "Inchelium",
    "Soap Lake",
    "Stratford",
    "Montesano",
    "Greenbank",
    "Carnation",
    "Fall City",
    "Sammamish",
    "Skykomish",
    "Bremerton",
    "Hansville",
    "Indianola",
    "Suquamish",
    "Klickitat",
    "Wahkiacus",
    "Bickleton",
    "Roosevelt",
    "Centralia",
    "Mossyrock",
    "Davenport",
    "Grapeview",
    "Hoodsport",
    "Lilliwaup",
    "Riverside",
    "Carbonado",
    "La Grande",
    "Eastsound",
    "Anacortes",
    "Clearlake",
    "La Conner",
    "Stevenson",
    "Underwood",
    "Arlington",
    "Snohomish",
    "Chattaroy",
    "Deer Park",
    "Fairfield",
    "Wellpinit",
    "Fruitland",
    "Loon Lake",
    "Northport",
    "Rochester",
    "Cathlamet",
    "Skamokawa",
    "Waitsburg",
    "Oakesdale",
    "Uniontown",
    "Grandview",
    "Sunnyside",
    "Toppenish",
    "Paterson",
    "Plymouth",
    "Richland",
    "Cashmere",
    "Stehekin",
    "Neah Bay",
    "Starbuck",
    "Carrolls",
    "Longview",
    "Woodland",
    "Danville",
    "Republic",
    "Kahlotus",
    "Hartline",
    "Aberdeen",
    "Grayland",
    "Mccleary",
    "Oakville",
    "Quinault",
    "Westport",
    "Freeland",
    "Chimacum",
    "Nordland",
    "Quilcene",
    "Bellevue",
    "Enumclaw",
    "Issaquah",
    "Kirkland",
    "Seahurst",
    "Kingston",
    "Tracyton",
    "Cle Elum",
    "Kittitas",
    "Appleton",
    "Glenwood",
    "Packwood",
    "Chehalis",
    "Napavine",
    "Onalaska",
    "Brewster",
    "Okanogan",
    "Oroville",
    "Tonasket",
    "Wauconda",
    "Winthrop",
    "Nespelem",
    "Tokeland",
    "Nahcotta",
    "Metaline",
    "Kapowsin",
    "Puyallup",
    "Spanaway",
    "Wilkeson",
    "Longmire",
    "Lakewood",
    "Concrete",
    "Hamilton",
    "Rockport",
    "Lynnwood",
    "Gold Bar",
    "Mukilteo",
    "Stanwood",
    "Marshall",
    "Rockford",
    "Veradale",
    "Chewelah",
    "Colville",
    "Tumwater",
    "Prescott",
    "Ferndale",
    "Nooksack",
    "Endicott",
    "Garfield",
    "Lacrosse",
    "Thornton",
    "Othello",
    "Anatone",
    "Prosser",
    "Monitor",
    "La Push",
    "Heisson",
    "Laurier",
    "Connell",
    "Eltopia",
    "Pomeroy",
    "Ephrata",
    "Beverly",
    "Mattawa",
    "Hoquiam",
    "Moclips",
    "Neilton",
    "Taholah",
    "Clinton",
    "Langley",
    "Brinnon",
    "Bothell",
    "Kenmore",
    "Pacific",
    "Preston",
    "Redmond",
    "Seattle",
    "Keyport",
    "Poulsbo",
    "Seabeck",
    "Vantage",
    "Wishram",
    "Glenoma",
    "Mineral",
    "Cinebar",
    "Winlock",
    "Sprague",
    "Creston",
    "Lincoln",
    "Belfair",
    "Matlock",
    "Shelton",
    "Carlton",
    "Pateros",
    "Raymond",
    "Chinook",
    "Naselle",
    "Seaview",
    "Newport",
    "Ashford",
    "Buckley",
    "Lakebay",
    "Mckenna",
    "Waldron",
    "Edmonds",
    "Everett",
    "Silvana",
    "Startup",
    "Colbert",
    "Reardan",
    "Spangle",
    "Waverly",
    "Spokane",
    "Clayton",
    "Gifford",
    "Hunters",
    "Olympia",
    "Rainier",
    "Rosburg",
    "Burbank",
    "Touchet",
    "Wallula",
    "Everson",
    "Belmont",
    "Palouse",
    "Pullman",
    "Rosalia",
    "Steptoe",
    "Cowiche",
    "Granger",
    "Outlook",
    "Asotin",
    "Chelan",
    "Dryden",
    "Entiat",
    "Malaga",
    "Manson",
    "Beaver",
    "Sequim",
    "Yacolt",
    "Dayton",
    "Cougar",
    "Kalama",
    "Toutle",
    "Orondo",
    "Curlew",
    "Keller",
    "Orient",
    "George",
    "Marlin",
    "Quincy",
    "Warden",
    "Malone",
    "Satsop",
    "Auburn",
    "Burton",
    "Duvall",
    "Hobart",
    "Medina",
    "Renton",
    "Vashon",
    "Baring",
    "Burley",
    "Olalla",
    "Retsil",
    "Easton",
    "Ronald",
    "Roslyn",
    "Bingen",
    "Morton",
    "Randle",
    "Curtis",
    "Galvin",
    "Pe Ell",
    "Salkum",
    "Toledo",
    "Edwall",
    "Almira",
    "Lamona",
    "Mohler",
    "Odessa",
    "Wilbur",
    "Tahuya",
    "Loomis",
    "Malott",
    "Mazama",
    "Methow",
    "Ilwaco",
    "Cusick",
    "Dupont",
    "Graham",
    "Sumner",
    "Milton",
    "Orting",
    "Vaughn",
    "Tacoma",
    "Conway",
    "Carson",
    "Monroe",
    "Sultan",
    "Cheney",
    "Tumtum",
    "Marcus",
    "Valley",
    "Bucoda",
    "Tenino",
    "Blaine",
    "Custer",
    "Deming",
    "Lynden",
    "Lamont",
    "Albion",
    "Colfax",
    "Colton",
    "Malden",
    "Hooper",
    "Yakima",
    "Harrah",
    "Mabton",
    "Naches",
    "Parker",
    "Tieton",
    "Wapato",
    "Zillah",
    "Benge",
    "Forks",
    "Joyce",
    "Sekiu",
    "Amboy",
    "Camas",
    "Ariel",
    "Kelso",
    "Boyds",
    "Pasco",
    "Thorp",
    "Husum",
    "Ethel",
    "Vader",
    "Allyn",
    "Union",
    "Twisp",
    "Lebam",
    "Menlo",
    "Wauna",
    "Orcas",
    "Lyman",
    "Index",
    "Latah",
    "Evans",
    "Lacey",
    "Dixie",
    "Sumas",
    "Tekoa",
    "Buena",
    "Moxee",
    "Selah",
    "Lind",
    "Malo",
    "Mesa",
    "Elma",
    "Kent",
    "Lyle",
    "Adna",
    "Doty",
    "Omak",
    "Ione",
    "Elbe",
    "Olga",
    "Mead",
    "Mica",
    "Ford",
    "Addy",
    "Rice",
    "Yelm",
    "Acme",
    "Usk",
    "Roy",
    "Bow",
    "Elk",
    "Hay",
  ],
  AV = [
    "White Sulphur Springs",
    "Green Sulphur Springs",
    "Shenandoah Junction",
    "Keslers Cross Lanes",
    "Charlton Heights",
    "South Charleston",
    "Gallipolis Ferry",
    "Berkeley Springs",
    "Camden On Gauley",
    "New Martinsville",
    "Windsor Heights",
    "Fraziers Bottom",
    "Webster Springs",
    "Falling Waters",
    "Grassy Meadows",
    "New Cumberland",
    "New Manchester",
    "Griffithsville",
    "Point Pleasant",
    "Bruceton Mills",
    "Jumping Branch",
    "Allen Junction",
    "Barboursville",
    "Gauley Bridge",
    "Kanawha Falls",
    "Meadow Bridge",
    "Capon Springs",
    "Yellow Spring",
    "Reynoldsville",
    "Harpers Ferry",
    "Kearneysville",
    "Shepherdstown",
    "Spurlockville",
    "Montana Mines",
    "West Columbia",
    "North Matewan",
    "Great Cacapon",
    "Mount Lookout",
    "Pence Springs",
    "Tallmansville",
    "Hacker Valley",
    "Porters Falls",
    "Mineral Wells",
    "Coal Mountain",
    "Gerrardstown",
    "Bloomingrose",
    "Turtle Creek",
    "Little Birch",
    "Beech Bottom",
    "Center Point",
    "Mount Carbon",
    "Fayetteville",
    "Lahmansville",
    "Williamsburg",
    "Capon Bridge",
    "Green Spring",
    "Purgitsville",
    "Wardensville",
    "West Milford",
    "Cottageville",
    "Charles Town",
    "Summit Point",
    "Falling Rock",
    "Saint Albans",
    "Walkersville",
    "Chapmanville",
    "Barrackville",
    "Summersville",
    "Valley Grove",
    "West Liberty",
    "Seneca Rocks",
    "Independence",
    "Crab Orchard",
    "Shady Spring",
    "Huttonsville",
    "Meadow Creek",
    "Middlebourne",
    "Sistersville",
    "French Creek",
    "Kanawha Head",
    "Williamstown",
    "New Richmond",
    "North Spring",
    "Martinsburg",
    "Bunker Hill",
    "Hedgesville",
    "Whitesville",
    "Short Creek",
    "Arnoldsburg",
    "Big Springs",
    "Grantsville",
    "Glen Ferris",
    "Mount Olive",
    "Spring Dale",
    "Mount Storm",
    "Slanesville",
    "Springfield",
    "Meadowbrook",
    "Mount Clare",
    "Cabin Creek",
    "Cedar Grove",
    "Alum Bridge",
    "West Hamlin",
    "Amherstdale",
    "Peach Creek",
    "Verdunville",
    "Jenkinjones",
    "Paynesville",
    "Warriormine",
    "Four States",
    "Worthington",
    "Glen Easton",
    "Moundsville",
    "Apple Grove",
    "Kellysville",
    "Spanishburg",
    "Wharncliffe",
    "Blacksville",
    "Secondcreek",
    "Sinks Grove",
    "Craigsville",
    "Birch River",
    "Triadelphia",
    "Circleville",
    "Sugar Grove",
    "Upper Tract",
    "Saint Marys",
    "Scott Depot",
    "Clear Creek",
    "Glen Daniel",
    "Monterville",
    "Valley Bend",
    "Valley Head",
    "Harrisville",
    "Gandeeville",
    "Looneyville",
    "Forest Hill",
    "Jacksonburg",
    "Parkersburg",
    "Glen Rogers",
    "Moatsville",
    "Burnsville",
    "Follansbee",
    "Huntington",
    "Mount Zion",
    "New Milton",
    "West Union",
    "Deep Water",
    "Montgomery",
    "Mount Hope",
    "Normantown",
    "Coxs Mills",
    "Cedarville",
    "Petersburg",
    "Ronceverte",
    "Moorefield",
    "Old Fields",
    "Clarksburg",
    "Bridgeport",
    "Lost Creek",
    "Lumberport",
    "Enterprise",
    "Mount Alto",
    "Sandyville",
    "Ravenswood",
    "Alum Creek",
    "Blue Creek",
    "Charleston",
    "Branchland",
    "Pecks Mill",
    "Roderfield",
    "Switchback",
    "Farmington",
    "Grant Town",
    "Mannington",
    "Rivesville",
    "Camp Creek",
    "Burlington",
    "Elk Garden",
    "Fort Ashby",
    "Wiley Ford",
    "Williamson",
    "Borderland",
    "Red Jacket",
    "Morgantown",
    "Maidsville",
    "Greenville",
    "Peterstown",
    "Waiteville",
    "Mount Nebo",
    "Brandywine",
    "Green Bank",
    "Rowlesburg",
    "Arthurdale",
    "Reedsville",
    "Terra Alta",
    "Rock Creek",
    "Cool Ridge",
    "Glen White",
    "Mac Arthur",
    "Piney View",
    "Princewick",
    "Prosperity",
    "Mill Creek",
    "Smithville",
    "Flemington",
    "Buckhannon",
    "Selbyville",
    "Kiahsville",
    "Wilsondale",
    "Upperglade",
    "Paden City",
    "Pine Grove",
    "Smithfield",
    "Belleville",
    "Davisville",
    "Washington",
    "Clear Fork",
    "Kopperston",
    "Saulsville",
    "Ravencliff",
    "Stephenson",
    "Cheat Lake",
    "Belington",
    "Bob White",
    "Ridgeview",
    "Sylvester",
    "Flatwoods",
    "Frametown",
    "Wellsburg",
    "Salt Rock",
    "Millstone",
    "Lizemores",
    "Smithburg",
    "Cannelton",
    "Powellton",
    "Glen Jean",
    "Lochgelly",
    "Glenville",
    "Sand Fork",
    "Maysville",
    "Lewisburg",
    "Frankford",
    "Maxwelton",
    "High View",
    "Lost City",
    "Shinnston",
    "Millville",
    "Clendenin",
    "Drybranch",
    "East Bank",
    "Gallagher",
    "Hugheston",
    "Institute",
    "Winifrede",
    "Woodville",
    "Big Creek",
    "Accoville",
    "Henlawson",
    "Mount Gay",
    "Sarah Ann",
    "Stollings",
    "Wilkinson",
    "Big Sandy",
    "Northfork",
    "Glen Dale",
    "Henderson",
    "Southside",
    "New Haven",
    "Bluefield",
    "Princeton",
    "New Creek",
    "Chattaroy",
    "Delbarton",
    "Naugatuck",
    "Cassville",
    "Granville",
    "Pursglove",
    "Gap Mills",
    "Wolfcreek",
    "Hillsboro",
    "Marlinton",
    "Slatyfork",
    "Tunnelton",
    "Masontown",
    "Red House",
    "Hurricane",
    "Dry Creek",
    "Coal City",
    "Josephine",
    "Slab Fork",
    "Stanaford",
    "White Oak",
    "Macfarlan",
    "Petroleum",
    "Ellenboro",
    "Pennsboro",
    "Left Hand",
    "Sandstone",
    "Hambleton",
    "Hendricks",
    "Red Creek",
    "Cleveland",
    "Frenchton",
    "Rock Cave",
    "East Lynn",
    "Lavalette",
    "Littleton",
    "Elizabeth",
    "Palestine",
    "Ikes Fork",
    "Pineville",
    "Rock View",
    "Glen Fork",
    "Galloway",
    "Philippi",
    "Glengary",
    "Ridgeway",
    "Danville",
    "Twilight",
    "Exchange",
    "Gassaway",
    "Colliers",
    "Culloden",
    "Big Bend",
    "Bickmore",
    "Procious",
    "Wallback",
    "Kimberly",
    "Smithers",
    "Oak Hill",
    "Thurmond",
    "Rosedale",
    "Gormania",
    "Alderson",
    "Caldwell",
    "Rainelle",
    "Quinwood",
    "Bloomery",
    "Hepzibah",
    "Millwood",
    "Bakerton",
    "Halltown",
    "Hansford",
    "Hernshaw",
    "Pond Gap",
    "Crawford",
    "Jane Lew",
    "Clothier",
    "Sharples",
    "Chauncey",
    "Avondale",
    "Bradshaw",
    "Cucumber",
    "Maybeury",
    "Fairmont",
    "Carolina",
    "Fairview",
    "Kingmont",
    "Mcmechen",
    "Hartford",
    "Glenwood",
    "Bramwell",
    "Hiawatha",
    "Lashmeet",
    "Montcalm",
    "Flat Top",
    "Piedmont",
    "Ridgeley",
    "Edgarton",
    "Dellslow",
    "Pentress",
    "Lindside",
    "Richwood",
    "Wheeling",
    "Franklin",
    "Riverton",
    "Arbovale",
    "Snowshoe",
    "Albright",
    "Kingwood",
    "Bancroft",
    "Hometown",
    "Winfield",
    "Fairdale",
    "Mabscott",
    "Surveyor",
    "Helvetia",
    "Ellamore",
    "Montrose",
    "Pipestem",
    "Rosemont",
    "Thornton",
    "Friendly",
    "Fort Gay",
    "Prichard",
    "Rockport",
    "Marianna",
    "Mc Graws",
    "Ashford",
    "Comfort",
    "Jeffrey",
    "Madison",
    "Peytona",
    "Wharton",
    "Heaters",
    "Bethany",
    "Ivydale",
    "Kincaid",
    "Hilltop",
    "Lansing",
    "Layland",
    "Lookout",
    "Scarbro",
    "Fairlea",
    "Crawley",
    "Charmco",
    "Augusta",
    "Chester",
    "Weirton",
    "Mathias",
    "Anmoore",
    "Haywood",
    "Spelter",
    "Wallace",
    "Elkview",
    "Eskdale",
    "Glasgow",
    "Handley",
    "Mammoth",
    "Tornado",
    "Ireland",
    "Orlando",
    "Midkiff",
    "Sumerco",
    "Kistler",
    "Mallory",
    "Switzer",
    "Whitman",
    "Anawalt",
    "Bartley",
    "Berwind",
    "Elkhorn",
    "Hensley",
    "Kimball",
    "Newhall",
    "Pageton",
    "Panther",
    "Premier",
    "Benwood",
    "Cameron",
    "Proctor",
    "Freeman",
    "Matoaka",
    "Nemours",
    "Justice",
    "Baisden",
    "Gilbert",
    "Breeden",
    "Dingess",
    "Matewan",
    "Newtown",
    "Ragland",
    "Ballard",
    "Wayside",
    "Paw Paw",
    "Fenwick",
    "Drennen",
    "Leivasy",
    "Belmont",
    "Buckeye",
    "Dunmore",
    "Newburg",
    "Buffalo",
    "Eleanor",
    "Liberty",
    "Colcord",
    "Dorothy",
    "Beckley",
    "Bradley",
    "Daniels",
    "Raleigh",
    "Rhodell",
    "Skelton",
    "Pickens",
    "Beverly",
    "Coalton",
    "Dryfork",
    "Whitmer",
    "Pullman",
    "Spencer",
    "Talcott",
    "Grafton",
    "Simpson",
    "Parsons",
    "Shirley",
    "Lorentz",
    "Erbacon",
    "Big Run",
    "Hundred",
    "Brohard",
    "Creston",
    "Waverly",
    "Herndon",
    "Brenton",
    "Cyclone",
    "Fanrock",
    "Hanover",
    "Matheny",
    "Wyoming",
    "Corinne",
    "Mullens",
    "Junior",
    "Inwood",
    "Foster",
    "Gordon",
    "Hewett",
    "Nellis",
    "Ottawa",
    "Racine",
    "Uneeda",
    "Julian",
    "Sutton",
    "Napier",
    "Lesage",
    "Milton",
    "Bomont",
    "Indore",
    "Maysel",
    "Boomer",
    "Robson",
    "Ansted",
    "Danese",
    "Dothan",
    "Edmond",
    "Minden",
    "Prince",
    "Victor",
    "Winona",
    "Nallen",
    "Bayard",
    "Cabins",
    "Asbury",
    "Renick",
    "Leslie",
    "Rupert",
    "Levels",
    "Points",
    "Delray",
    "Romney",
    "Shanks",
    "Newell",
    "Fisher",
    "Advent",
    "Le Roy",
    "Ripley",
    "Ranson",
    "Rippon",
    "Blount",
    "Dunbar",
    "London",
    "Camden",
    "Horner",
    "Weston",
    "Hamlin",
    "Ranger",
    "Yawkey",
    "Holden",
    "Lorado",
    "Lyburn",
    "Eckman",
    "Elbert",
    "Iaeger",
    "Isaban",
    "Mohawk",
    "Raysal",
    "Squire",
    "Thorpe",
    "Wilcoe",
    "Baxter",
    "Colfax",
    "Idamay",
    "Rachel",
    "Dallas",
    "Letart",
    "Ashton",
    "Athens",
    "Beeson",
    "Kegley",
    "Lerona",
    "Keyser",
    "Verner",
    "Kermit",
    "Lenore",
    "Varney",
    "Calvin",
    "Canvas",
    "Gilboa",
    "Nettie",
    "Bartow",
    "Durbin",
    "Aurora",
    "Arnett",
    "Beaver",
    "Eccles",
    "Harper",
    "Lanark",
    "Lester",
    "Midway",
    "Sophia",
    "Elkins",
    "Bowden",
    "Dailey",
    "Harman",
    "Kerens",
    "Norton",
    "Auburn",
    "Newton",
    "Walton",
    "Hinton",
    "Nimitz",
    "Thomas",
    "Adrian",
    "Ceredo",
    "Dunlow",
    "Kenova",
    "Shoals",
    "Bergoo",
    "Reader",
    "Folsom",
    "Burton",
    "Munday",
    "Vienna",
    "Walker",
    "Itmann",
    "Oceana",
    "Sabine",
    "Volga",
    "Costa",
    "Orgas",
    "Copen",
    "Chloe",
    "Widen",
    "Dille",
    "Alloy",
    "Shock",
    "Smoot",
    "Baker",
    "Milam",
    "Gypsy",
    "Salem",
    "Wyatt",
    "Evans",
    "Given",
    "Kenna",
    "Belle",
    "Dawes",
    "Miami",
    "Nitro",
    "Pinch",
    "Pratt",
    "Alkol",
    "Harts",
    "Blair",
    "Ethel",
    "Logan",
    "Bruno",
    "Davin",
    "Yolyn",
    "Welch",
    "Mason",
    "Wolfe",
    "Osage",
    "Union",
    "Dixie",
    "Belva",
    "Swiss",
    "Tioga",
    "Onego",
    "Bretz",
    "Eglon",
    "Teays",
    "Artie",
    "Naoma",
    "Saxon",
    "Ghent",
    "Helen",
    "Glady",
    "Mabie",
    "Berea",
    "Cairo",
    "Reedy",
    "Davis",
    "Genoa",
    "Wayne",
    "Cowen",
    "Diana",
    "Covel",
    "Jesse",
    "Lynco",
    "Simon",
    "Amigo",
    "Maben",
    "Seth",
    "Orma",
    "Clay",
    "Duck",
    "Glen",
    "Nebo",
    "Page",
    "Hico",
    "Linn",
    "Troy",
    "Myra",
    "Lake",
    "Cora",
    "Omar",
    "Davy",
    "Gary",
    "Jolo",
    "Kyle",
    "Metz",
    "Leon",
    "Rock",
    "Rawl",
    "Wana",
    "Pool",
    "Cass",
    "Poca",
    "Bolt",
    "Amma",
    "Alma",
    "Crum",
    "Wyco",
    "Bim",
    "Van",
    "Ona",
    "Pax",
    "Rio",
    "Gay",
    "Tad",
    "Sod",
    "Man",
    "War",
    "Odd",
    "Bud",
  ],
  GV = [
    "Washington Island",
    "Black River Falls",
    "Heafford Junction",
    "Saint Croix Falls",
    "Manitowish Waters",
    "Prairie Du Chien",
    "Pleasant Prairie",
    "Amherst Junction",
    "Boulder Junction",
    "Wisconsin Rapids",
    "Forest Junction",
    "Wisconsin Dells",
    "Armstrong Creek",
    "South Milwaukee",
    "Port Washington",
    "Richland Center",
    "Sheboygan Falls",
    "Lac Du Flambeau",
    "Menomonee Falls",
    "Butte Des Morts",
    "Chippewa Falls",
    "Mount Sterling",
    "Soldiers Grove",
    "Baileys Harbor",
    "Lake Nebagamon",
    "Lyndon Station",
    "Blanchardville",
    "Little Suamico",
    "Combined Locks",
    "East Ellsworth",
    "Prairie Du Sac",
    "Fountain City",
    "Cottage Grove",
    "Morrisonville",
    "Solon Springs",
    "Campbellsport",
    "Mount Calvary",
    "Mineral Point",
    "Johnson Creek",
    "Fort Atkinson",
    "Francis Creek",
    "Kellnersville",
    "Saint Nazianz",
    "Hales Corners",
    "Saint Francis",
    "Lake Tomahawk",
    "Spring Valley",
    "Junction City",
    "Stevens Point",
    "Glenwood City",
    "North Freedom",
    "Saint Germain",
    "Genesee Depot",
    "North Prairie",
    "Prairie Farm",
    "New Holstein",
    "Cross Plains",
    "Sturgeon Bay",
    "Union Center",
    "Camp Douglas",
    "Oconto Falls",
    "Pelican Lake",
    "Little Chute",
    "Star Prairie",
    "Weyerhaeuser",
    "New Richmond",
    "Spring Green",
    "Rock Springs",
    "Green Valley",
    "Elkhart Lake",
    "Stetsonville",
    "Independence",
    "Pigeon Falls",
    "Land O Lakes",
    "Presque Isle",
    "Williams Bay",
    "Clintonville",
    "Port Edwards",
    "Grand Marsh",
    "High Bridge",
    "Turtle Lake",
    "Wrightstown",
    "New Franken",
    "Stockbridge",
    "Neillsville",
    "Pardeeville",
    "Black Earth",
    "Blue Mounds",
    "Mount Horeb",
    "Sun Prairie",
    "Brownsville",
    "Ellison Bay",
    "Forestville",
    "South Range",
    "Saint Cloud",
    "Fond Du Lac",
    "Bloomington",
    "Dickeyville",
    "Hazel Green",
    "Patch Grove",
    "Platteville",
    "Alma Center",
    "New Munster",
    "Powers Lake",
    "Silver Lake",
    "South Wayne",
    "Summit Lake",
    "Tisch Mills",
    "Porterfield",
    "Briggsville",
    "Tunnel City",
    "Rhinelander",
    "Mc Naughton",
    "Three Lakes",
    "Black Creek",
    "Hortonville",
    "Beldenville",
    "River Falls",
    "Maiden Rock",
    "Balsam Lake",
    "Nelsonville",
    "Franksville",
    "Kansasville",
    "Union Grove",
    "Sextonville",
    "Orfordville",
    "Lake Delton",
    "Cedar Grove",
    "Random Lake",
    "Trempealeau",
    "Coon Valley",
    "Eagle River",
    "Honey Creek",
    "Lake Geneva",
    "Springfield",
    "Springbrook",
    "Scandinavia",
    "Friendship",
    "Cumberland",
    "Cornucopia",
    "Grand View",
    "Iron River",
    "Grantsburg",
    "New Auburn",
    "Abbotsford",
    "Dorchester",
    "Doylestown",
    "Fall River",
    "Ferryville",
    "Gays Mills",
    "Belleville",
    "Mc Farland",
    "Hustisford",
    "Iron Ridge",
    "Reeseville",
    "Beaver Dam",
    "Egg Harbor",
    "Fish Creek",
    "Sister Bay",
    "Boyceville",
    "Downsville",
    "Rock Falls",
    "Sand Creek",
    "Eau Claire",
    "Fall Creek",
    "Blue River",
    "Livingston",
    "Glen Haven",
    "Mount Hope",
    "Monticello",
    "New Glarus",
    "Green Lake",
    "Dodgeville",
    "Hollandale",
    "Helenville",
    "Lake Mills",
    "New Lisbon",
    "Benet Lake",
    "Twin Lakes",
    "West Salem",
    "Darlington",
    "Shullsburg",
    "White Lake",
    "Reedsville",
    "Two Rivers",
    "Rothschild",
    "Athelstane",
    "Packwaukee",
    "Hazelhurst",
    "Bear Creek",
    "Greenville",
    "Hager City",
    "Clear Lake",
    "Park Falls",
    "Burlington",
    "Sturtevant",
    "Evansville",
    "Janesville",
    "Glen Flora",
    "Lime Ridge",
    "Loganville",
    "Stone Lake",
    "Birnamwood",
    "Wittenberg",
    "Glenbeulah",
    "Jump River",
    "Galesville",
    "Genoa City",
    "Whitewater",
    "Shell Lake",
    "Germantown",
    "Brookfield",
    "North Lake",
    "Oconomowoc",
    "New Berlin",
    "New London",
    "Ogdensburg",
    "Pine River",
    "Plainfield",
    "Redgranite",
    "Winneconne",
    "Marshfield",
    "Auburndale",
    "Pittsville",
    "Butternut",
    "Clam Lake",
    "La Pointe",
    "Barronett",
    "Rice Lake",
    "Port Wing",
    "Greenleaf",
    "Green Bay",
    "Gilmanton",
    "Jim Falls",
    "Greenwood",
    "Arlington",
    "Friesland",
    "Lynxville",
    "Cambridge",
    "Deerfield",
    "Mazomanie",
    "Middleton",
    "Stoughton",
    "Watertown",
    "Maplewood",
    "Hawthorne",
    "Eau Galle",
    "Elk Mound",
    "Menomonie",
    "Ridgeland",
    "Fairchild",
    "Long Lake",
    "Fairwater",
    "Rosendale",
    "Cassville",
    "Cuba City",
    "Fennimore",
    "Lancaster",
    "Sinsinawa",
    "Browntown",
    "Marquette",
    "Princeton",
    "Barneveld",
    "Iron Belt",
    "Merrillan",
    "Jefferson",
    "Camp Lake",
    "Woodworth",
    "Luxemburg",
    "La Crosse",
    "Deerbrook",
    "Cleveland",
    "Manitowoc",
    "Schofield",
    "Stratford",
    "Marinette",
    "Wausaukee",
    "Westfield",
    "Greendale",
    "Oak Creek",
    "Milwaukee",
    "Cedarburg",
    "Saukville",
    "Stockholm",
    "Ellsworth",
    "Plum City",
    "Brantwood",
    "Caledonia",
    "Rochester",
    "Waterford",
    "Lone Rock",
    "Cazenovia",
    "Footville",
    "Ladysmith",
    "Deer Park",
    "Woodville",
    "Sauk City",
    "Hillpoint",
    "Reedsburg",
    "Edgewater",
    "Greenbush",
    "Sheboygan",
    "Whitehall",
    "Chaseburg",
    "Hillsboro",
    "Readstown",
    "Star Lake",
    "East Troy",
    "Pell Lake",
    "Birchwood",
    "Richfield",
    "West Bend",
    "Delafield",
    "Elm Grove",
    "Mukwonago",
    "Big Falls",
    "Embarrass",
    "Readfield",
    "Weyauwega",
    "Poy Sippi",
    "Saxeville",
    "Wild Rose",
    "Winnebago",
    "Milladore",
    "Dellwood",
    "Comstock",
    "Bayfield",
    "Drummond",
    "Herbster",
    "Washburn",
    "Cochrane",
    "Brillion",
    "Sherwood",
    "Holcombe",
    "Columbus",
    "Poynette",
    "Randolph",
    "Deforest",
    "Marshall",
    "Waunakee",
    "Ashippun",
    "Mayville",
    "Woodland",
    "Fox Lake",
    "Brussels",
    "Superior",
    "Florence",
    "Oakfield",
    "Eldorado",
    "Van Dyne",
    "Montfort",
    "Boscobel",
    "Brodhead",
    "Brooklyn",
    "Kingston",
    "Markesan",
    "Highland",
    "Ridgeway",
    "Montreal",
    "Millston",
    "Sullivan",
    "Waterloo",
    "Kewaunee",
    "Onalaska",
    "Rockland",
    "Woodford",
    "Pickerel",
    "Tomahawk",
    "Mishicot",
    "Whitelaw",
    "Galloway",
    "Marathon",
    "Peshtigo",
    "Endeavor",
    "Montello",
    "Neshkoro",
    "Franklin",
    "Cataract",
    "Lakewood",
    "Mountain",
    "Sobieski",
    "Townsend",
    "Minocqua",
    "Woodruff",
    "Kaukauna",
    "Kimberly",
    "Shiocton",
    "Appleton",
    "Fredonia",
    "Arkansaw",
    "Prescott",
    "Bay City",
    "Centuria",
    "Frederic",
    "Milltown",
    "Bancroft",
    "Phillips",
    "Prentice",
    "Edgerton",
    "Somerset",
    "Merrimac",
    "La Valle",
    "Couderay",
    "Radisson",
    "Tigerton",
    "Caroline",
    "Leopolis",
    "Oostburg",
    "Plymouth",
    "Hannibal",
    "Rib Lake",
    "Westboro",
    "La Farge",
    "Stoddard",
    "Walworth",
    "Allenton",
    "Hartford",
    "Hubertus",
    "Kewaskum",
    "Hartland",
    "Nashotah",
    "Okauchee",
    "Pewaukee",
    "Big Bend",
    "Waukesha",
    "Arkdale",
    "Glidden",
    "Ashland",
    "Marengo",
    "Cameron",
    "De Pere",
    "Pulaski",
    "Suamico",
    "Denmark",
    "Mondovi",
    "Danbury",
    "Webster",
    "Chilton",
    "Hilbert",
    "Bloomer",
    "Cornell",
    "Stanley",
    "Curtiss",
    "Granton",
    "Willard",
    "Humbird",
    "Portage",
    "Cambria",
    "Wyocena",
    "Wauzeka",
    "Eastman",
    "Steuben",
    "Windsor",
    "Madison",
    "Horicon",
    "Lebanon",
    "Rubicon",
    "Theresa",
    "Burnett",
    "Ephraim",
    "Foxboro",
    "Wascott",
    "Downing",
    "Wheeler",
    "Altoona",
    "Augusta",
    "Brandon",
    "Argonne",
    "Crandon",
    "Muscoda",
    "Beetown",
    "Stitzer",
    "Woodman",
    "Melrose",
    "Palmyra",
    "Mauston",
    "Wonewoc",
    "Hustler",
    "Necedah",
    "Bassett",
    "Bristol",
    "Kenosha",
    "Mindoro",
    "Belmont",
    "Gratiot",
    "Pearson",
    "Gleason",
    "Merrill",
    "Collins",
    "Maribel",
    "Valders",
    "Elderon",
    "Mosinee",
    "Spencer",
    "Coleman",
    "Crivitz",
    "Goodman",
    "Niagara",
    "Pembine",
    "Keshena",
    "Cashton",
    "Kendall",
    "Norwalk",
    "Oakdale",
    "Warrens",
    "Gillett",
    "Harshaw",
    "Tripoli",
    "Freedom",
    "Nichols",
    "Seymour",
    "Belgium",
    "Grafton",
    "Elmwood",
    "Clayton",
    "Cushing",
    "Dresser",
    "Osceola",
    "Amherst",
    "Rosholt",
    "Catawba",
    "Fifield",
    "Clinton",
    "Hanover",
    "Hawkins",
    "Conrath",
    "Sheldon",
    "Baldwin",
    "Hammond",
    "Roberts",
    "Houlton",
    "Baraboo",
    "Exeland",
    "Hayward",
    "Bonduel",
    "Gresham",
    "Shawano",
    "Mattoon",
    "Tilleda",
    "Cascade",
    "Hingham",
    "Medford",
    "Arcadia",
    "Ettrick",
    "De Soto",
    "Ontario",
    "Viroqua",
    "Conover",
    "Delavan",
    "Elkhorn",
    "Fontana",
    "Spooner",
    "Colgate",
    "Jackson",
    "Newburg",
    "Slinger",
    "Dousman",
    "Muskego",
    "Fremont",
    "Waupaca",
    "Hancock",
    "Wautoma",
    "Oshkosh",
    "Menasha",
    "Pickett",
    "Babcock",
    "Blenker",
    "Nekoosa",
    "Rudolph",
    "Mellen",
    "Odanah",
    "Chetek",
    "Dallas",
    "Almena",
    "Barron",
    "Haugen",
    "Mikana",
    "Benoit",
    "Nelson",
    "Hertel",
    "Potter",
    "Cadott",
    "Withee",
    "Seneca",
    "Oregon",
    "Verona",
    "Clyman",
    "Juneau",
    "Lomira",
    "Neosho",
    "Lowell",
    "Waupun",
    "Gordon",
    "Poplar",
    "Colfax",
    "Malone",
    "Wabeno",
    "Bagley",
    "Kieler",
    "Potosi",
    "Albany",
    "Monroe",
    "Dalton",
    "Berlin",
    "Edmund",
    "Linden",
    "Hurley",
    "Mercer",
    "Hixton",
    "Taylor",
    "Ixonia",
    "Mather",
    "Somers",
    "Trevor",
    "Wilmot",
    "Algoma",
    "Bangor",
    "Holmen",
    "Argyle",
    "Benton",
    "Antigo",
    "Bryant",
    "Newton",
    "Wausau",
    "Athens",
    "Brokaw",
    "Hatley",
    "Ringle",
    "Amberg",
    "Dunbar",
    "Oxford",
    "Neopit",
    "Cudahy",
    "Sparta",
    "Wilton",
    "Abrams",
    "Oconto",
    "Suring",
    "Oneida",
    "Mequon",
    "Durand",
    "Custer",
    "Plover",
    "Almond",
    "Kennan",
    "Racine",
    "Gotham",
    "Avalon",
    "Beloit",
    "Milton",
    "Hudson",
    "Wilson",
    "Ojibwa",
    "Winter",
    "Krakow",
    "Zachow",
    "Bowler",
    "Kohler",
    "Gilman",
    "Lublin",
    "Westby",
    "Phelps",
    "Sayner",
    "Darien",
    "Sharon",
    "Minong",
    "Sarona",
    "Butler",
    "Lannon",
    "Merton",
    "Sussex",
    "Manawa",
    "Marion",
    "Coloma",
    "Eureka",
    "Larsen",
    "Neenah",
    "Waukau",
    "Hewitt",
    "Vesper",
    "Adams",
    "Brill",
    "Cable",
    "Mason",
    "Siren",
    "Chili",
    "Colby",
    "Loyal",
    "Thorp",
    "Brule",
    "Maple",
    "Knapp",
    "Fence",
    "Ripon",
    "Laona",
    "Arena",
    "Avoca",
    "Rewey",
    "Saxon",
    "Upson",
    "Elroy",
    "Salem",
    "Casco",
    "Elcho",
    "Elton",
    "Phlox",
    "Aniwa",
    "Edgar",
    "Eland",
    "Unity",
    "Pound",
    "Tomah",
    "Pepin",
    "Amery",
    "Ogema",
    "Afton",
    "Bruce",
    "Plain",
    "Cecil",
    "Adell",
    "Waldo",
    "Blair",
    "Dodge",
    "Eleva",
    "Osseo",
    "Strum",
    "Genoa",
    "Viola",
    "Lyons",
    "Zenda",
    "Trego",
    "Eagle",
    "Wales",
    "Arpin",
    "Alma",
    "Boyd",
    "Owen",
    "Lodi",
    "Dane",
    "Eden",
    "Juda",
    "Cobb",
    "Gile",
    "Irma",
    "Kiel",
    "Lena",
    "Dale",
    "Luck",
    "Tony",
    "Iola",
    "King",
    "Omro",
    "Rio",
  ],
  RV = [
    "Yellowstone National Park",
    "Saint Stephens",
    "Little America",
    "Point Of Rocks",
    "Shirley Basin",
    "Fort Washakie",
    "Fe Warren Afb",
    "Granite Canon",
    "Teton Village",
    "Mountain View",
    "Elk Mountain",
    "Medicine Bow",
    "Lost Springs",
    "Devils Tower",
    "Jeffrey City",
    "Fort Laramie",
    "Hawk Springs",
    "Saddlestring",
    "Diamondville",
    "Powder River",
    "Rock Springs",
    "Fort Bridger",
    "Four Corners",
    "Thermopolis",
    "Horse Creek",
    "Pine Bluffs",
    "Lance Creek",
    "Van Tassell",
    "Green River",
    "Centennial",
    "Rock River",
    "Tie Siding",
    "Burlington",
    "Hyattville",
    "Encampment",
    "Torrington",
    "Evansville",
    "Ranchester",
    "Manderson",
    "Moorcroft",
    "Crowheart",
    "Pavillion",
    "Carpenter",
    "Hillsdale",
    "Cokeville",
    "Meeteetse",
    "Wheatland",
    "Chugwater",
    "Hartville",
    "Clearmont",
    "Bondurant",
    "Big Piney",
    "Wamsutter",
    "Mc Kinnon",
    "Robertson",
    "Ten Sleep",
    "Newcastle",
    "Greybull",
    "Gillette",
    "Saratoga",
    "Sinclair",
    "Glenrock",
    "Sundance",
    "Riverton",
    "Arapahoe",
    "Shoshoni",
    "Lagrange",
    "Cheyenne",
    "Kemmerer",
    "Fairview",
    "Frontier",
    "La Barge",
    "Edgerton",
    "Manville",
    "Guernsey",
    "Sheridan",
    "Big Horn",
    "Pinedale",
    "Reliance",
    "Superior",
    "Evanston",
    "Lonetree",
    "Garrett",
    "Laramie",
    "Recluse",
    "Rawlins",
    "Walcott",
    "Shawnee",
    "Douglas",
    "Aladdin",
    "Kinnear",
    "Huntley",
    "Veteran",
    "Buffalo",
    "Meriden",
    "Bedford",
    "Freedom",
    "Arminto",
    "Midwest",
    "Natrona",
    "Frannie",
    "Ralston",
    "Parkman",
    "Boulder",
    "Bairoil",
    "Granger",
    "Jackson",
    "Worland",
    "Bosler",
    "Buford",
    "Cowley",
    "Deaver",
    "Emblem",
    "Lovell",
    "Weston",
    "Wright",
    "Savery",
    "Beulah",
    "Hulett",
    "Dubois",
    "Hudson",
    "Lander",
    "Lysite",
    "Jay Em",
    "Lingle",
    "Kaycee",
    "Auburn",
    "Grover",
    "Thayne",
    "Alpine",
    "Casper",
    "Alcova",
    "Hiland",
    "Powell",
    "Wapiti",
    "Glendo",
    "Arvada",
    "Banner",
    "Dayton",
    "Leiter",
    "Wyarno",
    "Daniel",
    "Farson",
    "Wilson",
    "Basin",
    "Byron",
    "Shell",
    "Rozet",
    "Baggs",
    "Dixon",
    "Hanna",
    "Yoder",
    "Kirby",
    "Linch",
    "Albin",
    "Burns",
    "Afton",
    "Smoot",
    "Mills",
    "Story",
    "Kelly",
    "Moose",
    "Moran",
    "Lyman",
    "Osage",
    "Upton",
    "Jelm",
    "Otto",
    "Alva",
    "Etna",
    "Opal",
    "Lusk",
    "Cody",
    "Wolf",
    "Cora",
    "Alta",
  ],
  NV = [
    "Calgary (Sandstone / Harvest Hills / Coventry Hills / Panorama Hills / Beddington)",
    "Calgary (Discovery Ridge / Signal Hill / Aspen Woods / Patterson / Cougar Ridge)",
    "Calgary (Inglewood / Burnsland / Chinatown / East Victoria Park / Saddledome)",
    "Calgary (Lynnwood Ridge / Ogden / Foothills Industrial / Great Plains)",
    "Edmonton (South Westmount / Groat Estate / East Northwest Industrial)",
    "Edmonton (SE Capilano / West Southeast Industrial / East Bonnie Doon)",
    "Calgary (Douglas Glen / McKenzie Lake / Copperfield / East Shepard)",
    "Calgary (Queensland Downs / Lake Bonavista / Willow Park / Acadia)",
    "Calgary (Martindale / Taradale / Falconridge / Saddle Ridge)",
    "Calgary (Montgomery / Bowness / Silver Springs / Greenwood)",
    "Calgary (Hawkwood / Arbour Lake / Royal Oak / Rocky Ridge)",
    "Calgary (Oak Ridge / Haysboro / Kingsland / Windsor Park)",
    "Calgary (Dalhousie / Edgemont / Hamptons / Hidden Valley)",
    "Edmonton (North Westmount / West Calder / East Mistatim)",
    "Calgary (Kensington / Westmont / Parkdale / University)",
    "Calgary (Rosscarrock / Wildwood / Shaganappi / Sunalta)",
    "Edmonton (East Southeast Industrial / South Clover Bar)",
    "Calgary (Millrise / Somerset / Bridlewood / Evergreen)",
    "Edmonton West (West Jasper Place / West Edmonton Mall)",
    "Calgary (Mount Pleasant / Capitol Hill / Banff Trail)",
    "Calgary (Elbow Park / Britannia / Parkhill / Mission)",
    "Calgary (Lakeview / Glendale / Killarney / Glamorgan)",
    "Edmonton (South Downtown / South Downtown Fringe)",
    "Edmonton (West Northwest Industrial / Winterburn)",
    "Edmonton (Landbank / Oliver / East Lake District)",
    "Edmonton (North Central / Queen Mary Park / YXD)",
    "Calgary South (Altadore / Bankview / Richmond)",
    "Edmonton (South Bonnie Doon / East University)",
    "Calgary (Brentwood / Collingwood / Nose Hill)",
    "Edmonton (Central Jasper Place / Buena Vista)",
    "Edmonton (West University / Strathcona Place)",
    "Calgary (Rundle / Whitehorn / Monterey Park)",
    "Calgary (Bridgeland / Greenview / Zoo / YYC)",
    "Edmonton (West Clareview / East Londonderry)",
    "Edmonton (East North Central / West Beverly)",
    "Calgary (Forest Lawn / Dover / Erin Woods)",
    "Calgary (Penbrooke Meadows / Marlborough)",
    "Edmonton (West Londonderry / East Calder)",
    "Edmonton (North and East Downtown Fringe)",
    "Calgary (Connaught / West Victoria Park)",
    "Edmonton (Glenora / SW Downtown Fringe)",
    "International Border Region (Cardston)",
    "Calgary (Highfield / Burns Industrial)",
    "Edmonton (Southgate / North Riverbend)",
    "Northeastern Alberta (Fort Chipewyan)",
    "Calgary (City Centre / Calgary Tower)",
    "North Central Alberta (Slave Lake)",
    "Northwestern Alberta (High Level)",
    "Southeastern Alberta (Drumheller)",
    "Calgary (Tuscany / Scenic Acres)",
    "Kananaskis Country (Claresholm)",
    "Calgary (Thornecliffe / Tuxedo)",
    "Calgary (Midnapore / Sundance)",
    "Edmonton (Central Londonderry)",
    "Edmonton (Central Bonnie Doon)",
    "Remote Northeast (Fitzgerald)",
    "Calgary (Braeside / Woodbine)",
    "Edmonton (North Jasper Place)",
    "Edmonton (West Lake District)",
    "Sherwood Park Outer Southwest",
    "Sherwood Park Inner Southwest",
    "Wainwright Region (Tofield)",
    "Lethbridge West and Central",
    "Edmonton (Central Mistatim)",
    "Edmonton (East Castledowns)",
    "Edmonton (South Industrial)",
    "Edmonton (North Clover Bar)",
    "Edmonton (West Castledowns)",
    "Fort McMurray Outer Central",
    "Fort McMurray Inner Central",
    "Eastern Alberta (St. Paul)",
    "Central Alberta (Stettler)",
    "Central Foothills (Sundre)",
    "Edmonton (Central Beverly)",
    "Edmonton (West Mill Woods)",
    "Edmonton (East Mill Woods)",
    "Edmonton (Heritage Valley)",
    "Edmonton (North Downtown)",
    "Edmonton (North Capilano)",
    "Western Alberta (Jasper)",
    "Calgary (Symons Valley)",
    "Sherwood Park Northwest",
    "Fort McMurray Northwest",
    "Grande Prairie Central",
    "Sherwood Park Central",
    "Medicine Hat Central",
    "Lethbridge Southeast",
    "Rocky Mountain House",
    "Edmonton (Kaskitayo)",
    "Edmonton (Riverbend)",
    "Edmonton (Ellerslie)",
    "Grande Prairie South",
    "Grande Prairie East",
    "Medicine Hat South",
    "Medicine Hat North",
    "Calgary (Cranston)",
    "Edmonton Southwest",
    "Edmonton (Meadows)",
    "Spruce Grove North",
    "Spruce Grove South",
    "Sherwood Park West",
    "Sherwood Park East",
    "Calgary Northeast",
    "Calgary Northwest",
    "Fort Saskatchewan",
    "Lethbridge North",
    "Red Deer Central",
    "Redwood Meadows",
    "Red Deer County",
    "Red Deer North",
    "Red Deer South",
    "Drayton Valley",
    "Airdrie East",
    "Airdrie West",
    "Lloydminster",
    "Chestermere",
    "Sylvan Lake",
    "Stony Plain",
    "Peace River",
    "Strathmore",
    "High River",
    "Rocky View",
    "Blackfalds",
    "Whitecourt",
    "St. Albert",
    "Morinville",
    "Wetaskiwin",
    "Vegreville",
    "Bonnyville",
    "Wainwright",
    "Innisfail",
    "Cold Lake",
    "Athabasca",
    "Vermilion",
    "Coaldale",
    "Cochrane",
    "Beaumont",
    "Barrhead",
    "Westlock",
    "Okotoks",
    "Canmore",
    "Calgary",
    "Lacombe",
    "Camrose",
    "Brooks",
    "Ponoka",
    "Hinton",
    "Taber",
    "Banff",
    "Edson",
    "Leduc",
    "Devon",
    "Olds",
  ],
  EV = [
    "Vancouver (SE Riley Park-Little Mountain / SW Kensington / NE Oakridge / North Sunset)",
    "Vancouver (South Shaughnessy / NW Oakridge / NE Kerrisdale / SE Arbutus Ridge)",
    "Burnaby (East Big Bend / Stride Avenue / Edmonds / Cariboo-Armstrong)",
    "Burnaby (Suncrest / Sussex-Nelson / Clinton-Glenwood / West Big Bend)",
    "Burnaby (Burnaby Heights / Willingdon Heights / West Central Valley)",
    "North Island, Sunshine Coast, and Southern Gulf Islands (Whistler)",
    "Vancouver (West Mount Pleasant / West Riley Park-Little Mountain)",
    "Burnaby (Lakeview-Mayfield / Richmond Park / Kingsway-Beresford)",
    "Vancouver (South Hastings-Sunrise / North Renfrew-Collingwood)",
    "Inside Passage and the Queen Charlottes (Queen Charlotte City)",
    "Burnaby (Government Road / Lake City / SFU / Burnaby Mountain)",
    "Vancouver (NE Downtown / Harbour Centre / Gastown / Yaletown)",
    "Vancouver (West Fairview / Granville Island / NE Shaughnessy)",
    "Vancouver (West Kensington / NE Riley Park-Little Mountain)",
    "Vancouver (Chaldecutt / South University Endowment Lands)",
    "Vancouver (NW Shaughnessy / East Kitsilano / Quilchena)",
    "North Central Island and Bute Inlet Region (Gold River)",
    "Victoria Central British Columbia Provincial Government",
    "Vancouver (Strathcona / Chinatown / Downtown Eastside)",
    "Vancouver (SE Kerrisdale / SW Oakridge / West Marpole)",
    "Vancouver (South Grandview-Woodlands / NE Kensington)",
    "Vancouver (SE Oakridge / East Marpole / South Sunset)",
    "Vancouver (Waterfront / Coal Harbour / Canada Place)",
    "New Westminster Southwest (Includes Annacis Island)",
    "Burnaby (Maywood / Marlborough / Oakalla / Windsor)",
    "Vancouver (SE Kensington / Victoria-Fraserview)",
    "Central Okanagan and High Country (Revelstoke)",
    "Burnaby (Parkcrest-Aubrey / Ardingley-Sprott)",
    "Cariboo and West Okanagan (100 Mile House)",
    "Vancouver (North West End / Stanley Park)",
    "Vancouver (East Fairview / South Cambie)",
    "Vancouver (Dunbar-Southlands / Musqueam)",
    "Burnaby (Cascade-Schou / Douglas-Gilpin)",
    "Northern British Columbia (Fort Nelson)",
    "Vancouver (North Grandview-Woodlands)",
    "Vancouver (South Renfrew-Collingwood)",
    "Vancouver (West Kitsilano / Jericho)",
    "Vancouver (North Hastings-Sunrise)",
    "North Vancouver Southwest Central",
    "North Vancouver Northwest Central",
    "Omineca and Yellowhead (Smithers)",
    "Vancouver (East Mount Pleasant)",
    "Upper Columbia Region (Golden)",
    "Harrison Lake Region (Agassiz)",
    "Kamloops Central and Southeast",
    "Vancouver (Central Kitsilano)",
    "North Vancouver North Central",
    "North Vancouver South Central",
    "Vancouver (NW Arbutus Ridge)",
    "North Vancouver East Central",
    "Courtenay Northern Outskirts",
    "South Okanagan (Summerland)",
    "Richmond (Sea Island / YVR)",
    "Vancouver (South West End)",
    "North Vancouver Outer East",
    "North Vancouver Inner East",
    "Vancouver (Bentall Centre)",
    "Vancouver (Pacific Centre)",
    "Central Island (Chemainus)",
    "Juan de Fuca Shore (Sooke)",
    "Lower Skeena (Port Edward)",
    "Prince George East Central",
    "Prince George West Central",
    "Langley Township Northwest",
    "Langley Township Southwest",
    "North Vancouver Southwest",
    "North Vancouver Northwest",
    "West Kootenays (Rossland)",
    "New Westminster Northeast",
    "West Vancouver Southeast",
    "Chilcotin (Alexis Creek)",
    "Campbell River Outskirts",
    "Vancouver (SW Downtown)",
    "East Kootenays (Fernie)",
    "Kamloops South and West",
    "Langley Township North",
    "Port Coquitlam Central",
    "Surrey Inner Northwest",
    "Surrey Outer Northwest",
    "Campbell River Central",
    "Vancouver (Killarney)",
    "Maple Ridge Northwest",
    "Langley Township East",
    "West Vancouver North",
    "West Vancouver South",
    "Atlin Region (Atlin)",
    "Kelowna East Central",
    "Abbotsford Southeast",
    "Abbotsford Southwest",
    "Port Coquitlam South",
    "Port Coquitlam North",
    "West Vancouver West",
    "Prince George North",
    "Prince George South",
    "Similkameen (Hope)",
    "Kamloops Southwest",
    "Kamloops Northwest",
    "Chilliwack Central",
    "Delta East Central",
    "Richmond Northeast",
    "Richmond Southeast",
    "Richmond Southwest",
    "Kelowna Southwest",
    "Surrey Upper West",
    "Surrey Lower West",
    "Saltspring Island",
    "Saanich Southeast",
    "Courtenay Central",
    "Nanaimo Northwest",
    "Maple Ridge East",
    "Maple Ridge West",
    "Surrey Southwest",
    "Surrey Northeast",
    "Richmond Central",
    "Vancouver (UBC)",
    "Kelowna Central",
    "Chilliwack West",
    "Abbotsford East",
    "Coquitlam North",
    "Coquitlam South",
    "Delta Northeast",
    "Delta Southeast",
    "Delta Southwest",
    "Abbotsford West",
    "Chilliwack East",
    "Central Saanich",
    "Saanich Central",
    "Nanaimo Central",
    "Vernon Central",
    "Kamloops North",
    "Richmond North",
    "Richmond South",
    "Victoria North",
    "Victoria South",
    "Qualicum Beach",
    "Fort St. John",
    "Kelowna North",
    "Williams Lake",
    "Delta Central",
    "Richmond West",
    "Prince Rupert",
    "Oak Bay North",
    "Oak Bay South",
    "Saanich South",
    "Saanich North",
    "Nanaimo South",
    "Nanaimo North",
    "Dawson Creek",
    "Kelowna East",
    "Kelowna West",
    "Mission East",
    "Langley City",
    "Surrey North",
    "Pitt Meadows",
    "Surrey South",
    "Mission West",
    "Powell River",
    "Saanich East",
    "Saanich West",
    "Port Alberni",
    "Vernon East",
    "Vernon West",
    "Surrey East",
    "Salmon Arm",
    "Port Moody",
    "White Rock",
    "Delta East",
    "Parksville",
    "Kimberley",
    "Cranbrook",
    "Castlegar",
    "Penticton",
    "Esquimalt",
    "Highlands",
    "Metchosin",
    "Ladysmith",
    "Westbank",
    "Winfield",
    "Squamish",
    "Whistler",
    "Merritt",
    "Quesnel",
    "Kitimat",
    "Terrace",
    "Nelson",
    "Surrey",
    "Sidney",
    "Duncan",
    "Trail",
    "Comox",
    "Cedar",
    "Sooke",
  ],
  FV = [
    "Winnipeg (Broadway / The Forks / Portage and Main) Manitoba Provincial Government",
    "Winnipeg (Chinatown / Civic Centre / Exchange District)",
    "Winnipeg (Sargent Park / Daniel McIntyre / Inkster SE)",
    "Winnipeg (Fort Garry NE / University of Manitoba)",
    "Winnipeg (Point Douglas West / Inkster East)",
    "Winnipeg (St. Boniface South / St. Vital SE)",
    "Winnipeg (Minto / St. Mathews / Wolseley)",
    "Winnipeg (St. James-Assiniboia NE / YWG)",
    "Winnipeg (Assiniboine South / Betsworth)",
    "Winnipeg (St. James-Assiniboia NW)",
    "Winnipeg (St. James-Assiniboia SE)",
    "Winnipeg (St. James-Assiniboia SW)",
    "Winnipeg (Fort Garry NW / Tuxedo)",
    "Northern Manitoba (Norway House)",
    "Winnipeg (River Heights Central)",
    "Southeastern Manitoba (Lorette)",
    "South Central Manitoba (Altona)",
    "Southwestern Manitoba (Virden)",
    "Eastern Manitoba (Beausejour)",
    "Western Manitoba (Swan River)",
    "Winnipeg (River East Central)",
    "Winnipeg (Point Douglas East)",
    "Winnipeg (River Heights East)",
    "Winnipeg (River Heights West)",
    "North Interlake (Stonewall)",
    "South Interlake (MacGregor)",
    "Winnipeg (River East North)",
    "Winnipeg (River East South)",
    "Winnipeg (Fort Garry South)",
    "Winnipeg (Grassie / Pequis)",
    "Brandon Region (Killarney)",
    "Winnipeg (St. Boniface NW)",
    "Winnipeg (St. Boniface NE)",
    "Winnipeg (St. Vital North)",
    "Winnipeg (Seven Oaks West)",
    "Winnipeg (Seven Oaks East)",
    "Winnipeg (Fort Garry West)",
    "Riding Mountain (Neepawa)",
    "Winnipeg (St. Vital SW)",
    "Winnipeg (Inkster West)",
    "Winnipeg (Wilkes South)",
    "Winnipeg (Centennial)",
    "Winnipeg (Transcona)",
    "St. Francois Xavier",
    "Portage la Prairie",
    "Brandon Southeast",
    "Brandon Southwest",
    "Headingley East",
    "Headingley West",
    "East St. Paul",
    "West St. Paul",
    "Brandon North",
    "St. Adolphe",
    "Oak Bluff",
    "Steinbach",
    "Ste. Anne",
    "Flin Flon",
    "Lockport",
    "Thompson",
    "Lorette",
    "Selkirk",
    "Cartier",
    "Winkler",
    "Dauphin",
    "The Pas",
    "Morden",
    "Narol",
  ],
  DV = [
    "Fredericton South New Brunswick Provincial Government",
    "Fredericton Southwest, New Maryland",
    "Saint John Northeast, Renforth",
    "Lakeville, Shediac Bridge",
    "Saint John Loch Lomond",
    "Grand Falls Northeast",
    "Rothesay, Quispamsis",
    "Saint John Grandview",
    "Fredericton Junction",
    "Dieppe Moncton East",
    "Saint John Lakewood",
    "Saint John Red Head",
    "Grand Falls Central",
    "Grand Bay-Westfield",
    "Saint John Central",
    "Grand Manan Island",
    "Moncton Northwest",
    "Fredericton North",
    "Campobello Island",
    "Saint John North",
    "St-Louis-de-Kent",
    "Baie-Sainte-Anne",
    "Moncton Central",
    "Miramichi South",
    "Miramichi North",
    "Tracadie-Sheila",
    "Saint John East",
    "Saint John West",
    "Saint-Antoine",
    "Durham Bridge",
    "Burtts Corner",
    "Saint-Jacques",
    "Saint-Leonard",
    "Perth-Andover",
    "Florenceville",
    "Saint-Quentin",
    "Saint-Isidore",
    "Moncton West",
    "Smiths Creek",
    "Hillsborough",
    "Moores Mills",
    "Saint-Basile",
    "Plaster Rock",
    "Petit-Rocher",
    "Fredericton",
    "St. Stephen",
    "Campbellton",
    "Youngs Cove",
    "Rogersville",
    "Petitcodiac",
    "St. Andrews",
    "St. Martins",
    "Deer Island",
    "Baker Brook",
    "Centreville",
    "Allardville",
    "Grande-Anse",
    "Paquetville",
    "Quispamsis",
    "Kingsclear",
    "Edmundston",
    "Dorchester",
    "Bouctouche",
    "Bass River",
    "Richibucto",
    "St. George",
    "Canterbury",
    "Blackville",
    "Brantville",
    "Riverview",
    "Coverdale",
    "Salisbury",
    "Sackville",
    "Pennfield",
    "Boiestown",
    "Millville",
    "Woodstock",
    "Dalhousie",
    "Belledune",
    "Beresford",
    "Shippagan",
    "Caraquet",
    "Bathurst",
    "Oromocto",
    "Bayfield",
    "Cap-Pelé",
    "Gagetown",
    "Apohaqui",
    "Kingston",
    "Nackawic",
    "Hartland",
    "Kedgwick",
    "Balmoral",
    "Inkerman",
    "Doaktown",
    "Red Bank",
    "Shediac",
    "Cocagne",
    "Lepreau",
    "Hampton",
    "Stanley",
    "Lamèque",
    "Sussex",
    "Norton",
    "McAdam",
    "Harvey",
    "Neguac",
    "Minto",
    "Debec",
    "Bath",
  ],
  TV = [
    "St. John's Northwest Newfoundland & Labrador Provincial Government",
    "Northwest Newfoundland/Eastern Labrador (Mary's Harbour)",
    "Southwestern Newfoundland (Channel-Port aux Basques)",
    "Port au Port Peninsula region (St. George's)",
    "Southeastern Avalon Peninsula (Ferryland)",
    "Central Labrador (Happy Valley-Goose Bay)",
    "North/Western Labrador (Churchill Falls)",
    "Central Newfoundland (Bishops Falls)",
    "Western Avalon Peninsula (Argentia)",
    "Northeast Newfoundland (Lewisporte)",
    "Western Newfoundland (Lark Harbour)",
    "Northern Newfoundland (Springdale)",
    "Bonavista Peninsula (Bonavista)",
    "Burin Peninsula (Marystown)",
    "Portugal Cove-St. Philips",
    "St. John's North Central",
    "St. John's Southwest",
    "St. John's Central",
    "St. John's North",
    "St. John's South",
    "Conception Bay",
    "Labrador City",
    "Corner Brook",
    "Stephenville",
    "Mount Pearl",
    "Grand Falls",
    "Clarenville",
    "Carbonear",
    "Deer Lake",
    "Paradise",
    "Manuels",
    "Windsor",
    "Torbay",
    "Goulds",
    "Gander",
  ],
  OV = [
    "Halifax Mid-Harbour Nova Scotia Provincial Government",
    "Southern Northumberland Strait (Pictou)",
    "Cobequid Bay north shore (Springhill)",
    "Isthmus of Chignecto (River Hébert)",
    "West Lunenburg County (New Germany)",
    "West Cape Breton Island (Baddeck)",
    "West Annapolis County (Middleton)",
    "North Victoria County (Dingwall)",
    "Mainland east shore (Lunenburg)",
    "Southwest Mainland (Weymouth)",
    "Canso region (Havre Boucher)",
    "Hants County (Shubenacadie)",
    "North Sydney South Central",
    "Queens County (Shelburne)",
    "Kings County (Kingston)",
    "Dartmouth North Central",
    "Dartmouth South Central",
    "Dartmouth East Central",
    "Halifax North West Arm",
    "Dartmouth Morris Lake",
    "Halifax Lower Harbour",
    "Halifax Upper Harbour",
    "Halifax Bedford Basin",
    "Halifax South Central",
    "Lower Sackville South",
    "Lower Sackville North",
    "Sydney North Central",
    "Lower Sackville West",
    "Dartmouth Southwest",
    "Dartmouth Northwest",
    "Digby Neck (Digby)",
    "North Sydney North",
    "Bedford Southeast",
    "Bedford Northwest",
    "Sydney Southwest",
    "Christmas Island",
    "Eastern Passage",
    "Halifax Central",
    "Port Hawkesbury",
    "Sydney Central",
    "Dartmouth East",
    "Reserve Mines",
    "New Waterford",
    "Marion Bridge",
    "Big Bras d'Or",
    "Halifax South",
    "Harrietsfield",
    "Sydney North",
    "Porters Lake",
    "Halifax West",
    "Port Morien",
    "Sydney East",
    "Sydney West",
    "Alder Point",
    "Loch Lomond",
    "New Glasgow",
    "Bridgewater",
    "Louisbourg",
    "Antigonish",
    "Glace Bay",
    "Tantallon",
    "Kentville",
    "Wolfville",
    "Coldbrook",
    "Dominion",
    "East Bay",
    "Eskasoni",
    "Waverley",
    "Lakeside",
    "Yarmouth",
    "Fourchu",
    "Enfield",
    "Amherst",
    "Truro",
    "Lantz",
    "Iona",
  ],
  xV = [
    "Southwestern Northwest Territories (Fort Liard)",
    "Central Northwest Territories (Inuvik)",
    "Yellowknife",
  ],
  VV = [
    "Central Nunavut (Cambridge Bay)",
    "Inner Nunavut (Rankin Inlet)",
    "Outer Nunavut (Iqaluit)",
  ],
  IV = JSON.parse(
    `["Hamilton (Southam / Bonnington / Yeoville / Kernighan / Gourley / Rolston / Buchanan / Mohawk / Westcliffe / Gilbert / Gilkson / Gurnett / Fessenden / Mountview)","Etobicoke (Old Mill South / King's Mill Park / Sunnylea / Humber Bay / Mimico NE / The Queensway East / Royal York South East / Kingsway Park South East)","Hamilton (West Albion Falls / Hannon / Rymal / Trenholme / Quinndale / Templemead / Broughton / Eleanor / Randall / Rushdale / Butler / East Chappel)","Etobicoke Northwest (Clairville / Humberwood / Woodbine Downs / West Humber / Kipling Heights / Rexdale / Elms / Tandridge / Old Rexdale)","Hamilton (West Kentley / McQuesten / Parkview / Hamilton Beach / East Industrial Sector / Normanhurst / Homeside / East Crown Point)","Hamilton (Barnstown / West Chappel / Allison / Ryckmans / Mewburn / Sheldon / Falkirk / Carpenter / Kennedy / Southwest Outskirts)","Etobicoke (South Steeles / Silverstone / Humbergate / Jamestown / Mount Olive / Beaumond Heights / Thistletown / Albion Gardens)","Hamilton (East Delta / Bartonville / Glenview / Rosedale / Lower King's Forest / Red Hill / Corman / Vincent / South Gershome)","Hamilton (West Industrial Sector / West Crown Point / North Stipley / North Gibson / Landsdale / Keith / North End / Beasley)","Downtown Toronto (CN Tower / King and Spadina / Railway Lands / Harbourfront West / Bathurst Quay / South Niagara / YTZ)","Etobicoke (Mimico NW / The Queensway West / South of Bloor / Kingsway Park South West / Royal York South West)","Hamilton (Sherwood / Huntington / Upper King's Forest / Lisgar / Berrisfield / Hampton Heights / Sunninghill)","Hamilton (Confederation Park / Nashdale / East Kentley / Riverdale / Lakely / Grayside / North Stoney Creek)","Hamilton (Crerar / Bruleville / Hill Park / Inch Park / Centremount / Balfour / Greeningdon / Jerome)","Central Toronto (Summerhill West / Rathnelly / South Hill / Forest Hill SE / Deer Park)","Etobicoke (West Deane Park / Princess Gardens / Martin Grove / Islington / Cloverdale)","Etobicoke (Kingsview Village / St. Phillips / Martin Grove Gardens / Richview Gardens)","Frontenac County, Addington County, Loyalist Shores and Southwest Leeds (Inverary)","London (South White Oaks / Central Westminster / East Longwoods / West Brockley)","London (Sunningdale / West Masonville / Medway / NE Hyde Park / East Fox Hollow)","East Toronto Business Reply Mail Processing Centre 969 Eastern (Enclave of M4L)","Etobicoke (Eringate / Bloordale Gardens / Old Burnhamthorpe / Markland Woods)","Hamilton (West Delta / Blakeley / South Stipley / South Gibson / St. Clair)","London (Riverbend / Woodhull / North Sharon Creek / Byron / West Westmount)","Scarborough (The Golden Mile / Clairlea / Oakridge / Birchmount Park East)","London (Fanshawe / Stoneybrook / Stoney Creek / Uplands / East Masonville)","Hamilton (Raleigh / Macassa / Lawfield / Thorner / Burkholme / Eastmount)","Quinte Shores, East Northumberland County & Prince Edward County (Picton)","Mississauga (Churchill Meadows / Central Erin Mills / South Streetsville)","Scarborough (Milliken / Agincourt North / Steeles East / L'Amoreaux East)","Windsor (South Walkerville / West Fontainbleu / Walker Farm / Devonshire)","Mississauga (West Cooksville / Fairview / City Centre / East Creditview)","Downtown Toronto (Harbourfront East / Union Station / Toronto Island)","Scarborough (Dorset Park / Wexford Heights / Scarborough Town Centre)","North York (Bedford Park / Lawrence Park West / Lawrence Manor East)","London (South Highbury / Glanworth / East Brockley / SE Westminster)","London South (East Highland / North White Oaks / North Westminster)","Nepean (Fallowfield Village / Cedarhill Estates / Orchard Estates)","Downtown Toronto Stn A PO Boxes 25 The Esplanade (Enclave of M5E)","Ottawa (Riverside Park / Hunt Club West / Riverside South / YOW)","Scarborough (Cliffside / Cliffcrest / Scarborough Village West)","Downtown Toronto (Kensington Market / Chinatown / Grange Park)","North York (Armour Heights / Wilson Heights / Downsview North)","West Toronto (Brockton / Parkdale Village / Exhibition Place)","Ottawa (Queensway / Copeland / Carlington / Carleton Heights)","Downtown Toronto (Toronto Dominion Centre / Design Exchange)","Peterborough (Terra View Heights / Woodland Acres / Donwood)","Stormont, Dundas and Glengarry United Counties (Alexandria)","Mississauga (West Port Credit / Lorne Park / East Sheridan)","Scarborough (Kennedy Park / Ionview / East Birchmount Park)","North York (York Heights / Victoria Village / Parkway East)","Etobicoke (The Kingsway / Montgomery Road / Old Mill North)","London (Talbot / Lambeth / West Tempo / South Sharon Creek)","Etobicoke (New Toronto / Mimico South / Humber Bay Shores)","Mississauga (West Rathwood / East Hurontario / SE Gateway)","London (Jackson / Old Victoria / Bradley / North Highbury)","Hamilton (Greenford / North Gershome / West Stoney Creek)","Peterborough County and North Hastings County (Lakefield)","Renfrew County and Lanark Highlands Township (Deep River)","London (YXU / North and East Argyle / East Huron Heights)","Windsor South Central (West Walkerville / Remington Park)","Algoma, Sudbury District and Greater Sudbury (Chelmsford)","York (Del Ray / Keelsdale / Mount Dennis / Silverthorne)","Central Toronto (The Annex / North Midtown / Yorkville)","Ottawa (Lower Town / Sandy Hill / University of Ottawa)","Mississauga (East Applewood / East Dixie / NE Lakeview)","Mississauga (West Applewood / West Dixie / NW Lakeview)","Scarborough (Clarks Corners / Tam O'Shanter / Sullivan)","North York (North Park / Maple Leaf Park / Upwood Park)","Mississauga (SW Lakeview / Mineola / East Port Credit)","Scarborough (Rouge Hill / Port Union / Highland Creek)","Greater Sudbury (Gatchell / West End / Little Britain)","Hamilton (Westdale / Cootes Paradise / Ainslie Wood)","South Leeds and Grenville United Counties (Prescott)","Gloucester (Blossom Park / Hunt Club East / Leitrim)","London (Southcrest / East Westmount / West Highland)","Mississauga (Mississauga Valleys / East Cooksville)","Downtown Toronto (Commerce Court / Victoria Hotel)","Downtown Toronto (University of Toronto / Harbord)","Kingston (Westbrook / Cataraqui Woods / Cedarwood)","Peterborough (Fairbairn Meadows / Jackson Heights)","Hamilton (East Albion Falls / South Stoney Creek)","Kawartha lakes and Haliburton County (Bobcaygeon)","Scarborough (Guildwood / Morningside / Ellesmere)","Government of Canada Ottawa and Gatineau offices","Mississauga (West Creditview / Mavis / Erindale)","Mississauga (Erin Mills / Western Business Park)","Hamilton (Central / Strathcona / South Dundurn)","Downtown Toronto (St. James Town / Cabbagetown)","Ottawa (The Glebe / Ottawa South / Ottawa East)","Kingston (Reddendale / Cataraqui / Collins Bay)","Mississauga (Meadowvale Village / West Gateway)","East Toronto (India Bazaar / The Beaches West)","Central Toronto (Moore Park / Summerhill East)","West Toronto (Parkdale / Roncesvalles Village)","West Durham Regional Municipality (Sunderland)","North York (Lawrence Manor / Lawrence Heights)","Windsor (West Forest Glade / East Fontainbleu)","Hamilton (Durand / Kirkendall / Chedoke Park)","Downtown Toronto (Richmond / Adelaide / King)","West Toronto (High Park / The Junction South)","Prescott and Russell United Counties (Alfred)","North York (Northwood Park / York University)","Halton Regional Municipality (Campbellville)","East Toronto (The Danforth West / Riverdale)","West Toronto (Dufferin / Dovercourt Village)","North Peel Regional Municipality (Kleinburg)","Scarborough (Steeles West / L'Amoreaux West)","East York (Parkview Hill / Woodbine Gardens)","West Toronto (Bloor West Village / Swansea)","North York (Fairview / Henry Farm / Oriole)","Greater Sudbury (Lo-Ellen / McFarlane Lake)","Central Toronto (Forest Hill North & West)","Pembroke Central and northern subdivisions","Belleville (SE Sidney Township / Avondale)","Mississauga (West Hurontario / SW Gateway)","Mississauga (Courtney Park / East Gateway)","Scarborough (Birch Cliff / Cliffside West)","Queen's Park Ontario Provincial Government","London West (Central Hyde Park / Oakridge)","Windsor (Sandwich / Ojibway / West Malden)","Gloucester (Blackburn Hamlet / Pine View)","Kanata (Katimavik-Hazeldean / Glen Cairn)","East Durham Regional Municipality (Orono)","Lake Simcoe Southeast Shore (Sutton West)","Ottawa (Rockcliffe Park / New Edinburgh)","Niagara Regional Municipality (Fonthill)","North York (Sweeney Park / Wigmore Park)","Greater Sudbury (Downtown / Minnow Lake)","Downtown Toronto (Church and Wellesley)","London East (SW Argyle / Hamilton Road)","West Northumberland County (Millbrook)","Mississauga (Matheson / East Rathwood)","North York (York Mills / Silver Hills)","Georgian Bay Southwest Shore (Dundalk)","Windsor (City Centre / NW Walkerville)","Timiskaming South (Temiskaming Shores)","Downtown Toronto (Central Bay Street)","York (Runnymede / The Junction North)","London (West Huron Heights / Carling)","Lake of the Woods East Shore (Ingolf)","Greater Sudbury (Robinson / Lockerby)","Central Toronto (Lawrence Park East)","Central Toronto (North Toronto West)","Ottawa (Highland Park / Carlingwood)","Windsor (University / South Cameron)","Timiskaming North (Iroquois Falls A)","Lake Superior North Shore (Marathon)","Downtown Toronto (Underground city)","West Toronto (Rua Aþores / Trinity)","Gloucester (Beacon Hill / Cyrville)","Pembroke (Pleasant View / Fairview)","Lake Simcoe North Shore (Coldwater)","Scarborough (Malvern / Rouge River)","Etobicoke (Alderwood / Long Branch)","Parry Sound South Shore (Kilworthy)","Central Toronto (Davisville North)","Kanata (Beaverbrook / South March)","Mississauga (Clarkson / Southdown)","Mississauga (Cardiff / NE Gateway)","Downtown Toronto (St. James Park)","National Capital Region (Almonte)","Kingston (SW Pittsburgh Township)","East Haldimand County (Waterdown)","Mississauga (Lisgar / Meadowvale)","Don Mills South (Flemingdon Park)","East Toronto (The Danforth East)","Georgian Bay South Shore (Angus)","Scarborough (Wexford / Maryvale)","Nipissing Central (Burk's Falls)","Timmins Region (South Porcupine)","Windsor East (East Walkerville)","Parry Sound North Shore (Nobel)","Lake Superior East Shore (Wawa)","Northwestern Ontario (Red Lake)","Algoma Southwest (Blind River)","East Toronto (Studio District)","Downtown Toronto (Berczy Park)","Ottawa (Riverview / Hawthorne)","Ottawa (Britannia / Pinecrest)","Rideau Lakes area (Kemptville)","Kanata (Terry Fox / Palladium)","Mississauga (Central Lakeview)","North York (Hillcrest Village)","North York (Humberlea / Emery)","Hamilton (Stinson / Corktown)","Willowdale East (Newtonbrook)","Brant and Norfolk (Waterford)","Greater Sudbury (New Sudbury)","Downsview East (CFB Toronto)","Central Toronto (Davisville)","Ontario Centre (Queensville)","Lake Simcoe West Shore (Oro)","North York (Bayview Village)","North York (York Mills West)","East York (Woodbine Heights)","East York (Thorncliffe Park)","Etobicoke (Islington Avenue)","Parry Sound Mid-Shore (Bala)","Dufferin County (Shelburne)","Downtown Toronto (Rosedale)","Downtown Toronto (Christie)","Ottawa (West Downtown area)","Mississauga (West Sheridan)","North York (Jane and Finch)","West Haldimand (Port Dover)","Windsor (East Forest Glade)","Windsor South (East Malden)","Nipissing North (Callander)","Manitoulin (Little Current)","Greater Sudbury (Val Caron)","East Toronto (The Beaches)","Downtown Toronto (Ryerson)","Central Toronto (Roselawn)","Gloucester (South Orleans)","North York (Humber Summit)","Nipissing South (Utterson)","Gloucester (West Orleans)","Nepean (Davidson Heights)","Mississauga (East Credit)","Scarborough (Upper Rouge)","York (Fairbank / Oakwood)","Bruce Peninsula (Wiarton)","Thunder Bay North Central","Thunder Bay South Central","Ottawa (Parliament Hill)","St. Catharines Northeast","St. Catharines Northwest","St. Catharines Southwest","St. Catharines Southeast","Windsor (East Riverside)","Cochrane Region (Hearst)","Rainy River Region (Emo)","Kenora Region (Keewatin)","Greater Sudbury (Garson)","Greater Sudbury (Hanmer)","Greater Sudbury (Lively)","Sault Ste. Marie Central","Whitby Region (Gormley)","Niagara Falls Southeast","Markham Outer Southwest","Richmond Hill Southeast","Richmond Hill Southwest","Markham Inner Southwest","Scarborough (Cedarbrae)","Scarborough (Agincourt)","Kitchener South Central","Kitchener North Central","Nepean (Bells Corners)","Orleans (Fallingbrook)","St. Catharines Central","Mississauga (Wildwood)","Brampton North Central","Scarborough (Eglinton)","North York (Glencairn)","Sault Ste. Marie North","Niagara Falls Central","Richmond Hill Central","Brampton West Central","Etobicoke (Westmount)","Sault Ste. Marie East","Thunder Bay Northeast","Ottawa (Centre Town)","Orleans (Queenswood)","Kanata (North March)","St. Catharines South","Mississauga (Malton)","Burlington Northeast","Burlington Southeast","Burlington Southwest","Scarborough (Woburn)","Brantford Northeast","Brantford Southeast","Brantford Southwest","Brantford Northwest","Ottawa (Alta Vista)","Kanata (Bridlewood)","Cumberland Township","Kingston (Downtown)","Pickering Southwest","Niagara Falls North","St. Catharines East","St. Catharines West","Newmarket Southwest","Newmarket Northeast","Richmond Hill North","East York (Leaside)","Middlesex (Clinton)","Essex (Belle River)","Cambridge Southwest","Kitchener Northeast","Kitchener Southwest","Kitchener Northwest","Kitchener Southeast","Cambridge Northeast","Cambridge Northwest","London (Glen Cairn)","London (East Tempo)","Windsor (Riverside)","Thunder Bay Central","Ottawa (Overbrook)","Nepean (Barrhaven)","Kanata (Marchwood)","Peterborough North","Peterborough South","Niagara Falls West","Oakville Northeast","Brampton Northwest","Brampton Southeast","Brampton Southwest","Wellington (Elora)","Elgin (Dorchester)","Waterloo Southeast","Waterloo Southwest","Waterloo Northwest","London North (UWO)","Tecumseh Outskirts","Windsor (Roseland)","Brantford Central","Ottawa (Westboro)","Pickering Central","Markham Southeast","Mississauga (YYZ)","Markham Northwest","Markham Northeast","Orangeville North","Orangeville South","Downsview Central","Cambridge Central","Kitchener Central","Woodstock Central","Chatham Northwest","Chatham Southeast","North Bay Central","Timmins Southeast","Thunder Bay North","Thunder Bay South","Gloucester South","Bowmanville East","Bowmanville West","Oshawa Southeast","Oshawa Southwest","Whitby Southeast","Whitby Southwest","Woodbridge North","Woodbridge South","Brampton Central","Burlington North","Burlington South","Willowdale South","York (Cedarvale)","Oxford (Norwich)","Perth (Mitchell)","Lambton (Forest)","Guelph Northwest","St. Thomas North","St. Thomas South","Sarnia Southwest","Sarnia Northwest","Sarnia Southeast","Sarnia Northeast","Tecumseh Central","Thunder Bay West","Ottawa (Vanier)","Belleville East","Belleville West","Pickering South","Pickering North","Markham Central","Caledon Village","Burlington East","Burlington West","Penetanguishene","Holland Landing","Willowdale West","Don Mills North","Huron (Wingham)","Kent (Blenheim)","Cambridge South","Kitchener North","Kitchener South","Woodstock North","Woodstock South","Stratford South","Stratford North","North Bay South","North Bay North","Cornwall North","Carleton Place","Oshawa Central","Whitby Central","Ajax Southwest","Ajax Northwest","Thornhill East","Thornhill West","Oakville North","Oakville South","Brampton North","Brampton South","Downsview West","Guelph Central","Cambridge East","Kitchener East","Waterloo South","Kitchener West","Cambridge West","London Central","Sarnia Central","Tecumseh (YQG)","Sturgeon Falls","Cornwall East","Cornwall West","Elizabethtown","Port Colborne","Oakville East","Oakville West","Brampton East","Brampton West","Ancaster West","Ancaster East","La Salle East","La Salle West","Kirkland Lake","Timmins North","Sioux Lookout","Smiths Falls","Oshawa North","Whitby North","Welland East","Welland West","Barrie North","Barrie South","Markham East","Wasaga Beach","Guelph South","Guelph North","Port Stanley","Timmins West","Fort Frances","Ottawa West","Nepean East","Stittsville","Amherstview","Oshawa East","Stouffville","Springwater","Collingwood","Guelph West","Guelph East","Tillsonburg","Wallaceburg","Amherstburg","Bracebridge","Gravenhurst","Parry Sound","Elliot Lake","Kapuskasing","Cumberland","Hawkesbury","Brockville","Georgetown","Port Perry","Kincardine","Owen Sound","St. Mary's","Leamington","Kingsville","Huntsville","Gananoque","Port Hope","Ajax East","Fort Erie","King City","Waterdown","Dunnville","Caledonia","Ingersoll","Strathroy","Rockland","Manotick","Arnprior","Petawawa","Courtice","Bradford","Uxbridge","Alliston","Innisfil","Midhurst","Minesing","Listowel","Goderich","Espanola","Toronto","Russell","Napanee","Renfrew","Trenton","Cobourg","Lindsay","Grimsby","Orillia","Concord","Keswick","Midland","Caledon","Meaford","Hanover","Neebing","Milton","Greely","Aurora","Bolton","Dundas","Barrie","Weston","Fergus","Elmira","Simcoe","Aylmer","Dryden","Kenora","Perth","Maple","Acton","Baden","Paris","Delhi","Essex"]`
  ),
  _V = [
    "Charlottetown Southeast Prince Edward Island Provincial Government",
    "Kings and Queens counties (Elmira)",
    "Prince County (Portage)",
    "Charlottetown North",
    "Charlottetown West",
    "Summerside",
    "Stratford",
    "Montague",
  ],
  KV = [
    "Griffintown (Includes Île Notre-Dame & Île Sainte-Hélène)",
    "Région de Beauce (Saint-Prosper-De-Dorchester)",
    "Montérégie-Nord (Saint-Antoine-Sur-Richelieu)",
    "Centre-du-Québec-Ouest (Saint-Bonaventure)",
    "Cap-de-la-Madeleine Central and southeast",
    "Chaudière-Nord (Saint-Joseph-De-Beauce)",
    "Bois-Francs-Sud (Saint-Nazaire-D'Acton)",
    "Sainte-Catherine-de-la-Jacques-Cartier",
    "Sainte-Thérèse-de-Blainville Northeast",
    "Sainte-Thérèse-de-Blainville Northwest",
    "Sainte-Thérèse-de-Blainville Southwest",
    "Abitibi-Témiscamingue-Ouest (Guigues)",
    "Bas-St-Laurent-Ouest (Trois-Pistoles)",
    "Sainte-Thérèse-de-Blainville Central",
    "Centre-du-Québec-Nord (Daveluyville)",
    "Abitibi-Témiscamingue-Est (Radisson)",
    "Côte-Nord/Anticosti (Schefferville)",
    "Centre-du-Québec-Est (Saint-Valère)",
    "Vaudreuil-Soulanges (Coteau-du-Lac)",
    "Sainte-Thérèse-de-Blainville North",
    "Sainte-Thérèse-de-Blainville South",
    "Sainte-Thérèse-de-Blainville East",
    "Saint-Jean-sur-Richelieu Central",
    "Bas-St-Laurent-Est (Sainte-Luce)",
    "Plateau Mont-Royal North Central",
    "Plateau Mont-Royal South Central",
    "Montérégie-Ouest (Saint-Anicet)",
    "Saguenay-Lac-St-Jean (Alouette)",
    "Région de Mistassini (Chambord)",
    "Downtown Montreal South & West",
    "Lanaudière-Nord (Saint-Esprit)",
    "Saint-Jean-sur-Richelieu North",
    "Salaberry-de-Valleyfield North",
    "Salaberry-de-Valleyfield South",
    "Centre-du-Québec-Sud (Warwick)",
    "Rivière-des-Prairies Northeast",
    "Rivière-Des-Prairies Southwest",
    "Capitale-Nationale (Stoneham)",
    "Saint-Jean-sur-Richelieu East",
    "Saint-Jean-sur-Richelieu West",
    "Gaspésie-Nord (Grande-Vallée)",
    "Cap-de-la-Madeleine Northeast",
    "Notre-Dame-de-Grâce Northeast",
    "Notre-Dame-de-Grâce Southwest",
    "Saint-Laurent Inner Northeast",
    "Saint-Laurent Outer Northeast",
    "Dollard-Des-Ormeaux Northwest",
    "Dollard-Des-Ormeaux Southwest",
    "Quebec Provincial Government",
    "L'Ancienne-Lorette Northeast",
    "L'Ancienne-Lorette Southwest",
    "Métabetchouan-Lac-a-la-Croix",
    "Akwesasne Region (Akwesasne)",
    "Plateau Mont-Royal Southeast",
    "Laurentides-Sud (Chénéville)",
    "Outaouais-Nord (Ferme-Neuve)",
    "Quebec City Lower Riverbank",
    "Quebec City Upper Riverbank",
    "Downtown Montreal Northeast",
    "Downtown Montreal Southeast",
    "Laurentides-Nord (Montcalm)",
    "Gaspésie-Sud (New Richmond)",
    "Gaspésie-Ouest (Causapscal)",
    "Manicouagan (Baie-Trinité)",
    "Quebec City Mid-Riverbank",
    "Quebec City North Central",
    "Quebec City South Central",
    "Saint-Hyacinthe Northwest",
    "Saint-Hyacinthe Southwest",
    "Appalaches (La Pocatière)",
    "Côte-des-Neiges Northeast",
    "Côte-des-Neiges Southwest",
    "Bois-Francs-Nord (Odanak)",
    "Saint-Cyrille-De-Wendover",
    "Saint-Eustache Northeast",
    "Saint-Eustache Southwest",
    "Montérégie-Est (Bedford)",
    "Chaudière-Sud (Disraeli)",
    "St-Augustin-De-Desmaures",
    "Les Îles-De-La-Madeleine",
    "Cap-de-la-Madeleine West",
    "Trois-Rivières Northeast",
    "Plateau Mont-Royal North",
    "Dollard-Des-Ormeaux East",
    "Lanaudière-Sud (Prévost)",
    "Quebec City Inner North",
    "Quebec City Outer North",
    "Downtown Montreal North",
    "Saint-Georges Southeast",
    "Saint-Georges Northwest",
    "Victoriaville Northwest",
    "Drummondville Southeast",
    "Drummondville Northwest",
    "Saint-Etienne-De-Lauzon",
    "Saint-Léonard Southeast",
    "Petite-Patrie Northeast",
    "Petite-Patrie Southwest",
    "Plateau Mont-Royal West",
    "Saint-Laurent Southwest",
    "Saint-Laurent Southeast",
    "Sainte-Anne-De-Bellevue",
    "Sainte-Agathe-Des-Monts",
    "Stoneham-et-Tewkesbury",
    "Estrie-Est (Stanstead)",
    "Downtown Montreal East",
    "Outaouais-Sud (Thurso)",
    "Saint-Jérôme Southeast",
    "Le Fjord (Forestville)",
    "Saint-Jean-Chrysostome",
    "Trois-Rivières Central",
    "Reserved (Santa Claus)",
    "Cartierville Northeast",
    "Cartierville Southwest",
    "L'Île Bizard Northeast",
    "L'Île-Bizard Southwest",
    "Estrie-Ouest (Fulford)",
    "Quebec City Northeast",
    "Quebec City Northwest",
    "Saint-Georges Central",
    "Saint-Lin-Laurentides",
    "Mascouche Extremities",
    "Saint-Lambert Central",
    "Victoriaville Central",
    "Drummondville Central",
    "Sainte-Anne-Des-Monts",
    "Baie-Comeau Northeast",
    "Baie-Comeau Southwest",
    "Côte-des-Neiges North",
    "Saint-Laurent Central",
    "Saint-Vincent-de-Paul",
    "Saint-Basile-Le-Grand",
    "Montreal North North",
    "Montreal North South",
    "Repentigny Northeast",
    "Terrebonne Northwest",
    "Terrebonne Southwest",
    "Saint-Hyacinthe East",
    "Jean-Talon Southeast",
    "Sainte-Foy Northeast",
    "Sainte-Foy Southeast",
    "Jean-Talon Northeast",
    "Chicoutimi Southwest",
    "Trois-Rivières South",
    "Shawinigan Southeast",
    "Shawinigan Northwest",
    "Pointe-Saint-Charles",
    "Côte-des-Neiges East",
    "Cartierville Central",
    "Sherbrooke Northeast",
    "Sherbrooke Northwest",
    "Sherbrooke Southeast",
    "Saint-Hubert Central",
    "Vaudreuil-Dorion RCM",
    "Côte-Saint-Luc West",
    "Sept-Îles Northwest",
    "Saint-Lambert North",
    "Saint-Lambert South",
    "Sept-Îles Southeast",
    "Victoriaville South",
    "Jonquière Northeast",
    "Jonquière Southeast",
    "Jonquière Southwest",
    "Jonquière Northwest",
    "Trois-Rivières East",
    "Trois-Rivières West",
    "Pointe-Aux-Trembles",
    "Saint-Léonard North",
    "Mount Royal Central",
    "Côte-Saint-Luc East",
    "Saint-Élie-d'Orford",
    "Drummondville South",
    "Longueuil Southwest",
    "Longueuil Southeast",
    "Longueuil Northeast",
    "Rouyn-Noranda South",
    "Rouyn-Noranda North",
    "Rimouski Northeast",
    "Rimouski Southwest",
    "Dolbeau-Mistassini",
    "Terrebonne Central",
    "Saint-Jérôme North",
    "Brossard Northwest",
    "Brossard Southwest",
    "Brossard Northeast",
    "Charlesbourg South",
    "Loretteville North",
    "Loretteville South",
    "Charlesbourg North",
    "Victoriaville East",
    "Shawinigan Central",
    "Saint-Léonard West",
    "Villeray Northeast",
    "Ahuntsic Southeast",
    "Villeray Southeast",
    "Ahuntsic Southwest",
    "Saint-Laurent East",
    "Chomedey Northeast",
    "Chomedey Northwest",
    "Nunavik (Kuujjuaq)",
    "Région d'Oka (Oka)",
    "Sherbrooke Central",
    "Gatineau Southeast",
    "Gatineau Northeast",
    "Gatineau Southwest",
    "Gatineau Northwest",
    "Quebec City South",
    "Mauricie (Parent)",
    "Laval-des-Rapides",
    "Mascouche Central",
    "Saint-Jérôme West",
    "Châteauguay North",
    "Châteauguay South",
    "L'Erable (Nantes)",
    "Lac-Saint-Charles",
    "Jonquière Central",
    "Mercier Southeast",
    "Saint-Michel West",
    "Saint-Michel East",
    "Mount Royal North",
    "Mount Royal South",
    "Tour de la Bourse",
    "Place Bonaventure",
    "Auteuil Northeast",
    "LaSalle Northwest",
    "LaSalle Southeast",
    "Saint-Hubert East",
    "Longueuil Central",
    "Saint-Hubert West",
    "Mirabel Northeast",
    "Mirabel Southwest",
    "Rimouski Central",
    "Quebec City West",
    "Quebec City East",
    "Dorval Outskirts",
    "Laval-sur-le-Lac",
    "Repentigny South",
    "Sainte-Catherine",
    "Vaudreuil-Dorion",
    "Beauport Central",
    "Val-Bélair North",
    "Val-Bélair South",
    "Saint-Redempteur",
    "Chicoutimi North",
    "Rosemont Central",
    "Ahuntsic Central",
    "Centre-Sud North",
    "Centre-Sud South",
    "L'Île-Des-Soeurs",
    "Petite-Bourgogne",
    "Place Desjardins",
    "Sainte-Geneviève",
    "Sherbrooke North",
    "Rivière-du-Loup",
    "Baie-Saint-Paul",
    "Repentigny West",
    "Terrebonne East",
    "Saint-Hippolyte",
    "Sainte-Foy West",
    "Jean-Talon West",
    "Chicoutimi East",
    "Chicoutimi West",
    "Sainte-Dorothée",
    "Sherbrooke East",
    "Sherbrooke West",
    "Sorel Southwest",
    "Longueuil North",
    "Greenfield Park",
    "Saint-Ambroise",
    "Alma Southeast",
    "Alma Southwest",
    "Saint-Félicien",
    "Westmount West",
    "Westmount East",
    "Thetford Mines",
    "Saint-Colomban",
    "Mont-Tremblant",
    "Granby Central",
    "Brossard South",
    "Saint-Constant",
    "Cap-aux-Meules",
    "Beauport North",
    "Beauport South",
    "Jonquière West",
    "Rosemont North",
    "Rosemont South",
    "Ahuntsic North",
    "Parc-Extension",
    "Dorval Central",
    "Saint-Franþois",
    "Chomedey South",
    "Longueuil West",
    "Longueuil East",
    "Hull Southeast",
    "Hull Southwest",
    "Montreal East",
    "Montreal West",
    "Pointe-Claire",
    "Val-des-Monts",
    "Saint-Raymond",
    "Saint-Nicolas",
    "Mercier North",
    "Ahuntsic East",
    "Villeray West",
    "Auteuil South",
    "Chomedey East",
    "Bromptonville",
    "Sorel Central",
    "Masson-Angers",
    "Lac-Beauport",
    "Old Montreal",
    "Beaconsfield",
    "Port-Cartier",
    "Sainte-Marie",
    "Sainte-Adèle",
    "Mont-Laurier",
    "Sainte-Julie",
    "Beloeil West",
    "Boucherville",
    "Plessisville",
    "Lac-Megantic",
    "Mercier West",
    "Verdun North",
    "Verdun South",
    "Duvernay-Est",
    "Auteuil West",
    "Saint-Pierre",
    "Lachine East",
    "Lachine West",
    "L'Île-Dorval",
    "Beloeil East",
    "Saint-Sophie",
    "L'Assomption",
    "Hull Central",
    "Aylmer South",
    "Aylmer North",
    "Saint-Prime",
    "Hébertville",
    "Louiseville",
    "Ville-Marie",
    "Chibougamau",
    "Beauceville",
    "Lévis North",
    "Lévis South",
    "L'Épiphanie",
    "Granby East",
    "Granby West",
    "Cowansville",
    "Beauharnois",
    "Saint-Émile",
    "Maisonneuve",
    "Saint-Henri",
    "Ville Émard",
    "Sainte-Rose",
    "Pierrefonds",
    "Rock Forest",
    "Saint-Bruno",
    "Valleyfield",
    "Alma North",
    "Pont-Rouge",
    "La Malbaie",
    "Marieville",
    "La Prairie",
    "Black Lake",
    "Laterrière",
    "Grand-Mère",
    "Anjou West",
    "Anjou East",
    "Fabreville",
    "Îles-Laval",
    "Senneville",
    "Buckingham",
    "Hull North",
    "Mont-Joli",
    "Donnacona",
    "Hampstead",
    "Montmagny",
    "Lavaltrie",
    "Cap-Rouge",
    "Pintendre",
    "Becancour",
    "Hochelaga",
    "Outremont",
    "Pont-Viau",
    "Coaticook",
    "Saint-Luc",
    "La Plaine",
    "Roberval",
    "Clermont",
    "La Tuque",
    "Asbestos",
    "Kirkland",
    "Maniwaki",
    "Val-d'Or",
    "La Sarre",
    "Shefford",
    "Varennes",
    "Duvernay",
    "Joliette",
    "Pincourt",
    "Albanel",
    "Shannon",
    "Windsor",
    "Chelsea",
    "Lachute",
    "Bromont",
    "Farnham",
    "Chambly",
    "Mercier",
    "Nicolet",
    "Degelis",
    "La Baie",
    "Roxboro",
    "Chatham",
    "Matane",
    "Delson",
    "Charny",
    "Vimont",
    "Amqui",
    "Magog",
    "Gaspé",
    "Lévis",
    "Amos",
  ],
  JV = [
    "Regina South Saskatchewan Provincial Government",
    "South Central Saskatchewan (Fort Qu'Appelle)",
    "Southwestern Saskatchewan (Maple Creek)",
    "Northwestern Saskatchewan (Battleford)",
    "Northeastern Saskatchewan (Creighton)",
    "Southeastern Saskatchewan (Carlyle)",
    "Southern Saskatchewan (Assiniboia)",
    "Western Saskatchewan (Kindersley)",
    "Regina Northeast and East Central",
    "Northern Saskatchewan (La Ronge)",
    "Central Saskatchewan (Humboldt)",
    "Eastern Saskatchewan (Melfort)",
    "Saskatoon Northeast Central",
    "Yorkton Region (Melville)",
    "Prince Albert Southwest",
    "Saskatoon South Central",
    "Saskatoon North Central",
    "Regina Outer Northwest",
    "Saskatoon East Central",
    "Prince Albert Central",
    "Regina North Central",
    "Moose Jaw Southeast",
    "Moose Jaw Northeast",
    "Saskatoon Southwest",
    "Saskatoon Northwest",
    "Saskatoon Northeast",
    "Saskatoon Southeast",
    "Prince Albert East",
    "Regina Southeast",
    "Regina Southwest",
    "Regina Northwest",
    "Regina Northeast",
    "North Battleford",
    "Saskatoon North",
    "Saskatoon South",
    "Rm Of Sherwood",
    "Regina Central",
    "Moose Jaw West",
    "Saskatoon West",
    "Swift Current",
    "Lloydminster",
    "Buena Vista",
    "Regina East",
    "Regina West",
    "Meadow Lake",
    "Saskatoon",
    "Yorkton",
    "Estevan",
    "Weyburn",
    "Regina",
  ],
  zV = [
    "Southeastern Yukon (Watson Lake)",
    "Central Yukon (Dawson City)",
    "Whitehorse",
  ],
  jV = {
    AL: D3,
    AK: T3,
    AZ: O3,
    AR: x3,
    CA: V3,
    CO: I3,
    CT: _3,
    DE: K3,
    DC: J3,
    FL: z3,
    GA: j3,
    HI: $3,
    ID: U3,
    IL: q3,
    IN: Y3,
    IA: Q3,
    KS: Z3,
    KY: X3,
    LA: eV,
    ME: nV,
    MD: aV,
    MA: oV,
    MI: rV,
    MN: tV,
    MS: lV,
    MO: iV,
    MT: sV,
    NE: uV,
    NV: dV,
    NH: cV,
    NJ: hV,
    NM: gV,
    NY: mV,
    NC: pV,
    ND: yV,
    OH: fV,
    OK: vV,
    OR: CV,
    PA: kV,
    RI: wV,
    SC: SV,
    SD: bV,
    TN: MV,
    TX: BV,
    UT: PV,
    VT: HV,
    VA: LV,
    WA: WV,
    WV: AV,
    WI: GV,
    WY: RV,
    AB: NV,
    BC: EV,
    MB: FV,
    NB: DV,
    NL: TV,
    NS: OV,
    NT: xV,
    NU: VV,
    ON: IV,
    PE: _V,
    QC: KV,
    SK: JV,
    YT: zV,
  },
  $V = [
    "Tuskegee Institute",
    "Valhermoso Springs",
    "Auburn University",
    "Owens Cross Roads",
    "Magnolia Springs",
    "Lower Peach Tree",
    "Marion Junction",
    "Coffee Springs",
    "Pleasant Grove",
    "Smiths Station",
    "Bayou La Batre",
    "Dauphin Island",
    "Alexander City",
    "East Tallassee",
    "Saint Stephens",
    "Double Springs",
    "Natural Bridge",
    "Union Springs",
    "De Armanville",
    "Spring Garden",
    "Muscle Shoals",
    "Highland Home",
    "Plantersville",
    "Phil Campbell",
    "Meridianville",
    "Laceys Spring",
    "Fort Mitchell",
    "Hatchechubbee",
    "Autaugaville",
    "Spanish Fort",
    "Little River",
    "Orange Beach",
    "West Blocton",
    "Blountsville",
    "Jacksonville",
    "Edwardsville",
    "New Brockton",
    "Midland City",
    "Skipperville",
    "Collinsville",
    "Rainbow City",
    "Walnut Grove",
    "Russellville",
    "Shorterville",
    "Fort Deposit",
    "Dixons Mills",
    "Guntersville",
    "Mount Vernon",
    "Holy Trinity",
    "Cook Springs",
    "Harpersville",
    "Childersburg",
    "Jacksons Gap",
    "Vinegar Bend",
    "Billingsley",
    "Bay Minette",
    "Gulf Shores",
    "Point Clear",
    "Robertsdale",
    "Centreville",
    "Locust Fork",
    "Fitzpatrick",
    "Forest Home",
    "Choccolocco",
    "Five Points",
    "Cedar Bluff",
    "Gaylesville",
    "Maplesville",
    "Coffeeville",
    "Thomasville",
    "Millerville",
    "Castleberry",
    "River Falls",
    "Honoraville",
    "Garden City",
    "Fort Rucker",
    "Valley Head",
    "Spruce Pine",
    "West Greene",
    "Sawyerville",
    "Mount Olive",
    "Rogersville",
    "Mooresville",
    "Letohatchee",
    "Lowndesboro",
    "Hazel Green",
    "Sweet Water",
    "Union Grove",
    "Albertville",
    "Frisco City",
    "Monroeville",
    "Perdue Hill",
    "Vredenburgh",
    "Mount Meigs",
    "Ethelsville",
    "Phenix City",
    "Springville",
    "Wilsonville",
    "Gainesville",
    "Duncanville",
    "Carbon Hill",
    "Goodsprings",
    "Mc Williams",
    "Prattville",
    "Bon Secour",
    "Silverhill",
    "Summerdale",
    "Louisville",
    "Brierfield",
    "Green Pond",
    "Greenville",
    "Alexandria",
    "Wellington",
    "Gilbertown",
    "Pennington",
    "Grove Hill",
    "Gainestown",
    "Fruithurst",
    "Enterprise",
    "Crane Hill",
    "Hanceville",
    "Holly Pond",
    "Crossville",
    "Fort Payne",
    "Rainsville",
    "Deatsville",
    "Glen Allen",
    "Chancellor",
    "Moundville",
    "Greensboro",
    "Cottonwood",
    "Bridgeport",
    "Estillfork",
    "Paint Rock",
    "Scottsboro",
    "Adamsville",
    "Fultondale",
    "Gardendale",
    "Graysville",
    "New Castle",
    "Palmerdale",
    "Trussville",
    "Birmingham",
    "Cloverdale",
    "Mount Hope",
    "Town Creek",
    "Loachapoka",
    "Belle Mina",
    "Hayneville",
    "Fort Davis",
    "Brownsboro",
    "New Market",
    "Huntsville",
    "Myrtlewood",
    "Bear Creek",
    "Hackleburg",
    "Citronelle",
    "Saint Elmo",
    "Eight Mile",
    "Pine Level",
    "Montgomery",
    "Somerville",
    "Aliceville",
    "Carrollton",
    "Wattsville",
    "Columbiana",
    "Montevallo",
    "Livingston",
    "Tuscaloosa",
    "Cottondale",
    "Frankville",
    "Wagarville",
    "Pine Apple",
    "Haleyville",
    "Stapleton",
    "Woodstock",
    "Cleveland",
    "Georgiana",
    "Mc Kenzie",
    "Eastaboga",
    "Lafayette",
    "Dickinson",
    "Lineville",
    "Muscadine",
    "Sheffield",
    "Tuscumbia",
    "Evergreen",
    "Goodwater",
    "Andalusia",
    "Red Level",
    "Baileyton",
    "Daleville",
    "Geraldine",
    "Millbrook",
    "Tallassee",
    "Knoxville",
    "Abbeville",
    "Hollytree",
    "Hollywood",
    "Princeton",
    "Stevenson",
    "Woodville",
    "Flat Rock",
    "Brookside",
    "Fairfield",
    "Beaverton",
    "Sulligent",
    "Lexington",
    "Courtland",
    "Hillsboro",
    "Notasulga",
    "Demopolis",
    "Faunsdale",
    "Jefferson",
    "Nanafalia",
    "Thomaston",
    "Brilliant",
    "Chunchula",
    "Grand Bay",
    "Irvington",
    "Hope Hull",
    "Pike Road",
    "Falkville",
    "Hartselle",
    "Uniontown",
    "Brundidge",
    "Cottonton",
    "Hurtsboro",
    "Pittsview",
    "Odenville",
    "Pell City",
    "Riverside",
    "Alabaster",
    "Sylacauga",
    "Talladega",
    "Camp Hill",
    "Dadeville",
    "Brookwood",
    "Kellerman",
    "Northport",
    "Deer Park",
    "Fruitdale",
    "Mc Intosh",
    "Sunflower",
    "Arlington",
    "Catherine",
    "Pine Hill",
    "Fairhope",
    "Montrose",
    "Seminole",
    "Stockton",
    "Randolph",
    "Anniston",
    "Ohatchee",
    "Piedmont",
    "Leesburg",
    "Campbell",
    "Cragford",
    "Ranburne",
    "Cherokee",
    "Leighton",
    "Brooklyn",
    "Kellyton",
    "Rockford",
    "Weogufka",
    "Equality",
    "Lockhart",
    "Brantley",
    "Glenwood",
    "Rutledge",
    "Vinemont",
    "Pinckard",
    "Orrville",
    "Groveoak",
    "Sylvania",
    "Eclectic",
    "Wetumpka",
    "Flomaton",
    "Bankston",
    "Bellwood",
    "Hartford",
    "Forkland",
    "Headland",
    "Newville",
    "Columbia",
    "Langston",
    "Bessemer",
    "Dolomite",
    "Kimberly",
    "Mc Calla",
    "Trafford",
    "Millport",
    "Anderson",
    "Florence",
    "Waterloo",
    "Hardaway",
    "Tuskegee",
    "New Hope",
    "Magnolia",
    "Hamilton",
    "Winfield",
    "Saraland",
    "Theodore",
    "Beatrice",
    "Franklin",
    "Megargel",
    "Peterman",
    "Danville",
    "Woodland",
    "Cropwell",
    "Margaret",
    "Ashville",
    "Sterrett",
    "Vandiver",
    "Westover",
    "Sycamore",
    "Daviston",
    "Abernant",
    "Peterson",
    "Samantha",
    "Burnwell",
    "Eldridge",
    "Oak Hill",
    "Marbury",
    "Elberta",
    "Lillian",
    "Perdido",
    "Clayton",
    "Eufaula",
    "Allgood",
    "Oneonta",
    "Chapman",
    "Cusseta",
    "Clanton",
    "Jemison",
    "Thorsby",
    "Verbena",
    "Stanton",
    "Needham",
    "Whatley",
    "Jackson",
    "Hollins",
    "Ashland",
    "Kinston",
    "Florala",
    "Luverne",
    "Cullman",
    "Clopton",
    "Safford",
    "Henagar",
    "Mentone",
    "Coosada",
    "Brewton",
    "Huxford",
    "Gadsden",
    "Altoona",
    "Attalla",
    "Gallant",
    "Fayette",
    "Red Bay",
    "Malvern",
    "Slocomb",
    "Boligee",
    "Clinton",
    "Gallion",
    "Newbern",
    "Ashford",
    "Cowarts",
    "Fackler",
    "Section",
    "Trenton",
    "Shannon",
    "Warrior",
    "Detroit",
    "Kennedy",
    "Moulton",
    "Opelika",
    "Waverly",
    "Elkmont",
    "Ardmore",
    "Capshaw",
    "Shorter",
    "Harvest",
    "Madison",
    "Douglas",
    "Satsuma",
    "Goodway",
    "Mathews",
    "Decatur",
    "Trinity",
    "Mc Shan",
    "Roanoke",
    "Wedowee",
    "Ragland",
    "Chelsea",
    "Maylene",
    "Saginaw",
    "Siluria",
    "Vincent",
    "Bellamy",
    "Bon Air",
    "Lincoln",
    "Munford",
    "Coaling",
    "Fosters",
    "Quinton",
    "Sumiton",
    "Cordova",
    "Parrish",
    "Townley",
    "Calvert",
    "Malcolm",
    "Alberta",
    "Addison",
    "Houston",
    "Daphne",
    "Loxley",
    "Lawley",
    "Hayden",
    "Remlap",
    "Midway",
    "Perote",
    "Oxford",
    "Weaver",
    "Valley",
    "Lanett",
    "Centre",
    "Butler",
    "Jachin",
    "Lisman",
    "Melvin",
    "Fulton",
    "Heflin",
    "Repton",
    "Dozier",
    "Petrey",
    "Bremen",
    "Ariton",
    "Newton",
    "Minter",
    "Sardis",
    "Dawson",
    "Elmore",
    "Atmore",
    "Hodges",
    "Geneva",
    "Samson",
    "Dothan",
    "Gordon",
    "Pansey",
    "Dutton",
    "Pisgah",
    "Bryant",
    "Higdon",
    "Docena",
    "Morris",
    "Pinson",
    "Watson",
    "Vernon",
    "Killen",
    "Auburn",
    "Athens",
    "Lester",
    "Tanner",
    "Gurley",
    "Normal",
    "Ryland",
    "Linden",
    "Horton",
    "Creola",
    "Semmes",
    "Wilmer",
    "Mobile",
    "Lapine",
    "Marion",
    "Reform",
    "Goshen",
    "Graham",
    "Wadley",
    "Steele",
    "Calera",
    "Helena",
    "Pelham",
    "Shelby",
    "Wilton",
    "Emelle",
    "Panola",
    "Alpine",
    "Echola",
    "Empire",
    "Jasper",
    "Kansas",
    "Nauvoo",
    "Oakman",
    "Sipsey",
    "Chatom",
    "Millry",
    "Tibbie",
    "Boykin",
    "Camden",
    "Furman",
    "Delmar",
    "Booth",
    "Jones",
    "Foley",
    "Brent",
    "Bynum",
    "Silas",
    "Toxey",
    "Delta",
    "Lenox",
    "Range",
    "Gantt",
    "Joppa",
    "Logan",
    "Ozark",
    "Selma",
    "Tyler",
    "Fyffe",
    "Titus",
    "Berry",
    "Black",
    "Eutaw",
    "Akron",
    "Adger",
    "Alton",
    "Leeds",
    "Mulga",
    "Sayre",
    "Salem",
    "Toney",
    "Grant",
    "Bucks",
    "Coden",
    "Excel",
    "Mexia",
    "Uriah",
    "Cecil",
    "Grady",
    "Ramer",
    "Gordo",
    "Banks",
    "Seale",
    "Moody",
    "Coker",
    "Elrod",
    "Ralph",
    "Vance",
    "Leroy",
    "Arley",
    "Clio",
    "Ward",
    "Elba",
    "Jack",
    "Wing",
    "Ider",
    "Kent",
    "Belk",
    "Vina",
    "Webb",
    "Clay",
    "Guin",
    "Arab",
    "Boaz",
    "Axis",
    "Troy",
    "Epes",
    "Cuba",
    "York",
    "Buhl",
    "Dora",
    "Lynn",
    "Opp",
    "Eva",
    "Coy",
  ],
  UV = [
    "Denali National Park",
    "Saint George Island",
    "Manley Hot Springs",
    "Saint Paul Island",
    "Mountain Village",
    "Fort Wainwright",
    "Russian Mission",
    "Tenakee Springs",
    "Lake Minchumina",
    "Stevens Village",
    "Cooper Landing",
    "Chignik Lagoon",
    "White Mountain",
    "Brevig Mission",
    "Anaktuvuk Pass",
    "Delta Junction",
    "Port Alexander",
    "Arctic Village",
    "Crooked Creek",
    "Lower Kalskag",
    "Pilot Station",
    "Port Alsworth",
    "Trapper Creek",
    "Saint Michael",
    "Copper Center",
    "Bettles Field",
    "Dutch Harbor",
    "Goodnews Bay",
    "Kwigillingok",
    "South Naknek",
    "Clarks Point",
    "New Stuyahok",
    "Anchor Point",
    "Chignik Lake",
    "Meyers Chuck",
    "Coffman Cove",
    "Eagle River",
    "Toksook Bay",
    "Nunapitchuk",
    "Tuntutuliak",
    "King Salmon",
    "Eielson Afb",
    "Saint Marys",
    "Scammon Bay",
    "Port Heiden",
    "Pilot Point",
    "Prudhoe Bay",
    "Point Baker",
    "Fort Greely",
    "Chalkyitsik",
    "False Pass",
    "Sand Point",
    "Kongiganak",
    "Dillingham",
    "North Pole",
    "Two Rivers",
    "Clam Gulch",
    "Moose Pass",
    "Port Lions",
    "Larsen Bay",
    "Old Harbor",
    "Hooper Bay",
    "Nunam Iqua",
    "Perryville",
    "Unalakleet",
    "Shaktoolik",
    "Shishmaref",
    "Point Hope",
    "Wainwright",
    "Thorne Bay",
    "Metlakatla",
    "Elfin Cove",
    "Glennallen",
    "Petersburg",
    "Holy Cross",
    "Fort Yukon",
    "King Cove",
    "Anchorage",
    "Chefornak",
    "Quinhagak",
    "Red Devil",
    "Sleetmute",
    "Nightmute",
    "Aleknagik",
    "Manokotak",
    "Fairbanks",
    "Ninilchik",
    "Ketchikan",
    "Ward Cove",
    "Nondalton",
    "Pedro Bay",
    "Talkeetna",
    "Point Lay",
    "Tanacross",
    "Allakaket",
    "Cold Bay",
    "Nikolski",
    "Unalaska",
    "Girdwood",
    "Akiachak",
    "Kasigluk",
    "Kwethluk",
    "Mekoryuk",
    "Napakiak",
    "Platinum",
    "Tuluksak",
    "Cantwell",
    "Anderson",
    "Auke Bay",
    "Seldovia",
    "Soldotna",
    "Sterling",
    "Ouzinkie",
    "Alakanuk",
    "Marshall",
    "Levelock",
    "Big Lake",
    "Skwentna",
    "Stebbins",
    "Savoonga",
    "Kaktovik",
    "Buckland",
    "Kivalina",
    "Kotzebue",
    "Shungnak",
    "Hydaburg",
    "Gustavus",
    "Northway",
    "Tatitlek",
    "Whittier",
    "Wrangell",
    "Grayling",
    "Mc Grath",
    "Shageluk",
    "Chugiak",
    "Kalskag",
    "Tununak",
    "Douglas",
    "Kasilof",
    "Nikiski",
    "Emmonak",
    "Chignik",
    "Iliamna",
    "Wasilla",
    "Houston",
    "Gambell",
    "Nuiqsut",
    "Atqasuk",
    "Deering",
    "Noorvik",
    "Selawik",
    "Klawock",
    "Yakutat",
    "Pelican",
    "Skagway",
    "Chicken",
    "Chitina",
    "Cordova",
    "Takotna",
    "Nikolai",
    "Central",
    "Koyukuk",
    "Rampart",
    "Venetie",
    "Akutan",
    "Indian",
    "Bethel",
    "Kipnuk",
    "Naknek",
    "Togiak",
    "Salcha",
    "Haines",
    "Juneau",
    "Seward",
    "Tyonek",
    "Karluk",
    "Kodiak",
    "Chevak",
    "Kotlik",
    "Egegik",
    "Palmer",
    "Sutton",
    "Willow",
    "Teller",
    "Barrow",
    "Noatak",
    "Ambler",
    "Angoon",
    "Hoonah",
    "Gakona",
    "Valdez",
    "Beaver",
    "Circle",
    "Galena",
    "Hughes",
    "Huslia",
    "Kaltag",
    "Nenana",
    "Nulato",
    "Tanana",
    "Akiak",
    "Aniak",
    "Clear",
    "Healy",
    "Ekwok",
    "Ester",
    "Homer",
    "Kenai",
    "Koyuk",
    "Wales",
    "Kiana",
    "Kobuk",
    "Craig",
    "Hyder",
    "Sitka",
    "Eagle",
    "Anvik",
    "Minto",
    "Adak",
    "Atka",
    "Jber",
    "Hope",
    "Elim",
    "Nome",
    "Kake",
    "Ruby",
    "Eek",
    "Tok",
  ],
  qV = [
    "Petrified Forest Natl Pk",
    "Luke Air Force Base",
    "White Mountain Lake",
    "Kykotsmovi Village",
    "Temple Bar Marina",
    "Black Canyon City",
    "Chandler Heights",
    "Lake Havasu City",
    "Corona de Tucson",
    "Paradise Valley",
    "Litchfield Park",
    "Apache Junction",
    "Prescott Valley",
    "Saint Michaels",
    "Fountain Hills",
    "San Tan Valley",
    "Lake Montezuma",
    "Dewey Humboldt",
    "Springerville",
    "Fort Defiance",
    "Fort Huachuca",
    "Huachuca City",
    "Gray Mountain",
    "Marble Canyon",
    "Tortilla Flat",
    "Fort Mcdowell",
    "Sun City West",
    "Colorado City",
    "Golden Valley",
    "Bullhead City",
    "Peach Springs",
    "Mohave Valley",
    "Dolan Springs",
    "Teec Nos Pos",
    "Sierra Vista",
    "Forest Lakes",
    "Grand Canyon",
    "Willow Beach",
    "Clay Springs",
    "Indian Wells",
    "Keams Canyon",
    "Green Valley",
    "Mount Lemmon",
    "Arizona City",
    "Valley Farms",
    "Chino Valley",
    "Skull Valley",
    "South Tucson",
    "Saint Johns",
    "Window Rock",
    "Pirtleville",
    "Saint David",
    "Mormon Lake",
    "Tonto Basin",
    "Fort Thomas",
    "Queen Creek",
    "Fort Mohave",
    "Littlefield",
    "Fort Apache",
    "Joseph City",
    "Second Mesa",
    "Gold Canyon",
    "Casa Grande",
    "Lukachukai",
    "Dennehotso",
    "Many Farms",
    "Red Valley",
    "Rock Point",
    "Round Rock",
    "Munds Park",
    "Happy Jack",
    "San Carlos",
    "Quartzsite",
    "Scottsdale",
    "Cave Creek",
    "Morristown",
    "Palo Verde",
    "Wickenburg",
    "Whiteriver",
    "Sun Valley",
    "San Manuel",
    "Tumacacori",
    "Camp Verde",
    "Cottonwood",
    "Crown King",
    "San Simon",
    "Tombstone",
    "Flagstaff",
    "Bellemont",
    "Tuba City",
    "North Rim",
    "Winkelman",
    "Roosevelt",
    "Ehrenberg",
    "New River",
    "Rio Verde",
    "Arlington",
    "El Mirage",
    "Gila Bend",
    "Youngtown",
    "Hackberry",
    "Valentine",
    "Overgaard",
    "Snowflake",
    "Hotevilla",
    "Lukeville",
    "Sahuarita",
    "Stanfield",
    "Patagonia",
    "Clarkdale",
    "Cornville",
    "Nutrioso",
    "Chambers",
    "Hereford",
    "Pomerene",
    "Fredonia",
    "Williams",
    "Claypool",
    "Thatcher",
    "Chandler",
    "Glendale",
    "Avondale",
    "Goodyear",
    "Sun City",
    "Tolleson",
    "Wittmann",
    "Surprise",
    "Carefree",
    "Hualapai",
    "Chloride",
    "Meadview",
    "Show Low",
    "Lakeside",
    "Pinedale",
    "Woodruff",
    "Holbrook",
    "Blue Gap",
    "Catalina",
    "Bapchule",
    "Coolidge",
    "Florence",
    "Maricopa",
    "Red Rock",
    "Superior",
    "Rio Rico",
    "Congress",
    "Prescott",
    "Ash Fork",
    "Humboldt",
    "Kirkland",
    "Seligman",
    "Dateland",
    "San Luis",
    "Somerton",
    "Sanders",
    "Nazlini",
    "Cochise",
    "Douglas",
    "Dragoon",
    "Elfrida",
    "Mc Neal",
    "Willcox",
    "Cameron",
    "Tonalea",
    "Kaibeto",
    "Peridot",
    "Central",
    "Safford",
    "Solomon",
    "Clifton",
    "Morenci",
    "Phoenix",
    "Gilbert",
    "Buckeye",
    "Cashion",
    "Tonopah",
    "Waddell",
    "Wikieup",
    "Kingman",
    "Cibecue",
    "Pinetop",
    "Kayenta",
    "Polacca",
    "Winslow",
    "Arivaca",
    "Cortaro",
    "Rillito",
    "Picacho",
    "Sacaton",
    "Mammoth",
    "Nogales",
    "Sonoita",
    "Yarnell",
    "Paulden",
    "Rimrock",
    "Gadsden",
    "Wellton",
    "Alpine",
    "Concho",
    "Mcnary",
    "Vernon",
    "Chinle",
    "Ganado",
    "Lupton",
    "Tsaile",
    "Benson",
    "Bisbee",
    "Pearce",
    "Sedona",
    "Hayden",
    "Payson",
    "Duncan",
    "Cibola",
    "Parker",
    "Salome",
    "Wenden",
    "Poston",
    "Higley",
    "Aguila",
    "Laveen",
    "Peoria",
    "Oatman",
    "Topock",
    "Taylor",
    "Shonto",
    "Sasabe",
    "Topawa",
    "Marana",
    "Tucson",
    "Kearny",
    "Oracle",
    "Bagdad",
    "Jerome",
    "Eagar",
    "Greer",
    "Houck",
    "Bowie",
    "Parks",
    "Leupp",
    "Supai",
    "Globe",
    "Miami",
    "Young",
    "Bylas",
    "Bouse",
    "Tempe",
    "Yucca",
    "Heber",
    "Pinon",
    "Sells",
    "Elgin",
    "Amado",
    "Tubac",
    "Dewey",
    "Mayer",
    "Tacna",
    "Naco",
    "Page",
    "Pine",
    "Eden",
    "Pima",
    "Blue",
    "Mesa",
    "Vail",
    "Eloy",
    "Roll",
    "Yuma",
    "Ajo",
  ],
  YV = [
    "Little Rock Air Force Base",
    "Hot Springs National Park",
    "Hot Springs Village",
    "North Little Rock",
    "State University",
    "Frenchmans Bayou",
    "Ravenden Springs",
    "Cherokee Village",
    "Crocketts Bluff",
    "Sulphur Springs",
    "Tumbling Shoals",
    "Mineral Springs",
    "Pleasant Plains",
    "College Station",
    "Siloam Springs",
    "Valley Springs",
    "Eureka Springs",
    "Whelen Springs",
    "Crawfordsville",
    "Mammoth Spring",
    "Horseshoe Bend",
    "Mount Pleasant",
    "De Valls Bluff",
    "Hickory Plains",
    "Pleasant Grove",
    "Saint Charles",
    "Fountain Hill",
    "Mountain Home",
    "Peach Orchard",
    "Saint Francis",
    "Heber Springs",
    "Cherry Valley",
    "Hickory Ridge",
    "Arkansas City",
    "Mountain Pine",
    "Blue Mountain",
    "Western Grove",
    "Witts Springs",
    "Evening Shade",
    "Mountain View",
    "Junction City",
    "Fairfield Bay",
    "Prairie Grove",
    "Griffithville",
    "Cave Springs",
    "Diamond City",
    "Green Forest",
    "Lake Village",
    "New Edinburg",
    "Center Ridge",
    "Mountainburg",
    "West Memphis",
    "Mount Vernon",
    "Locust Grove",
    "Sulphur Rock",
    "Garland City",
    "Walnut Ridge",
    "Pencil Bluff",
    "Marble Falls",
    "Poplar Grove",
    "Murfreesboro",
    "Russellville",
    "Jacksonville",
    "Wrightsville",
    "Warm Springs",
    "Forrest City",
    "Poughkeepsie",
    "Fayetteville",
    "Cotton Plant",
    "Bentonville",
    "Bella Vista",
    "Little Rock",
    "Arkadelphia",
    "Hattieville",
    "Plumerville",
    "Solgohachia",
    "Springfield",
    "Natural Dam",
    "Jessieville",
    "Prattsville",
    "Beech Grove",
    "Calico Rock",
    "Violet Hill",
    "Jacksonport",
    "Clarksville",
    "Bull Shoals",
    "Blytheville",
    "Holly Grove",
    "Willisville",
    "Mount Judea",
    "West Helena",
    "Marked Tree",
    "Vandervoort",
    "Mount Holly",
    "Elm Springs",
    "Briggsville",
    "Centerville",
    "Clarkridge",
    "Berryville",
    "Cedarville",
    "Clarkedale",
    "Monticello",
    "Winchester",
    "Greenbrier",
    "Charleston",
    "Delaplaine",
    "Mc Caskill",
    "Washington",
    "Bonnerdale",
    "Friendship",
    "Jones Mill",
    "Batesville",
    "Oil Trough",
    "Beedeville",
    "Pine Bluff",
    "White Hall",
    "Hagarville",
    "Lewisville",
    "Black Rock",
    "Smithville",
    "Strawberry",
    "New Blaine",
    "Booneville",
    "Hindsville",
    "Huntsville",
    "Saint Paul",
    "West Ridge",
    "Leachville",
    "Bluff City",
    "Perryville",
    "Harrisburg",
    "Waldenburg",
    "Board Camp",
    "Pottsville",
    "Sweet Home",
    "Pocahontas",
    "Fort Smith",
    "Huntington",
    "Ben Lomond",
    "Lockesburg",
    "Bee Branch",
    "Evansville",
    "Farmington",
    "Springdale",
    "West Point",
    "Belleville",
    "Dardanelle",
    "Stuttgart",
    "Henderson",
    "Gassville",
    "Centerton",
    "Maysville",
    "Pea Ridge",
    "Lead Hill",
    "Hermitage",
    "Oak Grove",
    "Mc Dougal",
    "Kingsland",
    "Cleveland",
    "Jerusalem",
    "Morrilton",
    "Jonesboro",
    "Black Oak",
    "Brookland",
    "Lake City",
    "Uniontown",
    "Van Buren",
    "Edmondson",
    "Snow Lake",
    "Mayflower",
    "Elizabeth",
    "Grapevine",
    "Marmaduke",
    "Paragould",
    "Donaldson",
    "Nashville",
    "Charlotte",
    "Brockwell",
    "Melbourne",
    "Pineville",
    "Tuckerman",
    "Altheimer",
    "Jefferson",
    "Wabbaseka",
    "Coal Hill",
    "Knoxville",
    "La Grange",
    "Star City",
    "Pettigrew",
    "Yellville",
    "Doddridge",
    "Texarkana",
    "Clarendon",
    "Caddo Gap",
    "Mount Ida",
    "Parthenon",
    "Chidester",
    "Rivervale",
    "Alexander",
    "Mabelvale",
    "Palestine",
    "Traskwood",
    "Mansfield",
    "Saint Joe",
    "Greenwood",
    "Williford",
    "Cave City",
    "Fifty Six",
    "El Dorado",
    "Smackover",
    "Greenland",
    "Tontitown",
    "West Fork",
    "Bald Knob",
    "Higginson",
    "Patterson",
    "Plainview",
    "Humphrey",
    "Crossett",
    "Montrose",
    "Parkdale",
    "Portland",
    "Gamaliel",
    "Big Flat",
    "Lakeview",
    "Garfield",
    "Gravette",
    "Harrison",
    "Thornton",
    "Greenway",
    "Edgemont",
    "Magnolia",
    "Mulberry",
    "Vanndale",
    "Carthage",
    "Sparkman",
    "Mc Gehee",
    "Damascus",
    "Lonsdale",
    "Sheridan",
    "Columbus",
    "Bismarck",
    "Saratoga",
    "Franklin",
    "Redfield",
    "Sherrill",
    "Powhatan",
    "Ravenden",
    "Sedgwick",
    "Brickeys",
    "Marianna",
    "Yorktown",
    "Winthrop",
    "Delaware",
    "Scranton",
    "Magazine",
    "Ratcliff",
    "Carlisle",
    "Kingston",
    "Burdette",
    "Brinkley",
    "Prescott",
    "Stephens",
    "Lambrook",
    "Mellwood",
    "Glenwood",
    "Hatfield",
    "Maumelle",
    "Sherwood",
    "Caldwell",
    "Wheatley",
    "Marshall",
    "Hartford",
    "De Queen",
    "Ash Flat",
    "Marcella",
    "Norphlet",
    "Scotland",
    "Canehill",
    "Bradford",
    "Judsonia",
    "Pangburn",
    "Rose Bud",
    "Mc Crory",
    "Bluffton",
    "Danville",
    "Gravelly",
    "Casscoe",
    "De Witt",
    "Gillett",
    "Tichnor",
    "Hamburg",
    "Norfork",
    "Decatur",
    "Gateway",
    "Hiwasse",
    "Bergman",
    "Everton",
    "Hampton",
    "Harrell",
    "Dermott",
    "Okolona",
    "Corning",
    "Piggott",
    "Pollard",
    "Success",
    "Quitman",
    "Wilburn",
    "Concord",
    "Emerson",
    "Mc Neil",
    "Menifee",
    "Caraway",
    "Monette",
    "Chester",
    "Gilmore",
    "Proctor",
    "Turrell",
    "Fordyce",
    "Pickens",
    "Vilonia",
    "Wooster",
    "Glencoe",
    "Sturkie",
    "Walcott",
    "Blevins",
    "Malvern",
    "Cushman",
    "Magness",
    "Wideman",
    "Wiseman",
    "Newport",
    "Swifton",
    "Reydell",
    "Hartman",
    "Bradley",
    "Buckner",
    "Imboden",
    "Minturn",
    "Saffell",
    "Alleene",
    "Ashdown",
    "Foreman",
    "Subiaco",
    "England",
    "Humnoke",
    "Flippin",
    "Oakland",
    "Armorel",
    "Bassett",
    "Gosnell",
    "Osceola",
    "Rosston",
    "Compton",
    "Bearden",
    "Bigelow",
    "Houston",
    "Crumrod",
    "Marvell",
    "Antoine",
    "Delight",
    "Langley",
    "Newhope",
    "Lepanto",
    "Tyronza",
    "Trumann",
    "Grannis",
    "Des Arc",
    "Hensley",
    "Woodson",
    "Biggers",
    "Maynard",
    "Goodwin",
    "Madison",
    "Widener",
    "Bauxite",
    "Waldron",
    "Gilbert",
    "Harriet",
    "Pindall",
    "Barling",
    "Hackett",
    "Midland",
    "Gillham",
    "Horatio",
    "Choctaw",
    "Clinton",
    "Shirley",
    "Dennard",
    "Johnson",
    "Lincoln",
    "Summers",
    "Winslow",
    "El Paso",
    "Kensett",
    "Romance",
    "Russell",
    "Augusta",
    "Gregory",
    "Almyra",
    "Wilmot",
    "Cotter",
    "Midway",
    "Gentry",
    "Lowell",
    "Rogers",
    "Alpena",
    "Jersey",
    "Warren",
    "Beaver",
    "Eudora",
    "Beirne",
    "Curtis",
    "Gurdon",
    "Alpine",
    "Knobel",
    "Rector",
    "Higden",
    "Drasco",
    "Taylor",
    "Marion",
    "Parkin",
    "Rohwer",
    "Tillar",
    "Watson",
    "Wilmar",
    "Conway",
    "Branch",
    "Pearcy",
    "Fulton",
    "Benton",
    "Dierks",
    "Umpire",
    "Floral",
    "Newark",
    "Salado",
    "Oxford",
    "Amagon",
    "Tupelo",
    "Grubbs",
    "Moscow",
    "Tucker",
    "Wright",
    "Stamps",
    "Alicia",
    "Portia",
    "Aubrey",
    "Haynes",
    "Wilton",
    "Austin",
    "Lonoke",
    "Wesley",
    "Witter",
    "Summit",
    "Driver",
    "Joiner",
    "Keiser",
    "Luxora",
    "Wilson",
    "Etowah",
    "Manila",
    "Monroe",
    "Norman",
    "Jasper",
    "Vendor",
    "Camden",
    "Louann",
    "Barton",
    "Elaine",
    "Helena",
    "Oneida",
    "Turner",
    "Wabash",
    "Fisher",
    "Weiner",
    "Wickes",
    "Atkins",
    "Hector",
    "London",
    "Pelsor",
    "Biscoe",
    "Roland",
    "O Kean",
    "Hughes",
    "Bryant",
    "Harvey",
    "Leslie",
    "Lavaca",
    "Sidney",
    "Calion",
    "Huttig",
    "Lawson",
    "Strong",
    "Elkins",
    "Goshen",
    "Morrow",
    "Garner",
    "Letona",
    "Mc Rae",
    "Searcy",
    "Hunter",
    "Havana",
    "Ethel",
    "Avoca",
    "Omaha",
    "Banks",
    "Amity",
    "Datto",
    "Rison",
    "Waldo",
    "Egypt",
    "Earle",
    "Wynne",
    "Dumas",
    "Enola",
    "Altus",
    "Cecil",
    "Ozark",
    "Bexar",
    "Salem",
    "Viola",
    "Royal",
    "Leola",
    "Poyen",
    "Thida",
    "Desha",
    "Rosie",
    "Dolph",
    "Guion",
    "Lamar",
    "Ozone",
    "Hoxie",
    "Gould",
    "Grady",
    "Ogden",
    "Paris",
    "Cabot",
    "Combs",
    "Pyatt",
    "Fouke",
    "Genoa",
    "Dyess",
    "Story",
    "Emmet",
    "Hasty",
    "Ponca",
    "Adona",
    "Perry",
    "Kirby",
    "Tilly",
    "Dover",
    "Hazen",
    "Scott",
    "Reyno",
    "Paron",
    "Boles",
    "Parks",
    "Hardy",
    "Timbo",
    "Beebe",
    "Rover",
    "Prim",
    "Bono",
    "Cash",
    "Alma",
    "Dyer",
    "Rudy",
    "Ivan",
    "Alix",
    "Camp",
    "Gepp",
    "Lafe",
    "Hope",
    "Ozan",
    "Cord",
    "Sage",
    "Diaz",
    "Oark",
    "Lynn",
    "Moro",
    "Ward",
    "Peel",
    "Dell",
    "Oden",
    "Sims",
    "Cale",
    "Deer",
    "Casa",
    "Lexa",
    "Cove",
    "Mena",
    "Colt",
    "Heth",
    "Onia",
    "Ida",
    "Bay",
    "Guy",
    "Coy",
    "Keo",
    "Roe",
    "Ulm",
    "Fox",
    "Ola",
  ],
  QV = JSON.parse(
    '["Kings Canyon National Pk","Palos Verdes Peninsula","Yosemite National Park","Rancho Santa Margarita","March Air Reserve Base","California Hot Springs","Sequoia National Park","Port Hueneme Cbc Base","La Canada Flintridge","Rancho Palos Verdes","Point Reyes Station","San Juan Capistrano","South San Francisco","Pine Mountain Club","Hidden Valley Lake","Blairsden Graeagle","Desert Hot Springs","North Palm Springs","Cardiff By The Sea","Pacific Palisades","Belvedere Tiburon","Carmel By The Sea","San Juan Bautista","Green Valley Lake","Boyes Hot Springs","Strawberry Valley","South Lake Tahoe","Mono Hot Springs","Santa Fe Springs","Hawaiian Gardens","City Of Industry","Hacienda Heights","Huntington Beach","Capistrano Beach","Rancho Cucamonga","Twentynine Palms","Newberry Springs","Palomar Mountain","Fall River Mills","Montgomery Creek","Westlake Village","Diamond Springs","Shingle Springs","El Dorado Hills","Wofford Heights","California City","Huntington Park","Manhattan Beach","Stevenson Ranch","North Hollywood","Rowland Heights","Santa Rita Park","South Dos Palos","American Canyon","Rough And Ready","Fountain Valley","Mountain Center","North Highlands","Cedarpines Park","Running Springs","Borrego Springs","Rancho Santa Fe","San Luis Obispo","Santa Margarita","Redwood Estates","Forks Of Salmon","Point Mugu Nawc","West Sacramento","Knights Landing","Hathaway Pines","Mokelumne Hill","Mountain Ranch","Rail Road Flat","Valley Springs","Fields Landing","Kettleman City","Clearlake Oaks","Clearlake Park","Witter Springs","West Hollywood","Marina Del Rey","South Pasadena","Canyon Country","Woodland Hills","Valley Village","Universal City","South El Monte","Catheys Valley","Redwood Valley","North San Juan","Foothill Ranch","Corona Del Mar","Trabuco Canyon","Olympic Valley","Crescent Mills","Cathedral City","Thousand Palms","Citrus Heights","Rancho Cordova","Morongo Valley","Lake Arrowhead","Lucerne Valley","San Bernardino","Imperial Beach","Camp Pendleton","Warner Springs","Portola Valley","Mount Hamilton","Round Mountain","Stewarts Point","Pleasant Grove","Trinity Center","Mi Wuk Village","East Palo Alto","Castro Valley","Clipper Mills","Feather Falls","Stirling City","Discovery Bay","Bethel Island","Pleasant Hill","Crescent City","Garden Valley","Grizzly Flats","Pollock Pines","Hamilton City","Mckinleyville","Phillipsville","Lake Isabella","Beverly Hills","Hermosa Beach","Redondo Beach","Playa Del Rey","Granada Hills","Mission Hills","Santa Clarita","Panorama City","Monterey Park","Forest Knolls","Stinson Beach","Potter Valley","Mammoth Lakes","Carmel Valley","Pacific Grove","Laguna Niguel","Newport Coast","Newport Beach","Mission Viejo","Carnelian Bay","Meadow Valley","Desert Center","Rancho Mirage","Lake Elsinore","Moreno Valley","Grand Terrace","Big Bear City","Big Bear Lake","Mountain Pass","National City","Spring Valley","Valley Center","San Francisco","Arroyo Grande","Half Moon Bay","Santa Barbara","Mountain View","Boulder Creek","Scotts Valley","Goodyears Bar","Klamath River","Birds Landing","Duncans Mills","The Sea Ranch","Crows Landing","Junction City","Thousand Oaks","Browns Valley","Markleeville","Sutter Creek","Forest Ranch","Copperopolis","Douglas Flat","Walnut Creek","Twin Bridges","Cantua Creek","Tranquillity","Willow Creek","Death Valley","Independence","Buttonwillow","Frazier Park","Johannesburg","Bell Gardens","Santa Monica","Mount Wilson","Sierra Madre","Verdugo City","La Crescenta","Agoura Hills","Porter Ranch","San Fernando","Sherman Oaks","Baldwin Park","Corte Madera","Dillon Beach","San Geronimo","Coulterville","Little River","Fort Bidwell","Pebble Beach","Moss Landing","Saint Helena","Chicago Park","Soda Springs","Grass Valley","Los Alamitos","Sunset Beach","Laguna Woods","Laguna Beach","Laguna Hills","San Clemente","Ladera Ranch","Garden Grove","Emigrant Gap","Meadow Vista","Taylorsville","Indian Wells","Palm Springs","Quail Valley","Walnut Grove","Yucca Valley","Angelus Oaks","Apple Valley","Forest Falls","Red Mountain","Mount Laguna","Pauma Valley","San Luis Rey","Santa Ysabel","Solana Beach","Grover Beach","Redwood City","San Gregorio","Mount Hermon","French Gulch","Mount Shasta","Seiad Valley","Rohnert Park","Villa Grande","Paynes Creek","Douglas City","Farmersville","Three Rivers","Big Oak Flat","Chinese Camp","Soulsbyville","Newbury Park","Port Hueneme","Camptonville","Oregon House","San Leandro","San Lorenzo","Amador City","River Pines","Berry Creek","Angels Camp","San Andreas","Wilseyville","El Sobrante","Smith River","Mount Aukum","Placerville","Five Points","Orange Cove","Raisin City","San Joaquin","Shaver Lake","Bridgeville","Garberville","Salton City","Westmorland","Winterhaven","Little Lake","Mc Kittrick","Bakersfield","Kelseyville","Los Angeles","Playa Vista","Culver City","Pico Rivera","Harbor City","Signal Hill","Canoga Park","North Hills","Studio City","Toluca Lake","Mount Baldy","Diamond Bar","San Gabriel","Temple City","West Covina","Lake Hughes","Pearblossom","Mill Valley","San Anselmo","San Quentin","Laytonville","Point Arena","Davis Creek","Castroville","Pope Valley","Cedar Ridge","Penn Valley","Nevada City","Smartsville","Lake Forest","East Irvine","Midway City","Aliso Viejo","Westminster","Yorba Linda","Granite Bay","Kings Beach","Tahoe Vista","Palm Desert","San Jacinto","Sloughhouse","Chino Hills","Joshua Tree","Pioneertown","Bloomington","Lytle Creek","Pinon Hills","Victorville","Chula Vista","Lemon Grove","Pine Valley","French Camp","Avila Beach","Paso Robles","Pismo Beach","Carpinteria","Santa Maria","Morgan Hill","New Almaden","Santa Clara","Watsonville","Bella Vista","Shasta Lake","Old Station","Shingletown","Whiskeytown","Downieville","Sierra City","Sierraville","Suisun City","Valley Ford","Camp Meeker","Forestville","Geyserville","Guerneville","Los Molinos","Burnt Ranch","Weaverville","Camp Nelson","Porterville","Springville","Terra Bella","Twain Harte","Santa Paula","Simi Valley","Brownsville","Westchester","Pleasanton","Union City","Emeryville","Fiddletown","Kit Carson","Pine Grove","Forbestown","Campo Seco","West Point","El Cerrito","Port Costa","Georgetown","Pilot Hill","Butte City","Alderpoint","Blocksburg","Hydesville","Myers Flat","Whitethorn","Calipatria","Palo Verde","Glennville","Lost Hills","Mc Farland","Ridgecrest","Lower Lake","Middletown","Upper Lake","Janesville","Litchfield","Susanville","Dodgertown","El Segundo","South Gate","Montebello","Bellflower","Wilmington","Long Beach","San Marino","West Hills","Chatsworth","Northridge","Sun Valley","Littlerock","Chowchilla","Coarsegold","North Fork","San Rafael","Fort Bragg","Manchester","Livingston","Cedarville","Eagleville","Bridgeport","Lee Vining","Greenfield","Rutherford","Yountville","Washington","Buena Park","Seal Beach","Costa Mesa","Dana Point","Villa Park","Foresthill","Dutch Flat","Tahoe City","Canyon Dam","Greenville","Beckwourth","Whitewater","Winchester","Sacramento","Carmichael","Orangevale","Tres Pinos","Parker Dam","Fort Irwin","Cedar Glen","Loma Linda","Oro Grande","Twin Peaks","Wrightwood","San Marcos","San Ysidro","Farmington","Woodbridge","Atascadero","San Miguel","San Simeon","Burlingame","El Granada","Menlo Park","Moss Beach","San Carlos","Summerland","New Cuyama","Los Alamos","Los Olivos","Santa Ynez","San Martin","Ben Lomond","Santa Cruz","Cottonwood","Palo Cedro","Fort Jones","Happy Camp","Travis Afb","Bodega Bay","Santa Rosa","Cloverdale","Glen Ellen","Healdsburg","Occidental","Sebastopol","Mill Creek","Lemon Cove","Strathmore","Strawberry","Clarksburg","Marysville","Olivehurst","Livermore","Altaville","Vallecito","Princeton","Stonyford","Brentwood","Knightsen","Lafayette","Pittsburg","San Ramon","San Pablo","Fort Dick","El Dorado","Greenwood","Echo Lake","Big Creek","Caruthers","Firebaugh","Kingsburg","Lakeshore","Miramonte","Riverdale","Tollhouse","Elk Creek","Blue Lake","El Centro","Holtville","Lone Pine","Kernville","Randsburg","Tehachapi","Stratford","Clearlake","Glenhaven","Ravendale","Hawthorne","Inglewood","La Mirada","Paramount","San Pedro","Calabasas","Claremont","La Puente","San Dimas","Lancaster","Bass Lake","Greenbrae","Kentfield","Inverness","Lagunitas","Sausalito","Fish Camp","El Portal","Boonville","Branscomb","Mendocino","Yorkville","Dos Palos","Los Banos","Stevinson","Lake City","June Lake","Coleville","King City","San Lucas","Spreckels","Calistoga","Deer Park","Floriston","Silverado","Santa Ana","Fullerton","Placentia","Newcastle","Roseville","Applegate","Mira Loma","Coachella","La Quinta","Riverside","Idyllwild","Courtland","Elk Grove","Fair Oaks","Mcclellan","Rio Linda","Hollister","Montclair","Bryn Mawr","Crestline","Helendale","Rimforest","Skyforest","Sugarloaf","Boulevard","Encinitas","Escondido","Fallbrook","Oceanside","San Diego","Lockeford","Morro Bay","Templeton","Daly City","Pescadero","San Bruno","Palo Alto","San Mateo","Guadalupe","Los Altos","Sunnyvale","Cupertino","Holy City","Los Gatos","Brookdale","Davenport","Hat Creek","Millville","Alleghany","Somes Bar","Greenview","Hornbrook","Scott Bar","Fairfield","Rio Vista","Vacaville","Penngrove","Annapolis","El Verano","Monte Rio","La Grange","Patterson","Riverbank","Waterford","Yuba City","Red Bluff","Mad River","Earlimart","Richgrove","Groveland","Jamestown","Long Barn","Pinecrest","Camarillo","Wheatland","Beale Afb","Challenge","Piedmont","Berkeley","Kirkwood","Plymouth","Oroville","Paradise","Richvale","Arbuckle","Williams","Danville","Crockett","Hercules","Martinez","Richmond","Somerset","Coalinga","Carlotta","Ferndale","Honeydew","Kneeland","Petrolia","Rio Dell","Redcrest","Trinidad","Calexico","Imperial","Ocotillo","Shoshone","Big Pine","Maricopa","Caliente","Inyokern","Rosamond","Corcoran","Lakeport","Nubieber","Madeline","Standish","Westwood","Lawndale","Torrance","Whittier","Cerritos","Lakewood","Altadena","Monrovia","Montrose","Pasadena","Glendale","Winnetka","Valencia","Van Nuys","El Monte","Glendora","La Verne","Rosemead","Alhambra","Palmdale","Valyermo","Ahwahnee","Oakhurst","Larkspur","Marshall","Woodacre","Hornitos","Mariposa","Midpines","Calpella","Comptche","Dos Rios","Westport","Le Grand","Snelling","San Ardo","Gonzales","Lockwood","Monterey","Oakville","La Palma","La Habra","Surfside","Sheridan","Gold Run","Homewood","Chilcoot","Beaumont","Calimesa","Homeland","Murrieta","Sun City","Temecula","Wildomar","Antelope","Paicines","Adelanto","Blue Jay","Fawnskin","Hesperia","Highland","Redlands","Descanso","Carlsbad","El Cajon","La Jolla","Lakeside","Ranchita","Coronado","Stockton","Clements","Vernalis","Thornton","Los Osos","Brisbane","La Honda","Loma Mar","Atherton","Millbrae","Pacifica","Buellton","Casmalia","Stanford","Campbell","Milpitas","Saratoga","San Jose","Capitola","Anderson","Big Bend","Castella","Lakehead","Mcarthur","Whitmore","Loyalton","Callahan","Dunsmuir","Montague","Tulelake","Petaluma","Cazadero","Eldridge","Rio Nido","Vineburg","Nicolaus","Live Oak","Meridian","Flournoy","Paskenta","Proberta","Lewiston","Woodlake","Columbia","Moccasin","Standard","Tuolumne","Oak Park","Fillmore","Moorpark","Oak View","Brandeis","Woodland","Dunnigan","Rackerby","Alameda","Fremont","Hayward","Oakland","Jackson","Martell","Pioneer","Volcano","Drytown","Gridley","Magalia","Palermo","Glencoe","Murphys","Wallace","Maxwell","Antioch","Clayton","Concord","Gasquet","Klamath","Auberry","Del Rey","Mendota","Parlier","Prather","Reedley","Willows","Bayside","Fortuna","Miranda","Orleans","Brawley","Fontana","Olancha","Bodfish","Fellows","Shafter","Edwards","Hanford","Lemoore","Lucerne","Herlong","Milford","Compton","Gardena","Lynwood","Maywood","Topanga","Norwalk","Artesia","Arcadia","Sunland","Tujunga","Castaic","Newhall","Pacoima","Tarzana","Burbank","O Neals","Raymond","Bolinas","Fairfax","Nicasio","Tomales","Gualala","Hopland","Navarro","Talmage","Willits","Leggett","Atwater","Ballico","Cressey","El Nido","Gustine","Planada","Lookout","Alturas","Bradley","Salinas","Big Sur","Chualar","Seaside","Soledad","Truckee","Cypress","Stanton","El Toro","Anaheim","Lincoln","Rocklin","Storrie","Chester","Portola","Banning","Cabazon","Thermal","Aguanga","Menifee","Elverta","Isleton","Represa","Ontario","Landers","Barstow","Daggett","Hinkley","Mentone","Needles","Yucaipa","Dulzura","Jacumba","La Mesa","Potrero","Bonsall","Del Mar","Escalon","Lathrop","Manteca","Cambria","Cayucos","Creston","Harmony","Shandon","Belmont","Montara","Solvang","Freedom","Redding","Oak Run","Platina","Calpine","Gazelle","Grenada","Mccloud","Macdoel","Benicia","Vallejo","Kenwood","Windsor","Hickman","Hughson","Modesto","Oakdale","Turlock","Westley","Rio Oso","Robbins","Corning","Mineral","Big Bar","Hayfork","Hyampom","Alpaugh","Ivanhoe","Lindsay","Visalia","Waukena","Sultana","Ventura","Esparto","Madison","Winters","Dobbins","Newark","Dublin","Albany","Bangor","Durham","Nelson","Arnold","Burson","Colusa","Grimes","Canyon","Diablo","Moraga","Oakley","Orinda","Pinole","Coloma","Rescue","Camino","Kyburz","Tahoma","Burrel","Clovis","Dunlap","Fowler","Friant","Kerman","Piedra","Fresno","Sanger","Yokuts","Artois","Orland","Eureka","Arcata","Cutten","Korbel","Loleta","Redway","Scotia","Niland","Seeley","Tecopa","Bishop","Darwin","Keeler","Delano","Edison","Lamont","Tupman","Weldon","Mojave","Cantil","Armona","Avenal","Finley","Bieber","Wendel","Downey","Malibu","Venice","Avalon","Lomita","Carson","Duarte","Encino","Reseda","Sylmar","Covina","Pomona","Walnut","Madera","Wishon","Novato","Albion","Caspar","Covelo","Piercy","Hilmar","Merced","Winton","Likely","Benton","Carmel","Marina","Aromas","Angwin","Norden","Irvine","Tustin","Atwood","Orange","Auburn","Loomis","Penryn","Colfax","Weimar","Belden","Quincy","Vinton","Blythe","Perris","Corona","Folsom","Herald","Mather","Wilton","Guasti","Upland","Colton","Phelan","Ludlow","Nipton","Patton","Rialto","Alpine","Bonita","Guatay","Tecate","Julian","Ramona","Santee","Acampo","Linden","Victor","Nipomo","Oceano","Goleta","Lompoc","Alviso","Coyote","Gilroy","Felton","Soquel","Burney","Cassel","Obrien","Shasta","Dorris","Elmira","Bodega","Cotati","Fulton","Graton","Jenner","Sonoma","Denair","Empire","Newman","Salida","Sutter","Gerber","Manton","Tehama","Salyer","Exeter","Goshen","Kaweah","Pixley","Tipton","Tulare","Badger","Cutler","Dinuba","Yettem","Traver","Sonora","Oxnard","Brooks","Guinda","Rumsey","Zamora","Sunol","Biggs","Chico","Avery","Alamo","Byron","Rodeo","Lotus","Huron","Laton","Biola","Selma","Glenn","Hoopa","Orick","Samoa","Weott","Heber","Arvin","Lebec","Wasco","Woody","Boron","Keene","Doyle","Termo","Azusa","Acton","Llano","Olema","Philo","Ukiah","Delhi","Canby","Topaz","Jolon","Twain","Indio","Mecca","Hemet","Nuevo","Norco","Chino","Vidal","Amboy","Baker","Essex","Yermo","Trona","Campo","Jamul","Poway","Vista","Tracy","Ripon","Aptos","Yreka","Dixon","Ceres","Keyes","Zenia","Ducor","Posey","Orosi","Somis","Capay","Davis","Ione","Cool","Helm","Hume","Bard","Onyx","Taft","Cobb","Nice","Bell","Ross","Adin","Napa","Brea","Alta","Clio","Anza","Galt","Hood","Ryde","Earp","Cima","Pala","Holt","Lodi","Etna","Weed","Vina","Ojai","Piru","Yolo","Elk","Igo"]'
  ),
  ZV = [
    "Mesa Verde National Park",
    "Green Mountain Falls",
    "Hot Sulphur Springs",
    "West Pleasant View",
    "Red Feather Lakes",
    "Steamboat Springs",
    "Eldorado Springs",
    "Colorado Springs",
    "Glenwood Springs",
    "Log Lane Village",
    "Snowmass Village",
    "Manitou Springs",
    "Battlement Mesa",
    "Pagosa Springs",
    "Poncha Springs",
    "Cheyenne Wells",
    "Grand Junction",
    "Commerce City",
    "Idaho Springs",
    "Olney Springs",
    "Crested Butte",
    "Buffalo Creek",
    "Sheridan Lake",
    "Pleasant View",
    "Yellow Jacket",
    "Colorado City",
    "Cripple Creek",
    "Woodland Park",
    "Silver Plume",
    "Fort Garland",
    "Usaf Academy",
    "Central City",
    "Rollinsville",
    "Indian Hills",
    "Fort Collins",
    "Breckenridge",
    "Silverthorne",
    "Westminster",
    "Springfield",
    "Buena Vista",
    "Castle Rock",
    "Palmer Lake",
    "Winter Park",
    "Wheat Ridge",
    "Fort Morgan",
    "Lake George",
    "Woody Creek",
    "Monte Vista",
    "Villa Grove",
    "Placerville",
    "Fort Lupton",
    "Platteville",
    "Deer Trail",
    "Two Buttes",
    "Las Animas",
    "Broomfield",
    "Louisville",
    "Pinecliffe",
    "Allenspark",
    "Kit Carson",
    "Wild Horse",
    "Georgetown",
    "Sugar City",
    "Westcliffe",
    "Dove Creek",
    "Canon City",
    "Coal Creek",
    "Carbondale",
    "New Castle",
    "Black Hawk",
    "Grand Lake",
    "Powderhorn",
    "Walsenburg",
    "Burlington",
    "Twin Lakes",
    "Estes Park",
    "Glen Haven",
    "Masonville",
    "Wellington",
    "Glade Park",
    "Whitewater",
    "Rocky Ford",
    "South Fork",
    "Phippsburg",
    "Florissant",
    "Briggsdale",
    "Keenesburg",
    "New Raymer",
    "Strasburg",
    "Henderson",
    "Englewood",
    "Littleton",
    "Pritchett",
    "Fort Lyon",
    "Lafayette",
    "Jamestown",
    "Nederland",
    "Cedaredge",
    "Hotchkiss",
    "Franktown",
    "Lone Tree",
    "Red Cliff",
    "Elizabeth",
    "Parachute",
    "Kremmling",
    "Tabernash",
    "Ohio City",
    "Lake City",
    "Evergreen",
    "Kittredge",
    "Arlington",
    "Leadville",
    "Livermore",
    "Trinchera",
    "Manzanola",
    "Jefferson",
    "Del Norte",
    "Oak Creek",
    "Silverton",
    "Telluride",
    "Julesburg",
    "Firestone",
    "Frederick",
    "Johnstown",
    "Severance",
    "Thornton",
    "Brighton",
    "Eastlake",
    "Mc Clave",
    "Longmont",
    "Arapahoe",
    "Antonito",
    "San Luis",
    "Crawford",
    "Larkspur",
    "Louviers",
    "Matheson",
    "Monument",
    "Fountain",
    "Coaldale",
    "Cotopaxi",
    "Florence",
    "Hillside",
    "Rockvale",
    "Parshall",
    "Gunnison",
    "Somerset",
    "Coalmont",
    "Idledale",
    "Morrison",
    "Stratton",
    "Bayfield",
    "Hesperus",
    "Berthoud",
    "Loveland",
    "Boncarbo",
    "Trinidad",
    "Sterling",
    "Palisade",
    "Collbran",
    "De Beque",
    "Dinosaur",
    "Hamilton",
    "Cimarron",
    "Montrose",
    "Naturita",
    "Hillrose",
    "La Junta",
    "Fairplay",
    "Meredith",
    "Snowmass",
    "Avondale",
    "Homelake",
    "Crestone",
    "Saguache",
    "Sargents",
    "Sedgwick",
    "Milliken",
    "Gilcrest",
    "La Salle",
    "Hereford",
    "Stoneham",
    "Bennett",
    "Watkins",
    "Alamosa",
    "Arboles",
    "Boulder",
    "Hygiene",
    "Monarch",
    "Granite",
    "Nathrop",
    "Capulin",
    "Conejos",
    "La Jara",
    "Manassa",
    "Sanford",
    "Crowley",
    "Wetmore",
    "Sedalia",
    "Edwards",
    "Minturn",
    "Wolcott",
    "Cascade",
    "Penrose",
    "Gardner",
    "La Veta",
    "Cowdrey",
    "Conifer",
    "Haswell",
    "Bethune",
    "Flagler",
    "Seibert",
    "Ignacio",
    "Durango",
    "Bellvue",
    "Laporte",
    "Timnath",
    "Aguilar",
    "Branson",
    "Fleming",
    "Padroni",
    "Clifton",
    "Gateway",
    "Maybell",
    "Dolores",
    "Bedrock",
    "Paradox",
    "Redvale",
    "Orchard",
    "Weldona",
    "Wiggins",
    "Ridgway",
    "Hartsel",
    "Shawnee",
    "Amherst",
    "Holyoke",
    "Granada",
    "Hartman",
    "Rangely",
    "Toponas",
    "Norwood",
    "Woodrow",
    "Windsor",
    "Galeton",
    "Greeley",
    "Lucerne",
    "Aurora",
    "Dupont",
    "Denver",
    "Hooper",
    "Chromo",
    "Salida",
    "Dumont",
    "Empire",
    "Blanca",
    "Jaroso",
    "Ordway",
    "Austin",
    "Eckert",
    "Lazear",
    "Paonia",
    "Cahone",
    "Parker",
    "Mc Coy",
    "Basalt",
    "Gypsum",
    "Elbert",
    "Calhan",
    "Peyton",
    "Howard",
    "Fraser",
    "Granby",
    "Almont",
    "Parlin",
    "Pitkin",
    "Walden",
    "Arvada",
    "Golden",
    "Climax",
    "Marvel",
    "Hoehne",
    "Weston",
    "Arriba",
    "Karval",
    "Atwood",
    "Merino",
    "Fruita",
    "Molina",
    "Creede",
    "Slater",
    "Cortez",
    "Mancos",
    "Towaoc",
    "Olathe",
    "Snyder",
    "Cheraw",
    "Fowler",
    "Bailey",
    "Guffey",
    "Haxtun",
    "Pueblo",
    "Beulah",
    "Meeker",
    "Hayden",
    "Center",
    "Moffat",
    "Dillon",
    "Frisco",
    "Divide",
    "Victor",
    "Lindon",
    "Dacono",
    "Hudson",
    "Kersey",
    "Pierce",
    "Roggen",
    "Grover",
    "Eckley",
    "Idalia",
    "Vernon",
    "Mosca",
    "Byers",
    "Campo",
    "Vilas",
    "Walsh",
    "Hasty",
    "Lyons",
    "Niwot",
    "Romeo",
    "Chama",
    "Delta",
    "Burns",
    "Eagle",
    "Agate",
    "Kiowa",
    "Simla",
    "Ramah",
    "Yoder",
    "Rifle",
    "Drake",
    "Model",
    "Genoa",
    "Limon",
    "Crook",
    "Iliff",
    "Peetz",
    "Craig",
    "Lewis",
    "Nucla",
    "Brush",
    "Swink",
    "Ouray",
    "Grant",
    "Paoli",
    "Aspen",
    "Holly",
    "Lamar",
    "Wiley",
    "Boone",
    "Clark",
    "Yampa",
    "Egnar",
    "Ophir",
    "Akron",
    "Anton",
    "Eaton",
    "Evans",
    "Ward",
    "Cory",
    "Rico",
    "Bond",
    "Avon",
    "Vail",
    "Rush",
    "Silt",
    "Rand",
    "Pine",
    "Eads",
    "Vona",
    "Hugo",
    "Loma",
    "Mack",
    "Mesa",
    "Alma",
    "Como",
    "Ovid",
    "Otis",
    "Cope",
    "Erie",
    "Mead",
    "Ault",
    "Carr",
    "Gill",
    "Nunn",
    "Wray",
    "Yuma",
    "Joes",
    "Kirk",
    "Kim",
    "Rye",
  ],
  XV = [
    "New Preston Marble Dale",
    "North Grosvenordale",
    "East Windsor Hill",
    "South Glastonbury",
    "Winchester Center",
    "North Westchester",
    "East Glastonbury",
    "Washington Depot",
    "North Stonington",
    "Vernon Rockville",
    "Stafford Springs",
    "Mansfield Center",
    "South Willington",
    "Storrs Mansfield",
    "Woodstock Valley",
    "Cornwall Bridge",
    "Mansfield Depot",
    "South Woodstock",
    "Central Village",
    "Redding Center",
    "North Branford",
    "North Franklin",
    "East Killingly",
    "East Woodstock",
    "Grosvenor Dale",
    "Pomfret Center",
    "New Fairfield",
    "Old Greenwich",
    "Redding Ridge",
    "Canton Center",
    "East Hartland",
    "South Windsor",
    "West Hartland",
    "West Simsbury",
    "West Suffield",
    "Windsor Locks",
    "West Hartford",
    "East Hartford",
    "Falls Village",
    "Gaylordsville",
    "West Cornwall",
    "Middle Haddam",
    "South Britain",
    "Staffordville",
    "North Windham",
    "South Windham",
    "Greens Farms",
    "Collinsville",
    "North Canton",
    "North Granby",
    "East Windsor",
    "Wethersfield",
    "New Hartford",
    "Killingworth",
    "East Hampton",
    "Old Saybrook",
    "Beacon Falls",
    "Mashantucket",
    "Hawleyville",
    "Broad Brook",
    "East Berlin",
    "East Granby",
    "Glastonbury",
    "New Britain",
    "Tariffville",
    "West Granby",
    "Marlborough",
    "Plantsville",
    "Southington",
    "East Canaan",
    "Pine Meadow",
    "Barkhamsted",
    "Bridgewater",
    "New Milford",
    "Centerbrook",
    "East Haddam",
    "Middlefield",
    "North Haven",
    "Wallingford",
    "Gales Ferry",
    "Jewett City",
    "Quaker Hill",
    "West Mystic",
    "Somersville",
    "Willimantic",
    "Ballouville",
    "Sandy Hook",
    "Bridgeport",
    "Brookfield",
    "Georgetown",
    "New Canaan",
    "Ridgefield",
    "Bloomfield",
    "Burlington",
    "Farmington",
    "Manchester",
    "Plainville",
    "Rocky Hill",
    "Unionville",
    "Litchfield",
    "Northfield",
    "South Kent",
    "Terryville",
    "Torrington",
    "Washington",
    "Deep River",
    "Middletown",
    "West Haven",
    "Middlebury",
    "New London",
    "Old Mystic",
    "South Lyme",
    "Stonington",
    "Uncasville",
    "Versailles",
    "Colchester",
    "Willington",
    "Canterbury",
    "Plainfield",
    "Winchester",
    "Stevenson",
    "Stratford",
    "Fairfield",
    "Greenwich",
    "Riverside",
    "Southport",
    "Poquonock",
    "Newington",
    "Colebrook",
    "Lakeville",
    "Salisbury",
    "Bethlehem",
    "Pequabuck",
    "Thomaston",
    "Harwinton",
    "Watertown",
    "Westbrook",
    "Northford",
    "Southbury",
    "New Haven",
    "Waterbury",
    "Naugatuck",
    "East Lyme",
    "Montville",
    "Pawcatuck",
    "Taftville",
    "Voluntown",
    "Waterford",
    "Ellington",
    "Danielson",
    "Quinebaug",
    "Woodstock",
    "Botsford",
    "Trumbull",
    "Westport",
    "Stamford",
    "Simsbury",
    "Suffield",
    "Weatogue",
    "Hartford",
    "Milldale",
    "Riverton",
    "Cornwall",
    "Lakeside",
    "Oakville",
    "Plymouth",
    "Woodbury",
    "Cromwell",
    "Higganum",
    "Ivoryton",
    "Portland",
    "Rockfall",
    "Branford",
    "Cheshire",
    "Guilford",
    "Prospect",
    "Old Lyme",
    "Stafford",
    "Columbia",
    "Coventry",
    "Abington",
    "Brooklyn",
    "Dayville",
    "Eastford",
    "Scotland",
    "Thompson",
    "Sterling",
    "Wauregan",
    "Newtown",
    "Shelton",
    "Sherman",
    "Cos Cob",
    "Danbury",
    "Norwalk",
    "Redding",
    "Windsor",
    "Bristol",
    "Enfield",
    "Norfolk",
    "Taconic",
    "Winsted",
    "Roxbury",
    "Chester",
    "Clinton",
    "Ansonia",
    "Madison",
    "Meriden",
    "Milford",
    "Seymour",
    "Bethany",
    "Wolcott",
    "Lebanon",
    "Ledyard",
    "Hanover",
    "Niantic",
    "Norwich",
    "Preston",
    "Oakdale",
    "Hadlyme",
    "Tolland",
    "Andover",
    "Chaplin",
    "Hampton",
    "Pomfret",
    "Ashford",
    "Windham",
    "Monroe",
    "Easton",
    "Bethel",
    "Darien",
    "Weston",
    "Wilton",
    "Canton",
    "Granby",
    "Berlin",
    "Marion",
    "Canaan",
    "Sharon",
    "Bantam",
    "Goshen",
    "Morris",
    "Cobalt",
    "Durham",
    "Haddam",
    "Moodus",
    "Orange",
    "Oxford",
    "Hamden",
    "Baltic",
    "Bozrah",
    "Gilman",
    "Groton",
    "Mystic",
    "Yantic",
    "Bolton",
    "Somers",
    "Amston",
    "Hebron",
    "Fabyan",
    "Putnam",
    "Rogers",
    "Moosup",
    "Essex",
    "Derby",
    "Salem",
    "Oneco",
    "Avon",
    "Kent",
  ],
  eI = [
    "Camden Wyoming",
    "Fenwick Island",
    "Rehoboth Beach",
    "Delaware City",
    "Saint Georges",
    "Bethany Beach",
    "Little Creek",
    "Bridgeville",
    "Harrington",
    "Middletown",
    "Montchanin",
    "New Castle",
    "Winterthur",
    "Wilmington",
    "Georgetown",
    "Ocean View",
    "Selbyville",
    "Dover Afb",
    "Frederica",
    "Hockessin",
    "Port Penn",
    "Ellendale",
    "Frankford",
    "Greenwood",
    "Millsboro",
    "Millville",
    "Cheswold",
    "Magnolia",
    "Woodside",
    "Claymont",
    "Kirkwood",
    "Rockland",
    "Townsend",
    "Dagsboro",
    "Harbeson",
    "Clayton",
    "Houston",
    "Marydel",
    "Yorklyn",
    "Lincoln",
    "Milford",
    "Seaford",
    "Felton",
    "Hartly",
    "Kenton",
    "Smyrna",
    "Newark",
    "Odessa",
    "Bethel",
    "Delmar",
    "Laurel",
    "Milton",
    "Nassau",
    "Dover",
    "Viola",
    "Lewes",
    "Bear",
  ],
  nI = ["Washington Navy Yard", "Naval Anacost Annex", "Washington"],
  aI = [
    "Indian Lake Estates",
    "Worthington Springs",
    "Green Cove Springs",
    "Jacksonville Beach",
    "Howey In The Hills",
    "Palm Beach Gardens",
    "Indian Rocks Beach",
    "Panama City Beach",
    "Homosassa Springs",
    "North Miami Beach",
    "Fort Walton Beach",
    "Intercession City",
    "Ponte Vedra Beach",
    "Altamonte Springs",
    "Keystone Heights",
    "North Fort Myers",
    "Fort Myers Beach",
    "Saint James City",
    "Key Colony Beach",
    "Fernandina Beach",
    "North Palm Beach",
    "Royal Palm Beach",
    "Saint Petersburg",
    "Clearwater Beach",
    "Port Saint Lucie",
    "Lake Panasoffkee",
    "New Smyrna Beach",
    "Defuniak Springs",
    "Santa Rosa Beach",
    "South Palm Beach",
    "Glen Saint Mary",
    "Satellite Beach",
    "Melbourne Beach",
    "Fort Lauderdale",
    "Deerfield Beach",
    "Everglades City",
    "Horseshoe Beach",
    "Sun City Center",
    "Bradenton Beach",
    "Marathon Shores",
    "West Palm Beach",
    "Crystal Springs",
    "New Port Richey",
    "Saint Augustine",
    "De Leon Springs",
    "Cape Canaveral",
    "Merritt Island",
    "Pembroke Pines",
    "Port Charlotte",
    "Fleming Island",
    "Atlantic Beach",
    "Lanark Village",
    "Port Saint Joe",
    "Fruitland Park",
    "Bonita Springs",
    "Orange Springs",
    "Silver Springs",
    "Summerland Key",
    "Hurlburt Field",
    "Belleair Beach",
    "Tarpon Springs",
    "Winter Springs",
    "Rosemary Beach",
    "Pompano Beach",
    "Coral Springs",
    "Coconut Creek",
    "Crystal River",
    "Beverly Hills",
    "Doctors Inlet",
    "Neptune Beach",
    "Flagler Beach",
    "Chattahoochee",
    "White Springs",
    "Bowling Green",
    "Zolfo Springs",
    "Ponce De Leon",
    "Eastlake Weir",
    "Miami Gardens",
    "Winter Garden",
    "Boynton Beach",
    "Wesley Chapel",
    "Pinellas Park",
    "Crystal Beach",
    "Safety Harbor",
    "Highland City",
    "Lake Hamilton",
    "Crescent City",
    "Daytona Beach",
    "Crawfordville",
    "Miramar Beach",
    "South Daytona",
    "High Springs",
    "Island Grove",
    "Mexico Beach",
    "Lehigh Acres",
    "Rotonda West",
    "Penney Farms",
    "Marco Island",
    "Jacksonville",
    "Apalachicola",
    "Apollo Beach",
    "Thonotosassa",
    "Winter Beach",
    "Grand Island",
    "Gulf Hammock",
    "Holmes Beach",
    "Longboat Key",
    "Jensen Beach",
    "Port Salerno",
    "Coral Gables",
    "Key Biscayne",
    "Big Pine Key",
    "Delray Beach",
    "Land O Lakes",
    "Winter Haven",
    "East Palatka",
    "The Villages",
    "Steinhatchee",
    "Ormond Beach",
    "Gainesville",
    "Panama City",
    "Indialantic",
    "Patrick Afb",
    "Cocoa Beach",
    "Blountstown",
    "Clarksville",
    "Wewahitchka",
    "Punta Gorda",
    "Floral City",
    "Orange Park",
    "Lake Geneva",
    "Chokoloskee",
    "Tallahassee",
    "Moore Haven",
    "Brooksville",
    "Spring Hill",
    "Lake Placid",
    "Campbellton",
    "Grand Ridge",
    "Boca Grande",
    "Otter Creek",
    "Myakka City",
    "Fort Mc Coy",
    "Orange Lake",
    "Summerfield",
    "Miami Beach",
    "Laurel Hill",
    "Mary Esther",
    "Winter Park",
    "Kenansville",
    "Saint Cloud",
    "Belle Glade",
    "Canal Point",
    "Lake Harbor",
    "Loxahatchee",
    "Zephyrhills",
    "San Antonio",
    "Port Richey",
    "Palm Harbor",
    "Babson Park",
    "Haines City",
    "Lake Alfred",
    "River Ranch",
    "Interlachen",
    "Pomona Park",
    "Putnam Hall",
    "Ponte Vedra",
    "Saint Johns",
    "Fort Pierce",
    "Gulf Breeze",
    "Casselberry",
    "Lake Monroe",
    "Mid Florida",
    "Center Hill",
    "Sumterville",
    "Shady Grove",
    "Lake Butler",
    "Barberville",
    "Port Orange",
    "Orange City",
    "Saint Marks",
    "North Miami",
    "Lynn Haven",
    "Youngstown",
    "Scottsmoor",
    "Titusville",
    "Hallandale",
    "Plantation",
    "Middleburg",
    "Fort White",
    "Fort Ogden",
    "Cross City",
    "Cantonment",
    "Palm Coast",
    "Carrabelle",
    "Greensboro",
    "Istachatta",
    "Plant City",
    "Vero Beach",
    "Cottondale",
    "Graceville",
    "Monticello",
    "Mount Dora",
    "Fort Myers",
    "Cape Coral",
    "Yankeetown",
    "Greenville",
    "Anna Maria",
    "Terra Ceia",
    "Hobe Sound",
    "Indiantown",
    "Islamorada",
    "Bryceville",
    "Valparaiso",
    "Okeechobee",
    "Windermere",
    "Wellington",
    "Boca Raton",
    "Lake Worth",
    "Greenacres",
    "Palm Beach",
    "Clearwater",
    "Auburndale",
    "Eagle Lake",
    "Eaton Park",
    "Fort Meade",
    "Frostproof",
    "Lake Wales",
    "Georgetown",
    "North Port",
    "Lake Helen",
    "Mossy Head",
    "Hawthorne",
    "La Crosse",
    "Lochloosa",
    "Macclenny",
    "Sanderson",
    "Melbourne",
    "Rockledge",
    "Sebastian",
    "Hollywood",
    "El Jobean",
    "Dunnellon",
    "Homosassa",
    "Inverness",
    "Immokalee",
    "Lake City",
    "Pensacola",
    "Eastpoint",
    "Clewiston",
    "Avon Park",
    "Gibsonton",
    "Riverview",
    "Westville",
    "Fellsmere",
    "Greenwood",
    "Lady Lake",
    "Groveland",
    "Montverde",
    "Okahumpka",
    "Woodville",
    "Cedar Key",
    "Chiefland",
    "Morriston",
    "Williston",
    "Bradenton",
    "Tallevast",
    "Ocklawaha",
    "Weirsdale",
    "Fairfield",
    "Mc Intosh",
    "Belleview",
    "Palm City",
    "Homestead",
    "Opa Locka",
    "Key Largo",
    "Tavernier",
    "Crestview",
    "Eglin Afb",
    "Niceville",
    "Christmas",
    "Tangerine",
    "Killarney",
    "Kissimmee",
    "South Bay",
    "Dade City",
    "Lacoochee",
    "Saint Leo",
    "Bay Pines",
    "Davenport",
    "Lakeshore",
    "Polk City",
    "Florahome",
    "Hollister",
    "Lake Como",
    "San Mateo",
    "Englewood",
    "Goldenrod",
    "Lake Mary",
    "Edgewater",
    "Cassadaga",
    "Sopchoppy",
    "Caryville",
    "Earleton",
    "Evinston",
    "Micanopy",
    "Newberry",
    "Fountain",
    "Palm Bay",
    "Hernando",
    "Copeland",
    "Goodland",
    "Old Town",
    "Suwannee",
    "Gonzalez",
    "Mc David",
    "Palmdale",
    "Jennings",
    "Wauchula",
    "Nobleton",
    "Sun City",
    "Roseland",
    "Marianna",
    "Sorrento",
    "Umatilla",
    "Astatula",
    "Clermont",
    "Ferndale",
    "Leesburg",
    "Mascotte",
    "Minneola",
    "Bokeelia",
    "Pineland",
    "Palmetto",
    "Ellenton",
    "Sarasota",
    "Manasota",
    "Long Key",
    "Key West",
    "Marathon",
    "Callahan",
    "Hilliard",
    "Milligan",
    "Shalimar",
    "Clarcona",
    "Maitland",
    "Plymouth",
    "Zellwood",
    "Seminole",
    "Lakeland",
    "Homeland",
    "Kathleen",
    "Nalcrest",
    "Loughman",
    "Mulberry",
    "Bostwick",
    "Hastings",
    "Longwood",
    "Bushnell",
    "Wildwood",
    "Branford",
    "Live Oak",
    "Mc Alpin",
    "Wellborn",
    "Glenwood",
    "Oak Hill",
    "Freeport",
    "Alachua",
    "Olustee",
    "Hampton",
    "Brooker",
    "Orlando",
    "Malabar",
    "Sharpes",
    "Margate",
    "Murdock",
    "Placida",
    "Lecanto",
    "Ochopee",
    "Arcadia",
    "Nocatee",
    "Century",
    "Bunnell",
    "Trenton",
    "Labelle",
    "Sebring",
    "Brandon",
    "Seffner",
    "Valrico",
    "Wimauma",
    "Bonifay",
    "Wabasso",
    "Cypress",
    "Wacissa",
    "Altoona",
    "Paisley",
    "Tavares",
    "Captiva",
    "Sanibel",
    "Bronson",
    "Bristol",
    "Hosford",
    "Sumatra",
    "Telogia",
    "Madison",
    "Pinetta",
    "Parrish",
    "Candler",
    "Anthony",
    "Reddick",
    "Hialeah",
    "Oakland",
    "Jupiter",
    "Pahokee",
    "Aripeka",
    "Holiday",
    "Oldsmar",
    "Dunedin",
    "Alturas",
    "Bradley",
    "Nichols",
    "Waverly",
    "Grandin",
    "Palatka",
    "Satsuma",
    "Melrose",
    "Navarre",
    "Nokomis",
    "Sanford",
    "Coleman",
    "Webster",
    "O Brien",
    "Raiford",
    "Pierson",
    "Seville",
    "Deltona",
    "Panacea",
    "Chipley",
    "Archer",
    "Graham",
    "Lawtey",
    "Starke",
    "Holder",
    "Naples",
    "Molino",
    "Gretna",
    "Havana",
    "Midway",
    "Quincy",
    "Jasper",
    "Lorida",
    "Durant",
    "Lithia",
    "Odessa",
    "Ruskin",
    "Sydney",
    "Alford",
    "Bascom",
    "Malone",
    "Sneads",
    "Lamont",
    "Debary",
    "Eustis",
    "Yalaha",
    "Estero",
    "Inglis",
    "Cortez",
    "Lowell",
    "Stuart",
    "Destin",
    "Apopka",
    "Trilby",
    "Hudson",
    "Elfers",
    "Bartow",
    "Dundee",
    "Welaka",
    "Elkton",
    "Bagdad",
    "Milton",
    "Osprey",
    "Laurel",
    "Venice",
    "Geneva",
    "Oviedo",
    "Oxford",
    "Deland",
    "Osteen",
    "Argyle",
    "Paxton",
    "Vernon",
    "Wausau",
    "Waldo",
    "Cocoa",
    "Grant",
    "Dania",
    "Altha",
    "Felda",
    "Venus",
    "Dover",
    "Mango",
    "Tampa",
    "Lloyd",
    "Astor",
    "Oneco",
    "Citra",
    "Sparr",
    "Ocala",
    "Miami",
    "Yulee",
    "Baker",
    "Gotha",
    "Ocoee",
    "Largo",
    "Ozona",
    "Perry",
    "Salem",
    "Mims",
    "Lulu",
    "Bell",
    "Balm",
    "Lutz",
    "Noma",
    "Mayo",
    "Alva",
    "Holt",
    "Ebro",
    "Ona",
    "Day",
    "Lee",
    "Jay",
  ],
  oI = [
    "Pine Mountain Valley",
    "Saint Simons Island",
    "Peachtree Corners",
    "Chestnut Mountain",
    "Avondale Estates",
    "Franklin Springs",
    "Lookout Mountain",
    "Sautee Nacoochee",
    "Bowdon Junction",
    "Fort Oglethorpe",
    "Port Wentworth",
    "Powder Springs",
    "Stone Mountain",
    "Lithia Springs",
    "Peachtree City",
    "Flowery Branch",
    "Tallulah Falls",
    "Jeffersonville",
    "Donalsonville",
    "Milledgeville",
    "Richmond Hill",
    "Holly Springs",
    "Cedar Springs",
    "Mineral Bluff",
    "Jekyll Island",
    "Lawrenceville",
    "Pine Mountain",
    "Warner Robins",
    "Walthourville",
    "Sapelo Island",
    "Marshallville",
    "Mountain City",
    "Andersonville",
    "Junction City",
    "Crawfordville",
    "Mc Rae Helena",
    "Social Circle",
    "Saint George",
    "Willacoochee",
    "Cartersville",
    "Taylorsville",
    "Bloomingdale",
    "Tybee Island",
    "Douglasville",
    "Mc Caysville",
    "Fayetteville",
    "Silver Creek",
    "East Ellijay",
    "Sugar Valley",
    "White Plains",
    "Clarkesville",
    "Waverly Hall",
    "Locust Grove",
    "Wrightsville",
    "Fort Stewart",
    "Danielsville",
    "Luthersville",
    "Warm Springs",
    "Mount Vernon",
    "Fort Benning",
    "Watkinsville",
    "Arnoldsville",
    "Talking Rock",
    "Hawkinsville",
    "Orchard Hill",
    "Toccoa Falls",
    "Jacksonville",
    "Young Harris",
    "Sandersville",
    "Adairsville",
    "Waynesville",
    "Jenkinsburg",
    "Saint Marys",
    "Summerville",
    "Ball Ground",
    "Winterville",
    "Fort Gaines",
    "Forest Park",
    "Norman Park",
    "Rising Fawn",
    "Dawsonville",
    "Statenville",
    "Springfield",
    "Cave Spring",
    "Mount Berry",
    "Carnesville",
    "Union Point",
    "North Metro",
    "Turnerville",
    "Gainesville",
    "Murrayville",
    "Bowersville",
    "Stockbridge",
    "Clinchfield",
    "Centerville",
    "Pendergrass",
    "Barnesville",
    "East Dublin",
    "Buena Vista",
    "Bolingbroke",
    "High Shoals",
    "Fort Valley",
    "Marble Hill",
    "Eastanollee",
    "Box Springs",
    "Lumber City",
    "Thomasville",
    "Hogansville",
    "Blairsville",
    "Chickamauga",
    "Rock Spring",
    "Tunnel Hill",
    "Fitzgerald",
    "Statesboro",
    "Waynesboro",
    "Carrollton",
    "Mount Zion",
    "Villa Rica",
    "Whitesburg",
    "Graysville",
    "Georgetown",
    "Homerville",
    "West Green",
    "Hartsfield",
    "Grantville",
    "Sharpsburg",
    "Attapulgus",
    "Bainbridge",
    "Byromville",
    "Swainsboro",
    "Norristown",
    "Blue Ridge",
    "Alpharetta",
    "Union City",
    "Cherry Log",
    "Sea Island",
    "Plainville",
    "Greensboro",
    "Snellville",
    "Loganville",
    "Mount Airy",
    "Gillsville",
    "Tallapoosa",
    "Irwinville",
    "Monticello",
    "Shady Dale",
    "Hazlehurst",
    "Louisville",
    "Smithville",
    "Allenhurst",
    "Hinesville",
    "Lincolnton",
    "Oglethorpe",
    "Greenville",
    "Manchester",
    "Chatsworth",
    "Porterdale",
    "Farmington",
    "Blackshear",
    "Meansville",
    "Williamson",
    "Rocky Ford",
    "Experiment",
    "Sunny Side",
    "Glennville",
    "Reidsville",
    "Ochlocknee",
    "Brookfield",
    "West Point",
    "Dry Branch",
    "Yatesville",
    "Flintstone",
    "La Fayette",
    "Rocky Face",
    "Washington",
    "Maysville",
    "Bethlehem",
    "Cassville",
    "Nashville",
    "Keysville",
    "Kings Bay",
    "Kingsland",
    "White Oak",
    "Roopville",
    "Woodstock",
    "Jonesboro",
    "Riverdale",
    "Ellenwood",
    "Clarkdale",
    "Grovetown",
    "Arlington",
    "Knoxville",
    "Fowlstown",
    "Clarkston",
    "Pine Lake",
    "Scottdale",
    "Montezuma",
    "Pinehurst",
    "Dewy Rose",
    "Stillmore",
    "Twin City",
    "Bellville",
    "Morganton",
    "Brunswick",
    "Fairmount",
    "Ellerslie",
    "Mcdonough",
    "Braselton",
    "Jefferson",
    "Nicholson",
    "Mansfield",
    "Hillsboro",
    "Stapleton",
    "Rockledge",
    "Lake Park",
    "Moody Afb",
    "Dahlonega",
    "Boneville",
    "Sale City",
    "Tarrytown",
    "Covington",
    "Lexington",
    "Patterson",
    "Cedartown",
    "Esom Hill",
    "Rabun Gap",
    "Gracewood",
    "Hephzibah",
    "Ellaville",
    "Newington",
    "Iron City",
    "Talbotton",
    "Hiawassee",
    "Thomaston",
    "Rossville",
    "Good Hope",
    "Waresboro",
    "Warrenton",
    "Davisboro",
    "Cleveland",
    "Abbeville",
    "Allentown",
    "Mc Intyre",
    "Toomsboro",
    "Sylvester",
    "Surrency",
    "Colquitt",
    "Damascus",
    "Hardwick",
    "Kingston",
    "Cuthbert",
    "Ray City",
    "Hortense",
    "Ellabell",
    "Pembroke",
    "Brooklet",
    "Register",
    "Midville",
    "Flovilla",
    "Shellman",
    "Woodbine",
    "Ringgold",
    "Folkston",
    "Savannah",
    "Bluffton",
    "Marietta",
    "Mableton",
    "Kennesaw",
    "Nicholls",
    "Ellenton",
    "Moultrie",
    "Haralson",
    "Moreland",
    "Wildwood",
    "Lithonia",
    "Chauncey",
    "Unadilla",
    "Elberton",
    "Garfield",
    "Armuchee",
    "Fairburn",
    "Palmetto",
    "Mitchell",
    "Norcross",
    "Cornelia",
    "Demorest",
    "Clermont",
    "Buchanan",
    "Hamilton",
    "Hartwell",
    "Franklin",
    "Kathleen",
    "Commerce",
    "Hoschton",
    "Matthews",
    "Lakeland",
    "Stockton",
    "Montrose",
    "Leesburg",
    "Riceboro",
    "Ludowici",
    "Valdosta",
    "Crescent",
    "Meridian",
    "Townsend",
    "Woodbury",
    "Baconton",
    "Culloden",
    "Juliette",
    "Bostwick",
    "Buckhead",
    "Rutledge",
    "Crandall",
    "Columbus",
    "Crawford",
    "Stephens",
    "Offerman",
    "Rockmart",
    "Eatonton",
    "Lakemont",
    "Sylvania",
    "Richland",
    "Americus",
    "Woodland",
    "Cobbtown",
    "Manassas",
    "Reynolds",
    "Scotland",
    "Bronwood",
    "Coolidge",
    "Soperton",
    "Lagrange",
    "Sycamore",
    "Danville",
    "The Rock",
    "Waycross",
    "Millwood",
    "Harrison",
    "Tennille",
    "Glenwood",
    "Pineview",
    "Rochelle",
    "Irwinton",
    "Oakfield",
    "Pearson",
    "Baldwin",
    "Statham",
    "Emerson",
    "Alapaha",
    "Lizella",
    "Cochran",
    "Hoboken",
    "Nahunta",
    "Quitman",
    "Barwick",
    "Jackson",
    "Waverly",
    "Pulaski",
    "Cusseta",
    "Lebanon",
    "Waleska",
    "Blakely",
    "Coleman",
    "Lovejoy",
    "Du Pont",
    "Acworth",
    "Austell",
    "Ambrose",
    "Broxton",
    "Douglas",
    "Funston",
    "Appling",
    "Augusta",
    "Sargent",
    "Musella",
    "Roberta",
    "Cordele",
    "Trenton",
    "Decatur",
    "Atlanta",
    "Chester",
    "Eastman",
    "Winston",
    "Meldrim",
    "Claxton",
    "Epworth",
    "Lindale",
    "Shannon",
    "Cumming",
    "Lavonia",
    "Royston",
    "Roswell",
    "Red Oak",
    "Ellijay",
    "Calhoun",
    "Calvary",
    "Whigham",
    "Grayson",
    "Suwanee",
    "Lilburn",
    "Oakwood",
    "Cataula",
    "Hampton",
    "Bonaire",
    "Perkins",
    "Haddock",
    "Cadwell",
    "Fleming",
    "Dearing",
    "Thomson",
    "Carlton",
    "Colbert",
    "Camilla",
    "Forsyth",
    "Madison",
    "Fortson",
    "Midland",
    "Newborn",
    "Bristol",
    "Mershon",
    "Concord",
    "Zebulon",
    "Clayton",
    "Dillard",
    "Conyers",
    "Brinson",
    "Griffin",
    "Louvale",
    "Lumpkin",
    "De Soto",
    "Collins",
    "Vidalia",
    "Ashburn",
    "Rebecca",
    "Norwood",
    "Warthen",
    "Screven",
    "Preston",
    "Parrott",
    "Cohutta",
    "Varnell",
    "Seville",
    "Tignall",
    "Warwick",
    "Baxley",
    "Albany",
    "Newton",
    "Auburn",
    "Winder",
    "Enigma",
    "Barney",
    "Morven",
    "Portal",
    "Girard",
    "Sardis",
    "Dawson",
    "Morgan",
    "Metter",
    "Bowdon",
    "Temple",
    "Pooler",
    "Lyerly",
    "Canton",
    "Nelson",
    "Athens",
    "Edison",
    "Morris",
    "Morrow",
    "Conley",
    "Argyle",
    "Smyrna",
    "Berlin",
    "Doerun",
    "Harlem",
    "Sparks",
    "Newnan",
    "Senoia",
    "Tucker",
    "Vienna",
    "Putney",
    "Climax",
    "Guyton",
    "Rincon",
    "Bowman",
    "Adrian",
    "Brooks",
    "Tyrone",
    "Gibson",
    "Oakman",
    "Ranger",
    "Resaca",
    "Siloam",
    "Dacula",
    "Duluth",
    "Buford",
    "Sparta",
    "Bremen",
    "Felton",
    "Shiloh",
    "Mystic",
    "Ocilla",
    "Denton",
    "Bartow",
    "Wadley",
    "Millen",
    "Milner",
    "Dexter",
    "Dublin",
    "Dudley",
    "Midway",
    "Hahira",
    "Naylor",
    "Darien",
    "Cotton",
    "Pelham",
    "Alston",
    "Uvalda",
    "Tennga",
    "Upatoi",
    "Oxford",
    "Bishop",
    "Bogart",
    "Maxeys",
    "Dallas",
    "Jasper",
    "Molena",
    "Aragon",
    "Blythe",
    "Oliver",
    "Martin",
    "Toccoa",
    "Leslie",
    "Plains",
    "Geneva",
    "Sharon",
    "Butler",
    "Howard",
    "Rupert",
    "Sasser",
    "Boston",
    "Tifton",
    "Suches",
    "Jersey",
    "Monroe",
    "Mesena",
    "Jewell",
    "Oconee",
    "Weston",
    "Dalton",
    "Gordon",
    "Poulan",
    "Sumner",
    "Axson",
    "Leary",
    "Homer",
    "Rydal",
    "White",
    "Macon",
    "Dixie",
    "Gough",
    "Menlo",
    "Trion",
    "Fargo",
    "Evans",
    "Cecil",
    "Lenox",
    "Turin",
    "Arabi",
    "Redan",
    "Rhine",
    "Lilly",
    "Nunez",
    "Daisy",
    "Hagan",
    "Coosa",
    "Canon",
    "Cairo",
    "Perry",
    "Talmo",
    "Avera",
    "Wrens",
    "Rentz",
    "Ideal",
    "Comer",
    "Smarr",
    "Ailey",
    "Cisco",
    "Hiram",
    "Byron",
    "Tiger",
    "Wiley",
    "Dover",
    "Jakin",
    "Omaha",
    "Milan",
    "Meigs",
    "Chula",
    "Omega",
    "Ty Ty",
    "Lyons",
    "Manor",
    "Camak",
    "Jesup",
    "Alamo",
    "Helen",
    "Pitts",
    "Rayle",
    "Alma",
    "Adel",
    "Clyo",
    "Eden",
    "Rome",
    "Alto",
    "Lula",
    "Waco",
    "Elko",
    "Wray",
    "Kite",
    "Gray",
    "Hull",
    "Eton",
    "Tate",
    "Cobb",
    "Mauk",
    "Pavo",
    "Odum",
    "Rex",
    "Ila",
    "Gay",
  ],
  rI = [
    "Tripler Army Medical Center",
    "Wheeler Army Airfield",
    "Hawaii National Park",
    "Schofield Barracks",
    "Mcbh Kaneohe Bay",
    "Camp H M Smith",
    "Urban Honolulu",
    "Mountain View",
    "East Honolulu",
    "Captain Cook",
    "Fort Shafter",
    "Kailua Kona",
    "Laupahoehoe",
    "Wake Island",
    "Princeville",
    "Ocean View",
    "Kealakekua",
    "Kurtistown",
    "Pearl City",
    "Kaunakakai",
    "Lanai City",
    "Ewa Beach",
    "Waimanalo",
    "Hanamaulu",
    "Kaumakani",
    "Kalaupapa",
    "Holualoa",
    "Honaunau",
    "Waikoloa",
    "Papaaloa",
    "Papaikou",
    "Pepeekeo",
    "Mililani",
    "Honolulu",
    "Hanapepe",
    "Makaweli",
    "Hoolehua",
    "Kualapuu",
    "Maunaloa",
    "Pukalani",
    "Hakalau",
    "Honokaa",
    "Keauhou",
    "Kamuela",
    "Naalehu",
    "Paauilo",
    "Volcano",
    "Kapolei",
    "Haleiwa",
    "Kaneohe",
    "Wahiawa",
    "Waialua",
    "Waianae",
    "Waipahu",
    "Anahola",
    "Hanalei",
    "Kalaheo",
    "Kilauea",
    "Kahului",
    "Lahaina",
    "Makawao",
    "Puunene",
    "Wailuku",
    "Honomu",
    "Kapaau",
    "Ninole",
    "Ookala",
    "Pahala",
    "Hauula",
    "Kaaawa",
    "Kahuku",
    "Kailua",
    "Eleele",
    "Kealia",
    "Kekaha",
    "Waimea",
    "Keaau",
    "Pahoa",
    "Kunia",
    "Jbphh",
    "Kapaa",
    "Koloa",
    "Lawai",
    "Lihue",
    "Haiku",
    "Kihei",
    "Hawi",
    "Hilo",
    "Aiea",
    "Laie",
    "Hana",
    "Paia",
    "Kula",
  ],
  tI = [
    "Mountain Home Afb",
    "Lava Hot Springs",
    "Horseshoe Bend",
    "American Falls",
    "Indian Valley",
    "Saint Charles",
    "Garden Valley",
    "Bonners Ferry",
    "Moyie Springs",
    "Mountain Home",
    "Saint Anthony",
    "Coeur d'Alene",
    "Saint Maries",
    "Priest River",
    "Soda Springs",
    "Glenns Ferry",
    "Gibbonsville",
    "New Plymouth",
    "Smelterville",
    "Garden City",
    "New Meadows",
    "Bloomington",
    "Atomic City",
    "Springfield",
    "Placerville",
    "Idaho Falls",
    "Swan Valley",
    "Island Park",
    "Grangeville",
    "Spirit Lake",
    "Yellow Pine",
    "Georgetown",
    "Montpelier",
    "Fish Haven",
    "Sun Valley",
    "Idaho City",
    "Clark Fork",
    "Cottonwood",
    "Greencreek",
    "White Bird",
    "Lewisville",
    "Post Falls",
    "North Fork",
    "Winchester",
    "Sugar City",
    "Malad City",
    "Grand View",
    "Twin Falls",
    "Castleford",
    "Pocatello",
    "Fort Hall",
    "Blackfoot",
    "Blanchard",
    "Careywood",
    "Cocolalla",
    "Sandpoint",
    "Fairfield",
    "Hill City",
    "Greenleaf",
    "Middleton",
    "Elk River",
    "King Hill",
    "Macks Inn",
    "Ferdinand",
    "Monteview",
    "Juliaetta",
    "Princeton",
    "Craigmont",
    "Richfield",
    "Fruitland",
    "Pinehurst",
    "Silverton",
    "Lake Fork",
    "Cambridge",
    "Meridian",
    "McCammon",
    "Swanlake",
    "Fernwood",
    "Aberdeen",
    "Moreland",
    "Bellevue",
    "Kootenai",
    "Ponderay",
    "Eastport",
    "Porthill",
    "Caldwell",
    "Bancroft",
    "Franklin",
    "Thatcher",
    "Hagerman",
    "Elk City",
    "Terreton",
    "Hazelton",
    "Harrison",
    "Medimont",
    "Rathdrum",
    "Kendrick",
    "Potlatch",
    "Nezperce",
    "Dietrich",
    "Shoshone",
    "Minidoka",
    "Lewiston",
    "Culdesac",
    "Holbrook",
    "Homedale",
    "Rockland",
    "Kingston",
    "Rogerson",
    "Kimberly",
    "Murtaugh",
    "Donnelly",
    "Council",
    "Plummer",
    "Pingree",
    "Shelley",
    "Ketchum",
    "Oldtown",
    "Laclede",
    "Nordman",
    "Colburn",
    "Spencer",
    "Ahsahka",
    "Orofino",
    "Challis",
    "Clayton",
    "Stanley",
    "Atlanta",
    "Hammett",
    "Clifton",
    "Preston",
    "Chester",
    "Newdale",
    "Gooding",
    "Wendell",
    "Kooskia",
    "Pollock",
    "Riggins",
    "Roberts",
    "Bayview",
    "Cataldo",
    "Genesee",
    "Harvard",
    "Leadore",
    "Reubens",
    "Rexburg",
    "Heyburn",
    "Bruneau",
    "Marsing",
    "Payette",
    "Clarkia",
    "Kellogg",
    "Wallace",
    "Tetonia",
    "Cascade",
    "Midvale",
    "Downey",
    "Dingle",
    "Geneva",
    "Desmet",
    "Tensed",
    "Basalt",
    "Hailey",
    "Picabo",
    "Lowman",
    "Coolin",
    "Naples",
    "Corral",
    "Huston",
    "Wilder",
    "Albion",
    "Burley",
    "Oakley",
    "Dubois",
    "Lenore",
    "Pierce",
    "Weippe",
    "Mackay",
    "Dayton",
    "Weston",
    "Ashton",
    "Parker",
    "Emmett",
    "Lucile",
    "Stites",
    "Warren",
    "Jerome",
    "Hayden",
    "Worley",
    "Bovill",
    "Moscow",
    "Cobalt",
    "Carmen",
    "Salmon",
    "Tendoy",
    "Kamiah",
    "Rupert",
    "Lapwai",
    "Murphy",
    "Calder",
    "Mullan",
    "Osburn",
    "Murray",
    "Driggs",
    "Victor",
    "Hansen",
    "McCall",
    "Weiser",
    "Eagle",
    "Boise",
    "Arimo",
    "Inkom",
    "Paris",
    "Santa",
    "Firth",
    "Carey",
    "Banks",
    "Dover",
    "Sagle",
    "Irwin",
    "Moore",
    "Melba",
    "Nampa",
    "Notus",
    "Parma",
    "Conda",
    "Grace",
    "Wayan",
    "Declo",
    "Malta",
    "Ellis",
    "Teton",
    "Letha",
    "Sweet",
    "Bliss",
    "Hamer",
    "Menan",
    "Rigby",
    "Ririe",
    "Athol",
    "Deary",
    "Viola",
    "Lemhi",
    "Shoup",
    "Arbon",
    "Avery",
    "Filer",
    "Kuna",
    "Star",
    "Mesa",
    "Bern",
    "Hope",
    "Iona",
    "Ucon",
    "Arco",
    "Howe",
    "Almo",
    "Fenn",
    "Eden",
    "Troy",
    "Paul",
    "Peck",
    "Felt",
    "Buhl",
    "Ola",
    "May",
  ],
  lI = JSON.parse(
    `["National Stock Yards","Scott Air Force Base","Lincoln'S New Salem","Country Club Hills","Saint Francisville","Arlington Heights","Elk Grove Village","Frankfort Heights","Pembroke Township","Lake In The Hills","Prairie Du Rocher","Prospect Heights","Glendale Heights","South Wilmington","East Saint Louis","Fairview Heights","Rolling Meadows","Hoffman Estates","Chicago Heights","Western Springs","Harwood Heights","Clarendon Hills","Carpentersville","Saint Augustine","Winthrop Harbor","Fox River Grove","North Henderson","Stillman Valley","Buffalo Prairie","East Carondelet","Pleasant Plains","University Park","Mulberry Grove","Garden Prairie","Mount Sterling","Sailor Springs","Mount Prospect","Olympia Fields","Willow Springs","La Grange Park","Evergreen Park","West Frankfort","East Galesburg","Franklin Grove","Taylor Springs","Davis Junction","Kingston Mines","Peoria Heights","Machesney Park","Spring Valley","Milledgeville","Mount Carroll","Bluff Springs","Chandlerville","Morrisonville","Franklin Park","Schiller Park","Chicago Ridge","Hickory Hills","Palos Heights","South Holland","Downers Grove","Thompsonville","Elizabethtown","Karbers Ridge","Crescent City","Campbell Hill","Saint Charles","Williamsfield","Highland Park","Fort Sheridan","North Chicago","Buffalo Grove","Lawrenceville","West Brooklyn","Mount Pulaski","Blandinsville","Cottage Hills","Monroe Center","Pinckneyville","Pleasant Hill","Illinois City","Carrier Mills","Mechanicsburg","Williamsville","German Valley","Burnt Prairie","Creal Springs","Johnston City","Cherry Valley","Olive Branch","Poplar Grove","Golden Eagle","Saint Joseph","Mount Auburn","Martinsville","Morton Grove","Melrose Park","River Forest","Calumet City","Richton Park","Bedford Park","Elmwood Park","Bloomingdale","Carol Stream","Hanover Park","West Chicago","Beecher City","London Mills","Mc Leansboro","Cave In Rock","Claytonville","Sainte Marie","West Liberty","Mount Vernon","East Dubuque","Scales Mound","New Burnside","North Aurora","Hopkins Park","Libertyville","Vernon Hills","Lincolnshire","Prairie City","Crystal Lake","Spring Grove","Chesterfield","Edwardsville","Granite City","South Roxana","Collinsville","Farmersville","Jacksonville","Mount Morris","Chambersburg","Coulterville","Carbon Cliff","Taylor Ridge","Saint Libory","Green Valley","Mount Carmel","Johnsonville","Prophetstown","Freeman Spur","South Beloit","Miller City","New Bedford","Seatonville","Taylorville","New Memphis","Des Plaines","Forest Park","Westchester","River Grove","Blue Island","Hazel Crest","Orland Park","Palos Hills","Park Forest","Tinley Park","Summit Argo","Lincolnwood","Hutsonville","Waynesville","Farmer City","Villa Grove","Bensenville","Willowbrook","Warrenville","Saint Peter","Gibson City","Christopher","Whittington","Table Grove","Dunfermline","Saint David","Shawneetown","Dallas City","Stronghurst","Lynn Center","Bishop Hill","Beaverville","Cissna Park","Grand Tower","Murphysboro","Willow Hill","Waltonville","Jerseyville","Apple River","South Elgin","Sugar Grove","Bourbonnais","Island Lake","Lake Forest","Lake Zurich","Great Lakes","Cedar Point","Grand Ridge","New Holland","Wonder Lake","Bloomington","Warrensburg","Bunker Hill","Mount Olive","Sawyerville","Wilsonville","Carlinville","Glen Carbon","New Douglas","Saint Jacob","Walnut Hill","Forest City","Matherville","New Windsor","Murrayville","Dalton City","Baileyville","Chillicothe","Willisville","Cerro Gordo","White Heath","Griggsville","Grand Chain","Villa Ridge","Ellis Grove","Steeleville","Parkersburg","Rock Island","Coal Valley","East Moline","Rapids City","Summerfield","Springfield","Shelbyville","Princeville","Orangeville","South Pekin","Creve Coeur","East Peoria","Little York","Golden Gate","Mill Shoals","Norris City","Springerton","Bolingbrook","Carterville","Congerville","East Dundee","West Peoria","Camp Point","La Prairie","Plainville","Donnellson","Greenville","Pocahontas","Versailles","Kampsville","Arenzville","Beardstown","Broadlands","Thomasboro","Assumption","Stonington","West Union","Louisville","Beckemeyer","Germantown","Charleston","Kenilworth","Northbrook","Park Ridge","Streamwood","Schaumburg","Stone Park","Midlothian","Oak Forest","Bridgeview","Palos Park","Brookfield","Janesville","Glen Ellyn","Villa Park","Naperville","Fox Valley","West Salem","Teutopolis","Hagarstown","Brownstown","Saint Elmo","Piper City","Mulkeytown","Ellisville","Smithfield","Farmington","Carrollton","Greenfield","Rockbridge","White Hall","Braceville","West Point","Biggsville","Wellington","Carbondale","Belle Rive","Grantsburg","Burlington","Maple Park","Mooseheart","Aroma Park","Buckingham","Grant Park","Saint Anne","Union Hill","Millington","Montgomery","Yates City","Barrington","Lake Bluff","Lake Villa","Round Lake","Marseilles","Troy Grove","Bridgeport","Lee Center","Chatsworth","Blackstone","Long Point","Middletown","Colchester","Arrowsmith","Bellflower","Cooksville","Blue Mound","Harristown","Eagarville","Scottville","East Alton","Livingston","Wood River","Camp Grove","Mason City","Metropolis","Petersburg","New Boston","Preemption","Keithsburg","Litchfield","Walshville","Literberry","Leaf River","Lindenwood","Hanna City","Monticello","Kinderhook","New Canton","Pittsfield","Mound City","Evansville","Port Byron","Belleville","Caseyville","New Athens","Harrisburg","Illiopolis","New Berlin","Huntsville","Manchester","Winchester","Stewardson","Tower Hill","La Fayette","Cedarville","Mc Connell","Pearl City","Washington","Deer Creek","Georgetown","Ridge Farm","Smithshire","Addieville","Mount Erie","Wayne City","Crossville","Rock Falls","Deer Grove","Crest Hill","Romeoville","Wilmington","Homer Glen","Plainfield","Pecatonica","Loves Park","Mount Zion","Coatsburg","Smithboro","Belvidere","Caledonia","Arlington","La Moille","Princeton","Sheffield","Batchtown","Bondville","Champaign","Westfield","Clay City","Keyesport","New Baden","Broadview","Crestwood","Flossmoor","La Grange","Riverside","Riverdale","Annapolis","Flat Rock","Palestine","West York","Hindsboro","Wood Dale","Woodridge","Oak Brook","Vermilion","Effingham","Dieterich","Shobonier","Lewistown","Liverpool","New Haven","Patterson","Roodhouse","Coal City","Broughton","Macedonia","Rosiclare","Gladstone","Cambridge","Martinton","Stockland","Thawville","Vergennes","Elizabeth","Goreville","Hampshire","Kaneville","Millbrook","Yorkville","Galesburg","Henderson","Knoxville","Deerfield","Grayslake","Ingleside","Mundelein","Wadsworth","Earlville","Lake Fork","Hartsburg","Good Hope","Tennessee","Woodstock","Algonquin","Ellsworth","Lexington","Gillespie","Maryville","Centralia","Kilbourne","Brookport","Greenview","Maeystown","Hillsboro","Alexander","Meredosia","Lovington","Forreston","Brimfield","Edelstein","Mossville","Mansfield","New Salem","Eddyville","Granville","Claremont","Andalusia","Hillsdale","Mascoutah","Millstadt","Stonefort","Rochester","Littleton","Frederick","Rushville","Strasburg","Castleton","Rock City","Groveland","Armington","Alto Pass","Jonesboro","Millcreek","Wolf Lake","East Lynn","Hoopeston","Rossville","Armstrong","Fairmount","Indianola","Westville","Allendale","Keensburg","Lancaster","Roseville","Nashville","Okawville","Irvington","Fairfield","Grayville","Shorewood","Braidwood","Channahon","Frankfort","Manhattan","New Lenox","Pittsburg","Winnebago","Goodfield","Mc Clure","Timewell","Neponset","Tiskilwa","Van Orin","Brussels","Chadwick","Virginia","Foosland","Ivesdale","Longview","Penfield","Rosamond","Edinburg","Dennison","Marshall","Ingraham","Bartelso","Humboldt","Glenview","Palatine","Wheeling","Wilmette","Winnetka","Bartlett","Bellwood","Hillside","Berkeley","Evanston","Oak Park","Glenwood","Homewood","Matteson","Oak Lawn","Hometown","Thornton","Robinson","Cortland","Kingston","Kirkland","Sycamore","Hinckley","Sandwich","Shabbona","Somonauk","Waterman","Elmhurst","Winfield","Hinsdale","Westmont","Chrisman","Bone Gap","Altamont","Edgewood","Montrose","Vandalia","Royalton","Fairview","Marietta","Equality","Junction","Hillview","Dahlgren","La Harpe","Carthage","Elvaston","Hamilton","Plymouth","Atkinson","Hooppole","Woodhull","Chebanse","Danforth","Goodwine","Iroquois","Papineau","Woodland","Elkville","Oraville","Scheller","Woodlawn","Brighton","Fidelity","Stockton","Buncombe","Gilberts","Big Rock","Kankakee","Bonfield","Herscher","Abingdon","Victoria","Fox Lake","Highwood","Waukegan","Wauconda","Sheridan","La Salle","Streator","Sublette","Emington","Fairbury","Flanagan","Graymont","Saunemin","Lawndale","Chestnut","Cornland","Bardolph","Bushnell","Industry","Richmond","Ringwood","Heyworth","Saybrook","Stanford","Staunton","Alhambra","Bethalto","Hartford","Highland","Kinmundy","Sandoval","Sparland","Washburn","San Jose","Sherrard","Columbia","Valmeyer","Waterloo","Fillmore","Waggoner","Franklin","Sullivan","Rochelle","Glasford","Mapleton","Du Quoin","La Place","Rockport","Golconda","Hennepin","Magnolia","Standard","Rockwood","Reynolds","Freeburg","Lenzburg","O Fallon","Smithton","Eldorado","Divernon","Riverton","Cantrall","Browning","Lakewood","Moweaqua","Bradford","Freeport","Hopedale","Mackinaw","Allerton","Bismarck","Collison","Danville","Bellmont","Kirkwood","Monmouth","Hoyleton","Richview","Barnhill","Sterling","Morrison","Lockport","Shirland","Rockford","Lowpoint","Metamora","Clayton","Liberty","Loraine","Sorento","Pierron","Dalzell","Kasbeer","Manlius","Mineral","Hamburg","Michael","Savanna","Shannon","Thomson","Ashland","Gifford","Mahomet","Pesotum","Rantoul","Sadorus","Seymour","Bulpitt","Kincaid","Owaneco","Aviston","Carlyle","Hoffman","Trenton","Ashmore","Mattoon","Oakland","Glencoe","Maywood","Lansing","Justice","Burbank","Robbins","Chicago","Greenup","Clinton","Wapella","Camargo","Murdock","Tuscola","Addison","Lombard","Medinah","Roselle","Wheaton","Brocton","Metcalf","Shumway","Bingham","Elliott","Kempton","Roberts","Buckner","Zeigler","Vermont","Astoria","Ridgway","Wrights","Gardner","Kinsman","Minooka","Augusta","Oquawka","Raritan","Andover","Annawan","Geneseo","Kewanee","Buckley","Clifton","Donovan","Milford","Sheldon","Watseka","De Soto","Makanda","Hidalgo","Wheeler","Bluford","Fieldon","Grafton","Hanover","Belknap","Cypress","Simpson","Batavia","Bradley","Manteno","Momence","Reddick","Bristol","Dahinda","Antioch","Russell","Leonore","Lostant","Mendota","Oglesby","Rutland","Triumph","Steward","Nachusa","Compton","Paw Paw","Cornell","Forrest","Pontiac","Atlanta","Elkhart","Lincoln","Harvard","Mchenry","Huntley","Marengo","Carlock","Cropsey","Danvers","Gridley","Mc Lean","Shirley","Towanda","Argenta","Decatur","Forsyth","Mt Zion","Niantic","Hettick","Modesto","Nilwood","Palmyra","Shipman","Godfrey","Madison","La Rose","Oakford","Tallula","Renault","Coffeen","Nokomis","Raymond","Concord","Waverly","Woodson","Bethany","Creston","Holcomb","Woosung","Edwards","Elmwood","Trivoli","Tamaroa","De Land","Milmine","Hammond","Olmsted","Pulaski","Mc Nabb","Baldwin","Chester","Red Bud","Calhoun","Barstow","Cordova","Hampton","Lovejoy","Lebanon","Marissa","Galatia","Raleigh","Buffalo","Glenarm","Chatham","Sherman","Windsor","Herrick","Findlay","Wyoming","Winslow","Tremont","Delavan","Dongola","Fithian","Henning","Oakwood","Potomac","Berwick","Cameron","Oakdale","Du Bois","Enfield","Tampico","Beecher","Markham","Peotone","Cambria","Rockton","Roanoke","El Paso","Quincy","Fowler","Golden","Mendon","Paloma","Payson","Thebes","Capron","Bureau","Cherry","Malden","Walnut","Wyanet","Hardin","Mozier","Lanark","Ludlow","Urbana","Fisher","Sidney","Tolono","Palmer","Albers","Breese","Trilla","Skokie","Techny","Berwyn","Dolton","Harvey","Steger","Cicero","Oblong","Jewett","Toledo","Dekalb","Esmond","Dewitt","Kenney","Weldon","Arcola","Arthur","Atwood","Newman","Itasca","Lemont","Aurora","Darien","Kansas","Redmon","Albion","Browns","Ellery","Watson","Ramsey","Farina","Cabery","Melvin","Paxton","Sibley","Benton","Coello","Orient","Sesser","Valier","Bryant","Canton","Norris","Eldred","Morris","Verona","Colusa","Ferris","Nauvoo","Sutter","Warsaw","Carman","Colona","Ophiem","Ashkum","Gilman","Onarga","Dowell","Gorham","Pomona","Newton","Bonnie","Opdyke","Texico","Medora","Galena","Warren","Vienna","Dundee","Elburn","Geneva","Newark","Oswego","Altona","Gilson","Maquon","Oneida","Wataga","Gurnee","Ransom","Leland","Serena","Wedron","Ottawa","Seneca","Tonica","Sumner","Ashton","Harmon","Eldena","Dwight","Campus","Cullom","Ancona","Strawn","Beason","Latham","Macomb","Sciota","Hebron","Anchor","Chenoa","Colfax","Hudson","Le Roy","Normal","Oreana","Girard","Virden","Dorsey","Marine","Roxana","Venice","Worden","Patoka","Vernon","Toluca","Wenona","Manito","Topeka","Easton","Havana","Athens","Alexis","Seaton","Hecker","Butler","Irving","Ohlman","Panama","Harvel","Chapin","Oregon","Dunlap","Peoria","Cutler","Bement","Baylis","Milton","Karnak","Mounds","Putnam","Menard","Sparta","Tilden","Dundas","Moline","Silvis","Dawson","Pawnee","Auburn","Lowder","Thayer","Camden","Bluffs","Cowden","Oconee","Toulon","Dakota","Eleroy","Ridott","Morton","Minier","Cobden","Rankin","Catlin","Tilton","Muncie","Sidell","Gerlaw","Ashley","Keenes","Rinard","Maunie","Albany","Fenton","Fulton","Lyndon","Elwood","Joliet","Mokena","Energy","Herrin","Marion","Durand","Roscoe","Seward","Benson","Eureka","Minonk","Cairo","Tamms","Unity","Depue","Dover","Dewey","Homer","Ogden","Philo","Royal","Savoy","Tovey","Casey","Flora","Xenia","Lerna","Hines","Posen","Worth","Lyons","Niles","Alsip","Neoga","Clare","Genoa","Malta","Wayne","Lisle","Paris","Mason","Ewing","Logan","Fiatt","Ipava","Omaha","Mazon","Basco","Bowen","Niota","Lomax","Media","Orion","Alpha","Galva","Jacob","Nason","Elsah","Boles","Ozark","Elgin","Lafox","Wasco","Essex","Plano","Utica","Dixon","Amboy","Odell","Emden","Adair","Alden","Union","Downs","Merna","Maroa","Boody","Elwin","Macon","Benld","Piasa","Alton","Hamel","Salem","Varna","Henry","Lacon","Joppa","Aledo","Viola","Fults","Byron","Chana","Laura","Cisco","Barry","Pearl","Perry","Herod","Perks","Ullin","Modoc","Percy","Walsh","Olney","Noble","Milan","Muddy","Loami","Alsey","Sigel","Speer","Davis","Pekin","Alvin","Radom","Cisne","Carmi","Crete","Monee","Hurst","Secor","Lima","Ursa","Buda","Ladd","Ohio","Pana","Huey","Golf","Stoy","Lane","Eola","Hume","Avon","Cuba","Kane","Dale","Osco","Loda","Yale","Nora","Zion","Dana","Peru","Cary","Moro","Troy","Alma","Iuka","Kell","Odin","Bath","Witt","Gays","Polo","Rome","Hull","Nebo","Mark","Dupo","Mode","Kent","Lena","Anna","Geff","Sims","Emma","Galt","Erie","Colp","Ava","Dix","Ina","Dow","Rio","Lee","Joy"]`
  ),
  iI = [
    "Saint Mary Of The Woods",
    "Mount Saint Francis",
    "West College Corner",
    "West Baden Springs",
    "Kingsford Heights",
    "West Terre Haute",
    "North Manchester",
    "Charlottesville",
    "Sulphur Springs",
    "Rolling Prairie",
    "East Enterprise",
    "Pleasant Mills",
    "Jeffersonville",
    "New Washington",
    "New Middletown",
    "West Middleton",
    "Paris Crossing",
    "Crawfordsville",
    "Sumava Resorts",
    "Beverly Shores",
    "West Lafayette",
    "Fredericksburg",
    "Cambridge City",
    "Liberty Center",
    "Elizabethtown",
    "Hartford City",
    "Young America",
    "Bowling Green",
    "West Harrison",
    "Saint Anthony",
    "New Palestine",
    "New Salisbury",
    "Crothersville",
    "Freelandville",
    "North Webster",
    "South Milford",
    "Michigan City",
    "North Liberty",
    "Saint Meinrad",
    "Pleasant Lake",
    "Battle Ground",
    "Saint Bernice",
    "Prairie Creek",
    "Shepardsville",
    "Liberty Mills",
    "Campbellsburg",
    "Fountain City",
    "Burnettsville",
    "Columbia City",
    "South Whitley",
    "Taylorsville",
    "Royal Center",
    "Knightsville",
    "Michigantown",
    "Lawrenceburg",
    "Spencerville",
    "Schnellville",
    "Connersville",
    "Floyds Knobs",
    "Leiters Ford",
    "Oakland City",
    "Indianapolis",
    "Mccordsville",
    "Mount Summit",
    "North Vernon",
    "Bargersville",
    "Wolcottville",
    "East Chicago",
    "Schererville",
    "Lake Station",
    "Merrillville",
    "Ellettsville",
    "New Richmond",
    "Martinsville",
    "Lake Village",
    "Kendallville",
    "Patricksburg",
    "Bloomingdale",
    "Mount Vernon",
    "Francesville",
    "Russellville",
    "Cross Plains",
    "New Carlisle",
    "Fountaintown",
    "Lincoln City",
    "North Judson",
    "Pine Village",
    "West Lebanon",
    "Williamsport",
    "Williamsburg",
    "Monroeville",
    "Lake Cicott",
    "New Waverly",
    "Twelve Mile",
    "Charlestown",
    "Clarksville",
    "Sellersburg",
    "Centerpoint",
    "Leavenworth",
    "Moores Hill",
    "Huntingburg",
    "Millersburg",
    "Bentonville",
    "Veedersburg",
    "Cedar Grove",
    "New Trenton",
    "Grass Creek",
    "Fort Branch",
    "Worthington",
    "Noblesville",
    "Coatesville",
    "North Salem",
    "Stilesville",
    "Knightstown",
    "Russiaville",
    "Butlerville",
    "Edwardsport",
    "Monroe City",
    "Winona Lake",
    "Silver Lake",
    "Shipshewana",
    "Crown Point",
    "Union Mills",
    "Heltonville",
    "Springville",
    "Markleville",
    "Summitville",
    "Beech Grove",
    "West Newton",
    "Bunker Hill",
    "Grissom Arb",
    "Bloomington",
    "Clear Creek",
    "Harrodsburg",
    "Stinesville",
    "Mooresville",
    "French Lick",
    "Branchville",
    "Saint Croix",
    "Boone Grove",
    "New Harmony",
    "Medaryville",
    "Greencastle",
    "Putnamville",
    "Losantville",
    "Parker City",
    "Pierceville",
    "Gwynneville",
    "Shelbyville",
    "Gentryville",
    "Mariah Hill",
    "Santa Claus",
    "Farmersburg",
    "Clarks Hill",
    "Montmorenci",
    "Sharpsville",
    "Brownsville",
    "Perrysville",
    "Terre Haute",
    "La Fontaine",
    "Hardinsburg",
    "Centerville",
    "Greens Fork",
    "Linn Grove",
    "Huntertown",
    "Zanesville",
    "Fort Wayne",
    "Hartsville",
    "Jonesville",
    "Montpelier",
    "Whitestown",
    "Zionsville",
    "Morgantown",
    "Bringhurst",
    "Burlington",
    "Logansport",
    "Henryville",
    "Marysville",
    "Grantsburg",
    "Washington",
    "Cannelburg",
    "Montgomery",
    "Plainville",
    "Clarksburg",
    "Greensburg",
    "Millhousen",
    "Saint Paul",
    "Middlebury",
    "Georgetown",
    "Greenville",
    "New Albany",
    "Brookville",
    "Owensville",
    "Somerville",
    "Bloomfield",
    "Jasonville",
    "Switz City",
    "Greenfield",
    "Lanesville",
    "Brownsburg",
    "Plainfield",
    "Greensboro",
    "Lewisville",
    "Middletown",
    "New Castle",
    "New Lisbon",
    "Springport",
    "Huntington",
    "Brownstown",
    "Wheatfield",
    "Rensselaer",
    "Bruceville",
    "Westphalia",
    "Etna Green",
    "Cedar Lake",
    "Saint John",
    "Mill Creek",
    "Alexandria",
    "Tippecanoe",
    "Deedsville",
    "Smithville",
    "Unionville",
    "Darlington",
    "New Market",
    "Rising Sun",
    "Petersburg",
    "Chesterton",
    "Valparaiso",
    "Poseyville",
    "Wadesville",
    "Bainbridge",
    "Cloverdale",
    "Reelsville",
    "Ridgeville",
    "Union City",
    "Winchester",
    "Batesville",
    "Friendship",
    "Versailles",
    "Notre Dame",
    "South Bend",
    "Scottsburg",
    "Morristown",
    "San Pierre",
    "Grovertown",
    "Graysville",
    "Bennington",
    "Buck Creek",
    "Inglefield",
    "Evansville",
    "New Goshen",
    "Prairieton",
    "Seelyville",
    "State Line",
    "Hagerstown",
    "Craigville",
    "Monticello",
    "Churubusco",
    "New Haven",
    "Earl Park",
    "Otterbein",
    "Templeton",
    "Thorntown",
    "Jamestown",
    "Helmsburg",
    "Nashville",
    "Rockfield",
    "Galveston",
    "Bethlehem",
    "Underwood",
    "Clay City",
    "Frankfort",
    "Rossville",
    "Dillsboro",
    "New Point",
    "Saint Joe",
    "Daleville",
    "Celestine",
    "Ferdinand",
    "New Paris",
    "Covington",
    "Hillsboro",
    "Oldenburg",
    "Rochester",
    "Haubstadt",
    "Francisco",
    "Princeton",
    "Fairmount",
    "Fowlerton",
    "Jonesboro",
    "Van Buren",
    "Owensburg",
    "Solsberry",
    "Westfield",
    "Fortville",
    "Wilkinson",
    "Elizabeth",
    "Mauckport",
    "Pittsboro",
    "Mooreland",
    "Spiceland",
    "Greentown",
    "Fair Oaks",
    "Remington",
    "Pennville",
    "Salamonia",
    "Commiskey",
    "Edinburgh",
    "Greenwood",
    "Trafalgar",
    "Whiteland",
    "Vincennes",
    "Wheatland",
    "Pierceton",
    "Schneider",
    "Kingsbury",
    "La Crosse",
    "Westville",
    "Tunnelton",
    "Pendleton",
    "Donaldson",
    "Loogootee",
    "Waynetown",
    "Mount Ayr",
    "Rome City",
    "Coal City",
    "Bridgeton",
    "Montezuma",
    "Rockville",
    "Cannelton",
    "Tell City",
    "Cynthiana",
    "Star City",
    "Roachdale",
    "Arlington",
    "Rushville",
    "Lakeville",
    "Mishawaka",
    "Walkerton",
    "Lexington",
    "Boggstown",
    "Flat Rock",
    "Grandview",
    "Fairbanks",
    "Lafayette",
    "Stockwell",
    "Westpoint",
    "Goldsmith",
    "Hillsdale",
    "Universal",
    "Boonville",
    "Elberfeld",
    "Lynnville",
    "Petroleum",
    "Uniondale",
    "Brookston",
    "Hoagland",
    "Woodburn",
    "Columbus",
    "Clifford",
    "Coalmont",
    "Staunton",
    "Mulberry",
    "Milltown",
    "Guilford",
    "Westport",
    "Waterloo",
    "Oakville",
    "Yorktown",
    "Birdseye",
    "Nappanee",
    "Wakarusa",
    "Glenwood",
    "Metamora",
    "Hazleton",
    "Buckskin",
    "Gas City",
    "Matthews",
    "Sweetser",
    "Newberry",
    "Scotland",
    "Sheridan",
    "Bradford",
    "Crandall",
    "Danville",
    "Dunreith",
    "Straughn",
    "Cortland",
    "Freetown",
    "Vallonia",
    "Portland",
    "Franklin",
    "Bicknell",
    "Ragsdale",
    "Sandborn",
    "Claypool",
    "Leesburg",
    "Syracuse",
    "Lagrange",
    "Griffith",
    "Highland",
    "La Porte",
    "Mitchell",
    "Williams",
    "Anderson",
    "Frankton",
    "Plymouth",
    "Converse",
    "Stanford",
    "New Ross",
    "Waveland",
    "Brooklyn",
    "Eminence",
    "Monrovia",
    "Roselawn",
    "Goodland",
    "Kentland",
    "Cromwell",
    "Ligonier",
    "Wolflake",
    "Bellmore",
    "Marshall",
    "Rosedale",
    "Spurgeon",
    "Monterey",
    "Fillmore",
    "Farmland",
    "Saratoga",
    "Napoleon",
    "Carthage",
    "Falmouth",
    "Fairland",
    "Evanston",
    "Chrisney",
    "Hatfield",
    "Richland",
    "Rockport",
    "Hamilton",
    "Carlisle",
    "Shelburn",
    "Sullivan",
    "Florence",
    "Windfall",
    "Blanford",
    "Fontanet",
    "Somerset",
    "Chandler",
    "Newburgh",
    "Tennyson",
    "Pershing",
    "Richmond",
    "Bluffton",
    "Keystone",
    "Chalmers",
    "Idaville",
    "Reynolds",
    "Decatur",
    "Grabill",
    "Grammer",
    "Boswell",
    "Lebanon",
    "Advance",
    "Burrows",
    "Lucerne",
    "Memphis",
    "Harmony",
    "Kirklin",
    "Sedalia",
    "Eckerty",
    "English",
    "Marengo",
    "Sulphur",
    "Taswell",
    "Corunna",
    "Garrett",
    "Holland",
    "Ireland",
    "Bristol",
    "Elkhart",
    "Kingman",
    "Mellott",
    "Newtown",
    "Wallace",
    "Kewanna",
    "Swayzee",
    "Midland",
    "Arcadia",
    "Atlanta",
    "Fishers",
    "Maxwell",
    "Central",
    "Corydon",
    "Laconia",
    "Palmyra",
    "Clayton",
    "Kennard",
    "Shirley",
    "Hemlock",
    "Oakford",
    "Andrews",
    "Roanoke",
    "Seymour",
    "Demotte",
    "Dunkirk",
    "Hanover",
    "Madison",
    "Needham",
    "Nineveh",
    "Oaktown",
    "Mentone",
    "Milford",
    "Hammond",
    "Munster",
    "Whiting",
    "Wanatah",
    "Bedford",
    "Oolitic",
    "Ingalls",
    "Orestes",
    "Bourbon",
    "Wingate",
    "Paragon",
    "Morocco",
    "Kimmell",
    "Orleans",
    "Freedom",
    "Gosport",
    "Spencer",
    "Bristow",
    "Leopold",
    "Stendal",
    "Winslow",
    "Portage",
    "Wheeler",
    "Griffin",
    "Winamac",
    "Manilla",
    "Granger",
    "Osceola",
    "Waldron",
    "Fremont",
    "Patriot",
    "Kempton",
    "Liberty",
    "Clinton",
    "Newport",
    "Pimento",
    "Laketon",
    "Economy",
    "Webster",
    "Buffalo",
    "Wolcott",
    "Larwill",
    "Geneva",
    "Monroe",
    "Preble",
    "Arcola",
    "Harlan",
    "Fowler",
    "Oxford",
    "Talbot",
    "Camden",
    "Cutler",
    "Delphi",
    "Yeoman",
    "Onward",
    "Walton",
    "Borden",
    "Otisco",
    "Brazil",
    "Carbon",
    "Poland",
    "Colfax",
    "Forest",
    "Elnora",
    "Aurora",
    "Ashley",
    "Auburn",
    "Butler",
    "Muncie",
    "Albany",
    "Gaston",
    "Dubois",
    "Jasper",
    "Goshen",
    "Attica",
    "Laurel",
    "Athens",
    "Delong",
    "Fulton",
    "Mackey",
    "Patoka",
    "Marion",
    "Upland",
    "Koleen",
    "Linton",
    "Carmel",
    "Cicero",
    "Depauw",
    "Ramsey",
    "Lizton",
    "Kokomo",
    "Bippus",
    "Markle",
    "Warren",
    "Medora",
    "Norman",
    "Bryant",
    "Redkey",
    "Canaan",
    "Deputy",
    "Dupont",
    "Hayden",
    "Scipio",
    "Vernon",
    "Decker",
    "Atwood",
    "Burket",
    "Warsaw",
    "Topeka",
    "Hobart",
    "Lowell",
    "Shelby",
    "Elwood",
    "Bremen",
    "Culver",
    "Shoals",
    "Denver",
    "Mexico",
    "Ladoga",
    "Linden",
    "Thayer",
    "Albion",
    "Avilla",
    "Laotto",
    "Wawaka",
    "Quincy",
    "Otwell",
    "Velpen",
    "Hebron",
    "Holton",
    "Morris",
    "Osgood",
    "Sunman",
    "Milroy",
    "Austin",
    "Hamlet",
    "Angola",
    "Hudson",
    "Orland",
    "Dugger",
    "Hymera",
    "Paxton",
    "Dayton",
    "Romney",
    "Tipton",
    "Cayuga",
    "Servia",
    "Urbana",
    "Wabash",
    "Boston",
    "Dublin",
    "Milton",
    "Ossian",
    "Poneto",
    "Berne",
    "Yoder",
    "Ambia",
    "Flora",
    "Eaton",
    "Selma",
    "Akron",
    "Lyons",
    "Finly",
    "Kurtz",
    "Tefft",
    "Mongo",
    "Stroh",
    "Leroy",
    "Hanna",
    "Avoca",
    "Huron",
    "Lapel",
    "Camby",
    "Argos",
    "Lapaz",
    "Tyner",
    "Crane",
    "Amboy",
    "Miami",
    "Alamo",
    "Brook",
    "Paoli",
    "Mecca",
    "Derby",
    "Kouts",
    "Modoc",
    "Milan",
    "Homer",
    "Wyatt",
    "Fulda",
    "Lamar",
    "Merom",
    "Vevay",
    "Hobbs",
    "Lewis",
    "Riley",
    "Lagro",
    "Roann",
    "Pekin",
    "Salem",
    "Monon",
    "Hope",
    "Nabb",
    "Cory",
    "Odon",
    "Bath",
    "Avon",
    "Howe",
    "Dyer",
    "Gary",
    "Macy",
    "Peru",
    "Rome",
    "Lynn",
    "Mays",
    "Dale",
    "Troy",
    "Knox",
    "Dana",
    "Leo",
    "Amo",
    "Ora",
  ],
  sI = JSON.parse(
    '["North Buena Vista","Columbus Junction","North Washington","Strawberry Point","Pacific Junction","West Burlington","Missouri Valley","Center Junction","Oxford Junction","University Park","College Springs","West Des Moines","Windsor Heights","Pleasant Valley","Correctionville","Mechanicsville","Fredericksburg","Grand Junction","Guthrie Center","New Providence","Steamboat Rock","Mount Pleasant","Melcher Dallas","Council Bluffs","Mount Sterling","Liberty Center","Crawfordsville","Buffalo Center","Sergeant Bluff","Harpers Ferry","La Porte City","Rockwell City","Gillett Grove","Dallas Center","Grundy Center","North English","Saint Donatus","North Liberty","South English","Columbus City","Saint Charles","Pleasantville","Saint Anthony","Mitchellville","Pleasant Hill","Fort Atkinson","Highlandville","Climbing Hill","Belle Plaine","Mount Auburn","Gilbertville","Independence","Sioux Rapids","New Hartford","Farnhamville","Garden Grove","Arnolds Park","Nora Springs","Charles City","Webster City","Crystal Lake","Little Sioux","Lime Springs","Gilmore City","Battle Creek","Middle Amana","Williamsburg","Spragueville","Prairie City","Libertyville","Fort Madison","Center Point","Central City","Mount Vernon","Cedar Rapids","Marshalltown","State Center","Little Cedar","Saint Ansgar","West Liberty","Sioux Center","Mc Callsburg","Shannon City","New Virginia","West Chester","Promise City","Bridgewater","Centerville","Cedar Falls","Pilot Mound","Albert City","Austinville","Clarksville","Parkersburg","Coon Rapids","West Branch","New Hampton","Farmersburg","Lost Nation","Grand Mound","Teeds Grove","Charter Oak","Drakesville","Grand River","Spirit Lake","Worthington","Estherville","Wallingford","Saint Lucas","Marble Rock","Garden City","Mount Union","Dakota City","Millersburg","South Amana","Springbrook","Martinsburg","Pilot Grove","Prairieburg","Springville","Morning Sun","Little Rock","Rock Rapids","Barnes City","Silver City","Toeterville","Braddyville","Graettinger","Carter Lake","Honey Creek","Mc Clelland","Mc Causland","New Liberty","Orange City","Rock Valley","Chillicothe","Martensdale","Saint Marys","Forest City","Eagle Grove","Fontanelle","Greenfield","Dorchester","Waterville","Cincinnati","Unionville","Kimballton","Blairstown","Shellsburg","Janesville","Plainfield","Quasqueton","Storm Lake","Linn Grove","Shell Rock","Lidderdale","Cumberland","Mason City","Clear Lake","Rock Falls","Alta Vista","Greenville","Garnavillo","Guttenberg","Saint Olaf","Goose Lake","Booneville","Bloomfield","Davis City","Masonville","Manchester","Burlington","Mediapolis","Middletown","Dyersville","Holy Cross","New Vienna","West Union","Blairsburg","Iowa Falls","New London","Swedesburg","Coralville","Langworthy","Monticello","What Cheer","Hayesville","Whittemore","Donnellson","West Point","Saint Paul","Troy Mills","Williamson","New Sharon","Stacyville","Conesville","Montpelier","Sutherland","Shenandoah","Emmetsburg","Brunsville","Pocahontas","Des Moines","Deep River","Bettendorf","Blue Grass","Long Grove","Portsmouth","Westphalia","Chatsworth","Story City","Buckingham","Clearfield","Sharpsburg","New Market","Birmingham","Farmington","Blakesburg","Washington","Fort Dodge","Lake Mills","Spillville","Sioux City","Hanlontown","New Albin","Postville","Van Horne","Dunkerton","Evansdale","Frederika","Rembrandt","Truesdale","Aplington","Lake City","Lohrville","Lanesboro","Templeton","Dougherty","Swaledale","Mc Gregor","Marquette","Charlotte","Wheatland","Aspinwall","Schleswig","Van Meter","Colesburg","Earlville","Hopkinton","Lake Park","Luxemburg","Armstrong","Arlington","Alexander","Sheffield","Jefferson","Wellsburg","Ellsworth","Stratford","Radcliffe","Hillsboro","Riceville","Livermore","Ida Grove","Homestead","Maquoketa","Lynnville","Fairfield","Lockridge","Iowa City","Lone Tree","Thornburg","Sigourney","Lone Rock","Swea City","Alburnett","Toddville","Grandview","Larchwood","Bevington","Macksburg","Patterson","Winterset","Oskaloosa","Rose Hill","Knoxville","Haverhill","Melbourne","Henderson","Carpenter","Mc Intire","Fruitland","Muscatine","Ocheyedan","Blanchard","Northboro","Shambaugh","West Bend","Westfield","Bondurant","Polk City","Urbandale","Macedonia","Underwood","Montezuma","Searsboro","Kellerton","Mount Ayr","Lake View","Wall Lake","Le Claire","Princeton","Davenport","Granville","Cambridge","Gladbrook","Keosauqua","Bonaparte","Stockport","Eddyville","Kirkville","Indianola","Ainsworth","Riverside","Lineville","Millerton","Callender","Scarville","Smithland","Northwood","Goldfield","Woolstock","Prescott","Garrison","Keystone","Waterloo","Fairbank","Hazleton","Winthrop","Marathon","Atlantic","Griswold","Clarence","Stanwood","Meservey","Plymouth","Rockwell","Thornton","Cherokee","Cleghorn","Larrabee","Woodburn","Peterson","Fostoria","Edgewood","Camanche","Low Moor","Ricketts","Westside","Dow City","Redfield","Woodward","Van Wert","Delaware","Danville","Yarmouth","Superior","Sherrill","Dolliver","Ringsted","Westgate","Clermont","Randalia","Rockford","Bradford","Farragut","Percival","Randolph","Riverton","Scranton","Morrison","Reinbeck","Stanhope","Williams","Magnolia","Mondamin","Woodbine","Winfield","Protivin","Bradgate","Humboldt","Holstein","Bellevue","La Motte","Monmouth","Killduff","Packwood","Martelle","Richland","Bancroft","Lu Verne","Houghton","Montrose","Hiawatha","Oakville","Chariton","Leighton","Columbia","Hamilton","Ferguson","Le Grand","Glenwood","Hastings","Mapleton","Moorhead","Villisca","Atalissa","Stockton","Paullina","Primghar","Clarinda","Yorktown","Ayrshire","Cylinder","Kingsley","Havelock","Johnston","Runnells","Sheldahl","Crescent","Grinnell","Brooklyn","Guernsey","Hartwick","Diagonal","Sac City","Schaller","Eldridge","Defiance","Elk Horn","Hawarden","Blockton","Cromwell","Ackworth","Carlisle","Hartford","Brighton","Allerton","Humeston","Burnside","Duncombe","Harcourt","Moorland","Thompson","Castalia","Ridgeway","Corning","Nodaway","Lansing","Moravia","Moulton","Audubon","Brayton","Luzerne","Newhall","Walford","Watkins","Raymond","Boxholm","Readlyn","Tripoli","Waverly","Stanley","Brandon","Allison","Aredale","Bristow","Knierim","Pomeroy","Carroll","Arcadia","Glidden","Manning","Ralston","Massena","Bennett","Ventura","Aurelia","Meriden","Osceola","Spencer","Dickens","Elkader","Elkport","Andover","Calamus","Clinton","De Witt","Denison","Manilla","De Soto","Granger","Minburn","Pulaski","Decatur","Greeley","Milford","Okoboji","Dubuque","Bernard","Cascade","Durango","Epworth","Zwingle","Maynard","Oelwein","Fayette","Hawkeye","Waucoma","Colwell","Popejoy","Coulter","Hampton","Latimer","Hamburg","Imogene","Thurman","Churdan","Holland","Jamaica","Randall","Corwith","Goodell","Kanawha","Buckeye","Hubbard","Gifford","Whitten","Wayland","Chester","Ottosen","Renwick","Rutland","Marengo","Parnell","Preston","Baldwin","Kellogg","Reasnor","Batavia","Swisher","Anamosa","Wyoming","Keswick","Webster","Hedrick","Titonka","Ledyard","Denmark","Fairfax","Wapello","Russell","Earlham","Fremont","Clemons","Liscomb","Emerson","Malvern","Mineola","Orchard","Castana","Whiting","Blencoe","Soldier","Lovilia","Melrose","Elliott","Red Oak","Stanton","Nichols","Calumet","Sheldon","Sanborn","Hartley","Mallard","Ruthven","Le Mars","Merrill","Laurens","Alleman","Altoona","Berwick","Elkhart","Hancock","Oakland","Treynor","Ellston","Redding","Tingley","Odebolt","Buffalo","Donahue","Walcott","Kirkman","Earling","Maurice","Hospers","Matlock","Collins","Gilbert","Maxwell","Zearing","Montour","Lincoln","Chelsea","Clutier","Elberon","Bedford","Gravity","Lorimor","Creston","Cantril","Ottumwa","Cumming","Norwalk","Wellman","Corydon","Seymour","Vincent","Decorah","Bronson","Cushing","Danbury","Hornick","Moville","Pierson","Fertile","Grafton","Kensett","Belmond","Clarion","Orient","Carbon","Waukon","Exline","Mystic","Hamlin","Atkins","Norway","Urbana","Vinton","Hudson","Beaver","Luther","Madrid","Denver","Sumner","Aurora","Lamont","Rowley","Newell","Dumont","Greene","Kesley","Jolley","Lytton","Manson","Somers","Dedham","Halbur","Lowden","Durant","Tipton","Marcus","Quimby","Washta","Nashua","Lawler","Murray","Everly","Garber","Monona","Delmar","Bryant","Welton","Deloit","Bouton","Dawson","Dexter","Linden","Waukee","Floris","Lamoni","Weldon","Dundee","Sperry","Terril","Farley","Peosta","Wadena","Chapin","Geneva","Sidney","Cooper","Rippey","Beaman","Conrad","Bagley","Bayard","Panora","Stuart","Jewell","Kamrar","Garner","Klemme","Ackley","Eldora","Dunlap","Modale","Persia","Pisgah","Cresco","Arthur","Conroy","Ladora","Victor","Andrew","Sabula","Baxter","Colfax","Monroe","Newton","Oxford","Tiffin","Morley","Onslow","Gibson","Harper","Lakota","Wesley","Algona","Fenton","Argyle","Keokuk","Coggon","Lisbon","Marion","Robins","Walker","Alvord","George","Inwood","Lester","Beacon","Bussey","Harvey","Albion","Gilman","Laurel","Rhodes","Rodney","Moscow","Wilton","Archer","Ashton","Sibley","Harris","Melvin","Curlew","Hinton","Remsen","Palmer","Plover","Varina","Ankeny","Grimes","Carson","Minden","Shelby","Walnut","Harlan","Malcom","Benton","Nemaha","Auburn","Panama","Ireton","Boyden","Huxley","Kelley","Nevada","Roland","Slater","Garwin","Dysart","Toledo","Vining","Thayer","Arispe","Milton","Agency","Lacona","Kalona","Badger","Barnum","Dayton","Gowrie","Lehigh","Leland","Calmar","Ossian","Anthon","Lawton","Adair","Plano","Udell","Exira","Dewar","Boone","Ogden","Jesup","Breda","Anita","Wiota","Lewis","Marne","Ionia","Royal","Volga","Luana","Kiron","Arion","Perry","Delhi","Elgin","Floyd","Tabor","Paton","Stout","Casey","Menlo","Britt","Woden","Alden","Union","Logan","Salem","Hardy","Galva","Amana","Miles","Mingo","Sully","Hills","Solon","Keota","Delta","Ollie","Wever","Letts","Derby","Lucas","Truro","Cedar","Otley","Pella","Tracy","Osage","Onawa","Albia","Grant","Essex","Akron","Oyens","Fonda","Rolfe","Clive","Avoca","Neola","Early","Dixon","Irwin","Alton","Traer","Lenox","Afton","Douds","Selma","Eldon","Prole","Clare","Salix","Sloan","Joice","Manly","Rowan","Gray","Alta","Webb","Vail","Adel","Leon","Ryan","Oran","Rudd","Dana","Dike","Yale","Rome","Olds","Elma","Bode","Thor","Olin","Burt","Palo","Doon","Peru","Swan","Coin","Hull","Ames","Colo","Tama","Milo","Clio","Otho","Rake","Dows","Galt","Ira","Ely","Ute","Oto"]'
  ),
  uI = [
    "Cottonwood Falls",
    "Fort Leavenworth",
    "South Hutchinson",
    "Prairie Village",
    "Shawnee Mission",
    "Medicine Lodge",
    "Matfield Green",
    "Baxter Springs",
    "Pretty Prairie",
    "Conway Springs",
    "Sharon Springs",
    "Bonner Springs",
    "Saint Francis",
    "Arkansas City",
    "Junction City",
    "Overland Park",
    "Neosho Rapids",
    "Council Grove",
    "Valley Center",
    "Mcconnell Afb",
    "Geuda Springs",
    "West Mineral",
    "Baldwin City",
    "Williamsburg",
    "North Newton",
    "Valley Falls",
    "Mound Valley",
    "Sylvan Grove",
    "Lincolnville",
    "Lost Springs",
    "Independence",
    "Phillipsburg",
    "Prairie View",
    "Saint George",
    "Westmoreland",
    "Little River",
    "Leonardville",
    "Garden Plain",
    "Smith Center",
    "Belle Plaine",
    "Neosho Falls",
    "Yates Center",
    "Edwardsville",
    "Pawnee Rock",
    "Cedar Point",
    "Strong City",
    "Clay Center",
    "Morganville",
    "White Cloud",
    "Garden City",
    "Pierceville",
    "Circleville",
    "Nortonville",
    "New Century",
    "Spring Hill",
    "Mullinville",
    "Leavenworth",
    "Centerville",
    "Blue Rapids",
    "Summerfield",
    "Cawker City",
    "Coffeyville",
    "Baileyville",
    "Minneapolis",
    "Long Island",
    "Havensville",
    "Saint Marys",
    "Rush Center",
    "Bunker Hill",
    "New Cambria",
    "Silver Lake",
    "South Haven",
    "Harveyville",
    "Morrowville",
    "Kansas City",
    "Westphalia",
    "Great Bend",
    "Hoisington",
    "Fort Scott",
    "Whitewater",
    "Cedar Vale",
    "Chautauqua",
    "Miltonvale",
    "Burlington",
    "Protection",
    "Maple City",
    "Farlington",
    "Enterprise",
    "Schoenchen",
    "Dodge City",
    "Fort Dodge",
    "Spearville",
    "Wellsville",
    "Fort Riley",
    "Grainfield",
    "Fall River",
    "Bluff City",
    "Winchester",
    "Grantville",
    "Cunningham",
    "Greensburg",
    "Tonganoxie",
    "Blue Mound",
    "Mound City",
    "Pleasanton",
    "Moundridge",
    "Marysville",
    "Vermillion",
    "Waterville",
    "Osawatomie",
    "Glen Elder",
    "Cherryvale",
    "White City",
    "Saint Paul",
    "Burlingame",
    "Carbondale",
    "Osage City",
    "Bennington",
    "Hutchinson",
    "Belleville",
    "Plainville",
    "Liebenthal",
    "Mc Cracken",
    "Brookville",
    "Scott City",
    "Clearwater",
    "Mount Hope",
    "Kensington",
    "Macksville",
    "Wellington",
    "Mc Farland",
    "Maple Hill",
    "Alta Vista",
    "Hollenberg",
    "Washington",
    "Marienthal",
    "New Albany",
    "Savonburg",
    "Effingham",
    "Lancaster",
    "Lake City",
    "Ellinwood",
    "Uniontown",
    "Powhattan",
    "El Dorado",
    "Rose Hill",
    "Crestline",
    "Bird City",
    "Englewood",
    "Wakefield",
    "Concordia",
    "Jamestown",
    "Coldwater",
    "Cambridge",
    "Pittsburg",
    "Frontenac",
    "Herington",
    "Lecompton",
    "Elk Falls",
    "Catharine",
    "Ellsworth",
    "Kanopolis",
    "Princeton",
    "Hill City",
    "Montezuma",
    "Oskaloosa",
    "Deerfield",
    "Nashville",
    "Lindsborg",
    "Mcpherson",
    "Marquette",
    "Hillsboro",
    "Frankfort",
    "Hillsdale",
    "Louisburg",
    "Richfield",
    "Centralia",
    "Galesburg",
    "Ness City",
    "Overbrook",
    "Mc Donald",
    "Abbyville",
    "Arlington",
    "Nickerson",
    "Partridge",
    "Courtland",
    "Manhattan",
    "Alexander",
    "La Crosse",
    "Greenwich",
    "Haysville",
    "Rossville",
    "Greenleaf",
    "Humboldt",
    "La Harpe",
    "Atchison",
    "Cummings",
    "Muscotah",
    "Hardtner",
    "Hazelton",
    "Sun City",
    "Mapleton",
    "Redfield",
    "Fairview",
    "Hiawatha",
    "Robinson",
    "Cassoday",
    "Beaumont",
    "Douglass",
    "Columbus",
    "Riverton",
    "Minneola",
    "Longford",
    "Winfield",
    "Cherokee",
    "Franklin",
    "Mulberry",
    "Jennings",
    "Norcatur",
    "Woodbine",
    "Highland",
    "Lawrence",
    "Victoria",
    "Holyrood",
    "Lorraine",
    "Richmond",
    "Grinnell",
    "Cimarron",
    "Copeland",
    "Hamilton",
    "Piedmont",
    "Coolidge",
    "Syracuse",
    "Danville",
    "Freeport",
    "Halstead",
    "Sedgwick",
    "Sublette",
    "Netawaka",
    "Mc Louth",
    "Burr Oak",
    "Edgerton",
    "Stilwell",
    "Haviland",
    "Altamont",
    "Bartlett",
    "Prescott",
    "Monument",
    "Americus",
    "Hartford",
    "Florence",
    "Elk City",
    "Sycamore",
    "Brownell",
    "Scranton",
    "Garfield",
    "Fostoria",
    "Republic",
    "Sterling",
    "Randolph",
    "Stockton",
    "Woodston",
    "Dorrance",
    "Paradise",
    "Berryton",
    "Tecumseh",
    "Wakarusa",
    "Goodland",
    "Kanorado",
    "Stafford",
    "Caldwell",
    "Mayfield",
    "Brewster",
    "Wakeeney",
    "Eskridge",
    "Benedict",
    "Fredonia",
    "Neodesha",
    "Elsmore",
    "Garnett",
    "Greeley",
    "Kincaid",
    "Claflin",
    "Bronson",
    "Garland",
    "Everest",
    "Morrill",
    "Andover",
    "Augusta",
    "Rosalia",
    "Towanda",
    "Elmdale",
    "Niotaze",
    "Scammon",
    "Ashland",
    "Gridley",
    "Waverly",
    "Wilmore",
    "Atlanta",
    "Arcadia",
    "Mc Cune",
    "Dresden",
    "Oberlin",
    "Abilene",
    "Chapman",
    "Solomon",
    "Talmage",
    "Bendena",
    "Wathena",
    "Kinsley",
    "Offerle",
    "Grenola",
    "Longton",
    "Pfeifer",
    "Holcomb",
    "Bucklin",
    "Rantoul",
    "Milford",
    "Quinter",
    "Morland",
    "Penokee",
    "Ulysses",
    "Ingalls",
    "Tribune",
    "Madison",
    "Kendall",
    "Anthony",
    "Waldron",
    "Burrton",
    "Hesston",
    "Satanta",
    "Hanston",
    "Jetmore",
    "Denison",
    "Mayetta",
    "Soldier",
    "Whiting",
    "Ozawkie",
    "Meriden",
    "Formoso",
    "Mankato",
    "Randall",
    "De Soto",
    "Gardner",
    "Mission",
    "Shawnee",
    "Leawood",
    "Kingman",
    "Murdock",
    "Norwich",
    "Chetopa",
    "Parsons",
    "Dighton",
    "Basehor",
    "Lansing",
    "Linwood",
    "Barnard",
    "Beverly",
    "Lincoln",
    "Lacygne",
    "Emporia",
    "Reading",
    "Roxbury",
    "Peabody",
    "Goessel",
    "Beattie",
    "Bucyrus",
    "Fontana",
    "Simpson",
    "Dearing",
    "Liberty",
    "Burdick",
    "Elkhart",
    "Corning",
    "Sabetha",
    "Wetmore",
    "Chanute",
    "Clayton",
    "Melvern",
    "Quenemo",
    "Osborne",
    "Delphos",
    "Tescott",
    "Burdett",
    "Olsburg",
    "Herndon",
    "Scandia",
    "Bushton",
    "Geneseo",
    "Raymond",
    "Russell",
    "Assaria",
    "Bentley",
    "Colwich",
    "Goddard",
    "Wichita",
    "Liberal",
    "Lebanon",
    "Gaylord",
    "St John",
    "Johnson",
    "Hugoton",
    "Argonia",
    "Mulvane",
    "Rexford",
    "Collyer",
    "Ogallah",
    "Wallace",
    "Clifton",
    "Hanover",
    "Mahaska",
    "Altoona",
    "Buffalo",
    "Toronto",
    "Colony",
    "Isabel",
    "Sharon",
    "Albert",
    "Olmitz",
    "Fulton",
    "Horton",
    "Benton",
    "Elbing",
    "Latham",
    "Potwin",
    "Galena",
    "Treece",
    "Aurora",
    "Glasco",
    "Le Roy",
    "Burden",
    "Dexter",
    "Girard",
    "Hepler",
    "Opolis",
    "Walnut",
    "Denton",
    "Elwood",
    "Eudora",
    "Belpre",
    "Howard",
    "Moline",
    "Walker",
    "Wilson",
    "Wright",
    "Ottawa",
    "Pomona",
    "Ensign",
    "Lamont",
    "Virgil",
    "Eureka",
    "Severy",
    "Attica",
    "Harper",
    "Newton",
    "Walton",
    "Holton",
    "Jewell",
    "Webber",
    "Olathe",
    "Lenexa",
    "Spivey",
    "Dennis",
    "Oswego",
    "Easton",
    "Parker",
    "Oakley",
    "Winona",
    "Admire",
    "Canton",
    "Windom",
    "Marion",
    "Lehigh",
    "Durham",
    "Ramona",
    "Axtell",
    "Bremen",
    "Fowler",
    "Plains",
    "Beloit",
    "Hunter",
    "Tipton",
    "Havana",
    "Dwight",
    "Wilsey",
    "Oneida",
    "Seneca",
    "Thayer",
    "Arnold",
    "Bazine",
    "Beeler",
    "Ransom",
    "Almena",
    "Lenora",
    "Norton",
    "Lyndon",
    "Vassar",
    "Portis",
    "Natoma",
    "Larned",
    "Kirwin",
    "Belvue",
    "Emmett",
    "Wamego",
    "Sawyer",
    "Atwood",
    "Ludell",
    "Buhler",
    "Plevna",
    "Sylvia",
    "Agenda",
    "Munden",
    "Norway",
    "Nekoma",
    "Gorham",
    "Salina",
    "Gypsum",
    "Andale",
    "Cheney",
    "Kismet",
    "Auburn",
    "Topeka",
    "Selden",
    "Hudson",
    "Manter",
    "Moscow",
    "Milton",
    "Oxford",
    "Levant",
    "Paxico",
    "Weskan",
    "Barnes",
    "Haddam",
    "Palmer",
    "Moran",
    "Welda",
    "Kiowa",
    "Sedan",
    "Green",
    "Clyde",
    "Udall",
    "Lewis",
    "Ellis",
    "Bogue",
    "Delia",
    "Perry",
    "Esbon",
    "Lakin",
    "Zenda",
    "Healy",
    "Allen",
    "Galva",
    "Inman",
    "Burns",
    "Tampa",
    "Oketo",
    "Meade",
    "Paola",
    "Caney",
    "Rolla",
    "Stark",
    "Utica",
    "Downs",
    "Alton",
    "Rozel",
    "Glade",
    "Logan",
    "Onaga",
    "Byers",
    "Coats",
    "Pratt",
    "Haven",
    "Turon",
    "Yoder",
    "Narka",
    "Alden",
    "Chase",
    "Lyons",
    "Ogden",
    "Riley",
    "Damar",
    "Palco",
    "Bison",
    "Lucas",
    "Luray",
    "Waldo",
    "Falun",
    "Derby",
    "Kechi",
    "Maize",
    "Viola",
    "Dover",
    "Hoxie",
    "Edson",
    "Athol",
    "Cedar",
    "Milan",
    "Colby",
    "Leoti",
    "Piqua",
    "Iola",
    "Leon",
    "Peru",
    "Weir",
    "Lebo",
    "Rock",
    "Arma",
    "Hope",
    "Troy",
    "Hays",
    "Ford",
    "Lane",
    "Gove",
    "Park",
    "Neal",
    "Hoyt",
    "Edna",
    "Olpe",
    "Home",
    "Tyro",
    "Bern",
    "Goff",
    "Erie",
    "Agra",
    "Iuka",
    "Cuba",
    "Otis",
    "Peck",
    "Alma",
    "Linn",
    "Gas",
    "Gem",
  ],
  dI = [
    "North Middletown",
    "Mount Washington",
    "Lebanon Junction",
    "Plummers Landing",
    "South Portsmouth",
    "Reynolds Station",
    "South Carrollton",
    "South Williamson",
    "West Louisville",
    "Turners Station",
    "Russell Springs",
    "Stamping Ground",
    "Saint Catharine",
    "Shepherdsville",
    "Falls Of Rough",
    "Ages Brookside",
    "Dawson Springs",
    "Staffordsville",
    "East Bernstadt",
    "Thousandsticks",
    "Kings Mountain",
    "Marshes Siding",
    "Bradfordsville",
    "Jeffersonville",
    "Mount Sterling",
    "Robinson Creek",
    "Campbellsville",
    "Lovelaceville",
    "Kettle Island",
    "Junction City",
    "Mitchellsburg",
    "Fort Campbell",
    "Sextons Creek",
    "Elizabethtown",
    "Wallins Creek",
    "Campbellsburg",
    "Pleasureville",
    "Saint Charles",
    "Harrods Creek",
    "Nicholasville",
    "West Van Lear",
    "Bryants Store",
    "Mount Sherman",
    "Saint Francis",
    "Gravel Switch",
    "Gilbertsville",
    "Tompkinsville",
    "Cornettsville",
    "West Somerset",
    "Renfro Valley",
    "Bowling Green",
    "Lawrenceburg",
    "Eighty Eight",
    "Catlettsburg",
    "Stephensport",
    "Silver Grove",
    "Hopkinsville",
    "Mammoth Cave",
    "Flemingsburg",
    "Prestonsburg",
    "Bryantsville",
    "Williamstown",
    "Water Valley",
    "Summersville",
    "Munfordville",
    "Madisonville",
    "White Plains",
    "Masonic Home",
    "Williamsport",
    "Wittensville",
    "Independence",
    "Morning View",
    "Pippa Passes",
    "Barbourville",
    "Lowmansville",
    "Saint Helens",
    "Crab Orchard",
    "Grand Rivers",
    "Russellville",
    "West Paducah",
    "Parkers Lake",
    "Whitley City",
    "Salyersville",
    "Calvert City",
    "Summer Shade",
    "Fountain Run",
    "Mount Hermon",
    "West Liberty",
    "Central City",
    "Horse Branch",
    "Pewee Valley",
    "De Mossville",
    "Elkhorn City",
    "Fords Branch",
    "Forest Hills",
    "Science Hill",
    "Mount Olivet",
    "Mount Vernon",
    "Elliottville",
    "Simpsonville",
    "Taylorsville",
    "Sharon Grove",
    "Smiths Grove",
    "Williamsburg",
    "Cane Valley",
    "Scottsville",
    "Owingsville",
    "Middlesboro",
    "Stoney Fork",
    "Millersburg",
    "Brooksville",
    "Hardinsburg",
    "New Concord",
    "Fort Thomas",
    "Bethelridge",
    "Burkesville",
    "Maple Mount",
    "Whitesville",
    "Brownsville",
    "Muses Mills",
    "Wallingford",
    "Betsy Layne",
    "Bevinsville",
    "Wheelwright",
    "Leitchfield",
    "South Shore",
    "Worthington",
    "White Mills",
    "Holmes Mill",
    "Bonnieville",
    "Smith Mills",
    "Spottsville",
    "Mortons Gap",
    "Nortonville",
    "Fisherville",
    "Oil Springs",
    "Paintsville",
    "Ft Mitchell",
    "Hodgenville",
    "Beattyville",
    "Bear Branch",
    "Hustonville",
    "Beech Grove",
    "Brandenburg",
    "Harrodsburg",
    "Cannel City",
    "Beech Creek",
    "New Liberty",
    "Shelbyville",
    "Allensville",
    "Morganfield",
    "Springfield",
    "Hazel Green",
    "Glens Fork",
    "Gradyville",
    "Sharpsburg",
    "Burlington",
    "Petersburg",
    "Parksville",
    "Perryville",
    "Germantown",
    "Lost Creek",
    "Cloverport",
    "Mc Daniels",
    "Union Star",
    "Morgantown",
    "Alexandria",
    "California",
    "Cunningham",
    "Carrollton",
    "Worthville",
    "Olive Hill",
    "Middleburg",
    "La Fayette",
    "Winchester",
    "Goose Rock",
    "Manchester",
    "Marrowbone",
    "Curdsville",
    "Rocky Hill",
    "Bee Spring",
    "Sandy Hook",
    "Elizaville",
    "Blue River",
    "Hueysville",
    "Paint Lick",
    "Crittenden",
    "Jonesville",
    "Fancy Farm",
    "Farmington",
    "Big Clifty",
    "Caneyville",
    "Greensburg",
    "Hawesville",
    "Rineyville",
    "Vine Grove",
    "West Point",
    "Big Laurel",
    "Cumberland",
    "Grays Knob",
    "Mary Alice",
    "Hardyville",
    "Horse Cave",
    "New Castle",
    "Port Royal",
    "Smithfield",
    "Earlington",
    "Louisville",
    "Boons Camp",
    "East Point",
    "Green Road",
    "Hoskinston",
    "Mc Roberts",
    "Whitesburg",
    "Tollesboro",
    "Waynesburg",
    "Adairville",
    "Sacramento",
    "Saint Mary",
    "Washington",
    "Battletown",
    "Payneville",
    "Frenchburg",
    "Wellington",
    "Drakesboro",
    "Greenville",
    "Bloomfield",
    "Coxs Creek",
    "Moorefield",
    "Beaver Dam",
    "Centertown",
    "Fordsville",
    "Perry Park",
    "Booneville",
    "Gays Creek",
    "Lick Creek",
    "Mc Andrews",
    "Pinsonfork",
    "Shelby Gap",
    "Livingston",
    "Clearfield",
    "Georgetown",
    "Sadieville",
    "Finchville",
    "Mount Eden",
    "Mannsville",
    "Willisburg",
    "Monticello",
    "Providence",
    "Slaughters",
    "Wheatcroft",
    "Pine Ridge",
    "Versailles",
    "La Center",
    "Wickliffe",
    "Cave City",
    "Hiseville",
    "Park City",
    "Salt Lick",
    "Pineville",
    "Irvington",
    "Rochester",
    "Princeton",
    "Melbourne",
    "Arlington",
    "Dunnville",
    "Oak Grove",
    "Big Creek",
    "Fall Rock",
    "Dycusburg",
    "Owensboro",
    "Roundhill",
    "Isonville",
    "Lexington",
    "Hillsboro",
    "Mc Dowell",
    "Stanville",
    "Weeksbury",
    "Frankfort",
    "Lancaster",
    "Dry Ridge",
    "Lynnville",
    "Argillite",
    "Flatwoods",
    "Lewisport",
    "Pellville",
    "Fort Knox",
    "Closplint",
    "Cynthiana",
    "Henderson",
    "Bethlehem",
    "Pendleton",
    "Gray Hawk",
    "Hagerhill",
    "Stambaugh",
    "Tutor Key",
    "Covington",
    "Sassafras",
    "Flat Lick",
    "Pittsburg",
    "Webbville",
    "Warbranch",
    "Partridge",
    "Millstone",
    "Vanceburg",
    "Mc Kinney",
    "Ledbetter",
    "Smithland",
    "Lewisburg",
    "Eddyville",
    "Pine Knot",
    "Livermore",
    "Maysville",
    "Muldraugh",
    "Denniston",
    "Knob Lick",
    "Beechmont",
    "Bardstown",
    "Fairfield",
    "New Haven",
    "Crestwood",
    "La Grange",
    "Mistletoe",
    "Pikeville",
    "Fedscreek",
    "Mouthcard",
    "Rockhouse",
    "Shelbiana",
    "Clay City",
    "Tateville",
    "Jamestown",
    "Uniontown",
    "Rockfield",
    "Mackville",
    "Rockholds",
    "Breeding",
    "Columbia",
    "Adolphus",
    "Florence",
    "Danville",
    "Clayhole",
    "Rousseau",
    "Vancleve",
    "Garfield",
    "Mc Quady",
    "Westview",
    "Clermont",
    "Hillview",
    "Aberdeen",
    "Woodbury",
    "Fredonia",
    "Bellevue",
    "Bardwell",
    "Hitchins",
    "Yosemite",
    "Fairview",
    "Pembroke",
    "Teaberry",
    "Mayfield",
    "Symsonia",
    "Clarkson",
    "Millwood",
    "Radcliff",
    "Eastview",
    "Glendale",
    "Coalgood",
    "Coldiron",
    "Lejunior",
    "Pathfork",
    "Eminence",
    "Lockport",
    "Columbus",
    "Annville",
    "Eastwood",
    "Glenview",
    "Prospect",
    "Fairdale",
    "Van Lear",
    "Erlanger",
    "Emmalena",
    "Littcarr",
    "Pine Top",
    "Woodbine",
    "Fourmile",
    "Heidrick",
    "Magnolia",
    "Chappell",
    "Stinnett",
    "Sizerock",
    "Wendover",
    "Yeaddiss",
    "Jackhorn",
    "Jeremiah",
    "Linefork",
    "Thornton",
    "Garrison",
    "Stanford",
    "Olmstead",
    "Richmond",
    "Royalton",
    "Tomahawk",
    "Warfield",
    "Mayslick",
    "Rhodelia",
    "Beaumont",
    "Edmonton",
    "Gamaliel",
    "Crockett",
    "Powderly",
    "Nazareth",
    "New Hope",
    "Carlisle",
    "Cromwell",
    "Hartford",
    "Mc Henry",
    "Rockport",
    "Westport",
    "Ricetown",
    "Falmouth",
    "Bonnyman",
    "Buckhorn",
    "Freeburn",
    "Majestic",
    "Stopover",
    "Somerset",
    "Bronston",
    "Burnside",
    "Ferguson",
    "Brodhead",
    "Morehead",
    "Franklin",
    "Elk Horn",
    "Cerulean",
    "Sullivan",
    "Woodburn",
    "Knifley",
    "Holland",
    "Bandana",
    "Glasgow",
    "Olympia",
    "Preston",
    "Miracle",
    "Beverly",
    "Ashland",
    "Augusta",
    "Milford",
    "Jackson",
    "Webster",
    "Kirksey",
    "Newport",
    "Milburn",
    "Sanders",
    "Grayson",
    "Soldier",
    "Willard",
    "Liberty",
    "Windsor",
    "Crofton",
    "Herndon",
    "Garrard",
    "Philpot",
    "Sweeden",
    "Ravenna",
    "Eastern",
    "Garrett",
    "Grethel",
    "Langley",
    "Printer",
    "Wayland",
    "Hickman",
    "Glencoe",
    "Corinth",
    "Hickory",
    "Sedalia",
    "Greenup",
    "Russell",
    "Cecilia",
    "Bledsoe",
    "Dayhoit",
    "Gulston",
    "Cub Run",
    "Baskett",
    "Corydon",
    "Robards",
    "Sulphur",
    "Clinton",
    "Manitou",
    "Sandgap",
    "Wilmore",
    "Flatgap",
    "Latonia",
    "Hindman",
    "Topmost",
    "Artemus",
    "Girdler",
    "Trosper",
    "Buffalo",
    "Ulysses",
    "Mozelle",
    "Burdine",
    "Jenkins",
    "Blackey",
    "Cromona",
    "Letcher",
    "Mayking",
    "Premium",
    "Emerson",
    "Hampton",
    "Kuttawa",
    "Paducah",
    "Stearns",
    "Calhoun",
    "Bighill",
    "Gunlock",
    "Lebanon",
    "Loretto",
    "Raywick",
    "Pilgrim",
    "Minerva",
    "Salvisa",
    "Hestand",
    "Elkfork",
    "Wrigley",
    "Browder",
    "Cleaton",
    "Chaplin",
    "Buckner",
    "Owenton",
    "Vincent",
    "Chavies",
    "Delphia",
    "Krypton",
    "Ashcamp",
    "Belcher",
    "Hellier",
    "Jonancy",
    "Lookout",
    "Mc Carr",
    "Phyllis",
    "Raccoon",
    "Stanton",
    "Orlando",
    "Farmers",
    "Guthrie",
    "Trenton",
    "Bedford",
    "Sturgis",
    "Waverly",
    "Alvaton",
    "Oakland",
    "Campton",
    "Barlow",
    "Austin",
    "Etoile",
    "Calvin",
    "Frakes",
    "Ingram",
    "Hebron",
    "Verona",
    "Walton",
    "Foster",
    "Custer",
    "Harned",
    "Hudson",
    "Brooks",
    "Dunbar",
    "Jetson",
    "Dexter",
    "Murray",
    "Dayton",
    "Carter",
    "Denton",
    "Gracey",
    "Oneida",
    "Albany",
    "Crayne",
    "Marion",
    "Irvine",
    "Auxier",
    "Banner",
    "Beaver",
    "Harold",
    "Hi Hat",
    "Lackey",
    "Martin",
    "Melvin",
    "Minnie",
    "Fulton",
    "Sparta",
    "Warsaw",
    "Melber",
    "Sonora",
    "Baxter",
    "Benham",
    "Cawood",
    "Cranks",
    "Evarts",
    "Harlan",
    "Kenvir",
    "Loyall",
    "Putney",
    "Canmer",
    "Hanson",
    "Mc Kee",
    "Waneta",
    "Keaton",
    "Meally",
    "Thelma",
    "Kenton",
    "Carrie",
    "Garner",
    "Leburn",
    "Mallie",
    "Mousie",
    "Redfox",
    "Bimble",
    "Cannon",
    "Dewitt",
    "Hinkle",
    "Walker",
    "London",
    "Blaine",
    "Martha",
    "Louisa",
    "Helton",
    "Smilax",
    "Wooton",
    "Ermine",
    "Gordon",
    "Hallie",
    "Roxana",
    "Quincy",
    "Tiline",
    "Auburn",
    "Revelo",
    "Strunk",
    "Island",
    "Rumsey",
    "Falcon",
    "Nerinx",
    "Benton",
    "Hardin",
    "Beauty",
    "Debord",
    "Lovely",
    "Guston",
    "Burgin",
    "Center",
    "Malone",
    "Belton",
    "Bremen",
    "Dunmor",
    "Graham",
    "Boston",
    "Dundee",
    "Olaton",
    "Rosine",
    "Goshen",
    "Butler",
    "Hazard",
    "Avawam",
    "Scuddy",
    "Yerkes",
    "Belfry",
    "Canada",
    "Dorton",
    "Kimper",
    "Phelps",
    "Ransom",
    "Regina",
    "Sidney",
    "Steele",
    "Varney",
    "Virgie",
    "Eubank",
    "Wildie",
    "Bagdad",
    "Clifty",
    "Elkton",
    "Milton",
    "Sebree",
    "Corbin",
    "Rogers",
    "Midway",
    "Lucas",
    "Hulen",
    "Arjay",
    "Union",
    "Paris",
    "Whick",
    "Hazel",
    "Ghent",
    "Grahn",
    "Alpha",
    "Maceo",
    "Utica",
    "Ewing",
    "Allen",
    "Bypro",
    "David",
    "Drift",
    "Dwale",
    "Mason",
    "Lowes",
    "Wingo",
    "Upton",
    "Lynch",
    "Berry",
    "Tyner",
    "Keene",
    "River",
    "Sitka",
    "Fisty",
    "Raven",
    "Scalf",
    "Keavy",
    "Mazie",
    "Adams",
    "Asher",
    "Essie",
    "Roark",
    "Hyden",
    "Eolia",
    "Deane",
    "Burna",
    "Salem",
    "Kevil",
    "Berea",
    "Dover",
    "Ekron",
    "Means",
    "Rowdy",
    "Bulan",
    "Combs",
    "Dwarf",
    "Happy",
    "Slemp",
    "Vicco",
    "Viper",
    "Hardy",
    "Huddy",
    "Stone",
    "Slade",
    "Nancy",
    "Waddy",
    "Cadiz",
    "Drake",
    "Dixon",
    "Poole",
    "Emlyn",
    "Siler",
    "Rush",
    "Bays",
    "Almo",
    "Hima",
    "Dana",
    "Ivel",
    "Tram",
    "Boaz",
    "Totz",
    "Reed",
    "Nebo",
    "Vest",
    "Kite",
    "Dema",
    "Gray",
    "Bush",
    "Lily",
    "Lone",
    "Isom",
    "Neon",
    "Seco",
    "Waco",
    "Inez",
    "Hope",
    "Mize",
    "Ezel",
    "Saul",
    "Busy",
    "Dice",
    "Jeff",
    "Myra",
    "Clay",
    "Zoe",
    "Ary",
  ],
  cI = [
    "Saint Francisville",
    "Greenwell Springs",
    "French Settlement",
    "Pointe A La Hache",
    "Saint Martinville",
    "Lake Providence",
    "Donaldsonville",
    "Paincourtville",
    "Fort Necessity",
    "Denham Springs",
    "Saint Benedict",
    "Napoleonville",
    "Bordelonville",
    "Plain Dealing",
    "Barksdale Afb",
    "Grand Chenier",
    "Sicily Island",
    "Saint Gabriel",
    "Golden Meadow",
    "Cloutierville",
    "Pleasant Hill",
    "Saint Bernard",
    "Des Allemands",
    "Krotz Springs",
    "Breaux Bridge",
    "Abita Springs",
    "Cotton Valley",
    "Saint Maurice",
    "Church Point",
    "Prairieville",
    "Labadieville",
    "Plattenville",
    "Center Point",
    "Plaucheville",
    "Bossier City",
    "Mooringsport",
    "Lake Charles",
    "Harrisonburg",
    "Transylvania",
    "Pine Prairie",
    "Turkey Creek",
    "Ville Platte",
    "Saint Landry",
    "Avery Island",
    "White Castle",
    "Natchitoches",
    "Belle Chasse",
    "Port Sulphur",
    "Grand Coteau",
    "Madisonville",
    "Independence",
    "Saint Joseph",
    "Mount Hermon",
    "Saint Amant",
    "Pierre Part",
    "Moreauville",
    "Haynesville",
    "Summerfield",
    "Baton Rouge",
    "Chataignier",
    "Loreauville",
    "Grosse Tete",
    "New Orleans",
    "Lake Arthur",
    "Youngsville",
    "Springfield",
    "Marthaville",
    "Sterlington",
    "West Monroe",
    "Braithwaite",
    "Cheneyville",
    "Forest Hill",
    "Hall Summit",
    "Saint James",
    "Arnaudville",
    "Morgan City",
    "Centerville",
    "Garden City",
    "Pearl River",
    "Ponchatoula",
    "Farmerville",
    "Spearsville",
    "Franklinton",
    "Estherwood",
    "Evangeline",
    "Belle Rose",
    "Cottonport",
    "Marksville",
    "Simmesport",
    "Merryville",
    "Keithville",
    "Shreveport",
    "Jonesville",
    "Enterprise",
    "Wildsville",
    "Grand Cane",
    "Logansport",
    "Longstreet",
    "Sondheimer",
    "Georgetown",
    "Montgomery",
    "Jeanerette",
    "New Iberia",
    "Maringouin",
    "Plaquemine",
    "Grand Isle",
    "Livingston",
    "Collinston",
    "Boothville",
    "Lettsworth",
    "Alexandria",
    "Saint Rose",
    "Greensburg",
    "Pine Grove",
    "Mount Airy",
    "Port Barre",
    "Washington",
    "Mandeville",
    "Tangipahoa",
    "Waterproof",
    "Downsville",
    "Springhill",
    "Erwinville",
    "Port Allen",
    "Mermentau",
    "Elizabeth",
    "Duplessis",
    "Evergreen",
    "Dry Creek",
    "Longville",
    "Sugartown",
    "Bienville",
    "Jamestown",
    "Elm Grove",
    "Princeton",
    "Blanchard",
    "Greenwood",
    "Bell City",
    "Hackberry",
    "Rhinehart",
    "Mansfield",
    "Stonewall",
    "Slaughter",
    "Crowville",
    "Winnsboro",
    "Dry Prong",
    "Jonesboro",
    "Barataria",
    "Lacassine",
    "Lafayette",
    "Broussard",
    "Thibodaux",
    "Choudrant",
    "Grambling",
    "Mer Rouge",
    "Oak Ridge",
    "Provencal",
    "Fairbanks",
    "Pilottown",
    "Batchelor",
    "New Roads",
    "Pineville",
    "Flatwoods",
    "Woodworth",
    "Coushatta",
    "Archibald",
    "Chalmette",
    "Destrehan",
    "Hahnville",
    "New Sarpy",
    "Uncle Sam",
    "Garyville",
    "Leonville",
    "Opelousas",
    "Patterson",
    "Charenton",
    "Covington",
    "Talisheek",
    "Natalbany",
    "Newellton",
    "Schriever",
    "Abbeville",
    "Delcambre",
    "Kurthwood",
    "Leesville",
    "Fort Polk",
    "New Llano",
    "Shongaloo",
    "Kilbourne",
    "Oak Grove",
    "Wakefield",
    "Winnfield",
    "Gonzales",
    "Brittany",
    "Burnside",
    "Sorrento",
    "Deridder",
    "Gibsland",
    "Ringgold",
    "Haughton",
    "Oil City",
    "Dequincy",
    "Westlake",
    "Columbia",
    "Ferriday",
    "Monterey",
    "Frierson",
    "Keatchie",
    "Carville",
    "Rosedale",
    "Sunshine",
    "Metairie",
    "Westwego",
    "Jennings",
    "Carencro",
    "Galliano",
    "Lockport",
    "Raceland",
    "Simsboro",
    "Maurepas",
    "Tallulah",
    "Goldonna",
    "Powhatan",
    "Clarence",
    "Robeline",
    "Fordoche",
    "Lakeland",
    "Morganza",
    "Ventress",
    "Lecompte",
    "Glenmora",
    "Hineston",
    "Longleaf",
    "Rayville",
    "Converse",
    "Gramercy",
    "Vacherie",
    "La Place",
    "Melville",
    "Palmetto",
    "Franklin",
    "Kentwood",
    "Loranger",
    "Roseland",
    "Montegut",
    "Rosepine",
    "Hornbeck",
    "Bogalusa",
    "Dubberly",
    "Weyanoke",
    "Crowley",
    "Leblanc",
    "Oberlin",
    "Oakdale",
    "Geismar",
    "Hamburg",
    "Hessmer",
    "Mansura",
    "Arcadia",
    "Belcher",
    "Bethany",
    "Gilliam",
    "Hosston",
    "Rodessa",
    "Sulphur",
    "Grayson",
    "Cameron",
    "Aimwell",
    "Clayton",
    "Vidalia",
    "Gloster",
    "Pelican",
    "Zachary",
    "Clinton",
    "Jackson",
    "Norwood",
    "Reddell",
    "Gilbert",
    "Bentley",
    "Pollock",
    "Chatham",
    "Quitman",
    "Lafitte",
    "Marrero",
    "Roanoke",
    "Cut Off",
    "Kraemer",
    "Mathews",
    "Bastrop",
    "Ashland",
    "Melrose",
    "Natchez",
    "Calhoun",
    "Jarreau",
    "Livonia",
    "Deville",
    "Gardner",
    "Mangham",
    "Belmont",
    "Florien",
    "Negreet",
    "Paradis",
    "Lutcher",
    "Convent",
    "Paulina",
    "Reserve",
    "Lawtell",
    "Cecilia",
    "Berwick",
    "Baldwin",
    "Lacombe",
    "Slidell",
    "Hammond",
    "Tickfaw",
    "Chauvin",
    "Theriot",
    "Bernice",
    "Gueydan",
    "Maurice",
    "Anacoco",
    "Simpson",
    "Varnado",
    "Doyline",
    "Sarepta",
    "Pioneer",
    "Atlanta",
    "Branch",
    "Kinder",
    "Mittie",
    "Reeves",
    "Darrow",
    "Bunkie",
    "Dupont",
    "Ragley",
    "Singer",
    "Castor",
    "Saline",
    "Taylor",
    "Benton",
    "Vivian",
    "Starks",
    "Vinton",
    "Clarks",
    "Creole",
    "Athens",
    "Lisbon",
    "Wilson",
    "Basile",
    "Baskin",
    "Jigger",
    "Wisner",
    "Colfax",
    "Gretna",
    "Harvey",
    "Kenner",
    "Fenton",
    "Milton",
    "Gheens",
    "Larose",
    "Tullos",
    "Urania",
    "Dubach",
    "Ruston",
    "Albany",
    "Holden",
    "Walker",
    "Watson",
    "Bonita",
    "Campti",
    "Monroe",
    "Swartz",
    "Empire",
    "Venice",
    "Lottie",
    "Rougon",
    "Libuse",
    "Sieper",
    "Fisher",
    "Zwolle",
    "Meraux",
    "Violet",
    "Boutte",
    "Luling",
    "Hester",
    "Edgard",
    "Eunice",
    "Sunset",
    "Lebeau",
    "Morrow",
    "Amelia",
    "Folsom",
    "Fluker",
    "Husser",
    "Robert",
    "Donner",
    "Gibson",
    "Lillie",
    "Marion",
    "Kaplan",
    "Pitkin",
    "Slagle",
    "Cullen",
    "Heflin",
    "Minden",
    "Sibley",
    "Brusly",
    "Forest",
    "Angola",
    "Tunica",
    "Calvin",
    "Dodson",
    "Morse",
    "Rayne",
    "Grant",
    "Effie",
    "Hayes",
    "Kelly",
    "Homer",
    "Baker",
    "Pride",
    "Ethel",
    "Mamou",
    "Chase",
    "Lydia",
    "Hodge",
    "Elton",
    "Welsh",
    "Duson",
    "Scott",
    "Trout",
    "Delta",
    "Jones",
    "Flora",
    "Gorum",
    "Buras",
    "Glynn",
    "Innis",
    "Oscar",
    "Boyce",
    "Elmer",
    "Tioga",
    "Delhi",
    "Start",
    "Noble",
    "Arabi",
    "Norco",
    "Akers",
    "Amite",
    "Bourg",
    "Dulac",
    "Houma",
    "Erath",
    "Perry",
    "Evans",
    "Angie",
    "Addis",
    "Joyce",
    "Sikes",
    "Egan",
    "Iota",
    "Iowa",
    "Acme",
    "Eros",
    "Jena",
    "Olla",
    "Mora",
    "Echo",
    "Ruby",
    "Ball",
    "Lena",
    "Otis",
    "Many",
    "Cade",
    "Bush",
    "Gray",
    "Epps",
    "Ida",
    "Ama",
    "Sun",
  ],
  hI = [
    "West Boothbay Harbor",
    "Cumberland Foreside",
    "Brownville Junction",
    "Greenville Junction",
    "Lincolnville Center",
    "Cumberland Center",
    "Grand Lake Stream",
    "East Parsonsfield",
    "Old Orchard Beach",
    "Estcourt Station",
    "Chebeague Island",
    "Farmington Falls",
    "Little Deer Isle",
    "Northeast Harbor",
    "Southwest Harbor",
    "North Vassalboro",
    "East Millinocket",
    "Stockton Springs",
    "Livermore Falls",
    "Fort Kent Mills",
    "West Farmington",
    "Cranberry Isles",
    "Prospect Harbor",
    "East Vassalboro",
    "South Thomaston",
    "Boothbay Harbor",
    "Isle Of Springs",
    "Squirrel Island",
    "North Waterford",
    "Sebasco Estates",
    "North Waterboro",
    "East Livermore",
    "Mechanic Falls",
    "Fort Fairfield",
    "Bustins Island",
    "North Bridgton",
    "South Freeport",
    "North Yarmouth",
    "South Portland",
    "Cape Elizabeth",
    "New Gloucester",
    "East Blue Hill",
    "North Monmouth",
    "South Gardiner",
    "Belgrade Lakes",
    "Tenants Harbor",
    "Dover Foxcroft",
    "Columbia Falls",
    "Biddeford Pool",
    "East Waterboro",
    "West Kennebunk",
    "Saint Francis",
    "Bailey Island",
    "South Windham",
    "East Dixfield",
    "Salsbury Cove",
    "Winter Harbor",
    "East Winthrop",
    "China Village",
    "West Rockport",
    "Coopers Mills",
    "East Boothbay",
    "South Bristol",
    "Center Lovell",
    "Shirley Mills",
    "Kittery Point",
    "North Berwick",
    "South Berwick",
    "Cape Porpoise",
    "Hollis Center",
    "Kennebunkport",
    "West Newfield",
    "Lisbon Falls",
    "North Turner",
    "Clayton Lake",
    "Island Falls",
    "New Limerick",
    "Presque Isle",
    "Saint Agatha",
    "Smyrna Mills",
    "Cliff Island",
    "East Baldwin",
    "West Baldwin",
    "Peaks Island",
    "New Vineyard",
    "Birch Harbor",
    "Mount Desert",
    "Sargentville",
    "Swans Island",
    "Mount Vernon",
    "Isle Au Haut",
    "Damariscotta",
    "East Andover",
    "Mattawamkeag",
    "Passadumkeag",
    "West Enfield",
    "East Newport",
    "New Portland",
    "Norridgewock",
    "Saint Albans",
    "Lincolnville",
    "Lambert Lake",
    "East Machias",
    "Cape Neddick",
    "Parsonsfield",
    "East Poland",
    "West Poland",
    "Wytopitlock",
    "Bridgewater",
    "Crouseville",
    "Frenchville",
    "Saint David",
    "Long Island",
    "Orrs Island",
    "Scarborough",
    "South Casco",
    "Steep Falls",
    "East Wilton",
    "East Orland",
    "Brooksville",
    "Bass Harbor",
    "Seal Harbor",
    "Farmingdale",
    "South China",
    "North Haven",
    "Spruce Head",
    "Chamberlain",
    "Bryant Pond",
    "South Paris",
    "West Bethel",
    "Millinocket",
    "Springfield",
    "Sangerville",
    "North Anson",
    "Sandy Point",
    "Cherryfield",
    "Dennysville",
    "Machiasport",
    "Baileyville",
    "York Harbor",
    "West Minot",
    "Eagle Lake",
    "Grand Isle",
    "Monticello",
    "New Sweden",
    "Wallagrass",
    "Farmington",
    "New Sharon",
    "Gouldsboro",
    "Bar Harbor",
    "Frenchboro",
    "Harborside",
    "Hulls Cove",
    "Stonington",
    "Kents Hill",
    "Litchfield",
    "Manchester",
    "Waterville",
    "Vassalboro",
    "Friendship",
    "Washington",
    "Port Clyde",
    "Vinalhaven",
    "Whitefield",
    "New Harbor",
    "Round Pond",
    "Brownfield",
    "West Paris",
    "Burlington",
    "Charleston",
    "Kenduskeag",
    "Stillwater",
    "Stacyville",
    "Brownville",
    "Greenville",
    "Bowdoinham",
    "Georgetown",
    "Phippsburg",
    "Pittsfield",
    "Smithfield",
    "West Forks",
    "Winterport",
    "Harrington",
    "Meddybemps",
    "Robbinston",
    "York Beach",
    "Ocean Park",
    "Springvale",
    "Livermore",
    "Benedicta",
    "Fort Kent",
    "Limestone",
    "Madawaska",
    "Mars Hill",
    "Stockholm",
    "Van Buren",
    "Westfield",
    "Brunswick",
    "Harpswell",
    "Westbrook",
    "North Jay",
    "Kingfield",
    "Bucksport",
    "Penobscot",
    "Ellsworth",
    "Blue Hill",
    "Deer Isle",
    "Islesford",
    "Seal Cove",
    "Hallowell",
    "Readfield",
    "Matinicus",
    "Owls Head",
    "Thomaston",
    "Jefferson",
    "Newcastle",
    "Nobleboro",
    "Waldoboro",
    "Southport",
    "Wiscasset",
    "Waterford",
    "Buckfield",
    "Greenwood",
    "Greenbush",
    "Eddington",
    "Orrington",
    "Cambridge",
    "Fairfield",
    "Skowhegan",
    "Frankfort",
    "Islesboro",
    "Searsmont",
    "Searsport",
    "Thorndike",
    "Topsfield",
    "Vanceboro",
    "Jonesboro",
    "Jonesport",
    "Milbridge",
    "Princeton",
    "Bar Mills",
    "Biddeford",
    "Kennebunk",
    "Limington",
    "Shapleigh",
    "Waterboro",
    "Danville",
    "Lewiston",
    "Sabattus",
    "Mapleton",
    "Oakfield",
    "Sheridan",
    "Sinclair",
    "Washburn",
    "Bridgton",
    "Freeport",
    "Harrison",
    "Standish",
    "Yarmouth",
    "Portland",
    "Falmouth",
    "Oquossoc",
    "Phillips",
    "Rangeley",
    "Stratton",
    "Brooklin",
    "Franklin",
    "Sullivan",
    "Sedgwick",
    "Sorrento",
    "Monmouth",
    "Gardiner",
    "Randolph",
    "Winthrop",
    "Belgrade",
    "Rockland",
    "Rockport",
    "Boothbay",
    "Edgecomb",
    "Pemaquid",
    "Monhegan",
    "Fryeburg",
    "Dixfield",
    "Stoneham",
    "Bradford",
    "Lagrange",
    "Old Town",
    "Plymouth",
    "Guilford",
    "Richmond",
    "Woolwich",
    "Rockwood",
    "Caratunk",
    "Hartland",
    "Hinckley",
    "Brookton",
    "Danforth",
    "Eastport",
    "Pembroke",
    "Ogunquit",
    "Limerick",
    "Newfield",
    "Houlton",
    "Ashland",
    "Caribou",
    "Portage",
    "Sherman",
    "Windham",
    "Raymond",
    "Castine",
    "Bernard",
    "Hancock",
    "Augusta",
    "Windsor",
    "Clinton",
    "Oakland",
    "Cushing",
    "Dresden",
    "Bristol",
    "Trevett",
    "Walpole",
    "Denmark",
    "Andover",
    "Hanover",
    "Roxbury",
    "Rumford",
    "Bradley",
    "Corinth",
    "Hampden",
    "Howland",
    "Kingman",
    "Lincoln",
    "Milford",
    "Stetson",
    "Corinna",
    "Dixmont",
    "Garland",
    "Newport",
    "Topsham",
    "Bowdoin",
    "Bingham",
    "Detroit",
    "Harmony",
    "Jackman",
    "Madison",
    "Palmyra",
    "Shawmut",
    "Palermo",
    "Belfast",
    "Burnham",
    "Freedom",
    "Liberty",
    "Morrill",
    "Addison",
    "Machias",
    "Steuben",
    "Whiting",
    "Berwick",
    "Kittery",
    "Cornish",
    "Lebanon",
    "Sanford",
    "Auburn",
    "Durham",
    "Greene",
    "Lisbon",
    "Poland",
    "Turner",
    "Orient",
    "Blaine",
    "Easton",
    "Perham",
    "Sebago",
    "Gorham",
    "Naples",
    "Pownal",
    "Dryden",
    "Wilton",
    "Eustis",
    "Strong",
    "Temple",
    "Aurora",
    "Orland",
    "Sunset",
    "Vienna",
    "Albion",
    "Camden",
    "Warren",
    "Bremen",
    "Lovell",
    "Porter",
    "Bethel",
    "Canton",
    "Hebron",
    "Mexico",
    "Norway",
    "Oxford",
    "Sumner",
    "Bangor",
    "Brewer",
    "Carmel",
    "Holden",
    "Exeter",
    "Hudson",
    "Levant",
    "Medway",
    "Patten",
    "Dexter",
    "Monson",
    "Athens",
    "Canaan",
    "Brooks",
    "Monroe",
    "Calais",
    "Cutler",
    "Wesley",
    "Alfred",
    "Buxton",
    "Minot",
    "Leeds",
    "Oxbow",
    "Casco",
    "Corea",
    "Surry",
    "Wayne",
    "Union",
    "Hiram",
    "Newry",
    "Paris",
    "Orono",
    "Abbot",
    "Sebec",
    "Anson",
    "Solon",
    "Unity",
    "Waite",
    "Beals",
    "Lubec",
    "Perry",
    "Eliot",
    "Acton",
    "Moody",
    "Wells",
    "Gray",
    "Weld",
    "Hope",
    "Alna",
    "Peru",
    "Etna",
    "Winn",
    "Milo",
    "Bath",
    "Troy",
    "York",
    "Saco",
    "Jay",
    "Lee",
  ],
  gI = [
    "Aberdeen Proving Ground",
    "Andrews Air Force Base",
    "Lutherville Timonium",
    "Southern Md Facility",
    "Fort George G Meade",
    "Suburb Maryland Fac",
    "Annapolis Junction",
    "Montgomery Village",
    "Linthicum Heights",
    "Prince Frederick",
    "Chesapeake Beach",
    "Braddock Heights",
    "Washington Grove",
    "District Heights",
    "Saint Marys City",
    "Chesapeake City",
    "East New Market",
    "West Friendship",
    "Capitol Heights",
    "Fort Washington",
    "Upper Fairmount",
    "Mardela Springs",
    "Little Orleans",
    "Tracys Landing",
    "Brooklandville",
    "Sparks Glencoe",
    "Sparrows Point",
    "Broomes Island",
    "Marriottsville",
    "Mount Victoria",
    "Taylors Island",
    "Point Of Rocks",
    "Havre De Grace",
    "Upper Marlboro",
    "Charlotte Hall",
    "Lexington Park",
    "Mechanicsville",
    "Patuxent River",
    "Marion Station",
    "Saint Michaels",
    "North Bethesda",
    "Corriganville",
    "Eckhart Mines",
    "Davidsonville",
    "Gibson Island",
    "Maryland Line",
    "Port Republic",
    "Saint Leonard",
    "Fishing Creek",
    "Burkittsville",
    "Sabillasville",
    "Jarrettsville",
    "Ellicott City",
    "Silver Spring",
    "Mount Rainier",
    "Coltons Point",
    "Saint Inigoes",
    "Princess Anne",
    "Pocomoke City",
    "Mount Savage",
    "Millersville",
    "Severna Park",
    "Cockeysville",
    "Owings Mills",
    "Randallstown",
    "Reisterstown",
    "Middle River",
    "Windsor Mill",
    "Federalsburg",
    "Union Bridge",
    "Port Deposit",
    "Port Tobacco",
    "White Plains",
    "Church Creek",
    "Walkersville",
    "Friendsville",
    "Simpsonville",
    "Kennedyville",
    "Sandy Spring",
    "Burtonsville",
    "Spencerville",
    "Gaithersburg",
    "Garrett Park",
    "College Park",
    "Temple Hills",
    "Stevensville",
    "Sudlersville",
    "Tall Timbers",
    "Clear Spring",
    "Maugansville",
    "Rohrersville",
    "Williamsport",
    "Westernport",
    "Crownsville",
    "Glen Burnie",
    "Hunt Valley",
    "Fort Howard",
    "Upper Falls",
    "White Marsh",
    "Catonsville",
    "Huntingtown",
    "North Beach",
    "Templeville",
    "Westminster",
    "New Windsor",
    "Perry Point",
    "Charlestown",
    "Bryans Road",
    "Cobb Island",
    "Hughesville",
    "Indian Head",
    "Buckeystown",
    "Libertytown",
    "Rocky Ridge",
    "Bloomington",
    "Grantsville",
    "Churchville",
    "Forest Hill",
    "Clarksville",
    "Chestertown",
    "Chevy Chase",
    "Brookeville",
    "Poolesville",
    "Barnesville",
    "Beallsville",
    "Takoma Park",
    "Bladensburg",
    "Hyattsville",
    "Centreville",
    "Church Hill",
    "Grasonville",
    "Great Mills",
    "Leonardtown",
    "Piney Point",
    "Deal Island",
    "Brownsville",
    "Keedysville",
    "Saint James",
    "Parsonsburg",
    "Powellville",
    "Bishopville",
    "Whaleyville",
    "Cumberland",
    "Flintstone",
    "Lonaconing",
    "Midlothian",
    "Spring Gap",
    "Friendship",
    "Shady Side",
    "Galesville",
    "West River",
    "Curtis Bay",
    "Kingsville",
    "Long Green",
    "Perry Hall",
    "Pikesville",
    "Halethorpe",
    "Nottingham",
    "Sunderland",
    "Greensboro",
    "Manchester",
    "Sykesville",
    "North East",
    "Perryville",
    "Rising Sun",
    "Earleville",
    "Georgetown",
    "Rock Point",
    "Rhodesdale",
    "Emmitsburg",
    "Ijamsville",
    "Ladiesburg",
    "Middletown",
    "Mount Airy",
    "Myersville",
    "New Market",
    "New Midway",
    "Unionville",
    "Kitzmiller",
    "Darlington",
    "Pylesville",
    "White Hall",
    "Cooksville",
    "Millington",
    "Still Pond",
    "Cabin John",
    "Clarksburg",
    "Germantown",
    "Kensington",
    "Brandywine",
    "Cheltenham",
    "Beltsville",
    "Glenn Dale",
    "Queen Anne",
    "Queenstown",
    "California",
    "Valley Lee",
    "Chewsville",
    "Hagerstown",
    "Sharpsburg",
    "Smithsburg",
    "Pittsville",
    "Girdletree",
    "Ocean City",
    "Ellerslie",
    "Frostburg",
    "Churchton",
    "Edgewater",
    "Gambrills",
    "Baltimore",
    "Annapolis",
    "Riderwood",
    "Stevenson",
    "Woodstock",
    "Gwynn Oak",
    "Parkville",
    "Bethlehem",
    "Goldsboro",
    "Henderson",
    "Hillsboro",
    "Finksburg",
    "Hampstead",
    "Taneytown",
    "Conowingo",
    "Elk Mills",
    "Bel Alton",
    "Bryantown",
    "Ironsides",
    "Cambridge",
    "Crocheron",
    "Secretary",
    "Toddville",
    "Frederick",
    "Adamstown",
    "Brunswick",
    "Jefferson",
    "Knoxville",
    "Tuscarora",
    "Woodsboro",
    "Bittinger",
    "Gunpowder",
    "Whiteford",
    "Betterton",
    "Rock Hall",
    "Glen Echo",
    "Dickerson",
    "Rockville",
    "Brentwood",
    "Riverdale",
    "Oxon Hill",
    "Greenbelt",
    "Ingleside",
    "Hollywood",
    "Loveville",
    "Park Hall",
    "Crisfield",
    "Claiborne",
    "Royal Oak",
    "Wye Mills",
    "Boonsboro",
    "Funkstown",
    "Salisbury",
    "Fruitland",
    "Nanticoke",
    "Sharptown",
    "Snow Hill",
    "Rawlings",
    "Pasadena",
    "Brooklyn",
    "Freeland",
    "Glen Arm",
    "Rosedale",
    "Solomons",
    "Lineboro",
    "Woodbine",
    "Cecilton",
    "Benedict",
    "Faulkner",
    "La Plata",
    "Nanjemoy",
    "Woolford",
    "Linkwood",
    "Monrovia",
    "Thurmont",
    "Accident",
    "Mc Henry",
    "Aberdeen",
    "Abingdon",
    "Edgewood",
    "Fallston",
    "Perryman",
    "Highland",
    "Columbia",
    "Elkridge",
    "Glenwood",
    "Bethesda",
    "Brinklow",
    "Damascus",
    "Accokeek",
    "Suitland",
    "Crumpton",
    "Bushwood",
    "Callaway",
    "Chaptico",
    "Clements",
    "Morganza",
    "Scotland",
    "Rehobeth",
    "Tylerton",
    "Westover",
    "Mcdaniel",
    "Sherwood",
    "Tilghman",
    "Big Pool",
    "Cavetown",
    "Fairplay",
    "Quantico",
    "Willards",
    "Stockton",
    "Midland",
    "Oldtown",
    "Lothian",
    "Harwood",
    "Hanover",
    "Harmans",
    "Odenton",
    "Crofton",
    "Baldwin",
    "Glyndon",
    "Monkton",
    "Parkton",
    "Phoenix",
    "Upperco",
    "Dundalk",
    "Barstow",
    "Dunkirk",
    "Marydel",
    "Preston",
    "Ridgely",
    "Warwick",
    "Waldorf",
    "Marbury",
    "Newburg",
    "Pomfret",
    "Welcome",
    "Hurlock",
    "Madison",
    "Wingate",
    "Oakland",
    "Swanton",
    "Bel Air",
    "Belcamp",
    "Glenelg",
    "Potomac",
    "Derwood",
    "Aquasco",
    "Clinton",
    "Barclay",
    "Chester",
    "Compton",
    "Dameron",
    "Drayden",
    "Manokin",
    "Cordova",
    "Neavitt",
    "Newcomb",
    "Wittman",
    "Cascade",
    "Hancock",
    "Bivalve",
    "Tyaskin",
    "Showell",
    "Barton",
    "Laurel",
    "Arnold",
    "Severn",
    "Boring",
    "Butler",
    "Towson",
    "Dowell",
    "Owings",
    "Denton",
    "Keymar",
    "Childs",
    "Colora",
    "Elkton",
    "Vienna",
    "Benson",
    "Street",
    "Fulton",
    "Savage",
    "Jessup",
    "Dayton",
    "Lisbon",
    "Galena",
    "Massey",
    "Worton",
    "Ashton",
    "Lanham",
    "Avenue",
    "Easton",
    "Bozman",
    "Oxford",
    "Trappe",
    "Hebron",
    "Delmar",
    "Berlin",
    "Newark",
    "Pinto",
    "Deale",
    "Chase",
    "Hydes",
    "Essex",
    "Lusby",
    "Issue",
    "Crapo",
    "Joppa",
    "Olney",
    "Boyds",
    "Bowie",
    "Price",
    "Abell",
    "Helen",
    "Ridge",
    "Ewell",
    "Allen",
    "Luke",
    "Mayo",
    "Riva",
    "Fork",
    "Eden",
    "Dhs",
  ],
  mI = [
    "Newton Lower Falls",
    "Newton Upper Falls",
    "West Chesterfield",
    "Arlington Heights",
    "Brookline Village",
    "White Horse Beach",
    "Dorchester Center",
    "West Hyannisport",
    "Great Barrington",
    "West Stockbridge",
    "West Springfield",
    "North Chelmsford",
    "Newton Highlands",
    "Marshfield Hills",
    "North Marshfield",
    "East Bridgewater",
    "West Bridgewater",
    "Roxbury Crossing",
    "North Brookfield",
    "South Wellfleet",
    "West Barnstable",
    "North Dartmouth",
    "South Dartmouth",
    "North Attleboro",
    "Attleboro Falls",
    "Prides Crossing",
    "Shelburne Falls",
    "South Deerfield",
    "East Longmeadow",
    "North Billerica",
    "Wellesley Hills",
    "Needham Heights",
    "East Brookfield",
    "South Lancaster",
    "West Brookfield",
    "South Attleboro",
    "Monument Beach",
    "North Falmouth",
    "Sagamore Beach",
    "Marstons Mills",
    "South Yarmouth",
    "North Egremont",
    "South Egremont",
    "Raynham Center",
    "Westport Point",
    "Vineyard Haven",
    "South Hamilton",
    "Indian Orchard",
    "North Hatfield",
    "Milton Village",
    "South Weymouth",
    "North Weymouth",
    "North Scituate",
    "North Pembroke",
    "East Templeton",
    "Charlton Depot",
    "North Uxbridge",
    "East Cambridge",
    "North Westport",
    "East Falmouth",
    "East Sandwich",
    "West Falmouth",
    "North Chatham",
    "North Eastham",
    "South Chatham",
    "South Harwich",
    "South Orleans",
    "West Yarmouth",
    "Yarmouth Port",
    "East Freetown",
    "North Dighton",
    "North Andover",
    "Lake Pleasant",
    "Millers Falls",
    "Monroe Bridge",
    "Turners Falls",
    "Wendell Depot",
    "Feeding Hills",
    "North Amherst",
    "West Hatfield",
    "West Townsend",
    "North Reading",
    "North Waltham",
    "Newton Center",
    "Chestnut Hill",
    "South Walpole",
    "East Weymouth",
    "Jamaica Plain",
    "Charlton City",
    "New Braintree",
    "North Grafton",
    "South Grafton",
    "West Boylston",
    "West Millbury",
    "Cherry Valley",
    "Buzzards Bay",
    "East Orleans",
    "Harwich Port",
    "Hyannis Port",
    "Provincetown",
    "South Dennis",
    "West Chatham",
    "West Harwich",
    "Ashley Falls",
    "Lanesborough",
    "Williamstown",
    "North Easton",
    "South Easton",
    "East Taunton",
    "West Tisbury",
    "West Boxford",
    "West Newbury",
    "Three Rivers",
    "Chesterfield",
    "South Hadley",
    "Williamsburg",
    "Nutting Lake",
    "West Medford",
    "East Walpole",
    "Sheldonville",
    "Green Harbor",
    "North Carver",
    "South Carver",
    "East Wareham",
    "West Wareham",
    "Mattapoisett",
    "West Roxbury",
    "Gilbertville",
    "Baldwinville",
    "Northborough",
    "North Oxford",
    "Whitinsville",
    "Southborough",
    "South Boston",
    "West Methuen",
    "Centerville",
    "Dennis Port",
    "East Dennis",
    "North Truro",
    "West Dennis",
    "North Adams",
    "Sandisfield",
    "Stockbridge",
    "New Bedford",
    "Newburyport",
    "Bernardston",
    "Springfield",
    "Belchertown",
    "Easthampton",
    "Haydenville",
    "Northampton",
    "Southampton",
    "Worthington",
    "Middlefield",
    "West Groton",
    "Hanscom Afb",
    "Marlborough",
    "Newtonville",
    "West Newton",
    "Babson Park",
    "Ocean Bluff",
    "Bridgewater",
    "Bryantville",
    "Charlestown",
    "South Barre",
    "West Warren",
    "Wheelwright",
    "Westminster",
    "Hubbardston",
    "Still River",
    "Northbridge",
    "Southbridge",
    "Westborough",
    "East Boston",
    "Woods Hole",
    "Barnstable",
    "Forestdale",
    "Osterville",
    "Pittsfield",
    "Housatonic",
    "Lenox Dale",
    "Mill River",
    "Southfield",
    "Fall River",
    "Oak Bluffs",
    "Georgetown",
    "Swampscott",
    "Gloucester",
    "Manchester",
    "Marblehead",
    "Shutesbury",
    "Greenfield",
    "Charlemont",
    "Northfield",
    "Sunderland",
    "Bondsville",
    "Longmeadow",
    "Cummington",
    "Huntington",
    "Plainfield",
    "Framingham",
    "Boxborough",
    "Burlington",
    "Chelmsford",
    "Wilmington",
    "Winchester",
    "Somerville",
    "Auburndale",
    "Siasconset",
    "Bellingham",
    "Plainville",
    "Brant Rock",
    "Marshfield",
    "Middleboro",
    "Monponsett",
    "Dorchester",
    "Roslindale",
    "Ashburnham",
    "Leominster",
    "Winchendon",
    "Blackstone",
    "Brookfield",
    "Shrewsbury",
    "Sturbridge",
    "Cummaquid",
    "Wellfleet",
    "East Otis",
    "Berkshire",
    "Sheffield",
    "South Lee",
    "Tyringham",
    "Mansfield",
    "Attleboro",
    "Dartmouth",
    "Fairhaven",
    "Edgartown",
    "Cuttyhunk",
    "Haverhill",
    "Groveland",
    "Lynnfield",
    "Middleton",
    "Salisbury",
    "Topsfield",
    "Deerfield",
    "New Salem",
    "Blandford",
    "Brimfield",
    "Granville",
    "Southwick",
    "Thorndike",
    "Westfield",
    "Wilbraham",
    "Littleton",
    "Pepperell",
    "Holliston",
    "Hopkinton",
    "Woodville",
    "Billerica",
    "Dunstable",
    "Pinehurst",
    "Tewksbury",
    "Tyngsboro",
    "Wakefield",
    "Cambridge",
    "Lexington",
    "Watertown",
    "Arlington",
    "Nantucket",
    "Stoughton",
    "Braintree",
    "Brookline",
    "Wellesley",
    "Greenbush",
    "Lakeville",
    "Rochester",
    "Hyde Park",
    "Readville",
    "Petersham",
    "Royalston",
    "Fitchburg",
    "Lunenburg",
    "Templeton",
    "Jefferson",
    "Lancaster",
    "Leicester",
    "Millville",
    "Princeton",
    "Worcester",
    "Cataumet",
    "Falmouth",
    "Pocasset",
    "Sagamore",
    "Sandwich",
    "Brewster",
    "Cheshire",
    "Glendale",
    "Hinsdale",
    "Monterey",
    "Richmond",
    "Chartley",
    "Somerset",
    "Acushnet",
    "Rehoboth",
    "Westport",
    "Chilmark",
    "Menemsha",
    "Lawrence",
    "Merrimac",
    "Amesbury",
    "Hamilton",
    "Hathorne",
    "Rockport",
    "Leverett",
    "Ashfield",
    "Buckland",
    "Montague",
    "Chicopee",
    "Woronoco",
    "Hatfield",
    "Florence",
    "Townsend",
    "Carlisle",
    "Sherborn",
    "Westford",
    "Stoneham",
    "New Town",
    "Waverley",
    "Nonantum",
    "Cohasset",
    "Franklin",
    "Medfield",
    "Westwood",
    "Wrentham",
    "Weymouth",
    "Holbrook",
    "Randolph",
    "Humarock",
    "Scituate",
    "Brockton",
    "Abington",
    "Pembroke",
    "Plymouth",
    "Kingston",
    "Plympton",
    "Rockland",
    "Mattapan",
    "Brighton",
    "Winthrop",
    "Hardwick",
    "Boylston",
    "Charlton",
    "Fiskdale",
    "Manchaug",
    "Millbury",
    "Rochdale",
    "Sterling",
    "Uxbridge",
    "Fayville",
    "Hopedale",
    "Hyannis",
    "Chatham",
    "Eastham",
    "Harwich",
    "Mashpee",
    "Orleans",
    "Windsor",
    "Assonet",
    "Dighton",
    "Raynham",
    "Seekonk",
    "Swansea",
    "Berkley",
    "Taunton",
    "Andover",
    "Methuen",
    "Beverly",
    "Boxford",
    "Byfield",
    "Danvers",
    "Ipswich",
    "Newbury",
    "Peabody",
    "Whately",
    "Colrain",
    "Warwick",
    "Wendell",
    "Chester",
    "Hampden",
    "Holyoke",
    "Russell",
    "Holland",
    "Amherst",
    "Shirley",
    "Ashland",
    "Bedford",
    "Concord",
    "Maynard",
    "Lincoln",
    "Sudbury",
    "Wayland",
    "Reading",
    "Everett",
    "Medford",
    "Melrose",
    "Waltham",
    "Belmont",
    "Foxboro",
    "Norfolk",
    "Norwood",
    "Walpole",
    "Needham",
    "Hingham",
    "Norwell",
    "Duxbury",
    "Elmwood",
    "Halifax",
    "Hanover",
    "Manomet",
    "Whitman",
    "Wareham",
    "Roxbury",
    "Allston",
    "Chelsea",
    "Gardner",
    "Harvard",
    "Clinton",
    "Douglas",
    "Grafton",
    "Linwood",
    "Rutland",
    "Spencer",
    "Webster",
    "Milford",
    "Cotuit",
    "Dennis",
    "Becket",
    "Dalton",
    "Easton",
    "Norton",
    "Saugus",
    "Nahant",
    "Rowley",
    "Wenham",
    "Conway",
    "Erving",
    "Orange",
    "Agawam",
    "Ludlow",
    "Monson",
    "Palmer",
    "Goshen",
    "Granby",
    "Hadley",
    "Groton",
    "Hudson",
    "Natick",
    "Woburn",
    "Dracut",
    "Lowell",
    "Malden",
    "Boston",
    "Newton",
    "Weston",
    "Canton",
    "Dedham",
    "Medway",
    "Millis",
    "Sharon",
    "Quincy",
    "Milton",
    "Accord",
    "Carver",
    "Hanson",
    "Marion",
    "Revere",
    "Oakham",
    "Warren",
    "Devens",
    "Auburn",
    "Berlin",
    "Holden",
    "Oxford",
    "Dudley",
    "Sutton",
    "Paxton",
    "Bolton",
    "Mendon",
    "Truro",
    "Adams",
    "Lenox",
    "Savoy",
    "Drury",
    "Essex",
    "Salem",
    "Heath",
    "Wales",
    "Leeds",
    "Ashby",
    "Acton",
    "Waban",
    "Dover",
    "Minot",
    "Onset",
    "Barre",
    "Athol",
    "Upton",
    "Otis",
    "Lynn",
    "Gill",
    "Rowe",
    "Ware",
    "Ayer",
    "Stow",
    "Avon",
    "Hull",
    "Lee",
  ],
  pI = [
    "Houghton Lake Heights",
    "Sault Sainte Marie",
    "Saint Clair Shores",
    "University Center",
    "Harrison Township",
    "Commerce Township",
    "Clinton Township",
    "Sterling Heights",
    "Huntington Woods",
    "Bloomfield Hills",
    "Dearborn Heights",
    "Hickory Corners",
    "Berrien Springs",
    "De Tour Village",
    "Drummond Island",
    "Somerset Center",
    "Michigan Center",
    "Mackinac Island",
    "Pointe Aux Pins",
    "Madison Heights",
    "West Bloomfield",
    "Berrien Center",
    "Harbor Springs",
    "Mount Pleasant",
    "Rives Junction",
    "South Boardman",
    "South Rockwood",
    "Pleasant Ridge",
    "Drayton Plains",
    "Bruce Crossing",
    "Harsens Island",
    "Grand Junction",
    "Eben Junction",
    "Thompsonville",
    "Benton Harbor",
    "Beaver Island",
    "Mackinaw City",
    "Iron Mountain",
    "Cross Village",
    "Traverse City",
    "Atlantic Mine",
    "National City",
    "Crystal Falls",
    "Pleasant Lake",
    "Cedar Springs",
    "Comstock Park",
    "Copper Harbor",
    "Columbiaville",
    "Lake Leelanau",
    "Manitou Beach",
    "Mount Clemens",
    "New Baltimore",
    "National Mine",
    "Chippewa Lake",
    "Houghton Lake",
    "Saint Charles",
    "Whitmore Lake",
    "Highland Park",
    "Grosse Pointe",
    "Grand Marais",
    "Hubbard Lake",
    "Central Lake",
    "Hagar Shores",
    "Saint Joseph",
    "Stevensville",
    "Battle Creek",
    "Walloon Lake",
    "Indian River",
    "Mullett Lake",
    "Maple Rapids",
    "Eaton Rapids",
    "Vermontville",
    "Mount Morris",
    "Swartz Creek",
    "Williamsburg",
    "Breckenridge",
    "Harbor Beach",
    "East Lansing",
    "Spring Arbor",
    "Byron Center",
    "Grand Rapids",
    "North Branch",
    "Saint Ignace",
    "Hermansville",
    "Lambertville",
    "Sylvan Beach",
    "Keego Harbor",
    "Auburn Hills",
    "South Branch",
    "Johannesburg",
    "Coopersville",
    "Presque Isle",
    "Higgins Lake",
    "North Street",
    "Fort Gratiot",
    "Smiths Creek",
    "Three Rivers",
    "White Pigeon",
    "Port Sanilac",
    "Bloomingdale",
    "Lincoln Park",
    "Harper Woods",
    "Barton City",
    "Black River",
    "Harrisville",
    "Shelbyville",
    "Middleville",
    "New Buffalo",
    "Edwardsburg",
    "Boyne Falls",
    "East Jordan",
    "Lake George",
    "Saint Johns",
    "Rapid River",
    "Foster City",
    "Grand Ledge",
    "Potterville",
    "Grand Blanc",
    "Interlochen",
    "Old Mission",
    "Saint Louis",
    "Mosherville",
    "North Adams",
    "Copper City",
    "Lake Linden",
    "South Range",
    "Port Austin",
    "Webberville",
    "Williamston",
    "Stockbridge",
    "Clarksville",
    "Hubbardston",
    "Lake Odessa",
    "Schoolcraft",
    "Cannonsburg",
    "Suttons Bay",
    "Cement City",
    "Fowlerville",
    "Center Line",
    "Little Lake",
    "Perronville",
    "Ottawa Lake",
    "Carson City",
    "Howard City",
    "White Cloud",
    "Walled Lake",
    "Walkerville",
    "West Branch",
    "Trout Creek",
    "Grand Haven",
    "Hudsonville",
    "Spring Lake",
    "Millersburg",
    "Rogers City",
    "Prudenville",
    "Saint Helen",
    "Frankenmuth",
    "Anchorville",
    "Marine City",
    "Saint Clair",
    "Centreville",
    "Constantine",
    "Carsonville",
    "Deckerville",
    "Forestville",
    "Minden City",
    "New Lothrop",
    "Breedsville",
    "South Haven",
    "Bridgewater",
    "Garden City",
    "River Rouge",
    "Sylvan Lake",
    "Shingleton",
    "Elk Rapids",
    "Cloverdale",
    "Pinconning",
    "Essexville",
    "Watervliet",
    "Eau Claire",
    "Three Oaks",
    "Union Pier",
    "Union City",
    "Montgomery",
    "Burlington",
    "East Leroy",
    "Cassopolis",
    "Boyne City",
    "Charlevoix",
    "Goetzville",
    "Trout Lake",
    "Westphalia",
    "Bark River",
    "Watersmeet",
    "North Star",
    "Jonesville",
    "Litchfield",
    "Dodgeville",
    "Dollar Bay",
    "Painesdale",
    "East Tawas",
    "Tawas City",
    "Whittemore",
    "Iron River",
    "Grass Lake",
    "Springport",
    "Rapid City",
    "Grandville",
    "Imlay City",
    "Otter Lake",
    "Silverwood",
    "Glen Arbor",
    "Maple City",
    "Blissfield",
    "Sand Creek",
    "Cedarville",
    "Gould City",
    "Eastpointe",
    "Washington",
    "Filer City",
    "Michigamme",
    "Scottville",
    "Big Rapids",
    "Stephenson",
    "Temperance",
    "Petersburg",
    "Cedar Lake",
    "Greenville",
    "Birmingham",
    "Hazel Park",
    "Southfield",
    "New Hudson",
    "South Lyon",
    "Farmington",
    "Lake Orion",
    "White Lake",
    "Union Lake",
    "Ortonville",
    "White Pine",
    "Vanderbilt",
    "Ferrysburg",
    "West Olive",
    "Bridgeport",
    "Carrollton",
    "Fair Haven",
    "Marysville",
    "East China",
    "Port Huron",
    "Brown City",
    "Manistique",
    "Laingsburg",
    "Shaftsburg",
    "Millington",
    "Unionville",
    "Manchester",
    "Allen Park",
    "Belleville",
    "Melvindale",
    "Grosse Ile",
    "New Boston",
    "Northville",
    "Greenbush",
    "Plainwell",
    "Fennville",
    "Saugatuck",
    "Mancelona",
    "Ellsworth",
    "Covington",
    "Nashville",
    "Kawkawlin",
    "Frankfort",
    "Riverside",
    "Coldwater",
    "Marcellus",
    "Bay Shore",
    "Burt Lake",
    "Cheboygan",
    "Topinabee",
    "Wolverine",
    "Kincheloe",
    "Gladstone",
    "Kingsford",
    "Quinnesec",
    "Charlotte",
    "Dimondale",
    "Carp Lake",
    "Good Hart",
    "Otisville",
    "Beaverton",
    "Marenisco",
    "Wakefield",
    "Fife Lake",
    "Bannister",
    "Middleton",
    "Perrinton",
    "Riverdale",
    "Hillsdale",
    "Pittsford",
    "Kearsarge",
    "Port Hope",
    "Caseville",
    "Sebewaing",
    "Dansville",
    "Long Lake",
    "Stambaugh",
    "Blanchard",
    "Clarklake",
    "Kalamazoo",
    "Galesburg",
    "Vicksburg",
    "Caledonia",
    "Kent City",
    "Sand Lake",
    "Northport",
    "Deerfield",
    "Mc Millan",
    "Naubinway",
    "New Haven",
    "Roseville",
    "Bear Lake",
    "Ishpeming",
    "Marquette",
    "Free Soil",
    "Ludington",
    "Menominee",
    "Edenville",
    "Lake City",
    "Luna Pier",
    "Six Lakes",
    "Vestaburg",
    "Fruitport",
    "Twin Lake",
    "Whitehall",
    "Royal Oak",
    "Rochester",
    "Waterford",
    "Clarkston",
    "Davisburg",
    "Lakeville",
    "Pentwater",
    "Rose City",
    "Greenland",
    "Mass City",
    "Ontonagon",
    "Reed City",
    "Allendale",
    "Jamestown",
    "Roscommon",
    "Birch Run",
    "Chesaning",
    "Applegate",
    "Lexington",
    "Henderson",
    "Cass City",
    "Fairgrove",
    "Richville",
    "Ann Arbor",
    "Whittaker",
    "Ypsilanti",
    "Flat Rock",
    "Wyandotte",
    "Riverview",
    "Southgate",
    "Hamtramck",
    "Harrietta",
    "Au Train",
    "Munising",
    "Hamilton",
    "Ossineke",
    "Bellaire",
    "Eastport",
    "Standish",
    "Sterling",
    "Woodland",
    "Hastings",
    "Freeport",
    "Bay City",
    "Benzonia",
    "Lake Ann",
    "Bridgman",
    "Buchanan",
    "Lakeside",
    "New Troy",
    "Sherwood",
    "Marshall",
    "Tekonsha",
    "Dowagiac",
    "Vandalia",
    "Eckerman",
    "Paradise",
    "Pickford",
    "Harrison",
    "Frederic",
    "Grayling",
    "Escanaba",
    "Channing",
    "Mulliken",
    "Sunfield",
    "Bellevue",
    "Levering",
    "Pellston",
    "Petoskey",
    "Flushing",
    "Goodrich",
    "Montrose",
    "Bessemer",
    "Ironwood",
    "Kingsley",
    "Mayfield",
    "Elm Hall",
    "Frontier",
    "Somerset",
    "Chassell",
    "Houghton",
    "Bay Port",
    "Owendale",
    "Onondaga",
    "Portland",
    "Rosebush",
    "Shepherd",
    "Brooklyn",
    "Napoleon",
    "Comstock",
    "Nazareth",
    "Richland",
    "Kalkaska",
    "Rockford",
    "Idlewild",
    "Metamora",
    "Clifford",
    "Tecumseh",
    "Brighton",
    "Lakeland",
    "Pinckney",
    "Hartland",
    "Cohoctah",
    "Newberry",
    "Engadine",
    "Richmond",
    "Brethren",
    "Copemish",
    "Eastlake",
    "Manistee",
    "Wellston",
    "Champion",
    "Negaunee",
    "Republic",
    "Fountain",
    "Walhalla",
    "Barryton",
    "Stanwood",
    "Spalding",
    "Falmouth",
    "Carleton",
    "La Salle",
    "Lakeview",
    "Mcbrides",
    "Sheridan",
    "Lewiston",
    "Casnovia",
    "Montague",
    "Muskegon",
    "Franklin",
    "Ferndale",
    "Oak Park",
    "Highland",
    "Hesperia",
    "Rothbury",
    "Prescott",
    "Bergland",
    "Rockland",
    "Fairview",
    "Macatawa",
    "Freeland",
    "Allenton",
    "Goodells",
    "Columbus",
    "Burr Oak",
    "Leonidas",
    "Croswell",
    "Marlette",
    "Sandusky",
    "Germfask",
    "Gulliver",
    "Bancroft",
    "Fostoria",
    "Gagetown",
    "Kingston",
    "Mayville",
    "Hartford",
    "Lawrence",
    "Mattawan",
    "Dearborn",
    "Plymouth",
    "Rockwood",
    "Westland",
    "Cadillac",
    "Glennie",
    "Lincoln",
    "Chatham",
    "Deerton",
    "Trenary",
    "Wetmore",
    "Allegan",
    "Bradley",
    "Burnips",
    "Hopkins",
    "Wayland",
    "Douglas",
    "Pullman",
    "Lachine",
    "Kewadin",
    "Au Gres",
    "Twining",
    "Dowling",
    "Bentley",
    "Linwood",
    "Elberta",
    "Harbert",
    "Bronson",
    "Bedford",
    "Ceresco",
    "Barbeau",
    "Brimley",
    "Hulbert",
    "Kinross",
    "Rudyard",
    "Farwell",
    "Cornell",
    "Perkins",
    "Loretto",
    "Lansing",
    "Alanson",
    "Davison",
    "Genesee",
    "Gladwin",
    "Saginaw",
    "Wheeler",
    "Pompeii",
    "Reading",
    "Waldron",
    "Calumet",
    "Hancock",
    "Hubbell",
    "Toivola",
    "Bad Axe",
    "Haslett",
    "Belding",
    "Orleans",
    "Saranac",
    "Caspian",
    "Gaastra",
    "Weidman",
    "Jackson",
    "Concord",
    "Hanover",
    "Norvell",
    "Portage",
    "Augusta",
    "Oshtemo",
    "Belmont",
    "Wyoming",
    "Allouez",
    "Baldwin",
    "Addison",
    "Britton",
    "Clayton",
    "Clinton",
    "Morenci",
    "Palmyra",
    "Gregory",
    "Hamburg",
    "Arcadia",
    "Onekama",
    "Big Bay",
    "Skandia",
    "Mecosta",
    "Daggett",
    "Ingalls",
    "Wallace",
    "Coleman",
    "Midland",
    "Sanford",
    "Mc Bain",
    "Merritt",
    "Newport",
    "Samaria",
    "Crystal",
    "Fenwick",
    "Stanton",
    "Pierson",
    "Trufant",
    "Atlanta",
    "Hillman",
    "Ravenna",
    "Brohman",
    "Newaygo",
    "Fremont",
    "Clawson",
    "Berkley",
    "Pontiac",
    "Oakland",
    "Leonard",
    "Milford",
    "New Era",
    "Luzerne",
    "Gaylord",
    "Conklin",
    "Holland",
    "Jenison",
    "Zeeland",
    "Hemlock",
    "Merrill",
    "Algonac",
    "Memphis",
    "Nottawa",
    "Sturgis",
    "Corunna",
    "Morrice",
    "Decatur",
    "Kendall",
    "Paw Paw",
    "Chelsea",
    "Inkster",
    "Livonia",
    "Romulus",
    "Trenton",
    "Detroit",
    "Redford",
    "Buckley",
    "Curran",
    "Mikado",
    "Spruce",
    "Rumely",
    "Martin",
    "Otsego",
    "Moline",
    "Alpena",
    "Herron",
    "Turner",
    "Baraga",
    "Skanee",
    "Watton",
    "Delton",
    "Auburn",
    "Munger",
    "Beulah",
    "Coloma",
    "Baroda",
    "Galien",
    "Sawyer",
    "Quincy",
    "Athens",
    "Albion",
    "Brutus",
    "Dafter",
    "Dewitt",
    "Eureka",
    "Fowler",
    "Garden",
    "Norway",
    "Sagola",
    "Vulcan",
    "Olivet",
    "Conway",
    "Fenton",
    "Gaines",
    "Lennon",
    "Linden",
    "Burton",
    "Rhodes",
    "Ramsay",
    "Ashley",
    "Elwell",
    "Ithaca",
    "Sumner",
    "Camden",
    "Jerome",
    "Moscow",
    "Nisula",
    "Pelkie",
    "Sidnaw",
    "Filion",
    "Elkton",
    "Pigeon",
    "Okemos",
    "Leslie",
    "Pewamo",
    "Smyrna",
    "Oscoda",
    "Horton",
    "Munith",
    "Climax",
    "Fulton",
    "Scotts",
    "Lowell",
    "Sparta",
    "Ahmeek",
    "Mohawk",
    "Branch",
    "Luther",
    "Almont",
    "Attica",
    "Dryden",
    "Hadley",
    "Lapeer",
    "Empire",
    "Leland",
    "Adrian",
    "Hudson",
    "Jasper",
    "Onsted",
    "Tipton",
    "Weston",
    "Howell",
    "Hessel",
    "Curtis",
    "Armada",
    "Fraser",
    "Macomb",
    "Warren",
    "Kaleva",
    "Arnold",
    "Palmer",
    "Custer",
    "Morley",
    "Rodney",
    "Carney",
    "Harris",
    "Nadeau",
    "Powers",
    "Wilson",
    "Azalia",
    "Dundee",
    "Maybee",
    "Monroe",
    "Edmore",
    "Sidney",
    "Bailey",
    "Holton",
    "Bitely",
    "Oxford",
    "Shelby",
    "Lupton",
    "Hersey",
    "Marion",
    "Tustin",
    "Comins",
    "Elmira",
    "Waters",
    "Lamont",
    "Nunica",
    "Onaway",
    "Oakley",
    "Emmett",
    "Mendon",
    "Argyle",
    "Decker",
    "Melvin",
    "Snover",
    "Durand",
    "Vernon",
    "Owosso",
    "Deford",
    "Vassar",
    "Bangor",
    "Covert",
    "Gobles",
    "Lacota",
    "Lawton",
    "Dexter",
    "Saline",
    "Willis",
    "Taylor",
    "Canton",
    "Ecorse",
    "Manton",
    "Mesick",
    "Glenn",
    "Alden",
    "Lanse",
    "Honor",
    "Niles",
    "Sodus",
    "Homer",
    "Jones",
    "Union",
    "Afton",
    "Tower",
    "Clare",
    "Eagle",
    "Elsie",
    "Nahma",
    "Wells",
    "Felch",
    "Ralph",
    "Atlas",
    "Flint",
    "Grawn",
    "Allen",
    "Osseo",
    "Kinde",
    "Mason",
    "Ionia",
    "Lyons",
    "Alpha",
    "Amasa",
    "Parma",
    "Chase",
    "Irons",
    "Cedar",
    "Omena",
    "Moran",
    "Romeo",
    "Utica",
    "Gwinn",
    "Paris",
    "Remus",
    "Milan",
    "Coral",
    "Gowen",
    "Grant",
    "Wixom",
    "Holly",
    "Mears",
    "Alger",
    "Evart",
    "Leroy",
    "Sears",
    "Marne",
    "Hawks",
    "Posen",
    "Brant",
    "Avoca",
    "Capac",
    "Jeddo",
    "Casco",
    "Colon",
    "Palms",
    "Cooks",
    "Seney",
    "Byron",
    "Perry",
    "Akron",
    "Reese",
    "Salem",
    "Wayne",
    "Dorr",
    "Alba",
    "Omer",
    "Lake",
    "Bath",
    "Ovid",
    "Rock",
    "Oden",
    "Clio",
    "Acme",
    "Alma",
    "Ruth",
    "Ubly",
    "Holt",
    "Muir",
    "Palo",
    "Hale",
    "Winn",
    "Alto",
    "Riga",
    "Hope",
    "Erie",
    "Troy",
    "Novi",
    "Hart",
    "Ewen",
    "Burt",
    "Yale",
    "Peck",
    "Caro",
    "Boon",
    "Ada",
    "Ray",
    "Ida",
    "Mio",
  ],
  yI = [
    "South International Falls",
    "Norwood Young America",
    "Marine On Saint Croix",
    "Inver Grove Heights",
    "International Falls",
    "Thief River Falls",
    "South Saint Paul",
    "Minnetonka Beach",
    "Saint Bonifacius",
    "East Grand Forks",
    "Blooming Prairie",
    "North Saint Paul",
    "Spring Lake Park",
    "Parkers Prairie",
    "Elko New Market",
    "Saint Paul Park",
    "Minnesota Lake",
    "Lester Prairie",
    "New York Mills",
    "Pelican Rapids",
    "Red Lake Falls",
    "Minnesota City",
    "Saint Francis",
    "Detroit Lakes",
    "Vernon Center",
    "Young America",
    "Ah Gwah Ching",
    "Taylors Falls",
    "Grand Portage",
    "Mountain Lake",
    "Spring Valley",
    "Saint Vincent",
    "Saint Hilaire",
    "Sturgeon Lake",
    "Redwood Falls",
    "Mountain Iron",
    "Saint Stephen",
    "Browns Valley",
    "Reads Landing",
    "Cottage Grove",
    "Saint Charles",
    "Saint Michael",
    "Granite Falls",
    "Little Canada",
    "Circle Pines",
    "Good Thunder",
    "Lake Crystal",
    "Madison Lake",
    "Kettle River",
    "Chisago City",
    "North Branch",
    "Grand Marais",
    "Bingham Lake",
    "Pequot Lakes",
    "Dodge Center",
    "West Concord",
    "Clarks Grove",
    "Cannon Falls",
    "Eden Prairie",
    "Spring Grove",
    "Grand Rapids",
    "Lake Lillian",
    "Lake Bronson",
    "Middle River",
    "Little Falls",
    "Grand Meadow",
    "Stewartville",
    "Fergus Falls",
    "Willow River",
    "Walnut Grove",
    "Buffalo Lake",
    "Sacred Heart",
    "Beaver Creek",
    "Belle Plaine",
    "Collegeville",
    "Saint Joseph",
    "Saint Martin",
    "Long Prairie",
    "Zumbro Falls",
    "New Richland",
    "Breckenridge",
    "Rollingstone",
    "Silver Creek",
    "Hanley Falls",
    "Minneapolis",
    "White Earth",
    "Sauk Rapids",
    "Garden City",
    "Saint Clair",
    "Springfield",
    "New Germany",
    "Federal Dam",
    "Center City",
    "Barnesville",
    "Fifty Lakes",
    "Fort Ripley",
    "Lake Hubert",
    "Castle Rock",
    "Mantorville",
    "Holmes City",
    "Pine Island",
    "Maple Grove",
    "Crystal Bay",
    "Maple Plain",
    "Spring Park",
    "Howard Lake",
    "Brownsville",
    "La Crescent",
    "Lake George",
    "Park Rapids",
    "Stanchfield",
    "Spring Lake",
    "Knife River",
    "Two Harbors",
    "Angle Inlet",
    "Lake Benton",
    "Silver Lake",
    "Naytahwaush",
    "Strandquist",
    "Eden Valley",
    "Lake Wilson",
    "Saint Peter",
    "Worthington",
    "Twin Valley",
    "Battle Lake",
    "Bird Island",
    "Meadowlands",
    "Saint Cloud",
    "Cold Spring",
    "Holdingford",
    "Paynesville",
    "Sauk Centre",
    "Browerville",
    "Forest Lake",
    "Saint James",
    "Butterfield",
    "Albertville",
    "South Haven",
    "Arden Hills",
    "Pennington",
    "Graceville",
    "Ortonville",
    "Eagle Lake",
    "Sleepy Eye",
    "Moose Lake",
    "Chanhassen",
    "Hackensack",
    "Pine River",
    "Clara City",
    "Montevideo",
    "Georgetown",
    "Clearbrook",
    "Merrifield",
    "Farmington",
    "Vermillion",
    "Saint Paul",
    "Burnsville",
    "Alexandria",
    "Evansville",
    "Kensington",
    "Blue Earth",
    "Albert Lea",
    "Hollandale",
    "Twin Lakes",
    "Elbow Lake",
    "Minnetonka",
    "Swan River",
    "Deer River",
    "Squaw Lake",
    "Heron Lake",
    "New London",
    "Littlefork",
    "Kabetogama",
    "Bellingham",
    "Beaver Bay",
    "Silver Bay",
    "Oak Island",
    "Montgomery",
    "New Prague",
    "Waterville",
    "Cottonwood",
    "Hutchinson",
    "Litchfield",
    "Grove City",
    "Waite Park",
    "Brownsdale",
    "Rose Creek",
    "Round Lake",
    "Clitherall",
    "Deer Creek",
    "Brook Park",
    "Rock Creek",
    "Nielsville",
    "Morristown",
    "Northfield",
    "Strathcona",
    "Crane Lake",
    "Hoyt Lakes",
    "Prior Lake",
    "Clear Lake",
    "Green Isle",
    "New Auburn",
    "New Munich",
    "Grey Eagle",
    "West Union",
    "Eagle Bend",
    "Janesville",
    "Stillwater",
    "Lewisville",
    "Clearwater",
    "Maple Lake",
    "Monticello",
    "Clarkfield",
    "Hill City",
    "Lake Park",
    "Wolf Lake",
    "Blackduck",
    "Tenstrike",
    "Beardsley",
    "Pemberton",
    "Wrenshall",
    "Watertown",
    "Cass Lake",
    "Longville",
    "Lindstrom",
    "Rush City",
    "Hitterdal",
    "Schroeder",
    "Westbrook",
    "Crosslake",
    "Lakeville",
    "Rosemount",
    "Claremont",
    "Winnebago",
    "Chatfield",
    "Lanesboro",
    "Ostrander",
    "Glenville",
    "Frontenac",
    "Wanamingo",
    "Excelsior",
    "Long Lake",
    "Caledonia",
    "Cambridge",
    "Coleraine",
    "Bowstring",
    "Lakefield",
    "Kandiyohi",
    "Prinsburg",
    "Donaldson",
    "Lancaster",
    "Big Falls",
    "Birchdale",
    "Cleveland",
    "Le Center",
    "Hendricks",
    "Newfolden",
    "Princeton",
    "Flensburg",
    "Swanville",
    "Courtland",
    "Lafayette",
    "Ellsworth",
    "Rochester",
    "Elizabeth",
    "Ottertail",
    "Richville",
    "Underwood",
    "Goodridge",
    "Henriette",
    "Pine City",
    "Sandstone",
    "Finlayson",
    "Pipestone",
    "Woodstock",
    "Crookston",
    "Lamberton",
    "Faribault",
    "Nerstrand",
    "Kanaranzi",
    "Roosevelt",
    "Greenbush",
    "Brookston",
    "Embarrass",
    "Floodwood",
    "Nett Lake",
    "Side Lake",
    "Elk River",
    "Zimmerman",
    "Arlington",
    "Henderson",
    "Greenwald",
    "Rockville",
    "Ellendale",
    "Kerkhoven",
    "Lake City",
    "Millville",
    "Plainview",
    "Lake Elmo",
    "Willernie",
    "Wolverton",
    "Annandale",
    "Wood Lake",
    "Jacobson",
    "Mcgregor",
    "Tamarack",
    "Mc Grath",
    "Palisade",
    "Callaway",
    "Ponsford",
    "Richwood",
    "Kelliher",
    "Oak Park",
    "Mapleton",
    "Cromwell",
    "Victoria",
    "Pillager",
    "Almelund",
    "Comstock",
    "Dilworth",
    "Moorhead",
    "Brainerd",
    "Deerwood",
    "Garrison",
    "Hastings",
    "Randolph",
    "Hayfield",
    "Garfield",
    "Bricelyn",
    "Fountain",
    "Peterson",
    "Rushford",
    "Freeborn",
    "Hartland",
    "Dennison",
    "Red Wing",
    "Zumbrota",
    "Norcross",
    "Champlin",
    "Rockford",
    "Benedict",
    "Cohasset",
    "Goodland",
    "Keewatin",
    "Nashwauk",
    "Pengilly",
    "Taconite",
    "Blomkest",
    "Humboldt",
    "Karlstad",
    "Northome",
    "Marietta",
    "Isabella",
    "Baudette",
    "Williams",
    "Kilkenny",
    "Le Sueur",
    "Marshall",
    "Minneota",
    "Brownton",
    "Mahnomen",
    "Alvarado",
    "Fairmont",
    "Northrop",
    "Sherburn",
    "Foreston",
    "Royalton",
    "Sargeant",
    "Chandler",
    "Nicollet",
    "Brewster",
    "Rushmore",
    "Bluffton",
    "Grasston",
    "Hinckley",
    "Edgerton",
    "Beltrami",
    "Mcintosh",
    "Glenwood",
    "Starbuck",
    "Clements",
    "Seaforth",
    "Franklin",
    "Renville",
    "Lonsdale",
    "Hardwick",
    "Magnolia",
    "Wannaska",
    "Chisholm",
    "Virginia",
    "Shakopee",
    "Big Lake",
    "Santiago",
    "Winthrop",
    "Belgrade",
    "Freeport",
    "Richmond",
    "Owatonna",
    "Donnelly",
    "Appleton",
    "Clontarf",
    "Holloway",
    "Clarissa",
    "Verndale",
    "Lakeland",
    "La Salle",
    "Campbell",
    "Lewiston",
    "Stockton",
    "Montrose",
    "Swatara",
    "Andover",
    "Audubon",
    "Rochert",
    "Bemidji",
    "Ponemah",
    "Puposky",
    "Redlake",
    "Waskish",
    "Clinton",
    "Correll",
    "Mankato",
    "Comfrey",
    "New Ulm",
    "Searles",
    "Carlton",
    "Cloquet",
    "Holyoke",
    "Cologne",
    "Hamburg",
    "Norwood",
    "Waconia",
    "Maynard",
    "Wyoming",
    "Glyndon",
    "Gonvick",
    "Leonard",
    "Shevlin",
    "Hovland",
    "Jeffers",
    "Storden",
    "Ironton",
    "Jenkins",
    "Hampton",
    "Mendota",
    "Brandon",
    "Miltona",
    "Delavan",
    "Huntley",
    "Kiester",
    "Harmony",
    "Preston",
    "Hayward",
    "Goodhue",
    "Barrett",
    "Hoffman",
    "Wendell",
    "Hopkins",
    "Loretto",
    "Wayzata",
    "Navarre",
    "Houston",
    "Laporte",
    "Calumet",
    "Bigfork",
    "Talmoon",
    "Marcell",
    "Jackson",
    "Okabena",
    "Ogilvie",
    "Willmar",
    "Atwater",
    "Pennock",
    "Raymond",
    "Sunburg",
    "Hallock",
    "Kennedy",
    "Madison",
    "Finland",
    "Elysian",
    "Ivanhoe",
    "Balaton",
    "Russell",
    "Taunton",
    "Glencoe",
    "Stewart",
    "Winsted",
    "Stephen",
    "Granada",
    "Dunnell",
    "Trimont",
    "Welcome",
    "Watkins",
    "Buckman",
    "Hillman",
    "Lastrup",
    "Cushing",
    "Randall",
    "Lansing",
    "Waltham",
    "Slayton",
    "Bigelow",
    "Lismore",
    "Reading",
    "Wilmont",
    "Halstad",
    "Hendrum",
    "Oronoco",
    "Henning",
    "Kerrick",
    "Holland",
    "Ruthton",
    "Erskine",
    "Fertile",
    "Fosston",
    "Farwell",
    "Villard",
    "Plummer",
    "Sanborn",
    "Belview",
    "Wabasso",
    "Fairfax",
    "Webster",
    "Kenneth",
    "Luverne",
    "Warroad",
    "Brimson",
    "Babbitt",
    "Biwabik",
    "Eveleth",
    "Gilbert",
    "Hibbing",
    "Makinen",
    "Melrude",
    "Saginaw",
    "Gaylord",
    "Kimball",
    "Brooten",
    "Melrose",
    "Sartell",
    "Medford",
    "Alberta",
    "Hancock",
    "Danvers",
    "Murdock",
    "Burtrum",
    "Staples",
    "Wheaton",
    "Kellogg",
    "Mazeppa",
    "Wabasha",
    "Aldrich",
    "Menahga",
    "Waldorf",
    "Bayport",
    "Newport",
    "Scandia",
    "Madelia",
    "Foxhome",
    "Rothsay",
    "Buffalo",
    "Hanover",
    "Waverly",
    "Aitkin",
    "Bethel",
    "Frazee",
    "Solway",
    "Wilton",
    "Gilman",
    "Odessa",
    "Hanska",
    "Barnum",
    "Sawyer",
    "Wright",
    "Carver",
    "Chaska",
    "Backus",
    "Walker",
    "Outing",
    "Watson",
    "Harris",
    "Shafer",
    "Felton",
    "Hawley",
    "Bagley",
    "Lutsen",
    "Windom",
    "Baxter",
    "Crosby",
    "Nisswa",
    "Kasson",
    "Carlos",
    "Nelson",
    "Osakis",
    "Easton",
    "Elmore",
    "Canton",
    "Wykoff",
    "Conger",
    "Emmons",
    "Geneva",
    "Kenyon",
    "Herman",
    "Dayton",
    "Rogers",
    "Eitzen",
    "Akeley",
    "Braham",
    "Grandy",
    "Isanti",
    "Marble",
    "Spicer",
    "Margie",
    "Mizpah",
    "Ranier",
    "Dawson",
    "Kasota",
    "Garvin",
    "Waubun",
    "Argyle",
    "Gatzke",
    "Grygla",
    "Viking",
    "Warren",
    "Truman",
    "Ceylon",
    "Ormsby",
    "Darwin",
    "Dassel",
    "Cosmos",
    "Milaca",
    "Onamia",
    "Wahkon",
    "Bowlus",
    "Upsala",
    "Motley",
    "Austin",
    "Dexter",
    "Elkton",
    "Le Roy",
    "Racine",
    "Currie",
    "Dovray",
    "Adrian",
    "Perley",
    "Shelly",
    "Dalton",
    "Erhard",
    "Perham",
    "Vergas",
    "Vining",
    "Jasper",
    "Climax",
    "Winger",
    "Lengby",
    "Euclid",
    "Fisher",
    "Mentor",
    "Brooks",
    "Revere",
    "Milroy",
    "Morgan",
    "Hector",
    "Danube",
    "Morton",
    "Olivia",
    "Dundas",
    "Warsaw",
    "Badger",
    "Roseau",
    "Alborn",
    "Angora",
    "Aurora",
    "Canyon",
    "Cotton",
    "Forbes",
    "Kinney",
    "Soudan",
    "Winton",
    "Duluth",
    "Jordan",
    "Savage",
    "Becker",
    "Gibbon",
    "Albany",
    "Elrosa",
    "Roscoe",
    "Chokio",
    "Morris",
    "Benson",
    "Bertha",
    "Hewitt",
    "Dumont",
    "Tintah",
    "Sebeka",
    "Wadena",
    "Waseca",
    "Darfur",
    "Nashua",
    "Altura",
    "Dakota",
    "Winona",
    "Cokato",
    "Delano",
    "Porter",
    "Cedar",
    "Anoka",
    "Ogema",
    "Osage",
    "Hines",
    "Redby",
    "Foley",
    "Barry",
    "Amboy",
    "Essig",
    "Mayer",
    "Remer",
    "Milan",
    "Stacy",
    "Sabin",
    "Tofte",
    "Emily",
    "Frost",
    "Wells",
    "Mabel",
    "Alden",
    "Welch",
    "Ashby",
    "Hamel",
    "Mound",
    "Osseo",
    "Hokah",
    "Nevis",
    "Dalbo",
    "Bovey",
    "Warba",
    "Effie",
    "Alpha",
    "Halma",
    "Noyes",
    "Loman",
    "Tyler",
    "Tracy",
    "Ghent",
    "Plato",
    "Bejou",
    "Pease",
    "Pierz",
    "Adams",
    "Taopi",
    "Avoca",
    "Fulda",
    "Leota",
    "Borup",
    "Byron",
    "Dover",
    "Eyota",
    "Askov",
    "Bruno",
    "Ihlen",
    "Gully",
    "Trail",
    "Cyrus",
    "Lowry",
    "Oklee",
    "Lucan",
    "Vesta",
    "Wanda",
    "Hills",
    "Steen",
    "Swift",
    "Salol",
    "Britt",
    "Tower",
    "Elgin",
    "Afton",
    "Homer",
    "Utica",
    "Canby",
    "Rice",
    "Esko",
    "Bena",
    "Ulen",
    "Wirt",
    "Mora",
    "Boyd",
    "Arco",
    "Lynd",
    "Oslo",
    "Bock",
    "Isle",
    "Lyle",
    "Iona",
    "Flom",
    "Gary",
    "Dent",
    "Buhl",
    "Cook",
    "Iron",
    "Twig",
    "Avon",
    "Hope",
    "Hugo",
    "Odin",
    "Kent",
    "Echo",
    "Max",
    "Ada",
    "Ely",
    "Orr",
  ],
  fI = [
    "Stennis Space Center",
    "Greenwood Springs",
    "Mississippi State",
    "North Carrollton",
    "Crystal Springs",
    "Bay Saint Louis",
    "Lake Cormorant",
    "Pass Christian",
    "Mount Pleasant",
    "Michigan City",
    "Mc Call Creek",
    "Ocean Springs",
    "Plantersville",
    "Holly Springs",
    "Blue Mountain",
    "Robinsonville",
    "Bellefontaine",
    "Hickory Flat",
    "Winstonville",
    "Calhoun City",
    "Slate Spring",
    "Friars Point",
    "Olive Branch",
    "Gore Springs",
    "Union Church",
    "Sandersville",
    "Collinsville",
    "Silver Creek",
    "Walnut Grove",
    "Bogue Chitto",
    "Philadelphia",
    "Panther Burn",
    "Rolling Fork",
    "Taylorsville",
    "Independence",
    "Tiplersville",
    "Blue Springs",
    "Water Valley",
    "Mound Bayou",
    "French Camp",
    "Hermanville",
    "Port Gibson",
    "Mount Olive",
    "Hattiesburg",
    "Leakesville",
    "Diamondhead",
    "Pearlington",
    "Silver City",
    "Mayersville",
    "Valley Park",
    "Bay Springs",
    "Eastabuchie",
    "Porterville",
    "Minter City",
    "Morgan City",
    "Little Rock",
    "Brooksville",
    "Poplarville",
    "New Augusta",
    "Pelahatchie",
    "Piney Woods",
    "Harperville",
    "Harrisville",
    "Winterville",
    "Centreville",
    "Coffeeville",
    "Holly Bluff",
    "Washington",
    "Carrollton",
    "Enterprise",
    "Cedarbluff",
    "Montpelier",
    "West Point",
    "Clarksdale",
    "Georgetown",
    "Hazlehurst",
    "State Line",
    "Diberville",
    "Long Beach",
    "Moss Point",
    "Pascagoula",
    "Heidelberg",
    "Ellisville",
    "University",
    "Lauderdale",
    "Monticello",
    "Thomastown",
    "Mooreville",
    "Brookhaven",
    "Sandy Hook",
    "Potts Camp",
    "Smithville",
    "Kilmichael",
    "Starkville",
    "Batesville",
    "Booneville",
    "Sebastopol",
    "Delta City",
    "Mendenhall",
    "Perkinston",
    "Doddsville",
    "Charleston",
    "Burnsville",
    "Tishomingo",
    "New Albany",
    "Greenville",
    "Glen Allan",
    "Hollandale",
    "Stoneville",
    "Buckatunna",
    "Waynesboro",
    "Louisville",
    "Yazoo City",
    "Smithdale",
    "Kosciusko",
    "Alligator",
    "Cleveland",
    "Big Creek",
    "Pittsboro",
    "Mc Carley",
    "Van Vleet",
    "Stonewall",
    "Jonestown",
    "Rena Lara",
    "Horn Lake",
    "Southaven",
    "Meadville",
    "Tie Plant",
    "Lakeshore",
    "Lexington",
    "Mantachie",
    "Nettleton",
    "Escatawpa",
    "Vancleave",
    "Rose Hill",
    "Harriston",
    "Bassfield",
    "Abbeville",
    "Waterford",
    "Toccopola",
    "Lumberton",
    "Daleville",
    "Newhebron",
    "Greenwood",
    "Itta Bena",
    "Ridgeland",
    "Red Banks",
    "Caledonia",
    "Duck Hill",
    "Conehatta",
    "Shuqualak",
    "Courtland",
    "Nicholson",
    "Whitfield",
    "Hillsboro",
    "Indianola",
    "Inverness",
    "Ruleville",
    "Sunflower",
    "Swan Lake",
    "Arkabutla",
    "Coldwater",
    "Senatobia",
    "Tylertown",
    "Vicksburg",
    "Mathiston",
    "Woodville",
    "Noxapater",
    "Tillatoba",
    "Mc Adams",
    "Gunnison",
    "Merigold",
    "Rosedale",
    "Vardaman",
    "Woodland",
    "Ackerman",
    "Pattison",
    "Seminary",
    "Hernando",
    "Brooklyn",
    "Lucedale",
    "Waveland",
    "Gulfport",
    "Tougaloo",
    "Midnight",
    "Paulding",
    "Vossburg",
    "Stringer",
    "Prentiss",
    "Meridian",
    "Toomsuba",
    "Oak Vale",
    "Carthage",
    "Saltillo",
    "Schlater",
    "Swiftown",
    "Columbus",
    "Crawford",
    "Columbia",
    "Foxworth",
    "Victoria",
    "Aberdeen",
    "Hamilton",
    "Lawrence",
    "Crenshaw",
    "Carriere",
    "Mc Neill",
    "Picayune",
    "Beaumont",
    "Fernwood",
    "Magnolia",
    "Pontotoc",
    "Randolph",
    "Marietta",
    "New Site",
    "Florence",
    "Sandhill",
    "Richland",
    "Anguilla",
    "Mc Henry",
    "Parchman",
    "Moorhead",
    "Cascilla",
    "Glendora",
    "Tutwiler",
    "Metcalfe",
    "Walthall",
    "Bentonia",
    "Satartia",
    "Natchez",
    "Corinth",
    "Gloster",
    "Liberty",
    "Mc Cool",
    "Ashland",
    "Houston",
    "Okolona",
    "Trebloc",
    "Pachuta",
    "Quitman",
    "Shubuta",
    "Coahoma",
    "Farrell",
    "Sherard",
    "Gallman",
    "Collins",
    "Mc Lain",
    "Grenada",
    "Elliott",
    "Holcomb",
    "Saucier",
    "Clinton",
    "Edwards",
    "Raymond",
    "Jackson",
    "Goodman",
    "Pickens",
    "Belzoni",
    "Tremont",
    "Gautier",
    "Fayette",
    "Moselle",
    "De Kalb",
    "Preston",
    "Sumrall",
    "Baldwyn",
    "Guntown",
    "Shannon",
    "Artesia",
    "Madison",
    "Byhalia",
    "Gattman",
    "Prairie",
    "Stewart",
    "Decatur",
    "Hickory",
    "Sturgis",
    "Richton",
    "Chatawa",
    "Sherman",
    "Thaxton",
    "Wheeler",
    "Crowder",
    "Darling",
    "Lambert",
    "Brandon",
    "Puckett",
    "Flowood",
    "Pulaski",
    "Braxton",
    "Raleigh",
    "Wiggins",
    "Philipp",
    "Falkner",
    "Belmont",
    "Redwood",
    "Chatham",
    "Wayside",
    "Oakland",
    "Tinsley",
    "Vaughan",
    "Sibley",
    "Rienzi",
    "Crosby",
    "Sallis",
    "Benoit",
    "Beulah",
    "Duncan",
    "Shelby",
    "Banner",
    "Mantee",
    "Vaiden",
    "Houlka",
    "Dublin",
    "Wesson",
    "Nesbit",
    "Biloxi",
    "Bolton",
    "Cruger",
    "Durant",
    "Tchula",
    "Louise",
    "Fulton",
    "Golden",
    "Hurley",
    "Lorman",
    "Carson",
    "Laurel",
    "Scooba",
    "Oxford",
    "Taylor",
    "Purvis",
    "Bailey",
    "Marion",
    "Jayess",
    "Sontag",
    "Madden",
    "Tupelo",
    "Belden",
    "Verona",
    "Mayhew",
    "Steens",
    "Camden",
    "Canton",
    "Sharon",
    "Kokomo",
    "Becker",
    "Winona",
    "Chunky",
    "Newton",
    "Sardis",
    "Mccomb",
    "Summit",
    "Algoma",
    "Falcon",
    "Forest",
    "Ludlow",
    "Morton",
    "Pinola",
    "Sumner",
    "Ripley",
    "Walnut",
    "Dennis",
    "Dundee",
    "Sledge",
    "Tunica",
    "Myrtle",
    "Arcola",
    "Leland",
    "Eupora",
    "Scobey",
    "Benton",
    "Ethel",
    "Boyle",
    "Scott",
    "Derma",
    "Bruce",
    "Coila",
    "Sidon",
    "Pheba",
    "Walls",
    "Petal",
    "Roxie",
    "Neely",
    "Terry",
    "Utica",
    "Byram",
    "Isola",
    "Grace",
    "Louin",
    "Paris",
    "Money",
    "Flora",
    "Lamar",
    "Amory",
    "Union",
    "Macon",
    "Sarah",
    "Ovett",
    "Osyka",
    "Belen",
    "Marks",
    "Vance",
    "Pearl",
    "Magee",
    "Tippo",
    "Dumas",
    "Clara",
    "Maben",
    "Glen",
    "Pace",
    "Shaw",
    "Weir",
    "Lula",
    "Lyon",
    "Bude",
    "Kiln",
    "West",
    "Moss",
    "Soso",
    "Tula",
    "Lena",
    "Ruth",
    "Como",
    "Pope",
    "Ecru",
    "Star",
    "Lake",
    "Cary",
    "D Lo",
    "Mize",
    "Drew",
    "Rome",
    "Enid",
    "Webb",
    "Iuka",
    "Etta",
    "Avon",
  ],
  vI = JSON.parse(
    '["Whiteman Air Force Base","Burlington Junction","Conception Junction","El Dorado Springs","Excelsior Springs","Fort Leonard Wood","Portage Des Sioux","South Greenfield","Lake Saint Louis","Sainte Genevieve","Maryland Heights","Caplinger Mills","South West City","Saint Elizabeth","Montgomery City","Kimberling City","Sedgewickville","New Bloomfield","Climax Springs","Cape Girardeau","Jerico Springs","Jefferson City","Mount Sterling","Willow Springs","Caruthersville","French Village","Rockaway Beach","Mountain Grove","Sunrise Beach","Pleasant Hill","Harrisonville","Chestnutridge","Highlandville","Saint Patrick","Missouri City","Stewartsville","Cross Timbers","Mountain View","Carl Junction","House Springs","Rocky Comfort","Fredericktown","Gravois Mills","Edgar Springs","Bowling Green","Pleasant Hope","Saint Charles","Appleton City","Sweet Springs","Ponce De Leon","Point Lookout","Mineral Point","Williamsville","Saint Joseph","Mid Missouri","Poplar Bluff","Breckenridge","Williamsburg","Holts Summit","Kingdom City","Burfordville","Millersville","Old Appleton","Russellville","Saint Thomas","Prairie Home","Lock Springs","Hornersville","Robertsville","Saint Albans","Walnut Grove","Martinsville","New Franklin","Peace Valley","Pottersville","Middle Brook","Blue Springs","Grain Valley","Independence","Crystal City","Phillipsburg","Higginsville","Mount Vernon","Williamstown","Moscow Mills","Philadelphia","East Prairie","New Florence","Portageville","Bonnots Mill","Camden Point","Devils Elbow","Saint Robert","Clifton Hill","Jacksonville","Saint Peters","Valles Mines","Chesterfield","Reeds Spring","Green Castle","Bradleyville","Kissee Mills","Walnut Shade","Raymondville","Summersville","Marthasville","Benton City","Martinsburg","Butterfield","Golden City","Mindenmines","Marble Hill","Osage Beach","Macks Creek","Gordonville","Garden City","Keytesville","Kansas City","Pilot Grove","Cherryville","Gilman City","Pattonsburg","Lake Spring","Gray Summit","Saint Clair","Villa Ridge","Springfield","New Hampton","Forest City","Brandsville","West Plains","Lees Summit","Carterville","Herculaneum","Warrensburg","Knob Noster","Marionville","Pierce City","Stotts City","Chillicothe","Mooresville","New Cambria","Wolf Island","Monroe City","Stoutsville","Rocky Mount","Loose Creek","Bakersfield","Gainesville","Hardenville","Braggadocio","Green Ridge","Hughesville","Saint James","Clarksville","Platte City","Humansville","Morrisville","Waynesville","Worthington","Powersville","Centerville","Lesterville","Fairdealing","Cottleville","Bonne Terre","Valley Park","Saint Louis","Shelbyville","Schell City","Wright City","Mill Spring","Rogersville","Grovespring","Kirksville","Eagle Rock","Shell Knob","Sturdivant","Hallsville","Harrisburg","Neelyville","Lake Ozark","Linn Creek","Pocahontas","Whitewater","Carrollton","East Lynne","Alexandria","Smithville","Plattsburg","Centertown","Wooldridge","Blackwater","Otterville","Davisville","Steelville","Greenfield","Windyville","Clarksdale","Union Star","Luebbering","Washington","Owensville","Darlington","Bois D Arc","Fair Grove","Blythedale","Eagleville","Cainsville","Blairstown","Mound City","Pilot Knob","La Russell","Cedar Hill","High Ridge","Morse Mill","Centerview","Kingsville","Bates City","Wellington","Monticello","Hawk Point","Old Monroe","New Boston","Brookfield","Charleston","California","Clarksburg","High Point","Bellflower","Middletown","Wellsville","Versailles","New Madrid","Tallapoosa","Stark City","Conception","Koshkonong","Koeltztown","Westphalia","Rockbridge","Thornfield","Bragg City","Perryville","Curryville","Flemington","Unionville","New London","Huntsville","Wentzville","West Alton","Lowry City","Bloomsdale","Saint Mary","Park Hills","Farmington","Florissant","Earth City","Arrow Rock","Malta Bend","Coatsville","Queen City","Scott City","Birch Tree","Bloomfield","Green City","Cedarcreek","Kirbyville","Taneyville","Moundville","Greenville","Wappapello","Marshfield","Grant City","Rosendale","Rock Port","Rush Hill","Cassville","Amsterdam","Rich Hill","Rockville","Cole Camp","Glenallen","Hartsburg","Centralia","Rocheport","Rushville","Camdenton","Stoutland","Dutchtown","Friedheim","Oak Ridge","Ellsinore","Van Buren","Strasburg","Cleveland","Creighton","Rothville","Brunswick","Salisbury","Lead Hill","Boonville","Dadeville","Long Lane","Louisburg","Jamesport","Maysville","Weatherby","Catawissa","New Haven","Gasconade","King City","Stanberry","Ash Grove","Brookline","Strafford","Deepwater","Hermitage","Pittsburg","Weaubleau","Wheatland","Armstrong","Caulfield","Annapolis","Belleview","Grandview","Greenwood","Lone Jack","Oak Grove","Neck City","Webb City","Grubville","Hillsboro","Kimmswick","Mapaville","Chilhowee","Knox City","Lynchburg","Concordia","Lexington","Freistatt","La Grange","Lewistown","Whiteside","Marceline","Meadville","Pineville","Tiff City","Brinktown","Princeton","Tuscumbia","Jamestown","High Hill","Jonesburg","Rhineland","Morehouse","Wentworth","Clearmont","Maryville","Pickering","Ravenwood","Theodosia","Altenburg","Uniontown","Houstonia","Louisiana","Frankford","Riverside","Fair Play","Henrietta","Ellington","Flinthill","Foristell","New Melle","Blackwell","Knob Lick","Hazelwood","Bridgeton","Saint Ann","Blackburn","Lancaster","Hunnewell","Bell City","Brownwood","Grayridge","Cape Fair","Humphreys","Hollister","Powersite","Ridgedale","Elk Creek","Hartshorn","Deerfield","Truesdale","Warrenton","Richwoods","Caledonia","Patterson","Allendale","Hartville","Mansfield","Brashear","Greentop","Novinger","Amazonia","Fillmore","Savannah","Westboro","Laddonia","Vandalia","Thompson","Seligman","Washburn","Columbia","Sturgeon","Broseley","Harviell","Rombauer","Hamilton","Kingston","Portland","Steedman","Tebbetts","Auxvasse","Montreal","Bosworth","Norborne","Peculiar","Stockton","Triplett","Billings","Chadwick","Garrison","Oldfield","Wyaconda","Bunceton","Cook Sta","Leasburg","Lockwood","Altamont","Gallatin","Cardwell","Clarkton","Whiteoak","Campbell","Beaufort","Lonedell","Sullivan","Morrison","Republic","Spickard","Hatfield","Ridgeway","Montrose","Maitland","Franklin","Viburnum","Carthage","Sarcoxie","Barnhart","Fletcher","Hematite","Imperial","Hurdland","Eldridge","Napoleon","Halltown","La Belle","Elsberry","Winfield","Browning","Wheeling","Anderson","La Plata","Marquand","Hannibal","Anniston","Bertrand","Holliday","Santa Fe","Florence","Syracuse","Lilbourn","Matthews","Fairview","Newtonia","Guilford","Skidmore","Freeburg","Isabella","Tecumseh","Mc Bride","La Monte","Smithton","Dearborn","Edgerton","Brighton","Dunnegan","Half Way","Richland","Saverton","Rayville","Richmond","Reynolds","Doniphan","Gatewood","Defiance","O Fallon","Bismarck","Leadwood","Marshall","Glenwood","Rutledge","Commerce","Vanduser","Sikeston","Blodgett","Eminence","Clarence","Shelbina","Blue Eye","Bronaugh","Richards","Belgrade","Irondale","Piedmont","Fordland","Sheridan","Bolckow","Fairfax","Wheaton","Liberal","Milford","Edwards","Lincoln","Leopold","Ashland","De Kalb","Faucett","Braymer","Cowgill","Jackson","De Witt","Fremont","Grandin","Raymore","Freeman","Spokane","Wayland","Kearney","Liberty","Cameron","Lathrop","Trimble","Bourbon","Everton","Buffalo","Jameson","Winston","Squires","Vanzant","Holcomb","Kennett","Labadie","Pacific","Stanton","Rosebud","Hermann","Mc Fall","Turners","Willard","Trenton","Bethany","Clinton","Calhoun","Windsor","Preston","Fayette","Glasgow","Arcadia","Des Arc","Ironton","Buckner","Duenweg","Oronogo","Purcell","De Soto","Dittmer","Liguori","Novelty","Lebanon","Mayview","Waverly","Truxton","Bucklin","Laclede","Linneus","Goodman","Lanagan","Atlanta","Excello","Maywood","Palmyra","Brumley","Fortuna","Mc Girk","Madison","Barnett","Canalou","Kewanee","Marston","Diamond","Saginaw","Barnard","Hopkins","Parnell","Chamois","Pontiac","Deering","Holland","Wardell","Brazeau","Sedalia","Newburg","Ashburn","Waldron","Aldrich","Bolivar","Crocker","Livonia","Lucerne","Moberly","Redford","Augusta","Collins","Osceola","Doe Run","Ballwin","Glencoe","Gilliam","Downing","Granger","Memphis","Chaffee","Perkins","Montier","Lentner","Leonard","Advance","Pollock","Winigan","Newtown","Branson","Forsyth","Bucyrus","Houston","Huggins","Licking","Success","Harwood","Sheldon","Treloar","Cascade","Lowndes","Diggins","Elkland","Niangua","Seymour","Norwood","Helena","Tarkio","Watson","Farber","Mexico","Exeter","Golden","Monett","Adrian","Amoret","Butler","Drexel","Foster","Warsaw","Patton","Agency","Easton","Kidder","Mokane","Fulton","Bogard","Belton","Archie","Mendon","Sumner","Dalton","Bruner","Clever","Sparta","Kahoka","Revere","Turney","Eugene","Henley","Lohman","Arcola","Urbana","Coffey","Osborn","Jadwin","Arbyrd","Gibson","Malden","Senath","Berger","Gerald","Leslie","Albany","Gentry","Laredo","Quincy","Oregon","Pomona","Vulcan","Levasy","Sibley","Jasper","Joplin","Asbury","Avilla","Arnold","Festus","Pevely","Holden","Leeton","Newark","Plevna","Baring","Falcon","Conway","Corder","Odessa","Aurora","Miller","Verona","Canton","Durham","Purdin","Ludlow","Powell","Anabel","Bevier","Callao","Vienna","Taylor","Mercer","Kaiser","Iberia","Latham","Tipton","Laurie","Stover","Catron","Gideon","Granby","Neosho","Racine","Seneca","Stella","Graham","Myrtle","Thayer","Argyle","Brixey","Wasola","Zanoni","Cooter","Gobler","Steele","Farrar","Frohna","Beulah","Jerome","Annada","Farley","Weston","Eudora","Laquey","Center","Higbee","Renick","Camden","Hardin","Lawson","Orrick","Bunker","Naylor","Roscoe","Eureka","Fenton","Grover","Nelson","Slater","Arbela","Benton","Morley","Winona","Bethel","Bernie","Dexter","Dudley","Puxico","Galena","Hurley","Harris","Protem","Rueter","Eunice","Cabool","Nevada","Walker","Dutzow","Potosi","Mc Gee","Denver","Macomb","Gibbs","Cosby","Purdy","Lamar","Ionia","Gipsy","Zalma","Fagus","Qulin","Roach","Daisy","Delta","Ozark","Luray","Mosby","Gower","Wesco","Tunas","Amity","Lenox","Salem","Drury","Rives","Union","Bland","Urich","Craig","Moody","Bixby","Reeds","Edina","Dover","Ewing","Foley","Olney","Silex","Chula","Utica","Elmer","Ethel","Macon","Belle","Vichy","Eldon","Olean","Ulman","Wyatt","Paris","Parma","Risco","Clyde","Alton","Couch","Noble","Udall","Hayti","Rolla","Eolia","Dixon","Perry","Cairo","Clark","Black","Briar","Miami","Gorin","Kelso","Emden","Essex","Crane","Lampe","Milan","Plato","Yukon","Cadet","Clubb","Silva","Worth","Graff","Hume","Fisk","Polo","Hale","Stet","Tina","Nixa","Holt","Cuba","Boss","Galt","Alba","Alma","Emma","Troy","Dawn","Noel","Elmo","Linn","Meta","Dora","Mora","Duke","Polk","Oxly","Oran","Roby","Solo","Metz","Milo","Tiff","Lodi","Rea","Ava"]'
  ),
  CI = [
    "White Sulphur Springs",
    "East Glacier Park",
    "Gallatin Gateway",
    "West Yellowstone",
    "Columbia Falls",
    "Lake Mc Donald",
    "Jefferson City",
    "Saint Ignatius",
    "Thompson Falls",
    "Pompeys Pillar",
    "Malmstrom Afb",
    "Fort Harrison",
    "Virginia City",
    "Medicine Lake",
    "Saint Xavier",
    "Warm Springs",
    "Coffee Creek",
    "Forest Grove",
    "Hungry Horse",
    "West Glacier",
    "Willow Creek",
    "Sand Springs",
    "Canyon Creek",
    "Twin Bridges",
    "Stevensville",
    "Crow Agency",
    "Lodge Grass",
    "Great Falls",
    "Black Eagle",
    "Sand Coulee",
    "Fort Benton",
    "Grass Range",
    "Martin City",
    "Three Forks",
    "Philipsburg",
    "East Helena",
    "Mc Allister",
    "Silver Star",
    "Martinsdale",
    "Saint Regis",
    "Seeley Lake",
    "Musselshell",
    "Silver Gate",
    "Heart Butte",
    "Powderville",
    "Hot Springs",
    "Trout Creek",
    "Sweet Grass",
    "Saint Marie",
    "Wise River",
    "Fort Smith",
    "Radersburg",
    "Miles City",
    "Bloomfield",
    "Polebridge",
    "Raynesford",
    "Marysville",
    "Wolf Creek",
    "Frenchtown",
    "Clyde Park",
    "Cooke City",
    "Livingston",
    "Springdale",
    "Whitewater",
    "Deer Lodge",
    "Gold Creek",
    "Grantsdale",
    "Wolf Point",
    "Culbertson",
    "Plentywood",
    "Reed Point",
    "Big Timber",
    "Judith Gap",
    "Ballantine",
    "Garryowen",
    "Bearcreek",
    "Red Lodge",
    "Fort Shaw",
    "Sun River",
    "Geraldine",
    "Big Sandy",
    "Flaxville",
    "Whitetail",
    "Lewistown",
    "Kalispell",
    "Whitefish",
    "Manhattan",
    "Box Elder",
    "Inverness",
    "Whitehall",
    "De Borgia",
    "Helmville",
    "Corvallis",
    "Pinesdale",
    "Bainville",
    "Homestead",
    "Lame Deer",
    "Absarokee",
    "Park City",
    "Greycliff",
    "Fairfield",
    "Fort Peck",
    "Harlowton",
    "Broadview",
    "Hogeland",
    "Townsend",
    "Fromberg",
    "Stockett",
    "Floweree",
    "Highwood",
    "Peerless",
    "Glendive",
    "Anaconda",
    "Winifred",
    "Lakeside",
    "Belgrade",
    "Browning",
    "Cut Bank",
    "Drummond",
    "Gildford",
    "Cardwell",
    "Moccasin",
    "Stanford",
    "Whitlash",
    "Brockway",
    "Harrison",
    "Sheridan",
    "Ringling",
    "Alberton",
    "Superior",
    "Missoula",
    "Milltown",
    "Melstone",
    "Emigrant",
    "Gardiner",
    "Elliston",
    "Garrison",
    "Florence",
    "Hamilton",
    "Fairview",
    "Brockton",
    "Colstrip",
    "Hathaway",
    "Lonepine",
    "Paradise",
    "Antelope",
    "Redstone",
    "Columbus",
    "Fishtail",
    "Melville",
    "Ethridge",
    "Sunburst",
    "Glentana",
    "Hinsdale",
    "Richland",
    "Vandalia",
    "Shepherd",
    "Billings",
    "Jackson",
    "Polaris",
    "Chinook",
    "Winston",
    "Bridger",
    "Roberts",
    "Capitol",
    "Ekalaka",
    "Hammond",
    "Cascade",
    "Monarch",
    "Neihart",
    "Volborg",
    "Lindsay",
    "Willard",
    "Buffalo",
    "Bigfork",
    "Bozeman",
    "Big Sky",
    "Brusett",
    "Cohagen",
    "Ryegate",
    "Hingham",
    "Kremlin",
    "Rudyard",
    "Boulder",
    "Ravalli",
    "Big Arm",
    "Proctor",
    "Rollins",
    "Augusta",
    "Lincoln",
    "Chester",
    "Fortine",
    "Rexford",
    "Stryker",
    "Cameron",
    "Saltese",
    "Clinton",
    "Roundup",
    "Wilsall",
    "Winnett",
    "Zortman",
    "Dupuyer",
    "Broadus",
    "Mildred",
    "Lambert",
    "Ashland",
    "Ingomar",
    "Sumatra",
    "Forsyth",
    "Rosebud",
    "Outlook",
    "Raymond",
    "Reserve",
    "Melrose",
    "Rapelje",
    "Mc Leod",
    "Choteau",
    "Pendroy",
    "Lothair",
    "Oilmont",
    "Bighorn",
    "Sanders",
    "Glasgow",
    "Larslan",
    "Shawmut",
    "Two Dot",
    "Huntley",
    "Dillon",
    "Wisdom",
    "Decker",
    "Hardin",
    "Harlem",
    "Turner",
    "Zurich",
    "Toston",
    "Belfry",
    "Joliet",
    "Roscoe",
    "Alzada",
    "Vaughn",
    "Carter",
    "Kinsey",
    "Scobey",
    "Richey",
    "Plevna",
    "Denton",
    "Hilger",
    "Marion",
    "Somers",
    "Jordan",
    "Lavina",
    "Clancy",
    "Geyser",
    "Hobson",
    "Charlo",
    "Polson",
    "Dayton",
    "Helena",
    "Joplin",
    "Eureka",
    "Circle",
    "Norris",
    "Haugan",
    "Bonner",
    "Condon",
    "Teigen",
    "Dodson",
    "Loring",
    "Conrad",
    "Ledger",
    "Valier",
    "Biddle",
    "Ovando",
    "Fallon",
    "Conner",
    "Victor",
    "Savage",
    "Sidney",
    "Poplar",
    "Birney",
    "Angela",
    "Plains",
    "Dagmar",
    "Westby",
    "Divide",
    "Ramsay",
    "Dutton",
    "Galata",
    "Shelby",
    "Hysham",
    "Frazer",
    "Nashua",
    "Opheim",
    "Wibaux",
    "Custer",
    "Laurel",
    "Worden",
    "Busby",
    "Pryor",
    "Wyola",
    "Lloyd",
    "Edgar",
    "Boyes",
    "Simms",
    "Ismay",
    "Baker",
    "Moore",
    "Coram",
    "Essex",
    "Olney",
    "Mosby",
    "Havre",
    "Basin",
    "Arlee",
    "Pablo",
    "Ronan",
    "Libby",
    "Trego",
    "Alder",
    "Ennis",
    "Huson",
    "Malta",
    "Brady",
    "Otter",
    "Olive",
    "Terry",
    "Darby",
    "Crane",
    "Froid",
    "Dixon",
    "Heron",
    "Noxon",
    "Butte",
    "Bynum",
    "Power",
    "Kevin",
    "Acton",
    "Dell",
    "Glen",
    "Lima",
    "Hays",
    "Boyd",
    "Belt",
    "Loma",
    "Kila",
    "Babb",
    "Hall",
    "Elmo",
    "Troy",
    "Vida",
    "Pony",
    "Lolo",
    "Pray",
    "Saco",
    "Avon",
    "Sula",
    "Molt",
    "Ulm",
    "Roy",
    "Nye",
  ],
  kI = [
    "South Sioux City",
    "Mc Cool Junction",
    "Republican City",
    "Beaver Crossing",
    "Weeping Water",
    "Willow Island",
    "Nebraska City",
    "Platte Center",
    "Pleasant Dale",
    "Cedar Rapids",
    "Saint Edward",
    "Saint Helena",
    "Blue Springs",
    "Grand Island",
    "Hayes Center",
    "Saint Libory",
    "Crab Orchard",
    "North Platte",
    "Battle Creek",
    "Meadow Grove",
    "Newman Grove",
    "Silver Creek",
    "Central City",
    "St Columbans",
    "Cedar Bluffs",
    "Fort Calhoun",
    "Rising City",
    "Cedar Creek",
    "Plattsmouth",
    "Clay Center",
    "Westerville",
    "Dakota City",
    "Big Springs",
    "Bloomington",
    "Beaver City",
    "Wilsonville",
    "Steele City",
    "Pawnee City",
    "Springfield",
    "Morse Bluff",
    "Scottsbluff",
    "Staplehurst",
    "Hay Springs",
    "Clearwater",
    "Harrisburg",
    "Petersburg",
    "Hemingford",
    "Pleasanton",
    "David City",
    "Louisville",
    "South Bend",
    "Hartington",
    "Saronville",
    "West Point",
    "Broken Bow",
    "Mason City",
    "Gothenburg",
    "North Bend",
    "Bennington",
    "Moorefield",
    "Stockville",
    "Smithfield",
    "Wood River",
    "Culbertson",
    "Saint Paul",
    "Springview",
    "Bloomfield",
    "Sutherland",
    "Broadwater",
    "Bridgeport",
    "Brownville",
    "Table Rock",
    "Stromsburg",
    "Falls City",
    "Dorchester",
    "Offutt Afb",
    "Valparaiso",
    "Litchfield",
    "Alexandria",
    "North Loup",
    "Washington",
    "Guide Rock",
    "Brunswick",
    "Ainsworth",
    "Johnstown",
    "Long Pine",
    "Elm Creek",
    "Riverdale",
    "Greenwood",
    "Coleridge",
    "Valentine",
    "Crookston",
    "Wood Lake",
    "Lodgepole",
    "Fairfield",
    "Eddyville",
    "Lexington",
    "Newcastle",
    "Wakefield",
    "Waterbury",
    "Nickerson",
    "Boys Town",
    "Benkelman",
    "Cambridge",
    "Barneston",
    "Hordville",
    "Marquette",
    "Dannebrog",
    "Elk Creek",
    "Heartwell",
    "Creighton",
    "Winnetoon",
    "Wellfleet",
    "Stapleton",
    "Fullerton",
    "Steinauer",
    "Plainview",
    "Indianola",
    "Papillion",
    "Ellsworth",
    "Rushville",
    "Whiteclay",
    "Loup City",
    "Rockville",
    "Belvidere",
    "Davenport",
    "Winnebago",
    "Arlington",
    "Blue Hill",
    "Red Cloud",
    "Henderson",
    "Hastings",
    "Holstein",
    "Roseland",
    "Brewster",
    "Primrose",
    "Alliance",
    "Bellwood",
    "Brainard",
    "Surprise",
    "Randolph",
    "Champion",
    "Imperial",
    "Merriman",
    "Trumbull",
    "Clarkson",
    "Schuyler",
    "Bancroft",
    "Callaway",
    "Comstock",
    "Crawford",
    "Marsland",
    "Chappell",
    "Scribner",
    "Waterloo",
    "Fairmont",
    "Milligan",
    "Shickley",
    "Campbell",
    "Franklin",
    "Hildreth",
    "Riverton",
    "Arapahoe",
    "Holbrook",
    "Beatrice",
    "Clatonia",
    "Cortland",
    "Pickrell",
    "Virginia",
    "Lewellen",
    "Spalding",
    "Doniphan",
    "Phillips",
    "Stamford",
    "Palisade",
    "Stratton",
    "Atkinson",
    "Chambers",
    "Endicott",
    "Fairbury",
    "Plymouth",
    "Sterling",
    "Tecumseh",
    "Keystone",
    "Ogallala",
    "Bushnell",
    "Niobrara",
    "Verdigre",
    "Belgrade",
    "Lawrence",
    "Superior",
    "Syracuse",
    "Unadilla",
    "Burchard",
    "Lewiston",
    "Bertrand",
    "Holdrege",
    "Columbus",
    "Humphrey",
    "Humboldt",
    "Bellevue",
    "La Vista",
    "Minatare",
    "Mitchell",
    "Lakeside",
    "Harrison",
    "Carleton",
    "Reynolds",
    "Thedford",
    "Thurston",
    "Walthill",
    "Bartlett",
    "Benedict",
    "Bradshaw",
    "Juniata",
    "Kenesaw",
    "Oakdale",
    "Orchard",
    "Dunning",
    "Bristow",
    "Spencer",
    "Amherst",
    "Kearney",
    "Ravenna",
    "Shelton",
    "Decatur",
    "Oakland",
    "Tekamah",
    "Linwood",
    "Ulysses",
    "Elmwood",
    "Murdock",
    "Nehawka",
    "Fordyce",
    "Wauneta",
    "Elsmere",
    "Kilgore",
    "Deweese",
    "Glenvil",
    "Harvard",
    "Howells",
    "Anselmo",
    "Sargent",
    "Emerson",
    "Hubbard",
    "Jackson",
    "Chadron",
    "Whitney",
    "Overton",
    "Concord",
    "Maskell",
    "Fremont",
    "Uehling",
    "Winslow",
    "Elkhorn",
    "Haigler",
    "Grafton",
    "Naponee",
    "Maywood",
    "Hendley",
    "Liberty",
    "Oshkosh",
    "Burwell",
    "Hyannis",
    "Whitman",
    "Greeley",
    "Wolbach",
    "Giltner",
    "Hampton",
    "Orleans",
    "Trenton",
    "Farwell",
    "Lemoyne",
    "Newport",
    "Kimball",
    "Crofton",
    "Hickman",
    "Malcolm",
    "Martell",
    "Raymond",
    "Sprague",
    "Waverly",
    "Lincoln",
    "Dickens",
    "Hershey",
    "Maxwell",
    "Wallace",
    "Norfolk",
    "Madison",
    "Chapman",
    "Johnson",
    "Douglas",
    "Palmyra",
    "Talmage",
    "Du Bois",
    "Venango",
    "Atlanta",
    "Creston",
    "Lindsay",
    "Osceola",
    "Mc Cook",
    "Bartley",
    "Danbury",
    "Lebanon",
    "Shubert",
    "Bassett",
    "De Witt",
    "Swanton",
    "Western",
    "Ashland",
    "Ceresco",
    "Memphis",
    "Melbeta",
    "Morrill",
    "Cordova",
    "Garland",
    "Goehner",
    "Milford",
    "Bingham",
    "Stanton",
    "Bruning",
    "Chester",
    "Deshler",
    "Hubbell",
    "Rosalie",
    "Arcadia",
    "Kennard",
    "Carroll",
    "Hoskins",
    "Winside",
    "Inavale",
    "Ericson",
    "Gresham",
    "Neligh",
    "Arthur",
    "Purdum",
    "Albion",
    "Gibbon",
    "Miller",
    "Odessa",
    "Dwight",
    "Manley",
    "Murray",
    "Belden",
    "Laurel",
    "Magnet",
    "Enders",
    "Nenzel",
    "Sparks",
    "Dalton",
    "Gurley",
    "Potter",
    "Sidney",
    "Inland",
    "Sutton",
    "Rogers",
    "Beemer",
    "Wisner",
    "Ansley",
    "Oconto",
    "Arnold",
    "Sumner",
    "Farnam",
    "Hooper",
    "Snyder",
    "Valley",
    "Exeter",
    "Geneva",
    "Ohiowa",
    "Strang",
    "Upland",
    "Curtis",
    "Eustis",
    "Edison",
    "Oxford",
    "Filley",
    "Wymore",
    "Elwood",
    "Scotia",
    "Aurora",
    "Amelia",
    "Oneill",
    "Stuart",
    "Mullen",
    "Boelus",
    "Daykin",
    "Diller",
    "Jansen",
    "Axtell",
    "Minden",
    "Wilcox",
    "Paxton",
    "Center",
    "Bennet",
    "Denton",
    "Hallam",
    "Panama",
    "Walton",
    "Taylor",
    "Tilden",
    "Clarks",
    "Archer",
    "Palmer",
    "Angora",
    "Bayard",
    "Auburn",
    "Julian",
    "Nemaha",
    "Nelson",
    "Ruskin",
    "Dunbar",
    "Lorton",
    "Madrid",
    "Loomis",
    "Mclean",
    "Osmond",
    "Pierce",
    "Duncan",
    "Monroe",
    "Shelby",
    "Dawson",
    "Stella",
    "Verdon",
    "Friend",
    "Tobias",
    "Wilber",
    "Gretna",
    "Ithaca",
    "Prague",
    "Weston",
    "Gering",
    "Mcgrew",
    "Seward",
    "Gordon",
    "Ashton",
    "Hazard",
    "Pilger",
    "Gilead",
    "Hebron",
    "Halsey",
    "Seneca",
    "Pender",
    "Elyria",
    "Herman",
    "Bladen",
    "Elgin",
    "Royal",
    "Butte",
    "Lynch",
    "Naper",
    "Craig",
    "Lyons",
    "Bruno",
    "Avoca",
    "Eagle",
    "Union",
    "Wynot",
    "Edgar",
    "Leigh",
    "Merna",
    "Homer",
    "Cozad",
    "Allen",
    "Dixon",
    "Ponca",
    "Dodge",
    "Omaha",
    "Parks",
    "Adams",
    "Odell",
    "Lisco",
    "Ashby",
    "Cairo",
    "Ragan",
    "Emmet",
    "Ewing",
    "Inman",
    "Brule",
    "Mills",
    "Wausa",
    "Davey",
    "Firth",
    "Brady",
    "Tryon",
    "Genoa",
    "Brock",
    "Hardy",
    "Elsie",
    "Grant",
    "Hadar",
    "Salem",
    "Crete",
    "Colon",
    "Malmo",
    "Wahoo",
    "Yutan",
    "Lyman",
    "Utica",
    "Byron",
    "Blair",
    "Wayne",
    "Abie",
    "Alvo",
    "Cody",
    "Ames",
    "Alda",
    "Alma",
    "Page",
    "Elba",
    "Cook",
    "Roca",
    "Peru",
    "Burr",
    "Otoe",
    "Funk",
    "Polk",
    "Rulo",
    "Mead",
    "Macy",
    "Waco",
    "York",
    "Ayr",
    "Ong",
    "Max",
    "Dix",
    "Oak",
    "Bee",
    "Ord",
  ],
  wI = [
    "North Las Vegas",
    "Crescent Valley",
    "Paradise Valley",
    "Battle Mountain",
    "Amargosa Valley",
    "Incline Village",
    "Indian Springs",
    "Coyote Springs",
    "Silver Springs",
    "Round Mountain",
    "Mountain City",
    "West Wendover",
    "Virginia City",
    "Washoe Valley",
    "Blue Diamond",
    "Boulder City",
    "Gardnerville",
    "Spring Creek",
    "Bunkerville",
    "Cal Nev Ari",
    "Searchlight",
    "Zephyr Cove",
    "Carson City",
    "Ruby Valley",
    "Silver City",
    "Crystal Bay",
    "Nellis Afb",
    "Silverpeak",
    "Mc Dermitt",
    "Winnemucca",
    "Wellington",
    "Sun Valley",
    "The Lakes",
    "Henderson",
    "Logandale",
    "Las Vegas",
    "Glenbrook",
    "Stateline",
    "Tuscarora",
    "Goldfield",
    "Yerington",
    "Hawthorne",
    "Manhattan",
    "Wadsworth",
    "Duckwater",
    "Mesquite",
    "Laughlin",
    "Jarbidge",
    "Lamoille",
    "Montello",
    "Golconda",
    "Caliente",
    "Lovelock",
    "Overton",
    "Jackpot",
    "Orovada",
    "Fernley",
    "Mercury",
    "Pahrump",
    "Tonopah",
    "Gerlach",
    "Mc Gill",
    "Fallon",
    "Minden",
    "Carlin",
    "Owyhee",
    "Eureka",
    "Austin",
    "Panaca",
    "Pioche",
    "Dayton",
    "Luning",
    "Schurz",
    "Beatty",
    "Empire",
    "Sparks",
    "Moapa",
    "Sloan",
    "Genoa",
    "Deeth",
    "Wells",
    "Denio",
    "Valmy",
    "Alamo",
    "Smith",
    "Gabbs",
    "Imlay",
    "Nixon",
    "Verdi",
    "Baker",
    "Jean",
    "Elko",
    "Dyer",
    "Hiko",
    "Mina",
    "Reno",
    "Lund",
    "Ruth",
    "Ely",
  ],
  SI = [
    "Gilmanton Iron Works",
    "Center Tuftonboro",
    "West Chesterfield",
    "West Stewartstown",
    "Waterville Valley",
    "West Peterborough",
    "Center Barnstead",
    "Mount Washington",
    "Center Strafford",
    "Center Sandwich",
    "Wolfeboro Falls",
    "North Stratford",
    "North Woodstock",
    "North Haverhill",
    "West Nottingham",
    "Newton Junction",
    "Moultonborough",
    "North Sandwich",
    "Center Ossipee",
    "East Wakefield",
    "Melvin Village",
    "South Tamworth",
    "Enfield Center",
    "East Hampstead",
    "Center Harbor",
    "Center Conway",
    "North Walpole",
    "Bretton Woods",
    "Twin Mountain",
    "South Newbury",
    "East Kingston",
    "Hampton Falls",
    "North Hampton",
    "South Acworth",
    "Georges Mills",
    "Eaton Center",
    "North Conway",
    "Sanbornville",
    "West Ossipee",
    "Chesterfield",
    "Westmoreland",
    "West Swanzey",
    "West Lebanon",
    "Lyndeborough",
    "Hillsborough",
    "Peterborough",
    "East Andover",
    "North Sutton",
    "South Sutton",
    "Milton Mills",
    "Cornish Flat",
    "New Hampton",
    "Mirror Lake",
    "Silver Lake",
    "Fitzwilliam",
    "Harrisville",
    "Marlborough",
    "Lyme Center",
    "Francestown",
    "Mont Vernon",
    "New Ipswich",
    "East Candia",
    "Londonderry",
    "North Salem",
    "Rollinsford",
    "Somersworth",
    "Springfield",
    "Charlestown",
    "Sanbornton",
    "Winnisquam",
    "Wonalancet",
    "Winchester",
    "Drewsville",
    "Whitefield",
    "Holderness",
    "Chichester",
    "Sugar Hill",
    "Woodsville",
    "Greenfield",
    "Greenville",
    "Litchfield",
    "New Boston",
    "Manchester",
    "Bennington",
    "Canterbury",
    "Contoocook",
    "New London",
    "Pittsfield",
    "East Derry",
    "Nottingham",
    "Portsmouth",
    "New Castle",
    "Barrington",
    "Farmington",
    "New Durham",
    "Washington",
    "Plainfield",
    "Barnstead",
    "Gilmanton",
    "Alton Bay",
    "Intervale",
    "Kearsarge",
    "Effingham",
    "Wolfeboro",
    "Colebrook",
    "Jefferson",
    "Lancaster",
    "Pittsburg",
    "Glencliff",
    "Wentworth",
    "Woodstock",
    "Littleton",
    "Bethlehem",
    "Franconia",
    "Haverhill",
    "Brookline",
    "Goffstown",
    "Merrimack",
    "Dunbarton",
    "Salisbury",
    "Deerfield",
    "Northwood",
    "Greenland",
    "Hampstead",
    "Newfields",
    "Newmarket",
    "Rye Beach",
    "Rochester",
    "Strafford",
    "Claremont",
    "Lochmere",
    "Meredith",
    "Bartlett",
    "Chocorua",
    "Tamworth",
    "Ashuelot",
    "Sullivan",
    "Hinsdale",
    "Spofford",
    "Stoddard",
    "Groveton",
    "Randolph",
    "Plymouth",
    "Thornton",
    "Piermont",
    "Hooksett",
    "Bradford",
    "Franklin",
    "Henniker",
    "Atkinson",
    "Danville",
    "Kingston",
    "Plaistow",
    "Seabrook",
    "Stratham",
    "Lempster",
    "Grantham",
    "Belmont",
    "Laconia",
    "Gilford",
    "Freedom",
    "Jackson",
    "Madison",
    "Ossipee",
    "Swanzey",
    "Jaffrey",
    "Alstead",
    "Walpole",
    "Ashland",
    "Bristol",
    "Campton",
    "Grafton",
    "Lincoln",
    "Enfield",
    "Hanover",
    "Lebanon",
    "Amherst",
    "Milford",
    "Bedford",
    "Hancock",
    "Andover",
    "Danbury",
    "Newbury",
    "Suncook",
    "Concord",
    "Chester",
    "Fremont",
    "Raymond",
    "Windham",
    "Hampton",
    "Sandown",
    "Madbury",
    "Acworth",
    "Cornish",
    "Meriden",
    "Newport",
    "Sunapee",
    "Tilton",
    "Conway",
    "Dublin",
    "Gilsum",
    "Marlow",
    "Nelson",
    "Rindge",
    "Berlin",
    "Gorham",
    "Hebron",
    "Rumney",
    "Warren",
    "Lisbon",
    "Canaan",
    "Monroe",
    "Orford",
    "Hollis",
    "Hudson",
    "Nashua",
    "Pelham",
    "Temple",
    "Wilton",
    "Antrim",
    "Elkins",
    "Warner",
    "Wilmot",
    "Loudon",
    "Auburn",
    "Candia",
    "Epping",
    "Exeter",
    "Newton",
    "Durham",
    "Milton",
    "Goshen",
    "Alton",
    "Keene",
    "Errol",
    "Milan",
    "Weare",
    "Epsom",
    "Derry",
    "Salem",
    "Dover",
    "Union",
    "Guild",
    "Glen",
    "Troy",
    "Bath",
    "Etna",
    "Lyme",
    "Pike",
    "Hill",
    "Lee",
    "Bow",
    "Rye",
  ],
  bI = [
    "Township Of Washington",
    "Cape May Court House",
    "Point Pleasant Beach",
    "Egg Harbor Township",
    "Manchester Township",
    "Whitehouse Station",
    "Princeton Junction",
    "Atlantic Highlands",
    "Millstone Township",
    "Schooleys Mountain",
    "Hasbrouck Heights",
    "Lawrence Township",
    "Monmouth Junction",
    "Picatinny Arsenal",
    "South Bound Brook",
    "South Hackensack",
    "Englewood Cliffs",
    "Deerfield Street",
    "Woodbury Heights",
    "South Plainfield",
    "West Long Branch",
    "Neshanic Station",
    "Berkeley Heights",
    "North Plainfield",
    "Egg Harbor City",
    "North Arlington",
    "East Rutherford",
    "Harrington Park",
    "Ridgefield Park",
    "Gloucester City",
    "Waterford Works",
    "Monroe Township",
    "North Brunswick",
    "Avon By The Sea",
    "Mount Arlington",
    "Convent Station",
    "Seaside Heights",
    "Hancocks Bridge",
    "Wallpack Center",
    "Cliffside Park",
    "Franklin Lakes",
    "Palisades Park",
    "Woodcliff Lake",
    "Joint Base Mdl",
    "Haddon Heights",
    "Cape May Point",
    "South Seaville",
    "Dividing Creek",
    "Port Elizabeth",
    "Sergeantsville",
    "East Brunswick",
    "Monmouth Beach",
    "Mountain Lakes",
    "Pompton Plains",
    "Lake Hopatcong",
    "Barnegat Light",
    "Island Heights",
    "Normandy Beach",
    "Liberty Corner",
    "Highland Lakes",
    "New Providence",
    "Pleasantville",
    "Port Republic",
    "Atlantic City",
    "Rochelle Park",
    "Mount Ephraim",
    "Merchantville",
    "Sea Isle City",
    "Harrisonville",
    "National Park",
    "Franklinville",
    "West New York",
    "Three Bridges",
    "New Brunswick",
    "Highland Park",
    "Fort Monmouth",
    "Bradley Beach",
    "Little Silver",
    "Port Monmouth",
    "Lake Hiawatha",
    "Green Village",
    "Morris Plains",
    "Mount Freedom",
    "Lanoka Harbor",
    "Pompton Lakes",
    "Basking Ridge",
    "Bernardsville",
    "Franklin Park",
    "Scotch Plains",
    "Elizabethport",
    "Great Meadows",
    "Stewartsville",
    "West Deptford",
    "Somers Point",
    "Estell Manor",
    "Mays Landing",
    "Margate City",
    "Ventnor City",
    "Elmwood Park",
    "Midland Park",
    "Saddle River",
    "Little Ferry",
    "Saddle Brook",
    "Browns Mills",
    "Mount Laurel",
    "Chesterfield",
    "Sicklerville",
    "Collingswood",
    "South Dennis",
    "Stone Harbor",
    "Heislerville",
    "South Orange",
    "Mullica Hill",
    "Williamstown",
    "North Bergen",
    "Pottersville",
    "Lambertville",
    "Glen Gardner",
    "Port Reading",
    "Kendall Park",
    "Lincoln Park",
    "Cedar Knolls",
    "Florham Park",
    "East Hanover",
    "Forked River",
    "Seaside Park",
    "Bloomingdale",
    "Little Falls",
    "Newfoundland",
    "West Milford",
    "Martinsville",
    "Hillsborough",
    "Mountainside",
    "Roselle Park",
    "Hackettstown",
    "Phillipsburg",
    "East Windsor",
    "West Windsor",
    "Leeds Point",
    "Landisville",
    "Newtonville",
    "Bergenfield",
    "New Milford",
    "Willingboro",
    "Maple Shade",
    "Mount Holly",
    "Wrightstown",
    "Cherry Hill",
    "Cedar Brook",
    "Haddonfield",
    "West Berlin",
    "Dennisville",
    "Green Creek",
    "Mauricetown",
    "Port Norris",
    "Cedar Grove",
    "East Orange",
    "Essex Fells",
    "West Orange",
    "Short Hills",
    "Mount Royal",
    "Monroeville",
    "Jersey City",
    "High Bridge",
    "Little York",
    "Perth Amboy",
    "South Amboy",
    "South River",
    "Asbury Park",
    "Englishtown",
    "Farmingdale",
    "Long Branch",
    "Morganville",
    "Ocean Grove",
    "Spring Lake",
    "Cream Ridge",
    "Long Valley",
    "Mount Tabor",
    "Beach Haven",
    "Mantoloking",
    "Pedricktown",
    "Penns Grove",
    "Bound Brook",
    "Bridgewater",
    "Branchville",
    "Middleville",
    "Tranquility",
    "Springfield",
    "Changewater",
    "Johnsonburg",
    "Port Murray",
    "Brigantine",
    "Northfield",
    "Oceanville",
    "Wallington",
    "Rutherford",
    "Wood Ridge",
    "Hackensack",
    "Park Ridge",
    "Ridgefield",
    "River Edge",
    "Birmingham",
    "Burlington",
    "Chatsworth",
    "Hainesport",
    "Juliustown",
    "Moorestown",
    "New Lisbon",
    "Vincentown",
    "New Gretna",
    "Bordentown",
    "Barrington",
    "Pennsauken",
    "Ocean City",
    "Ocean View",
    "Rio Grande",
    "Strathmere",
    "Whitesboro",
    "Cedarville",
    "Dorchester",
    "Bloomfield",
    "Glen Ridge",
    "Livingston",
    "Belleville",
    "Bridgeport",
    "Clarksboro",
    "Swedesboro",
    "Union City",
    "Baptistown",
    "Bloomsbury",
    "Flemington",
    "Frenchtown",
    "Quakertown",
    "Readington",
    "Whitehouse",
    "Hightstown",
    "Pennington",
    "Titusville",
    "Woodbridge",
    "Plainsboro",
    "Piscataway",
    "Old Bridge",
    "Sayreville",
    "Shrewsbury",
    "Fair Haven",
    "Allenhurst",
    "Colts Neck",
    "Middletown",
    "Imlaystown",
    "Parsippany",
    "Pine Brook",
    "Pequannock",
    "Succasunna",
    "Millington",
    "Morristown",
    "New Vernon",
    "Manahawkin",
    "West Creek",
    "Lavallette",
    "Ocean Gate",
    "Pine Beach",
    "Toms River",
    "Pennsville",
    "Bedminster",
    "Belle Mead",
    "Blawenburg",
    "Rocky Hill",
    "Somerville",
    "Ogdensburg",
    "Stillwater",
    "Swartswood",
    "Kenilworth",
    "Plainfield",
    "Blairstown",
    "Buttzville",
    "Washington",
    "Hammonton",
    "Edgewater",
    "Lyndhurst",
    "Carlstadt",
    "Moonachie",
    "Allendale",
    "Fair Lawn",
    "Ho Ho Kus",
    "Ridgewood",
    "Glen Rock",
    "Teterboro",
    "Cresskill",
    "Englewood",
    "Hillsdale",
    "Northvale",
    "Lumberton",
    "Pemberton",
    "Riverside",
    "Cookstown",
    "Blackwood",
    "Clementon",
    "Gibbsboro",
    "Runnemede",
    "Somerdale",
    "Stratford",
    "Bridgeton",
    "Fortescue",
    "Greenwich",
    "Millville",
    "Rosenhayn",
    "Fairfield",
    "Maplewood",
    "Montclair",
    "Irvington",
    "Gibbstown",
    "Glassboro",
    "Mickleton",
    "Paulsboro",
    "Thorofare",
    "Westville",
    "Weehawken",
    "Annandale",
    "Pittstown",
    "Princeton",
    "Middlesex",
    "Spotswood",
    "Cliffwood",
    "Eatontown",
    "Highlands",
    "Keansburg",
    "Oceanport",
    "Wickatunk",
    "Allentown",
    "Roosevelt",
    "Allenwood",
    "Manasquan",
    "Montville",
    "Riverdale",
    "Mine Hill",
    "Budd Lake",
    "Ledgewood",
    "Brookside",
    "Tuckerton",
    "New Egypt",
    "Beachwood",
    "Lakehurst",
    "Oak Ridge",
    "Hawthorne",
    "Deepwater",
    "Woodstown",
    "Far Hills",
    "Gladstone",
    "Pluckemin",
    "Zarephath",
    "Stockholm",
    "Greendell",
    "Hopatcong",
    "Lafayette",
    "Westfield",
    "Elizabeth",
    "Allamuchy",
    "Belvidere",
    "Minotola",
    "Richland",
    "Longport",
    "Fairview",
    "Fort Lee",
    "Garfield",
    "Waldwick",
    "Demarest",
    "Montvale",
    "Westwood",
    "Columbus",
    "Jobstown",
    "Rancocas",
    "Riverton",
    "Florence",
    "Roebling",
    "Glendora",
    "Bellmawr",
    "Voorhees",
    "Lawnside",
    "Magnolia",
    "Cape May",
    "Tuckahoe",
    "Wildwood",
    "Woodbine",
    "Leesburg",
    "Vineland",
    "Caldwell",
    "Millburn",
    "Roseland",
    "Grenloch",
    "Richwood",
    "Deptford",
    "Newfield",
    "Harrison",
    "Secaucus",
    "Rosemont",
    "Stockton",
    "Hopewell",
    "Carteret",
    "Cranbury",
    "Dunellen",
    "Helmetta",
    "Metuchen",
    "Milltown",
    "Red Bank",
    "Adelphia",
    "Freehold",
    "Leonardo",
    "Lincroft",
    "Marlboro",
    "Navesink",
    "Oakhurst",
    "Sea Girt",
    "Denville",
    "Flanders",
    "Hibernia",
    "Rockaway",
    "Randolph",
    "Gillette",
    "Stirling",
    "Whippany",
    "Barnegat",
    "Lakewood",
    "Bayville",
    "Waretown",
    "Ringwood",
    "Paterson",
    "Kingston",
    "Skillman",
    "Flagtown",
    "Manville",
    "Somerset",
    "Franklin",
    "Glenwood",
    "Montague",
    "Stanhope",
    "Cranford",
    "Watchung",
    "Vauxhall",
    "Hillside",
    "Columbia",
    "Delaware",
    "Broadway",
    "Absecon",
    "Cologne",
    "Linwood",
    "Dorothy",
    "Oakland",
    "Wyckoff",
    "Maywood",
    "Closter",
    "Emerson",
    "Haworth",
    "Norwood",
    "Oradell",
    "Paramus",
    "Teaneck",
    "Tenafly",
    "Beverly",
    "Marlton",
    "Medford",
    "Palmyra",
    "Winslow",
    "Audubon",
    "Marmora",
    "Delmont",
    "Fairton",
    "Newport",
    "Wenonah",
    "Clayton",
    "Bayonne",
    "Hoboken",
    "Califon",
    "Ringoes",
    "Clinton",
    "Hampton",
    "Lebanon",
    "Milford",
    "Oldwick",
    "Stanton",
    "Windsor",
    "Trenton",
    "Colonia",
    "Sewaren",
    "Keasbey",
    "Belford",
    "Holmdel",
    "Keyport",
    "Matawan",
    "Neptune",
    "Tennent",
    "Brielle",
    "Boonton",
    "Landing",
    "Netcong",
    "Wharton",
    "Chatham",
    "Chester",
    "Madison",
    "Mendham",
    "Jackson",
    "Clifton",
    "Passaic",
    "Haskell",
    "Wanaque",
    "Haledon",
    "Alloway",
    "Quinton",
    "Peapack",
    "Raritan",
    "Hamburg",
    "Mc Afee",
    "Andover",
    "Augusta",
    "Glasser",
    "Fanwood",
    "Garwood",
    "Roselle",
    "Elwood",
    "Pomona",
    "Milmay",
    "Mizpah",
    "Mahwah",
    "Ramsey",
    "Bogota",
    "Leonia",
    "Alpine",
    "Dumont",
    "Berlin",
    "Camden",
    "Oaklyn",
    "Avalon",
    "Goshen",
    "Villas",
    "Shiloh",
    "Verona",
    "Orange",
    "Newark",
    "Nutley",
    "Mantua",
    "Pitman",
    "Sewell",
    "Malaga",
    "Kearny",
    "Avenel",
    "Dayton",
    "Edison",
    "Iselin",
    "Parlin",
    "Belmar",
    "Hazlet",
    "Howell",
    "Rumson",
    "Towaco",
    "Butler",
    "Ironia",
    "Kenvil",
    "Hewitt",
    "Totowa",
    "Warren",
    "Sussex",
    "Vernon",
    "Layton",
    "Newton",
    "Sparta",
    "Linden",
    "Rahway",
    "Summit",
    "Oxford",
    "Vienna",
    "Asbury",
    "Buena",
    "Fords",
    "Dover",
    "Brick",
    "Wayne",
    "Salem",
    "Elmer",
    "Norma",
    "Lyons",
    "Clark",
    "Union",
    "Lodi",
    "Atco",
    "Ewan",
    "Deal",
    "Hope",
  ],
  MI = [
    "White Sands Missile Range",
    "High Rolls Mountain Park",
    "Holloman Air Force Base",
    "Truth Or Consequences",
    "Santo Domingo Pueblo",
    "Continental Divide",
    "Mexican Springs",
    "Tierra Amarilla",
    "Taos Ski Valley",
    "Ranchos De Taos",
    "Pueblo Of Acoma",
    "Radium Springs",
    "Cochiti Pueblo",
    "Spaceport City",
    "Elephant Butte",
    "Clines Corners",
    "Arenas Valley",
    "Ruidoso Downs",
    "Ohkay Owingeh",
    "Jemez Springs",
    "Sheep Springs",
    "San Cristobal",
    "Kirtland Afb",
    "Santa Teresa",
    "Mesilla Park",
    "Sunland Park",
    "Fort Stanton",
    "San Patricio",
    "Fort Wingate",
    "Jemez Pueblo",
    "Cochiti Lake",
    "Williamsburg",
    "Arroyo Hondo",
    "Ojo Caliente",
    "Tres Piedras",
    "Bosque Farms",
    "Cedar Crest",
    "Sandia Park",
    "Albuquerque",
    "Lake Arthur",
    "Casa Blanca",
    "Saint Vrain",
    "Fort Sumner",
    "Whites City",
    "Santa Clara",
    "Fort Bayard",
    "Pinos Altos",
    "Silver City",
    "Anton Chico",
    "Church Rock",
    "Vanderwagen",
    "Buena Vista",
    "Guadalupita",
    "Wagon Mound",
    "Youngsville",
    "Pena Blanca",
    "Flora Vista",
    "Conchas Dam",
    "San Antonio",
    "Arroyo Seco",
    "Mountainair",
    "Rio Rancho",
    "New Laguna",
    "San Rafael",
    "Fence Lake",
    "Angel Fire",
    "Eagle Nest",
    "Cannon Afb",
    "Las Cruces",
    "Chamberino",
    "San Miguel",
    "Loco Hills",
    "Mule Creek",
    "Santa Rosa",
    "Crossroads",
    "Los Alamos",
    "White Rock",
    "Crownpoint",
    "Smith Lake",
    "Rainsville",
    "Alamogordo",
    "Cloudcroft",
    "Sacramento",
    "Vallecitos",
    "Bernalillo",
    "San Ysidro",
    "Farmington",
    "Bloomfield",
    "Navajo Dam",
    "Villanueva",
    "Trementina",
    "Santa Cruz",
    "Monticello",
    "San Acacia",
    "Des Moines",
    "Bluewater",
    "San Fidel",
    "Broadview",
    "Fairacres",
    "Lordsburg",
    "Lovington",
    "Carrizozo",
    "Jamestown",
    "Cleveland",
    "Ojo Feliz",
    "Chaparral",
    "Mescalero",
    "Orogrande",
    "Tucumcari",
    "Mcalister",
    "Nara Visa",
    "Hernandez",
    "La Madera",
    "Medanales",
    "Milnesand",
    "Algodones",
    "Counselor",
    "Ponderosa",
    "Fruitland",
    "Waterflow",
    "Las Vegas",
    "Montezuma",
    "Cerrillos",
    "Hillsboro",
    "Magdalena",
    "Polvadera",
    "Red River",
    "Cedarvale",
    "Gladstone",
    "Grenville",
    "Los Lunas",
    "Pie Town",
    "Glenwood",
    "Hagerman",
    "Pinehill",
    "Cimarron",
    "Springer",
    "Ute Park",
    "Garfield",
    "Dona Ana",
    "Mesquite",
    "Carlsbad",
    "Lakewood",
    "Buckhorn",
    "Mosquero",
    "Mcdonald",
    "Maljamar",
    "Monument",
    "Columbus",
    "Brimhall",
    "Mentmore",
    "Rehoboth",
    "Tohatchi",
    "Timberon",
    "Tularosa",
    "Lindrith",
    "Canjilon",
    "Espanola",
    "Los Ojos",
    "Portales",
    "Placitas",
    "Corrales",
    "Kirtland",
    "La Plata",
    "Shiprock",
    "Sanostee",
    "San Jose",
    "Serafina",
    "Edgewood",
    "Santa Fe",
    "Glorieta",
    "Chamisal",
    "Costilla",
    "El Prado",
    "Estancia",
    "Mcintosh",
    "Moriarty",
    "Tijeras",
    "Quemado",
    "Reserve",
    "Roswell",
    "Paguate",
    "Maxwell",
    "Melrose",
    "Anthony",
    "La Mesa",
    "Mesilla",
    "Artesia",
    "Faywood",
    "Hachita",
    "Hanover",
    "Mimbres",
    "Redrock",
    "La Loma",
    "Newkirk",
    "Caprock",
    "Capitan",
    "Glencoe",
    "Lincoln",
    "Picacho",
    "Ruidoso",
    "Prewitt",
    "Gamerco",
    "Thoreau",
    "Yatahey",
    "Valmora",
    "Watrous",
    "Mayhill",
    "Sunspot",
    "San Jon",
    "Gallina",
    "Abiquiu",
    "Alcalde",
    "Canones",
    "Cebolla",
    "Chimayo",
    "Cordova",
    "El Rito",
    "Truchas",
    "Velarde",
    "La Jara",
    "Nageezi",
    "Newcomb",
    "Tererro",
    "Rociada",
    "Sapello",
    "Stanley",
    "Tesuque",
    "Caballo",
    "Winston",
    "Claunch",
    "La Joya",
    "Veguita",
    "Socorro",
    "Lemitar",
    "Penasco",
    "Trampas",
    "Torreon",
    "Willard",
    "Amistad",
    "Capulin",
    "Clayton",
    "Jarales",
    "Peralta",
    "Isleta",
    "Aragon",
    "Dexter",
    "Cubero",
    "Grants",
    "Laguna",
    "Clovis",
    "Texico",
    "Taiban",
    "Rincon",
    "Berino",
    "Loving",
    "Malaga",
    "Bayard",
    "Hurley",
    "Tyrone",
    "Vaughn",
    "Cuervo",
    "Solano",
    "Playas",
    "Animas",
    "Eunice",
    "Corona",
    "Tinnie",
    "Deming",
    "Gallup",
    "Navajo",
    "Chacon",
    "Holman",
    "La Luz",
    "Coyote",
    "Embudo",
    "Petaca",
    "Causey",
    "Rogers",
    "Regina",
    "Blanco",
    "Ilfeld",
    "Ribera",
    "Garita",
    "Amalia",
    "Carson",
    "Questa",
    "Vadito",
    "Valdez",
    "Encino",
    "Folsom",
    "Bosque",
    "Datil",
    "Milan",
    "Miami",
    "Raton",
    "Grady",
    "Hatch",
    "Salem",
    "Organ",
    "Cliff",
    "Mills",
    "Rodeo",
    "Hobbs",
    "Tatum",
    "Hondo",
    "Nogal",
    "Ramah",
    "Ocate",
    "Pinon",
    "House",
    "Logan",
    "Chama",
    "Dixon",
    "Dulce",
    "Elida",
    "Floyd",
    "Kenna",
    "Lingo",
    "Aztec",
    "Pecos",
    "Arrey",
    "Derry",
    "Cerro",
    "Llano",
    "Sedan",
    "Belen",
    "Luna",
    "Yeso",
    "Vado",
    "Hope",
    "Gila",
    "Alto",
    "Zuni",
    "Mora",
    "Bent",
    "Weed",
    "Bard",
    "Quay",
    "Dora",
    "Cuba",
    "Rowe",
    "Lamy",
    "Taos",
    "Tome",
    "Roy",
    "Jal",
    "Pep",
  ],
  BI = JSON.parse(
    '["Port Jefferson Station","Shelter Island Heights","White Sulphur Springs","Farmersville Station","Thousand Island Park","Annandale On Hudson","Springfield Gardens","South Richmond Hill","Castleton On Hudson","Slaterville Springs","East Atlantic Beach","Guilderland Center","Blue Mountain Lake","Niagara University","Cornwall On Hudson","Springfield Center","Rotterdam Junction","Cold Spring Harbor","Huntington Station","Hastings On Hudson","Bible School Park","Saint Bonaventure","Hopewell Junction","Saint Regis Falls","Skaneateles Falls","Richfield Springs","South Glens Falls","Greenfield Center","Westhampton Beach","Ardsley On Hudson","West Clarksville","Conewango Valley","Smithville Flats","South New Berlin","Ellenburg Center","Stuyvesant Falls","Davenport Center","Wappingers Falls","Dickinson Center","Salisbury Center","Wellesley Island","Henderson Harbor","Pierrepont Manor","North Brookfield","Saint Johnsville","Glenwood Landing","Rockville Centre","Franklin Springs","Mc Connellsville","Washington Mills","Burlington Flats","East Springfield","Long Island City","South Ozone Park","Schodack Landing","De Kalb Junction","Rensselaer Falls","Saratoga Springs","Callicoon Center","Cochecton Center","Livingston Manor","Malden On Hudson","Middle Granville","Briarcliff Manor","Croton On Hudson","Jefferson Valley","Yorktown Heights","Coeymans Hollow","Rensselaerville","South Bethlehem","Chenango Bridge","Van Buren Point","Ellenburg Depot","South Kortright","Clinton Corners","Pleasant Valley","Clarence Center","Van Hornesville","Fishers Landing","Palatine Bridge","Franklin Square","Port Washington","Massapequa Park","North Tonawanda","Clifton Springs","East Bloomfield","West Bloomfield","Fort Montgomery","Sterling Forest","Washingtonville","Salisbury Mills","West Burlington","Oakland Gardens","Jackson Heights","Cambria Heights","West Haverstraw","Rock City Falls","Center Moriches","South Jamesport","Lake Huntington","South Fallsburg","Greenfield Park","Huletts Landing","North Granville","East Williamson","Granite Springs","Cortlandt Manor","Preston Hollow","Little Genesee","Alfred Station","Chenango Forks","East Pharsalia","South Plymouth","Au Sable Forks","Schuyler Falls","Blodgett Mills","West Davenport","Collins Center","Brainardsville","Fort Covington","West Coxsackie","Alexandria Bay","Natural Bridge","Sackets Harbor","Three Mile Bay","Constableville","Livonia Center","East Rochester","West Henrietta","Atlantic Beach","West Hempstead","Roslyn Heights","Williston Park","Stella Niagara","Holland Patent","New York Mills","Oriskany Falls","Apulia Station","Blooming Grove","Central Valley","Greenwood Lake","Highland Falls","Highland Mills","Thompson Ridge","Cuddebackville","Central Square","East Worcester","Lake Peekskill","Middle Village","Queens Village","East Greenbush","West Sand Lake","Valley Cottage","Cranberry Lake","North Lawrence","West Stockholm","Porter Corners","Pattersonville","Central Bridge","Charlotteville","North Blenheim","Sharon Springs","Reading Center","Coopers Plains","Fishers Island","East Northport","Port Jefferson","Shelter Island","Fremont Center","Jeffersonville","Kauneonga Lake","Loch Sheldrake","Mongaup Valley","Westbrookville","Bolton Landing","Putnam Station","Ontario Center","Goldens Bridge","Silver Springs","Voorheesville","Corbettsville","Whitney Point","East Randolph","Ellicottville","Franklinville","Little Valley","Westons Mills","Scipio Center","Union Springs","Maple Springs","Sinclairville","North Pitcher","South Otselic","North Norwich","Lyon Mountain","Morrisonville","Columbiaville","Malden Bridge","North Chatham","Halcottsville","Margaretville","Bovina Center","East Meredith","Sidney Center","Lagrangeville","Stanfordville","Athol Springs","North Collins","Elizabethtown","Moriah Center","Darien Center","East Pembroke","New Baltimore","Cornwallville","Lake Pleasant","Raquette Lake","West Winfield","La Fargeville","New Woodstock","Hubbardsville","Leonardsville","Honeoye Falls","New Hyde Park","East Rockaway","Locust Valley","Point Lookout","Valley Stream","Niagara Falls","Vernon Center","Baldwinsville","East Syracuse","Seneca Castle","Campbell Hall","Mountainville","Bernhards Bay","Cherry Valley","Garrattsville","Schuyler Lake","West Edmeston","Colliersville","Gilbertsville","Portlandville","Mahopac Falls","Putnam Valley","College Point","Fresh Meadows","East Elmhurst","Richmond Hill","Rockaway Park","East Schodack","Hoosick Falls","North Hoosick","Staten Island","Bear Mountain","Spring Valley","Lawrenceville","Brasher Falls","Hannawa Falls","Ballston Lake","Mechanicville","Schuylerville","Victory Mills","Quaker Street","Richmondville","Montour Falls","Cameron Mills","North Babylon","Central Islip","East Setauket","Islip Terrace","West Sayville","Bridgehampton","East Moriches","Middle Island","Highland Lake","Kiamesha Lake","Mountain Dale","Thompsonville","Newark Valley","Mount Tremper","Walker Valley","Diamond Point","Kattskill Bay","Baldwin Place","Bedford Hills","Pleasantville","West Harrison","Strykersville","Dormansville","Slingerlands","Castle Creek","Harpursville","Johnson City","South Dayton","Great Valley","Poplar Ridge","Silver Creek","Cherry Creek","Findley Lake","Mooers Forks","Rouses Point","East Chatham","West Lebanon","Copake Falls","Fleischmanns","New Kingston","Harpersfield","Castle Point","Dover Plains","Hughsonville","Poughkeepsie","Bowmansville","East Amherst","East Concord","Grand Island","North Boston","Orchard Park","Spring Brook","Wales Center","North Hudson","Olmstedville","Schroon Lake","Bloomingdale","Keene Valley","North Bangor","Rainbow Lake","Saranac Lake","Vermontville","Whippleville","Gloversville","East Bethany","Haines Falls","Tannersville","Little Falls","Adams Center","Cape Vincent","Philadelphia","Beaver Falls","Mount Morris","North Greece","Fort Johnson","Old Westbury","East Norwich","Old Bethpage","Sylvan Beach","Verona Beach","New Hartford","Westernville","Westmoreland","Delphi Falls","Fayetteville","Oaks Corners","Sparrow Bush","Knowlesville","Pennellville","Williamstown","Mount Vision","Wells Bridge","West Oneonta","Forest Hills","Saint Albans","Howard Beach","Far Rockaway","Breezy Point","Averill Park","Cherry Plain","Cropseyville","Johnsonville","Schaghticoke","Valley Falls","Tomkins Cove","Chippewa Bay","Newton Falls","Raymondville","Rooseveltown","South Colton","Ballston Spa","Clifton Park","Middle Grove","Watkins Glen","Seneca Falls","Perkinsville","Hammondsport","Painted Post","West Babylon","Brightwaters","Farmingville","Miller Place","Wading River","East Hampton","Hampton Bays","Mastic Beach","Bloomingburg","Grahamsville","North Branch","Phillipsport","Tioga Center","Willseyville","Brooktondale","Jacksonville","Lake Katrine","Mount Marion","Bakers Mills","Lake Luzerne","Pottersville","Eagle Bridge","Hudson Falls","Middle Falls","South Butler","Pultneyville","Croton Falls","Mohegan Lake","Mount Vernon","Port Chester","White Plains","New Rochelle","Java Village","Portageville","Clarksville","Guilderland","Newtonville","Centerville","Black Creek","Whitesville","Glen Aubrey","West Valley","Cattaraugus","Forestville","Bemus Point","Dewittville","Pine Valley","Mount Upton","Plattsburgh","New Lebanon","Old Chatham","Spencertown","Hollowville","Mellenville","Cincinnatus","Little York","Grand Gorge","East Branch","Trout Creek","Pine Plains","East Aurora","North Evans","South Wales","Springville","Ticonderoga","Crown Point","Lake Placid","Paul Smiths","Tupper Lake","Caroga Lake","South Byron","East Durham","East Jewett","Hensonville","Prattsville","South Cairo","Indian Lake","Hoffmeister","Jordanville","Middleville","Black River","Evans Mills","Felts Mills","Brantingham","Lyons Falls","Martinsburg","Port Leyden","West Leyden","Harrisville","Springwater","Chittenango","Morrisville","Adams Basin","Churchville","North Chili","Scottsville","Spencerport","Auriesville","Fort Hunter","Fultonville","Tribes Hill","Canajoharie","Floral Park","Carle Place","Garden City","East Meadow","Island Park","Farmingdale","Ransomville","Durhamville","Alder Creek","Bridgewater","Clark Mills","Sangerfield","Skaneateles","Canandaigua","Port Gibson","Shortsville","Circleville","New Hampton","New Milford","Pine Island","Southfields","Tuxedo Park","New Windsor","Rock Tavern","Port Jervis","Lyndonville","Sandy Creek","West Monroe","Cooperstown","Cold Spring","Little Neck","Kew Gardens","East Nassau","Poestenkill","Stephentown","Wynantskill","Garnerville","Pearl River","Stony Point","Nicholville","Piercefield","Chase Mills","Oswegatchie","Parishville","Burnt Hills","Schenectady","Gallupville","Middleburgh","Sloansville","Warnerville","West Fulton","Beaver Dams","Mecklenburg","Prattsburgh","Great River","Lindenhurst","Mount Sinai","Ocean Beach","Rocky Point","Saint James","Sound Beach","Stony Brook","East Marion","East Quogue","New Suffolk","Southampton","Westhampton","Hortonville","Hurleyville","Kenoza Lake","Narrowsburg","Forestburgh","Summitville","Youngsville","Trumansburg","Bloomington","Olivebridge","Spring Glen","Stone Ridge","Ulster Park","West Hurley","West Shokan","Clintondale","Glens Falls","Chestertown","Lake George","North Creek","North River","Stony Creek","Warrensburg","Fort Edward","Sodus Point","Cross River","Dobbs Ferry","Lincolndale","Mount Kisco","North Salem","Pound Ridge","South Salem","Eastchester","Cowlesville","Gainesville","Java Center","Silver Lake","Rock Stream","East Berne","Feura Bush","Watervliet","Friendship","Canaseraga","Wellsville","Port Crane","Binghamton","Perrysburg","Versailles","King Ferry","Port Byron","Chautauqua","Greenhurst","Horseheads","New Berlin","Bainbridge","Mc Donough","Keeseville","Churubusco","West Chazy","Austerlitz","Kinderhook","Niverville","Stottville","Stuyvesant","Ancramdale","Craryville","Elizaville","Germantown","Livingston","East Homer","Bloomville","Downsville","Fishs Eddy","Masonville","Rhinecliff","Salt Point","Staatsburg","Stormville","Crittenden","West Falls","New Russia","Port Henry","Wilmington","Chateaugay","Lake Clear","Hogansburg","Broadalbin","Northville","Greenville","Hannacroix","Lanesville","Maplecrest","Palenville","Speculator","Cold Brook","Dolgeville","Belleville","Brownville","Depauville","Great Bend","Mannsville","Castorland","Copenhagen","Deer River","Scottsburg","South Lima","Clockville","Georgetown","Wampsville","Bouckville","Brookfield","Munnsville","West Eaton","Fort Plain","Great Neck","Cedarhurst","Long Beach","Massapequa","Oyster Bay","Hicksville","Middleport","Model City","Youngstown","Forestport","Lee Center","Stittville","Waterville","Whitesboro","Bridgeport","Jamesville","La Fayette","Plainville","Farmington","Bloomfield","Manchester","Middletown","Slate Hill","Sugar Loaf","Unionville","West Point","Montgomery","Vails Gate","Constantia","Fair Haven","Maple View","New Lisbon","Whitestone","Ozone Park","Petersburg","Rensselaer","Haverstraw","Orangeburg","Sloatsburg","West Nyack","Brier Hill","De Peyster","Gouverneur","Hailesboro","Morristown","Ogdensburg","Waddington","Round Lake","Stillwater","Gansevoort","Duanesburg","Cobleskill","Howes Cave","Interlaken","Troupsburg","Holtsville","Amityville","Blue Point","Brookhaven","Centereach","Centerport","East Islip","Huntington","Kings Park","Lake Grove","Ronkonkoma","West Islip","Amagansett","Manorville","Remsenburg","Sagaponack","Sag Harbor","Water Mill","Monticello","Barryville","Burlingham","Claryville","Parksville","White Lake","Woodbourne","Bearsville","Big Indian","Boiceville","Chichester","Ellenville","High Falls","Kerhonkson","Saugerties","Plattekill","Queensbury","Adirondack","Brant Lake","Cleverdale","Silver Bay","North Rose","Union Hill","Williamson","Mamaroneck","Bronxville","North Java","Branchport","Keuka Park","Allentown","Yorkshire","East Otto","Kill Buck","Limestone","Portville","Salamanca","Steamburg","Martville","Montezuma","Weedsport","Jamestown","Cassadaga","Ellington","Frewsburg","Lily Dale","Westfield","Big Flats","Breesport","Pine City","Van Etten","Wellsburg","Earlville","Sherburne","Cadyville","Champlain","Dannemora","Ellenburg","Claverack","Hillsdale","Davenport","Treadwell","Barrytown","Hyde Park","Millbrook","Millerton","Poughquag","Rhinebeck","Getzville","Lake View","Lancaster","Tonawanda","Severance","Mineville","Port Kent","Ray Brook","Upper Jay","Willsboro","Witherbee","Constable","Owls Head","Johnstown","Stratford","Alexander","Coxsackie","Elka Park","Lexington","Round Top","West Kill","Long Lake","Eagle Bay","Frankfort","Old Forge","Watertown","Fort Drum","Ellisburg","Henderson","Glenfield","Caledonia","Dansville","Groveland","Lakeville","Leicester","Canastota","Cazenovia","De Ruyter","Erieville","Peterboro","Solsville","Brockport","Henrietta","Pittsford","Rochester","Amsterdam","Esperance","Nelliston","Manhasset","Albertson","Glen Cove","Glen Head","Greenvale","Hempstead","Uniondale","Oceanside","Roosevelt","Sea Cliff","Levittown","Mill Neck","Plainview","North Bay","Barneveld","Blossvale","Boonville","Cassville","Chadwicks","Clayville","Deansboro","Yorkville","Brewerton","Kirkville","Liverpool","Marcellus","Mottville","Bullville","Otisville","Pine Bush","Clarendon","Waterport","Cleveland","New Haven","Schenevus","Worcester","Fly Creek","Patterson","Glen Oaks","Sunnyside","Rego Park","Ridgewood","Woodhaven","Bellerose","Sand Lake","Palisades","Childwold","Heuvelton","Richville","Star Lake","Waterford","Fultonham","Jefferson","Schoharie","Greenwood","Bay Shore","Brentwood","Deer Park","Greenlawn","Nesconset","Northport","Patchogue","Smithtown","Hauppauge","Wyandanch","Riverhead","Aquebogue","Calverton","Cutchogue","Greenport","Jamesport","Mattituck","Wainscott","Callicoon","Cochecton","Fallsburg","Glen Spey","Glen Wild","Long Eddy","Neversink","Obernburg","Pond Eddy","Rock Hill","Smallwood","Swan Lake","Woodridge","Wurtsboro","Apalachin","Berkshire","Smithboro","Freeville","Cottekill","Cragsmoor","Highmount","Lake Hill","Phoenicia","Pine Hill","Port Ewen","Rosendale","Shandaken","Wawarsing","West Camp","West Park","Woodstock","New Paltz","Johnsburg","Wevertown","Cambridge","Cossayuna","Granville","Greenwich","Whitehall","Red Creek","Chappaqua","Hartsdale","Hawthorne","Irvington","Larchmont","Maryknoll","Peekskill","Scarsdale","Shenorock","Shrub Oak","Tarrytown","Thornwood","Verplanck","Varysburg","Middlesex","Rushville","Altamont","Coeymans","Glenmont","Westerlo","Angelica","Caneadea","Fillmore","Houghton","Richburg","Rushford","Endicott","Killawog","Kirkwood","Ouaquaga","Sandusky","Allegany","Hinsdale","Randolph","Meridian","Sterling","Fredonia","Sheridan","Ashville","Falconer","Lakewood","Mayville","Portland","Stockton","Millport","Guilford","Plymouth","Philmont","Cortland","Marathon","Stamford","Arkville","Delancey","Franklin","Meridale","Billings","Fishkill","Red Hook","Wingdale","Clarence","Glenwood","Sardinia","Westport","Brushton","Gabriels","Mayfield","Oakfield","Stafford","Pavilion","Surprise","Catskill","Freehold","Oak Hill","Herkimer","Thendara","Carthage","Chaumont","Deferiet","Limerick","Lorraine","Brooklyn","Lowville","Hamilton","Clarkson","Fairport","Penfield","Sprakers","Freeport","Lawrence","Lynbrook","Malverne","Westbury","Woodmere","Bayville","Bellmore","Bethpage","Woodbury","New York","Appleton","Lewiston","Lockport","Hinckley","Knoxboro","Oriskany","Prospect","Sauquoit","Sherrill","Westdale","Woodgate","Camillus","Elbridge","Marietta","Syracuse","Bellvale","Harriman","Westtown","Cornwall","Maybrook","Newburgh","Huguenot","Hannibal","Hastings","Lycoming","Richland","Redfield","Maryland","Edmeston","Hartwick","Roseboom","Westford","Unadilla","Brewster","Garrison","Flushing","Elmhurst","Woodside","Rosedale","Brainard","Blauvelt","Hillburn","New City","Piermont","Sparkill","Wanakena","Winthrop","Delanson","Carlisle","Waterloo","Bradford","Campbell","Canisteo","Cohocton","Pulteney","Rexville","Woodhull","Bellport","Copiague","Holbrook","Melville","Islandia","Sayville","Shoreham","Eastport","Moriches","Southold","Ferndale","Richford","Lockwood","Newfield","Kingston","Connelly","Glenford","Napanoch","Gardiner","Highland","Marlboro","Wallkill","Riparius","Comstock","Fort Ann","Hartford","Savannah","Walworth","Buchanan","Crompond","Elmsford","Harrison","Millwood","Montrose","Ossining","Purchase","Valhalla","Waccabuc","Tuckahoe","Penn Yan","Lakemont","Selkirk","Belfast","Bolivar","Andover","Belmont","Conklin","Deposit","Endwell","Nineveh","Windsor","Delevan","Freedom","Gowanda","Machias","Moravia","Dunkirk","Brocton","Celoron","Kennedy","Sherman","Chemung","Pitcher","Norwich","Redford","Saranac","Chatham","Valatie","Mc Graw","Truxton","Harford","Roxbury","Hancock","Bangall","Chelsea","Glenham","Pawling","Verbank","Wassaic","Chaffee","Collins","Farnham","Hamburg","Holland","Lawtons","Marilla","Buffalo","Minerva","Newcomb","Paradox","Batavia","Linwood","Earlton","Ashland","Purling","Windham","Newport","Antwerp","Calcium","Clayton","Plessis","Redwood","Theresa","Croghan","Denmark","Conesus","Geneseo","Hemlock","Livonia","Piffard","Madison","Mumford","Webster","Hagaman","Mineola","Baldwin","Hewlett","Merrick","Jericho","Syosset","Seaford","Wantagh","Gasport","Newfane","Sanborn","Clinton","Manlius","Memphis","Warners","Fishers","Honeoye","Stanley","Chester","Florida","Howells","Johnson","Warwick","Fancher","Kendall","Mallory","Minetto","Phoenix","Pulaski","Laurens","Milford","Oneonta","Mahopac","Astoria","Bayside","Maspeth","Jamaica","Arverne","Buskirk","Grafton","Hoosick","Melrose","Suffern","Congers","Tallman","Thiells","Edwards","Hammond","Massena","Norfolk","Norwood","Potsdam","Pyrites","Russell","Rexford","Corinth","Alplaus","Burdett","Fayette","Romulus","Willard","Wayland","Addison","Arkport","Atlanta","Cameron","Corning","Hornell","Lindley","Babylon","Bayport","Bohemia","Commack","Medford","Oakdale","Montauk","Peconic","Shirley","Yaphank","Hankins","Liberty","Nichols","Spencer","Waverly","Mc Lean","Lansing","Tillson","Clemons","Hampton","Shushan","Macedon","Ontario","Palmyra","Wolcott","Amawalk","Ardsley","Bedford","Katonah","Yonkers","Castile","Wyoming","Bellona","Dresden","Alcove","Cohoes","Delmar","Latham","Medusa","Ravena","Albany","Alfred","Almond","Tunnel","Vestal","Dayton","Auburn","Aurora","Cayuga","Irving","Clymer","Panama","Ripley","Lowman","Elmira","Smyrna","Greene","Oxford","Altona","Mooers","Canaan","Ancram","Copake","Hudson","Preble","Willet","Denver","Hamden","Hobart","Sidney","Walton","Amenia","Beacon","Holmes","Tivoli","Angola","Boston","Colden","Moriah","Bombay","Malone","Bergen","Le Roy","Athens","Climax","Durham","Hunter","Jewett","Piseco","Sabael","Mohawk","Poland","Dexter","Rodman","Retsof","Sonyea","Dalton","Oneida","Hamlin","Hilton","Mendon","Elmont","Inwood","Roslyn","Barker","Olcott","Wilson","Camden","Remsen","Taberg","Vernon","Verona","Cicero","Fabius","Jordan","Nedrow","Pompey","Geneva","Gorham","Naples","Phelps","Victor","Goshen","Monroe","Walden","Medina","Albion","Holley","Morton","Fulton","Lacona","Mexico","Oswego","Parish","Altmar","Orwell","Morris","Carmel","Corona","Hollis","Berlin","Nassau","Monsey","Nanuet","Pomona","Tappan","Canton","Colton","Helena","Hermon","Lisbon","Madrid","Galway","Hadley","Gilboa","Summit","Alpine","Cayuta","Hector","Odessa","Tyrone","Jasper","Kanona","Savona","Selden","Laurel","Mastic","Orient","Quogue","Speonk","Bethel","Eldred","Harris","Roscoe","Barton","Candor","Dryden","Groton","Ithaca","Accord","Esopus","Glasco","Hurley","Rifton","Shokan","Willow","Milton","Modena","Argyle","Marion","Newark","Armonk","Purdys","Somers","Pelham","Arcade","Attica","Warsaw","Dundee","Himrod","Berne","Ceres","Swain","Bronx","Lisle","Maine","Olean","Genoa","Locke","Gerry","Niobe","Afton","Chazy","Ghent","Homer","Andes","Delhi","Akron","Alden","Brant","Depew","Derby","Essex","Keene","Lewis","Burke","Moira","Basom","Corfu","Byron","Cairo","Leeds","Wells","Inlet","Ilion","Adams","Oxbow","Greig","Turin","Nunda","Eaton","Fonda","Marcy","Utica","Minoa","Tully","Ionia","Arden","Otego","Nyack","Wayne","Avoca","Coram","Islip","Ridge","Upton","Yulan","Owego","Athol","Hague","Salem","Alton","Clyde","Lyons","Sodus","Bliss","Perry","Knox","Troy","Alma","Cuba","Hume","Scio","Leon","Otto","Cato","Stow","Erin","Peru","Eden","Elma","Elba","Acra","Avon","Lima","York","Hunt","Rush","Burt","Rome","Clay","Hall","Kent","Fine","Ovid","Lodi","Bath","Etna","Ruby","Rose","Dale","Pike","Jay","Ava","Rye"]'
  ),
  PI = [
    "Lewiston Woodville",
    "Rutherford College",
    "Pope Army Airfield",
    "Little Switzerland",
    "Wrightsville Beach",
    "Glendale Springs",
    "Ocean Isle Beach",
    "Connelly Springs",
    "Kill Devil Hills",
    "Mccutcheon Field",
    "North Wilkesboro",
    "Boiling Springs",
    "Pleasant Garden",
    "Jackson Springs",
    "Margarettsville",
    "Mineral Springs",
    "Laurel Springs",
    "West Jefferson",
    "Black Mountain",
    "Linville Falls",
    "Mount Pleasant",
    "Atlantic Beach",
    "Harkers Island",
    "Sherrills Ford",
    "Kings Mountain",
    "Roanoke Rapids",
    "Lake Junaluska",
    "East Flat Rock",
    "Hendersonville",
    "Barium Springs",
    "Scaly Mountain",
    "Southern Pines",
    "Carolina Beach",
    "Tarawa Terrace",
    "Elizabeth City",
    "Granite Quarry",
    "Pilot Mountain",
    "Cedar Mountain",
    "Moravian Falls",
    "Green Mountain",
    "Blounts Creek",
    "Elizabethtown",
    "Barnardsville",
    "Collettsville",
    "Granite Falls",
    "Morehead City",
    "Prospect Hill",
    "Lake Waccamaw",
    "Knotts Island",
    "Poplar Branch",
    "Powells Point",
    "Winston-Salem",
    "Bessemer City",
    "Browns Summit",
    "Mc Leansville",
    "Scotland Neck",
    "Maggie Valley",
    "Mountain Home",
    "Harrellsville",
    "Wilsons Mills",
    "Pollocksville",
    "Lemon Springs",
    "Robersonville",
    "Eagle Springs",
    "Pleasant Hill",
    "Franklinville",
    "Lumber Bridge",
    "Rutherfordton",
    "Pisgah Forest",
    "Fuquay Varina",
    "Holly Springs",
    "Willow Spring",
    "Seven Springs",
    "Millers Creek",
    "Roaring River",
    "Swepsonville",
    "Taylorsville",
    "Glade Valley",
    "Grassy Creek",
    "Warrensville",
    "Powellsville",
    "Sunset Beach",
    "Cedar Island",
    "Marshallberg",
    "Emerald Isle",
    "Cherry Point",
    "Fayetteville",
    "Point Harbor",
    "Manns Harbor",
    "Stumpy Point",
    "Macclesfield",
    "Belews Creek",
    "Tobaccoville",
    "Kernersville",
    "Mc Adenville",
    "Robbinsville",
    "Murfreesboro",
    "Mount Mourne",
    "Iron Station",
    "Huntersville",
    "Mount Gilead",
    "Castle Hayne",
    "Sneads Ferry",
    "Jacksonville",
    "Camp Lejeune",
    "Hillsborough",
    "Hurdle Mills",
    "Proctorville",
    "East Spencer",
    "Chimney Rock",
    "Newton Grove",
    "White Plains",
    "Balsam Grove",
    "Lake Toxaway",
    "Indian Trail",
    "Blowing Rock",
    "Valle Crucis",
    "Stantonsburg",
    "Hamptonville",
    "Stony Point",
    "Piney Creek",
    "Roaring Gap",
    "Minneapolis",
    "Chocowinity",
    "Mills River",
    "Weaverville",
    "Glen Alpine",
    "Jonas Ridge",
    "South Mills",
    "Salter Path",
    "Yanceyville",
    "Cerro Gordo",
    "Spring Lake",
    "Thomasville",
    "Kenansville",
    "Rocky Mount",
    "Franklinton",
    "Youngsville",
    "Cherryville",
    "High Shoals",
    "Mount Holly",
    "Fontana Dam",
    "Walstonburg",
    "Gibsonville",
    "Summerfield",
    "Buies Creek",
    "Waynesville",
    "Swanquarter",
    "Mooresville",
    "Statesville",
    "Turnersburg",
    "Union Grove",
    "Hot Springs",
    "Williamston",
    "Bakersville",
    "Spruce Pine",
    "Spring Hope",
    "Rich Square",
    "Holly Ridge",
    "Midway Park",
    "Cedar Grove",
    "Chapel Hill",
    "Rocky Point",
    "Winterville",
    "Mill Spring",
    "Cedar Falls",
    "Barnesville",
    "Red Springs",
    "Saint Pauls",
    "China Grove",
    "Forest City",
    "Union Mills",
    "Laurel Hill",
    "Misenheimer",
    "Lawsonville",
    "Sandy Ridge",
    "Walnut Cove",
    "Bryson City",
    "Morrisville",
    "Wake Forest",
    "Sugar Grove",
    "Mount Olive",
    "Black Creek",
    "Yadkinville",
    "Burlington",
    "Ansonville",
    "Lilesville",
    "Scottville",
    "Banner Elk",
    "Washington",
    "Merry Hill",
    "Bladenboro",
    "Wilmington",
    "Oak Island",
    "Ridgecrest",
    "Harrisburg",
    "Kannapolis",
    "Gloucester",
    "Providence",
    "Bear Creek",
    "Siler City",
    "Hayesville",
    "Mooresboro",
    "Fair Bluff",
    "Riegelwood",
    "Tabor City",
    "Whiteville",
    "Fort Bragg",
    "Cumberland",
    "Hope Mills",
    "Jarvisburg",
    "Kitty Hawk",
    "Mocksville",
    "Beulaville",
    "Chinquapin",
    "Battleboro",
    "Lewisville",
    "Rural Hall",
    "Walkertown",
    "Gatesville",
    "Hobbsville",
    "High Point",
    "Stokesdale",
    "Greensboro",
    "Lillington",
    "Edneyville",
    "Horse Shoe",
    "Tuckasegee",
    "Pine Level",
    "Smithfield",
    "Lincolnton",
    "Jamesville",
    "Sharpsburg",
    "Kure Beach",
    "Grantsboro",
    "Maple Hill",
    "Timberlake",
    "Bellarthur",
    "Greenville",
    "Grimesland",
    "Rockingham",
    "Stoneville",
    "Reidsville",
    "Mount Ulla",
    "Autryville",
    "Laurinburg",
    "New London",
    "Mount Airy",
    "State Road",
    "Marshville",
    "Middleburg",
    "Townsville",
    "Knightdale",
    "Rolesville",
    "Wilkesboro",
    "Jonesville",
    "Burnsville",
    "Altamahaw",
    "Haw River",
    "Saxapahaw",
    "Snow Camp",
    "Hiddenite",
    "Mc Farlan",
    "Peachland",
    "Wadesboro",
    "Fleetwood",
    "Jefferson",
    "Crossnore",
    "Montezuma",
    "White Oak",
    "Shallotte",
    "Southport",
    "Alexander",
    "Leicester",
    "Swannanoa",
    "Asheville",
    "Hildebran",
    "Morganton",
    "Patterson",
    "Williston",
    "Claremont",
    "Pittsboro",
    "Culberson",
    "Brasstown",
    "Lattimore",
    "Polkville",
    "Brunswick",
    "Chadbourn",
    "Clarendon",
    "Evergreen",
    "Hallsboro",
    "Bridgeton",
    "Cove City",
    "Vanceboro",
    "Currituck",
    "Harbinger",
    "Nags Head",
    "Lexington",
    "Southmont",
    "Cooleemee",
    "Rose Hill",
    "Albertson",
    "Rougemont",
    "Pfafftown",
    "Louisburg",
    "Cramerton",
    "Corapeake",
    "Creedmoor",
    "Hookerton",
    "Snow Hill",
    "Jamestown",
    "Oak Ridge",
    "Hollister",
    "Littleton",
    "Bunnlevel",
    "Hazelwood",
    "Flat Rock",
    "Engelhard",
    "Fairfield",
    "Cullowhee",
    "Dillsboro",
    "Glenville",
    "Four Oaks",
    "Middlesex",
    "Princeton",
    "Maysville",
    "La Grange",
    "Pink Hill",
    "Highlands",
    "Mars Hill",
    "Cornelius",
    "Paw Creek",
    "Pineville",
    "Charlotte",
    "Highfalls",
    "Pinehurst",
    "Pinebluff",
    "Nashville",
    "Whitakers",
    "Garysburg",
    "Pendleton",
    "Richlands",
    "Swansboro",
    "Stonewall",
    "Vandemere",
    "Hampstead",
    "Belvidere",
    "Farmville",
    "Randleman",
    "Lumberton",
    "Wentworth",
    "Cleveland",
    "Gold Hill",
    "Salisbury",
    "Cliffside",
    "Ellenboro",
    "Henrietta",
    "Lake Lure",
    "Salemburg",
    "Albemarle",
    "Richfield",
    "Stanfield",
    "Germanton",
    "Pine Hall",
    "Westfield",
    "Henderson",
    "Warrenton",
    "Zionville",
    "Goldsboro",
    "Pikeville",
    "Boonville",
    "East Bend",
    "Micaville",
    "Alamance",
    "Crumpler",
    "Elk Park",
    "Linville",
    "Plumtree",
    "Belhaven",
    "Pinetown",
    "Aulander",
    "Colerain",
    "Tar Heel",
    "Clarkton",
    "Longwood",
    "Calabash",
    "Winnabow",
    "Fairview",
    "Montreat",
    "Rhodhiss",
    "Atlantic",
    "Beaufort",
    "Sealevel",
    "Leasburg",
    "Goldston",
    "Fallston",
    "Lawndale",
    "Havelock",
    "New Bern",
    "Coinjock",
    "Shawboro",
    "Hatteras",
    "Rodanthe",
    "Wanchese",
    "Wallburg",
    "Magnolia",
    "Pinetops",
    "Bethania",
    "Clemmons",
    "Davidson",
    "Gastonia",
    "Whitsett",
    "Bat Cave",
    "Fletcher",
    "Zirconia",
    "Scranton",
    "Ocracoke",
    "Troutman",
    "Cashiers",
    "Whittier",
    "Broadway",
    "Deep Run",
    "Glenwood",
    "Old Fort",
    "Franklin",
    "Marshall",
    "Everetts",
    "Hamilton",
    "Oak City",
    "Matthews",
    "West End",
    "Aberdeen",
    "Carthage",
    "Lakeview",
    "Castalia",
    "Potecasi",
    "Seaboard",
    "Woodland",
    "Carrboro",
    "Alliance",
    "Arapahoe",
    "Hobucken",
    "Oriental",
    "Atkinson",
    "Hertford",
    "Falkland",
    "Fountain",
    "Columbus",
    "Asheboro",
    "Seagrove",
    "Fairmont",
    "Marietta",
    "Pembroke",
    "Woodleaf",
    "Rockwell",
    "Caroleen",
    "Spindale",
    "Roseboro",
    "Harrells",
    "Pinnacle",
    "Cherokee",
    "Sapphire",
    "Columbia",
    "Kittrell",
    "New Hill",
    "Ridgeway",
    "Creswell",
    "Plymouth",
    "Deep Gap",
    "Ferguson",
    "Mc Grady",
    "Thurmond",
    "Traphill",
    "Elm City",
    "Saratoga",
    "Polkton",
    "Creston",
    "Lansing",
    "Newland",
    "Pineola",
    "Pantego",
    "Kelford",
    "Roxobel",
    "Windsor",
    "Council",
    "Bolivia",
    "Candler",
    "Skyland",
    "Valdese",
    "Concord",
    "Midland",
    "Newport",
    "Hickory",
    "Catawba",
    "Conover",
    "Terrell",
    "Bennett",
    "Moncure",
    "Andrews",
    "Edenton",
    "Stedman",
    "Aydlett",
    "Corolla",
    "Linwood",
    "Welcome",
    "Advance",
    "Calypso",
    "Teachey",
    "Wallace",
    "Conetoe",
    "Tarboro",
    "Belmont",
    "Stanley",
    "Sunbury",
    "Bullock",
    "Clayton",
    "Roxboro",
    "Stovall",
    "Sedalia",
    "Enfield",
    "Halifax",
    "Hobgood",
    "Tillery",
    "Kipling",
    "Ahoskie",
    "Cofield",
    "Raeford",
    "Harmony",
    "Webster",
    "Comfort",
    "Trenton",
    "Cumnock",
    "Sanford",
    "Kinston",
    "Hassell",
    "Parmele",
    "Penland",
    "Robbins",
    "Cameron",
    "Red Oak",
    "Henrico",
    "Jackson",
    "Bayboro",
    "Lowland",
    "Merritt",
    "Willard",
    "Winfall",
    "Simpson",
    "Grifton",
    "Liberty",
    "Ramseur",
    "Trinity",
    "Cordova",
    "Ellerbe",
    "Hoffman",
    "Marston",
    "Parkton",
    "Rowland",
    "Shannon",
    "Madison",
    "Mayodan",
    "Spencer",
    "Clinton",
    "Garland",
    "Ivanhoe",
    "Norwood",
    "Oakboro",
    "Danbury",
    "Brevard",
    "Penrose",
    "Wingate",
    "Wendell",
    "Zebulon",
    "Raleigh",
    "Norlina",
    "Vaughan",
    "Fremont",
    "Purlear",
    "Graham",
    "Mebane",
    "Ennice",
    "Sparta",
    "Morven",
    "Aurora",
    "Edward",
    "Dublin",
    "Leland",
    "Supply",
    "Drexel",
    "Lenoir",
    "Hudson",
    "Camden",
    "Shiloh",
    "Smyrna",
    "Stella",
    "Blanch",
    "Milton",
    "Pelham",
    "Maiden",
    "Newton",
    "Bonlee",
    "Topton",
    "Marble",
    "Murphy",
    "Grover",
    "Shelby",
    "Bolton",
    "Nakina",
    "Falcon",
    "Godwin",
    "Linden",
    "Grandy",
    "Moyock",
    "Buxton",
    "Frisco",
    "Manteo",
    "Denton",
    "Faison",
    "Warsaw",
    "Bahama",
    "Durham",
    "Alexis",
    "Dallas",
    "Lowell",
    "Roduco",
    "Butner",
    "Oxford",
    "Climax",
    "Colfax",
    "Julian",
    "Weldon",
    "Angier",
    "Mamers",
    "Olivia",
    "Canton",
    "Etowah",
    "Gerton",
    "Naples",
    "Tuxedo",
    "Winton",
    "Scotts",
    "Balsam",
    "Benson",
    "Crouse",
    "Denver",
    "Marion",
    "Newell",
    "Biscoe",
    "Candor",
    "Bailey",
    "Conway",
    "Gaston",
    "Severn",
    "Hubert",
    "Efland",
    "Burgaw",
    "Currie",
    "Semora",
    "Bethel",
    "Stokes",
    "Saluda",
    "Sophia",
    "Staley",
    "Hamlet",
    "Norman",
    "Maxton",
    "Ruffin",
    "Landis",
    "Bostic",
    "Harris",
    "Turkey",
    "Gibson",
    "Wagram",
    "Locust",
    "Ararat",
    "Dobson",
    "Lowgap",
    "Siloam",
    "Almond",
    "Rosman",
    "Monroe",
    "Waxhaw",
    "Manson",
    "Garner",
    "Dudley",
    "Boomer",
    "Lucama",
    "Wilson",
    "Kelly",
    "Arden",
    "Icard",
    "Davis",
    "Stacy",
    "Bynum",
    "Tyner",
    "Warne",
    "Casar",
    "Delco",
    "Dover",
    "Ernul",
    "Barco",
    "Maple",
    "Salvo",
    "Waves",
    "Speed",
    "Gates",
    "Maury",
    "Coats",
    "Erwin",
    "Clyde",
    "Sylva",
    "Kenly",
    "Micro",
    "Selma",
    "Ether",
    "Ayden",
    "Tryon",
    "Orrum",
    "Faith",
    "Badin",
    "Toast",
    "Elkin",
    "Macon",
    "Roper",
    "Boone",
    "Vilas",
    "Ronda",
    "Elon",
    "Todd",
    "Bath",
    "Enka",
    "Gulf",
    "Earl",
    "Waco",
    "Wade",
    "Avon",
    "Bunn",
    "Eure",
    "Stem",
    "Dunn",
    "Dana",
    "Como",
    "Olin",
    "Vale",
    "Nebo",
    "Otto",
    "Star",
    "Troy",
    "Vass",
    "Lynn",
    "Eden",
    "King",
    "Apex",
    "Cary",
    "Wise",
    "Hays",
    "Sims",
    "Ash",
    "Rex",
  ],
  HI = [
    "Grand Forks Afb",
    "Sentinel Butte",
    "Saint Michael",
    "Golden Valley",
    "Saint Anthony",
    "Churchs Ferry",
    "New Rockford",
    "Grassy Butte",
    "Watford City",
    "Saint Thomas",
    "Starkweather",
    "Forest River",
    "Valley City",
    "Fort Totten",
    "Minnewaukan",
    "Willow City",
    "Powers Lake",
    "Dunn Center",
    "Grand Forks",
    "New Leipzig",
    "Cooperstown",
    "New England",
    "Turtle Lake",
    "White Earth",
    "Devils Lake",
    "Fort Ransom",
    "Abercrombie",
    "Cannon Ball",
    "South Heart",
    "Litchville",
    "Argusville",
    "Tower City",
    "West Fargo",
    "Carrington",
    "Grace City",
    "Cartwright",
    "Coleharbor",
    "Glen Ullin",
    "Petersburg",
    "Lidgerwood",
    "Saint John",
    "Fort Yates",
    "Richardton",
    "Montpelier",
    "Spiritwood",
    "Park River",
    "Burlington",
    "Donnybrook",
    "Hurdsfield",
    "Hettinger",
    "Pillsbury",
    "Wimbledon",
    "Fairfield",
    "Bottineau",
    "Casselton",
    "Davenport",
    "Wheatland",
    "Osnabrock",
    "Ellendale",
    "Fullerton",
    "Strasburg",
    "Glenfield",
    "Northwood",
    "Hannaford",
    "Pettibone",
    "Granville",
    "Karlsruhe",
    "Alexander",
    "Riverdale",
    "Underwood",
    "New Salem",
    "Christine",
    "Fairmount",
    "Hankinson",
    "Selfridge",
    "Dickinson",
    "Gladstone",
    "Jamestown",
    "Cleveland",
    "Courtenay",
    "Woodworth",
    "Ypsilanti",
    "Blanchard",
    "Galesburg",
    "Hillsboro",
    "Caledonia",
    "Fordville",
    "Minot Afb",
    "Fessenden",
    "Williston",
    "Lansford",
    "Westhope",
    "Scranton",
    "Bowbells",
    "Columbus",
    "Bismarck",
    "Driscoll",
    "Sterling",
    "Absaraka",
    "Mapleton",
    "Halliday",
    "Killdeer",
    "Marshall",
    "Sheyenne",
    "Braddock",
    "Hazelton",
    "Larimore",
    "Mekinock",
    "Reynolds",
    "Thompson",
    "Robinson",
    "Fredonia",
    "Napoleon",
    "Anamoose",
    "Voltaire",
    "Mandaree",
    "Arnegard",
    "Garrison",
    "Washburn",
    "Benedict",
    "Roseglen",
    "New Town",
    "Parshall",
    "Michigan",
    "Bathgate",
    "Cavalier",
    "Glasston",
    "Hamilton",
    "Mountain",
    "Walhalla",
    "Enderlin",
    "Glenburn",
    "Sherwood",
    "Mantador",
    "Mooreton",
    "Wahpeton",
    "Wyndmere",
    "Belcourt",
    "Dunseith",
    "Cogswell",
    "Goodrich",
    "Mcclusky",
    "Marmarth",
    "Belfield",
    "Buchanan",
    "Streeter",
    "Hansboro",
    "Rocklake",
    "Clifford",
    "Cummings",
    "Mayville",
    "Portland",
    "Edinburg",
    "Fairdale",
    "Berthold",
    "Des Lacs",
    "Chaseley",
    "Sykeston",
    "Mcgregor",
    "Wildrose",
    "Kathryn",
    "Sanborn",
    "Maddock",
    "Warwick",
    "Maxbass",
    "Newburg",
    "Flaxton",
    "Lignite",
    "Baldwin",
    "Menoken",
    "Buffalo",
    "Gardner",
    "Grandin",
    "Harwood",
    "Kindred",
    "Leonard",
    "Langdon",
    "Ambrose",
    "Fortuna",
    "Manning",
    "Kintyre",
    "Mchenry",
    "Arvilla",
    "Emerado",
    "Inkster",
    "Niagara",
    "Raleigh",
    "Shields",
    "Binford",
    "Edgeley",
    "Lamoure",
    "Balfour",
    "Deering",
    "Norwich",
    "Zeeland",
    "Stanton",
    "Flasher",
    "Palermo",
    "Stanley",
    "Mcville",
    "Crystal",
    "Drayton",
    "Pembina",
    "Wolford",
    "Brocket",
    "Hampden",
    "Webster",
    "Sheldon",
    "Walcott",
    "Rolette",
    "Gwinner",
    "Rutland",
    "Denhoff",
    "Luverne",
    "Pingree",
    "Egeland",
    "Grafton",
    "Douglas",
    "Kenmare",
    "Grenora",
    "Trenton",
    "Reeder",
    "Fingal",
    "Oriska",
    "Rogers",
    "Esmond",
    "Oberon",
    "Medora",
    "Antler",
    "Kramer",
    "Souris",
    "Bowman",
    "Portal",
    "Moffit",
    "Amenia",
    "Arthur",
    "Horace",
    "Hunter",
    "Hannah",
    "Milton",
    "Calvin",
    "Munich",
    "Nekoma",
    "Sarles",
    "Forbes",
    "Crosby",
    "Noonan",
    "Linton",
    "Manvel",
    "Carson",
    "Jessie",
    "Sutton",
    "Regent",
    "Dawson",
    "Steele",
    "Tappen",
    "Tuttle",
    "Berlin",
    "Dickey",
    "Marion",
    "Verona",
    "Gackle",
    "Bantry",
    "Towner",
    "Ashley",
    "Wishek",
    "Mercer",
    "Wilton",
    "Beulah",
    "Almont",
    "Mandan",
    "Hebron",
    "Dahlen",
    "Lakota",
    "Center",
    "Hensel",
    "Edmore",
    "Lawton",
    "Lisbon",
    "Mcleod",
    "Mohall",
    "Tolley",
    "Barney",
    "Colfax",
    "Cayuga",
    "Forman",
    "Havana",
    "Milnor",
    "Stirum",
    "Martin",
    "Amidon",
    "Taylor",
    "Finley",
    "Sharon",
    "Kensal",
    "Medina",
    "Bisbee",
    "Buxton",
    "Hatton",
    "Hoople",
    "Lankin",
    "Carpio",
    "Makoti",
    "Sawyer",
    "Surrey",
    "Harvey",
    "Bowdon",
    "Cathay",
    "Epping",
    "Dazey",
    "Leeds",
    "Tokio",
    "Rhame",
    "Regan",
    "Fargo",
    "Maida",
    "Wales",
    "Alsen",
    "Oakes",
    "Dodge",
    "Hague",
    "Beach",
    "Golva",
    "Gilby",
    "Elgin",
    "Drake",
    "Upham",
    "Velva",
    "Keene",
    "Butte",
    "Hazen",
    "Plaza",
    "Aneta",
    "Pekin",
    "Tolna",
    "Neche",
    "Balta",
    "Rugby",
    "Crary",
    "Agate",
    "Rolla",
    "Solen",
    "Lefor",
    "Cando",
    "Perth",
    "Adams",
    "Minto",
    "Pisek",
    "Minot",
    "Ryder",
    "Alamo",
    "Tioga",
    "Nome",
    "Knox",
    "York",
    "Wing",
    "Erie",
    "Page",
    "Mott",
    "Kulm",
    "Lehr",
    "Ruso",
    "Ross",
    "Penn",
    "Mylo",
    "Hope",
    "Zahl",
    "Ayr",
    "Jud",
    "Max",
    "Zap",
    "Ray",
  ],
  LI = JSON.parse(
    '["Washington Court House","South Bloomingville","Lakeside Marblehead","Mount Saint Joseph","Ridgeville Corners","Saint Clairsville","Broadview Heights","Isle Saint George","Unionville Center","North Kingsville","South Charleston","North Georgetown","Canal Winchester","East Springfield","Saint Louisville","Columbia Station","North Ridgeville","Westfield Center","New Straitsville","Commercial Point","Franklin Furnace","North Bloomfield","New Philadelphia","Magnetic Springs","North Lewisburg","Washingtonville","Sulphur Springs","Mount Blanchard","North Fairfield","New Springfield","New Bloomington","West Alexandria","West Manchester","West Portsmouth","West Farmington","Port Washington","North Baltimore","Mc Cutchenville","New Marshfield","Powhatan Point","College Corner","Christiansburg","East Liverpool","East Palestine","East Rochester","West Lafayette","New Washington","North Robinson","North Royalton","Kelleys Island","Berlin Heights","Jeffersonville","Yellow Springs","Old Washington","Liberty Center","Sinking Spring","Mingo Junction","Mount Pleasant","Summit Station","Russells Point","West Mansfield","Sheffield Lake","Mount Sterling","West Jefferson","New Middletown","Tuppers Plains","Mcconnelsville","Chandlersville","East Fultonham","Columbus Grove","Scioto Furnace","Jackson Center","Port Jefferson","North Lawrence","Cuyahoga Falls","Milford Center","Pleasant Plain","Little Hocking","Fredericksburg","West Millgrove","Upper Sandusky","East Cleveland","Williamsfield","New Hampshire","New Knoxville","Martins Ferry","Mechanicstown","Sherrodsville","Mechanicsburg","North Hampton","New Waterford","Chagrin Falls","North Olmsted","Maple Heights","Olmsted Falls","Pleasantville","Milledgeville","East Claridon","Spring Valley","Pleasant City","Camp Dennison","Mount Victory","Union Furnace","Hammondsville","Fredericktown","Mount Liberty","Bellefontaine","Berlin Center","North Jackson","Chippewa Lake","Sharon Center","Burkettsville","Fort Recovery","Pleasant Hill","White Cottage","Junction City","New Lexington","Garrettsville","Fort Jennings","Richmond Dale","South Webster","Green Springs","Kettlersville","Mineral Ridge","Newcomerstown","South Lebanon","New Matamoras","Marshallville","Bowling Green","Milton Center","Spencerville","Jeromesville","Jacksonville","Fayetteville","Russellville","Collinsville","West Chester","Donnelsville","New Carlisle","South Vienna","Tremont City","New Richmond","Newtonsville","Williamsburg","Martinsville","Port William","Independence","Strongsville","Lewis Center","Pickerington","Bloomingburg","Reynoldsburg","Terrace Park","Benton Ridge","Williamstown","Walnut Creek","Bloomingdale","Steubenville","Tiltonsville","Mount Vernon","Proctorville","Buckeye Lake","Kirkersville","Belle Center","East Liberty","Rushsylvania","West Liberty","North Benton","Ludlow Falls","Farmersville","Phillipsburg","Chesterville","Mount Gilead","Duncan Falls","Belle Valley","Port Clinton","Williamsport","Vaughnsville","Wheelersburg","Fort Loramie","Canal Fulton","Middlebranch","Robertsville","North Canton","Munroe Falls","Bristolville","Leavittsburg","Newton Falls","Gnadenhutten","Mineral City","Uhrichsville","Middle Point","New Plymouth","Grand Rapids","Bentonville","Cherry Fork","Loudonville","Perrysville","Hockingport","Nelsonville","Saint Johns","Saint Marys","Waynesfield","Barnesville","Hamersville","Higginsport","Saint Paris","Springfield","Blanchester","Clarksville","Salineville","Summitville","Bakersville","Gates Mills","Rocky River","Bay Village","Brecksville","Hollansburg","New Madison","Mark Center","Westerville","Millersport","Stoutsville","Sugar Grove","Pettisville","Chesterland","Middlefield","Bowersville","Wilberforce","Quaker City","Senecaville","Harrisville","New Bavaria","Carbon Hill","Haydenville","Laurelville","Murray City","Big Prairie","Holmesville","Millersburg","Monroeville","Bladensburg","Martinsburg","Grand River","Painesville","South Point","Willow Wood","Jacksontown","Brownsville","Harbor View","South Solon","Lake Milton","Lowellville","Valley City","Long Bottom","Maria Stein","Saint Henry","West Milton","Beallsville","New Lebanon","Chesterhill","New Concord","Frazeysburg","Sarahsville","Summerfield","Dexter City","Clay Center","Middle Bass","Rocky Ridge","Grover Hill","Crooksville","Mount Perry","Circleville","New Holland","Streetsboro","West Elkton","Continental","Miller City","Chillicothe","Bourneville","Londonderry","South Salem","East Sparta","East Canton","Mesopotamia","Orangeville","Southington","Stone Creek","Wilkesville","Harveysburg","Kings Mills","Waynesville","Lower Salem","Wingett Run","Apple Creek","Mount Eaton","Pemberville","Stony Ridge","Manchester","Blue Creek","West Union","Winchester","Hayesville","Austinburg","Kingsville","Rock Creek","Unionville","Carbondale","Sharpsburg","The Plains","New Bremen","Wapakoneta","Morristown","Bridgeport","Jacobsburg","Georgetown","Mount Orab","Cincinnati","Middletown","Seven Mile","Somerville","Carrollton","Miamiville","Owensville","New Vienna","Wilmington","Wellsville","Columbiana","Hanoverton","Kensington","West Point","Blissfield","Conesville","Plainfield","Walhonding","Gettysburg","Greenville","New Weston","North Star","Versailles","Union City","Hicksville","Birmingham","Lithopolis","New Albany","Grove City","Harrisburg","Lockbourne","Crown City","Gallipolis","Rio Grande","Cedarville","Cumberland","Salesville","North Bend","Mount Cory","New Athens","New Rumley","Deersville","Tippecanoe","Greenfield","Mowrystown","Rockbridge","Mount Hope","New London","Dillonvale","Piney Fork","Smithfield","Brinkhaven","Centerburg","Willoughby","Chesapeake","Kitts Hill","Alexandria","Huntsville","Middleburg","Zanesfield","Wellington","Waterville","Whitehouse","Plain City","North Lima","Petersburg","Youngstown","Green Camp","Homerville","Litchfield","Langsville","Middleport","Reedsville","Lewisville","Woodsfield","Clarington","Graysville","Brookville","Germantown","Miamisburg","Cardington","Zanesville","Adamsville","Oak Harbor","Put In Bay","Thornville","Brady Lake","Cloverdale","Clarksburg","Bainbridge","Hallsville","Gibsonburg","Friendship","Lucasville","Mc Dermott","Portsmouth","Bettsville","Bloomville","New Riegel","Beach City","Louisville","Waynesburg","Northfield","Brookfield","Sandyville","Stillwater","Sugarcreek","Tuscarawas","Marysville","Maineville","Springboro","Doylestown","West Salem","Smithville","Montpelier","West Unity","Jerry City","Perrysburg","Beaverdam","Lafayette","Ashtabula","Jefferson","Amesville","Coolville","Guysville","Millfield","Uniopolis","Alledonia","Fairpoint","Shadyside","Fairfield","Leesville","Westville","Woodstock","Reesville","Homeworth","Coshocton","Chatfield","Crestline","Cleveland","Beachwood","Brookpark","Palestine","Yorkshire","Evansport","Kilbourne","Ostrander","Vermilion","Baltimore","Lancaster","Rushville","Blacklick","Groveport","Huntsburg","Montville","Bellbrook","Jamestown","Byesville","Cambridge","Kimbolton","Lore City","Miamitown","Arlington","Van Buren","Roundhead","Mc Guffey","Bowerston","Hillsboro","Lynchburg","Lakeville","Nashville","Winesburg","Greenwich","New Haven","Amsterdam","Brilliant","Yorkville","Wickliffe","Rock Camp","Granville","Johnstown","Pataskala","Lewistown","Avon Lake","Ellsworth","Greenford","Struthers","Caledonia","Brunswick","Wadsworth","Chickasaw","Coldwater","Montezuma","Covington","Tipp City","Jerusalem","Englewood","Stockport","Blue Rock","Fultonham","Roseville","Williston","Cynthiana","Stockdale","Wakefield","Rootstown","Deerfield","Lewisburg","New Paris","Ottoville","Bellville","Mansfield","Frankfort","Woodville","Haverhill","Flat Rock","Maplewood","Pemberton","Greentown","Hartville","Limaville","Massillon","Macedonia","Twinsburg","Barberton","Peninsula","Tallmadge","Richfield","Uniontown","Mc Donald","Somerdale","Strasburg","Ohio City","Venedocia","Willshire","Mc Arthur","Macksburg","Waterford","Watertown","Alvordton","Blakeslee","Dunbridge","Risingsun","Walbridge","Hoytville","Tontogany","Northwood","Bloomdale","Bluffton","Savannah","Sullivan","Conneaut","Pierpont","Chauncey","Glouster","Buckland","Bethesda","Bellaire","Colerain","Lafferty","Flushing","Piedmont","Holloway","Aberdeen","Feesburg","Sardinia","Hamilton","Overpeck","Rosewood","Felicity","Loveland","Leetonia","Lakewood","Westlake","Pitsburg","Rossburg","Defiance","Sherwood","Delaware","Castalia","Sandusky","Thurston","Hilliard","Columbus","Galloway","Archbold","Metamora","Cheshire","Thompson","Fairborn","Fairview","Addyston","Harrison","Ridgeway","Freeport","Hopedale","Mc Clure","Napoleon","Highland","Leesburg","Glenmont","Killbuck","Bellevue","Oak Hill","Wellston","Bergholz","Irondale","Richmond","Stratton","Wolf Run","Danville","Eastlake","Scottown","Waterloo","De Graff","Lakeview","Lagrange","Monclova","Neapolis","Sylvania","Campbell","Canfield","Damascus","Prospect","Hinckley","Portland","Syracuse","Rockford","Bradford","Casstown","Fletcher","Stafford","Hannibal","Vandalia","Hopewell","Nashport","Caldwell","Graytown","Haviland","Paulding","Glenford","Moxahala","Somerset","Ashville","Randolph","Eldorado","Glandorf","Plymouth","Kingston","Fostoria","Old Fort","Republic","Alliance","Brewster","Magnolia","Lakemore","Mogadore","Fairlawn","Burghill","Cortland","Farmdale","Hartford","Dennison","Broadway","Richwood","Van Wert","Franklin","Oregonia","Bartlett","Coal Run","Marietta","Sterling","Orrville","Edgerton","Millbury","Rossford","Harpster","Sycamore","Peebles","Delphos","Ashland","Andover","Windsor","Buchtel","Stewart","Trimble","Minster","Belmont","Glencoe","Lansing","Maynard","Warnock","Bannock","Decatur","Shandon","Trenton","Augusta","Dellroy","Malvern","Catawba","Batavia","Milford","Neville","Midland","Bucyrus","Bedford","Ansonia","Arcanum","Sunbury","Carroll","Fayette","Swanton","Wauseon","Bidwell","Patriot","Thurman","Chardon","Newbury","Novelty","Parkman","Clifton","Buffalo","Derwent","Kipling","Arcadia","Findlay","Mc Comb","Dunkirk","Deshler","Grelton","Holgate","Malinta","Okolona","Collins","Norwalk","Willard","Wakeman","Coalton","Jackson","Rayland","Toronto","Gambier","Madison","Ironton","Gratiot","Amherst","Grafton","Oberlin","Holland","Sedalia","Sebring","Seville","Spencer","Chester","Pomeroy","Rutland","Conover","Potsdam","Cameron","Clayton","Marengo","Norwich","Dresden","Trinway","Curtice","Lacarne","Antwerp","Melrose","Oakwood","Corning","Shawnee","Tarlton","Piketon","Waverly","Atwater","Ravenna","Wayland","Windham","Diamond","Belmore","Leipsic","Pandora","Ontario","Adelphi","Burgoon","Fremont","Lindsey","Vickery","Minford","Melmore","Botkins","Houston","Minerva","Navarre","Clinton","Hubbard","Kinsman","Bolivar","Midvale","Raymond","Zaleski","Lebanon","Beverly","Fleming","Newport","Vincent","Whipple","Burbank","Creston","Rittman","Wooster","Pioneer","Stryker","Bradner","Lemoyne","Portage","Rudolph","Haskins","Wharton","Seaman","Harrod","Nankin","Dorset","Geneva","Orwell","Athens","Albany","Barton","Blaine","Ripley","Monroe","Okeana","Oxford","Urbana","Medway","Amelia","Bethel","Goshen","Moscow","Sabina","Elkton","Lisbon","Negley","Rogers","Winona","Fresno","Warsaw","Galion","Oceola","Euclid","Osgood","Farmer","Jewell","Ashley","Galena","Powell","Radnor","Amanda","Bremen","Dublin","Vinton","Burton","Dayton","Cleves","Hooven","Jenera","Rawson","Vanlue","Kenton","Forest","Jewett","Colton","Hamler","Berlin","Empire","Howard","Mentor","Croton","Hebron","Newark","Quincy","Elyria","Kipton","Lorain","Berkey","Maumee","Toledo","Oregon","London","Beloit","Marion","La Rue","Martel","Morral","Medina","Racine","Celina","Mendon","Laings","Malaga","Sardis","Edison","Fulton","Iberia","Shauck","Sparta","Elmore","Gypsum","Martin","Orient","Beaver","Jasper","Latham","Aurora","Mantua","Camden","Gratis","Verona","Dupont","Kalida","Ottawa","Butler","Shelby","Shiloh","Helena","Rarden","Alvada","Attica","Bascom","Kansas","Tiffin","Russia","Sidney","Maximo","Wilmot","Canton","Hudson","Fowler","Girard","Masury","Vienna","Warren","Baltic","Dundee","Convoy","Creola","Hamden","Morrow","Barlow","Belpre","Cutler","Lowell","Dalton","Kidron","Shreve","Kunkle","Cygnet","Luckey","Custar","Weston","Nevada","Gomer","Cairo","Shade","Neffs","Cable","Mingo","Chilo","Salem","Keene","Berea","Solon","Huron","Milan","Amlin","Brice","Delta","Lyons","Alpha","Xenia","Alger","Cadiz","Logan","Charm","Adena","Perry","Pedro","Homer","Heath","Utica","Waldo","Laura","Piqua","Malta","Philo","Genoa","Cecil","Latty","Payne","Derby","Hiram","Eaton","Lucas","Clyde","Otway","Stout","Paris","Green","Akron","Niles","Dover","Irwin","Elgin","Scott","Mason","Bryan","Wayne","Carey","Kirby","Lynx","Lima","Nova","Polk","Rome","Ross","Enon","Cuba","Tiro","Kerr","Dola","Scio","Etna","Avon","Lodi","Troy","Kent","Anna","Bath","Stow","Zoar","Wren","Reno","Edon","Ney","Ada","Ava","Ray"]'
  ),
  WI = [
    "Oklahoma City",
    "Medicine Park",
    "Mountain View",
    "Mountain Park",
    "Webbers Falls",
    "S Coffeyville",
    "Ratliff City",
    "Spencerville",
    "Pauls Valley",
    "Rush Springs",
    "Thackerville",
    "Rentiesville",
    "Cleo Springs",
    "Locust Grove",
    "Council Hill",
    "Broken Arrow",
    "Collinsville",
    "Sand Springs",
    "Bartlesville",
    "Fort Towson",
    "Chattanooga",
    "Weatherford",
    "Custer City",
    "Elmore City",
    "Holdenville",
    "Connerville",
    "Shady Point",
    "Burneyville",
    "Wright City",
    "Fort Gibson",
    "Nicoma Park",
    "North Miami",
    "Haileyville",
    "Saint Louis",
    "Marble City",
    "Fort Supply",
    "Burlington",
    "Stringtown",
    "Greenfield",
    "Bennington",
    "Cartwright",
    "Union City",
    "Gene Autry",
    "Lone Grove",
    "Boise City",
    "Centrahoma",
    "Bluejacket",
    "Kellyville",
    "Manchester",
    "Pond Creek",
    "Deer Creek",
    "Whitefield",
    "Mannsville",
    "Tishomingo",
    "Mill Creek",
    "Ponca City",
    "Kingfisher",
    "Whitesboro",
    "Washington",
    "Broken Bow",
    "Smithville",
    "Wainwright",
    "Stillwater",
    "Hartshorne",
    "Sweetwater",
    "Countyline",
    "Grandfield",
    "Burns Flat",
    "Westville",
    "Hitchcock",
    "Fort Cobb",
    "Gracemont",
    "Park Hill",
    "Tahlequah",
    "Lexington",
    "Fort Sill",
    "Indiahoma",
    "Big Cabin",
    "Drumright",
    "Twin Oaks",
    "Covington",
    "Hillsdale",
    "Maysville",
    "Wynnewood",
    "Stratford",
    "Chickasha",
    "Mccurtain",
    "Altus Afb",
    "Addington",
    "Wapanucka",
    "Blackwell",
    "Hennessey",
    "Roosevelt",
    "Lone Wolf",
    "Wilburton",
    "Davenport",
    "Overbrook",
    "Blanchard",
    "Newcastle",
    "Eagletown",
    "Millerton",
    "Dougherty",
    "Wheatland",
    "Henryetta",
    "Barnsdall",
    "Wyandotte",
    "Cleveland",
    "Indianola",
    "Mcalester",
    "Pittsburg",
    "Wardville",
    "Fittstown",
    "Stonewall",
    "Earlsboro",
    "Tuskahoma",
    "Claremore",
    "Frederick",
    "Hollister",
    "Dill City",
    "Mooreland",
    "Stilwell",
    "Cherokee",
    "Elk City",
    "Longdale",
    "Southard",
    "Bokchito",
    "Anadarko",
    "Carnegie",
    "Piedmont",
    "Healdton",
    "Springer",
    "Coalgate",
    "Fletcher",
    "Geronimo",
    "Sterling",
    "Randlett",
    "Mannford",
    "Shamrock",
    "Shattuck",
    "Drummond",
    "Fairmont",
    "Waukomis",
    "Hennepin",
    "Ninnekah",
    "Pocasset",
    "Eldorado",
    "Headrick",
    "Ringling",
    "Hastings",
    "Kaw City",
    "Talihina",
    "Fanshawe",
    "Heavener",
    "Chandler",
    "Wellston",
    "Crescent",
    "Langston",
    "Marshall",
    "Meridian",
    "Marietta",
    "Battiest",
    "Valliant",
    "Checotah",
    "Hitchita",
    "Fairview",
    "Isabella",
    "Ringwood",
    "Kingston",
    "Chouteau",
    "Spavinaw",
    "Muskogee",
    "Morrison",
    "Billings",
    "Red Rock",
    "Delaware",
    "Weleetka",
    "Okmulgee",
    "Schulter",
    "Pawhuska",
    "Skiatook",
    "Commerce",
    "Fairland",
    "Jennings",
    "Canadian",
    "Alderson",
    "Fitzhugh",
    "Tecumseh",
    "Cheyenne",
    "Crawford",
    "Seminole",
    "Cromwell",
    "Sallisaw",
    "Comanche",
    "Goodwell",
    "Hardesty",
    "Davidson",
    "Loveland",
    "Glenpool",
    "Oakhurst",
    "Ochelata",
    "Sentinel",
    "Woodward",
    "Proctor",
    "Amorita",
    "Watonga",
    "Achille",
    "Colbert",
    "Hendrix",
    "Kenefic",
    "Platter",
    "Lookeba",
    "Calumet",
    "El Reno",
    "Mustang",
    "Ardmore",
    "Cookson",
    "Hulbert",
    "Welling",
    "Boswell",
    "Clarita",
    "Walters",
    "Bristow",
    "Sapulpa",
    "Clinton",
    "Arapaho",
    "Colcord",
    "Oakwood",
    "Seiling",
    "Camargo",
    "Carrier",
    "Douglas",
    "Kremlin",
    "Lindsay",
    "Bradley",
    "Medford",
    "Granite",
    "Buffalo",
    "Laverne",
    "Rosston",
    "Stigler",
    "Lequire",
    "Wetumka",
    "Olustee",
    "Waurika",
    "Coleman",
    "Milburn",
    "Bromide",
    "Newkirk",
    "Tonkawa",
    "Cashion",
    "Okarche",
    "Red Oak",
    "Honobia",
    "Bokoshe",
    "Cameron",
    "Leflore",
    "Guthrie",
    "Mulhall",
    "Orlando",
    "Purcell",
    "Haworth",
    "Pickens",
    "Ringold",
    "Eufaula",
    "Stidham",
    "Chester",
    "Lebanon",
    "Ketchum",
    "Langley",
    "Sulphur",
    "Boynton",
    "Haskell",
    "Marland",
    "Lenapah",
    "Arcadia",
    "Bethany",
    "Choctaw",
    "Spencer",
    "Newalla",
    "Preston",
    "Burbank",
    "Fairfax",
    "Shidler",
    "Hallett",
    "Maramec",
    "Terlton",
    "Ralston",
    "Cushing",
    "Glencoe",
    "Perkins",
    "Crowder",
    "Blocker",
    "Quinton",
    "Savanna",
    "Francis",
    "Shawnee",
    "Wanette",
    "Antlers",
    "Clayton",
    "Nashoba",
    "Catoosa",
    "Chelsea",
    "Oologah",
    "Bowlegs",
    "Sasakwa",
    "Moffett",
    "Muldrow",
    "Texhoma",
    "Manitou",
    "Leonard",
    "Redbird",
    "Wagoner",
    "Cordell",
    "Hopeton",
    "Freedom",
    "Waynoka",
    "Carmen",
    "Goltry",
    "Helena",
    "Beaver",
    "Forgan",
    "Turpin",
    "Carter",
    "Texola",
    "Canton",
    "Okeene",
    "Durant",
    "Albany",
    "Calera",
    "Albert",
    "Apache",
    "Binger",
    "Cement",
    "Hinton",
    "Concho",
    "Graham",
    "Wilson",
    "Tatums",
    "Moodys",
    "Sawyer",
    "Kenton",
    "Norman",
    "Lehigh",
    "Tupelo",
    "Lawton",
    "Temple",
    "Vinita",
    "Kiefer",
    "Milfay",
    "Mounds",
    "Oilton",
    "Butler",
    "Thomas",
    "Kansas",
    "Leedey",
    "Putnam",
    "Taloga",
    "Arnett",
    "Garber",
    "Lahoma",
    "Hunter",
    "Tuttle",
    "Verden",
    "Wakita",
    "Lamont",
    "Mangum",
    "Willow",
    "Hollis",
    "Vinson",
    "Calvin",
    "Stuart",
    "Atwood",
    "Dustin",
    "Martha",
    "Terral",
    "Braman",
    "Nardin",
    "Gotebo",
    "Snyder",
    "Hobart",
    "Panola",
    "Arkoma",
    "Pocola",
    "Hodgen",
    "Monroe",
    "Panama",
    "Poteau",
    "Wister",
    "Stroud",
    "Carney",
    "Meeker",
    "Prague",
    "Sparks",
    "Dibble",
    "Bethel",
    "Garvin",
    "Golden",
    "Idabel",
    "Watson",
    "Madill",
    "Disney",
    "Salina",
    "Strang",
    "Braggs",
    "Oktaha",
    "Warner",
    "Lucien",
    "Nowata",
    "Castle",
    "Okemah",
    "Edmond",
    "Harrah",
    "Luther",
    "Morris",
    "Hominy",
    "Wynona",
    "Cardin",
    "Picher",
    "Quapaw",
    "Pawnee",
    "Ripley",
    "Blanco",
    "Mcloud",
    "Macomb",
    "Albion",
    "Finley",
    "Moyers",
    "Rattan",
    "Durham",
    "Hammon",
    "Reydon",
    "Talala",
    "Konawa",
    "Wewoka",
    "Roland",
    "Marlow",
    "Foster",
    "Duncan",
    "Guymon",
    "Hooker",
    "Tyrone",
    "Tipton",
    "Owasso",
    "Sperry",
    "Coweta",
    "Porter",
    "Ramona",
    "Colony",
    "Bessie",
    "Canute",
    "Dacoma",
    "Mutual",
    "Sharon",
    "Bunch",
    "Watts",
    "Aline",
    "Atoka",
    "Caney",
    "Daisy",
    "Balko",
    "Erick",
    "Sayre",
    "Geary",
    "Caddo",
    "Cyril",
    "Eakly",
    "Hydro",
    "Yukon",
    "Tussy",
    "Peggs",
    "Grant",
    "Soper",
    "Swink",
    "Keyes",
    "Noble",
    "Cache",
    "Elgin",
    "Faxon",
    "Meers",
    "Devol",
    "Welch",
    "Depew",
    "Slick",
    "Tulsa",
    "Eucha",
    "Grove",
    "Fargo",
    "Bison",
    "Paoli",
    "Amber",
    "Minco",
    "Gould",
    "Kinta",
    "Keota",
    "Lamar",
    "Altus",
    "Blair",
    "Elmer",
    "Oscar",
    "Ravia",
    "Dover",
    "Loyal",
    "Omega",
    "Gowen",
    "Spiro",
    "Tryon",
    "Coyle",
    "Wayne",
    "Byars",
    "Hanna",
    "Adair",
    "Pryor",
    "Davis",
    "Porum",
    "Perry",
    "Boley",
    "Paden",
    "Jones",
    "Beggs",
    "Dewar",
    "Avant",
    "Osage",
    "Afton",
    "Miami",
    "Kiowa",
    "Krebs",
    "Allen",
    "Asher",
    "Foyil",
    "Inola",
    "Velma",
    "Adams",
    "Bixby",
    "Jenks",
    "Copan",
    "Dewey",
    "Rocky",
    "Lane",
    "Gate",
    "Mead",
    "Kemp",
    "Hugo",
    "Felt",
    "Oaks",
    "Vici",
    "Gage",
    "Enid",
    "Alex",
    "Nash",
    "Hoyt",
    "Duke",
    "Ryan",
    "Howe",
    "Muse",
    "Agra",
    "Leon",
    "Rufe",
    "Ames",
    "Meno",
    "Rose",
    "Taft",
    "Wann",
    "Prue",
    "Yale",
    "Roff",
    "Maud",
    "Snow",
    "Gore",
    "Gans",
    "Vian",
    "Loco",
    "Okay",
    "Vera",
    "Corn",
    "Foss",
    "Alva",
    "Jet",
    "Fox",
    "Jay",
    "Fay",
    "May",
    "Ada",
  ],
  AI = [
    "Mount Hood Parkdale",
    "Christmas Valley",
    "Milton Freewater",
    "Government Camp",
    "New Pine Creek",
    "Gleneden Beach",
    "Crawfordsville",
    "Saint Benedict",
    "Rockaway Beach",
    "Tolovana Park",
    "Columbia City",
    "Cascade Locks",
    "Central Point",
    "Cave Junction",
    "Klamath Falls",
    "Sprague River",
    "Cottage Grove",
    "Junction City",
    "Pleasant Hill",
    "Jordan Valley",
    "Rhododendron",
    "Cannon Beach",
    "Saint Helens",
    "Myrtle Point",
    "Powell Butte",
    "Camas Valley",
    "Idleyld Park",
    "Myrtle Creek",
    "Mount Vernon",
    "Prairie City",
    "Jacksonville",
    "Camp Sherman",
    "Warm Springs",
    "Fort Klamath",
    "Lincoln City",
    "Scotts Mills",
    "Happy Valley",
    "Independence",
    "Grass Valley",
    "Pacific City",
    "North Powder",
    "Forest Grove",
    "North Plains",
    "Beavercreek",
    "Eagle Creek",
    "Lake Oswego",
    "Oregon City",
    "Wilsonville",
    "Deer Island",
    "Port Orford",
    "Canyonville",
    "Canyon City",
    "Butte Falls",
    "Eagle Point",
    "Rogue River",
    "Grants Pass",
    "Wilderville",
    "Crater Lake",
    "Silver Lake",
    "Summer Lake",
    "Springfield",
    "Walterville",
    "South Beach",
    "Brownsville",
    "Mount Angel",
    "Bridal Veil",
    "Grand Ronde",
    "Summerville",
    "Tygh Valley",
    "Gales Creek",
    "Mcminnville",
    "Baker City",
    "Bridgeport",
    "Huntington",
    "Brightwood",
    "Marylhurst",
    "Clatskanie",
    "North Bend",
    "Prineville",
    "Gold Beach",
    "Wedderburn",
    "Terrebonne",
    "Days Creek",
    "Scottsburg",
    "Winchester",
    "Long Creek",
    "Frenchglen",
    "Hood River",
    "White City",
    "Shady Cove",
    "Wolf Creek",
    "Blue River",
    "Fall Creek",
    "Otter Rock",
    "Sweet Home",
    "Harrisburg",
    "Saint Paul",
    "Falls City",
    "Cloverdale",
    "Pilot Rock",
    "Enterprise",
    "The Dalles",
    "Corvallis",
    "Philomath",
    "Clackamas",
    "Gladstone",
    "West Linn",
    "Arch Cape",
    "Warrenton",
    "Scappoose",
    "Broadbent",
    "Brookings",
    "Reedsport",
    "Sutherlin",
    "Arlington",
    "Princeton",
    "Gold Hill",
    "Chiloquin",
    "Gilchrist",
    "Fort Rock",
    "Swisshome",
    "Depoe Bay",
    "Eddyville",
    "Seal Rock",
    "Tidewater",
    "Mill City",
    "Riverside",
    "Aumsville",
    "Jefferson",
    "Silverton",
    "Sublimity",
    "Lexington",
    "Troutdale",
    "Rickreall",
    "Garibaldi",
    "Manzanita",
    "Oceanside",
    "Tillamook",
    "Pendleton",
    "Hermiston",
    "Stanfield",
    "La Grande",
    "Beaverton",
    "Cornelius",
    "Hillsboro",
    "Lafayette",
    "Willamina",
    "Hereford",
    "Richland",
    "Blodgett",
    "Estacada",
    "Damascus",
    "Portland",
    "Vernonia",
    "Allegany",
    "Coos Bay",
    "Coquille",
    "Lakeside",
    "Langlois",
    "Brothers",
    "Gardiner",
    "Glendale",
    "Roseburg",
    "Yoncalla",
    "Dayville",
    "John Day",
    "Kimberly",
    "Monument",
    "Prospect",
    "Williams",
    "Crescent",
    "Lakeview",
    "Alvadore",
    "Cheshire",
    "Creswell",
    "Deadwood",
    "Florence",
    "Mapleton",
    "Oakridge",
    "Westlake",
    "Waldport",
    "Cascadia",
    "Crabtree",
    "Ironside",
    "Jamieson",
    "Westfall",
    "Woodburn",
    "Boardman",
    "Fairview",
    "Monmouth",
    "Bay City",
    "Neskowin",
    "Umatilla",
    "Antelope",
    "Tualatin",
    "Sherwood",
    "Mitchell",
    "Sheridan",
    "Halfway",
    "Sumpter",
    "Molalla",
    "Welches",
    "Astoria",
    "Hammond",
    "Seaside",
    "Rainier",
    "Paulina",
    "La Pine",
    "Redmond",
    "Sisters",
    "Dillard",
    "Oakland",
    "Tenmile",
    "Winston",
    "Mikkalo",
    "Diamond",
    "Drewsey",
    "Medford",
    "Ashland",
    "Phoenix",
    "Ashwood",
    "O Brien",
    "Bonanza",
    "Merrill",
    "Midland",
    "Chemult",
    "Paisley",
    "Blachly",
    "Marcola",
    "Westfir",
    "Logsden",
    "Newport",
    "Yachats",
    "Lebanon",
    "Tangent",
    "Juntura",
    "Ontario",
    "Gervais",
    "Hubbard",
    "Detroit",
    "Stayton",
    "Heppner",
    "Irrigon",
    "Corbett",
    "Gresham",
    "Nehalem",
    "Netarts",
    "Wheeler",
    "Meacham",
    "Lostine",
    "Wallowa",
    "Shaniko",
    "Manning",
    "Carlton",
    "Newberg",
    "Yamhill",
    "Haines",
    "Durkee",
    "Monroe",
    "Boring",
    "Colton",
    "Mulino",
    "Warren",
    "Bandon",
    "Powers",
    "Agness",
    "Azalea",
    "Elkton",
    "Riddle",
    "Tiller",
    "Umpqua",
    "Wilbur",
    "Condon",
    "Seneca",
    "Fields",
    "Talent",
    "Culver",
    "Madras",
    "Merlin",
    "Murphy",
    "Beatty",
    "Eugene",
    "Dexter",
    "Dorena",
    "Elmira",
    "Lorane",
    "Lowell",
    "Veneta",
    "Walton",
    "Neotsu",
    "Siletz",
    "Toledo",
    "Albany",
    "Foster",
    "Halsey",
    "Adrian",
    "Brogan",
    "Harper",
    "Aurora",
    "Donald",
    "Keizer",
    "Idanha",
    "Mehama",
    "Turner",
    "Dallas",
    "Beaver",
    "Athena",
    "Weston",
    "Imbler",
    "Imnaha",
    "Joseph",
    "Maupin",
    "Mosier",
    "Buxton",
    "Gaston",
    "Timber",
    "Fossil",
    "Dayton",
    "Dundee",
    "Oxbow",
    "Unity",
    "Alsea",
    "Canby",
    "Sandy",
    "Ophir",
    "Sixes",
    "Drain",
    "Glide",
    "Bates",
    "Burns",
    "Crane",
    "Hines",
    "Riley",
    "Odell",
    "Trail",
    "Kerby",
    "Selma",
    "Dairy",
    "Malin",
    "Plush",
    "Lyons",
    "Shedd",
    "Arock",
    "Nyssa",
    "Salem",
    "Gates",
    "Rufus",
    "Wasco",
    "Adams",
    "Helix",
    "Ukiah",
    "Elgin",
    "Union",
    "Dufur",
    "Banks",
    "Spray",
    "Amity",
    "Post",
    "Bend",
    "Keno",
    "Adel",
    "Noti",
    "Vida",
    "Otis",
    "Scio",
    "Vale",
    "Ione",
    "Kent",
    "Moro",
    "Hebo",
    "Echo",
    "Cove",
    "Bly",
  ],
  GI = JSON.parse(
    '["Columbia Cross Roads","Feasterville Trevose","Pennsylvania Furnace","Pocono Lake Preserve","Mount Pleasant Mills","Washington Crossing","Mount Holly Springs","Shawnee On Delaware","Cranberry Township","Lincoln University","Delaware Water Gap","Cambridge Springs","North Springfield","Blue Ridge Summit","Kleinfeltersville","Huntingdon Valley","Middlebury Center","Westmoreland City","East Mc Keesport","North Versailles","Granville Summit","Upper Black Eddy","North Washington","Northern Cambria","Pine Grove Mills","Saint Petersburg","Glen Riddle Lima","East Springfield","West Springfield","Big Cove Tannery","Rockhill Furnace","Huntington Mills","East Stroudsburg","Fairview Village","Plymouth Meeting","New Philadelphia","Schuylkill Haven","Chandlers Valley","East Vandergrift","Porters Sideling","Natrona Heights","East Pittsburgh","New Berlinville","Shoemakersville","East Smithfield","Trumbauersville","Connoquenessing","University Park","Chester Springs","Mineral Springs","Boiling Springs","Chester Heights","Clifton Heights","Mc Clellandtown","West Leisenring","Mc Connellsburg","Mc Connellstown","Rochester Mills","Mc Alisterville","East Petersburg","Washington Boro","Newton Hamilton","Buck Hill Falls","Marshalls Creek","East Greenville","Montgomeryville","Fort Washington","King Of Prussia","Washingtonville","Harrison Valley","West Middletown","Mc Knightstown","Mc Sherrystown","West Elizabeth","New Enterprise","Roaring Spring","Line Lexington","Mechanicsville","Milford Square","Plumsteadville","Point Pleasant","Fairless Hills","Saint Benedict","Saint Boniface","Albrightsville","Beaver Meadows","Kennett Square","Fairmount City","Lecontes Mills","New Cumberland","Elizabethville","Newtown Square","Chestnut Ridge","East Millsboro","Lemont Furnace","Mount Braddock","South Mountain","Upperstrasburg","Crystal Spring","Fort Littleton","Mapleton Depot","Sprankle Mills","East Waterford","New Providence","New Wilmington","West Pittsburg","Fredericksburg","Schaefferstown","Laurys Station","Old Zionsville","Lattimer Mines","East Smethport","Jackson Center","West Middlesex","Brodheadsville","Minisink Hills","Perkiomenville","Merion Station","Gwynedd Valley","Lafayette Hill","Sassamansville","Marion Heights","Northumberland","New Bloomfield","New Germantown","Dingmans Ferry","Summit Station","Beaver Springs","Port Trevorton","West Salisbury","Herrick Center","Little Meadows","South Montrose","Roaring Branch","Hendersonville","West Alexander","Pleasant Mount","South Sterling","New Kensington","Mount Pleasant","New Alexandria","Pleasant Unity","York New Salem","East Rochester","Bradfordwoods","Mc Kees Rocks","Spring Church","South Heights","Buffalo Mills","Bechtelsville","Douglassville","Lenhartsville","Shartlesville","Hollidaysburg","Warren Center","Blooming Glen","Fountainville","Kintnersville","Slippery Rock","Mineral Point","Saint Michael","Chest Springs","Sinnamahoning","State College","Sadsburyville","Birchrunville","New Bethlehem","Strattanville","Osceola Mills","Conneaut Lake","Conneautville","Mechanicsburg","New Kingstown","Walnut Bottom","Garnet Valley","Prospect Park","Connellsville","Dickerson Run","Star Junction","Pleasant Hall","Wells Tannery","Harrisonville","Rices Landing","Warriors Mark","Three Springs","Chambersville","Glen Campbell","Marion Center","Reynoldsville","Oakland Mills","Clarks Summit","Elizabethtown","Silver Spring","Willow Street","Breinigsville","Center Valley","Schnecksville","Hunlock Creek","Cogan Station","Montoursville","Picture Rocks","Port Allegany","Sheakleyville","Pocono Summit","Schwenksville","Gilbertsville","Lehigh Valley","Martins Creek","Mc Ewensville","Coal Township","Shermans Dale","Mahanoy Plane","Hummels Wharf","Hidden Valley","New Baltimore","Lawrenceville","Pleasantville","Fredericktown","Harrison City","East Prospect","Seven Valleys","West Pittston","Arendtsville","Bendersville","York Springs","Brackenridge","Allison Park","West Mifflin","Turtle Creek","North Apollo","Rural Valley","Beaver Falls","New Brighton","Shippingport","Manns Choice","Six Mile Run","Lyon Station","Wernersville","Duncansville","East Freedom","Williamsburg","Le Raysville","Stevensville","Riegelsville","Carversville","Forest Grove","Richlandtown","Sellersville","Spinnerstown","Portersville","West Sunbury","Fallentimber","Nesquehoning","Lake Harmony","Port Matilda","Spring Mills","Cochranville","Kemblesville","Toughkenamon","West Chester","Southeastern","Phoenixville","Saint Peters","Valley Forge","Shippenville","Lickingville","Curwensville","New Millport","West Decatur","Mifflinville","Spartansburg","Shippensburg","Williamstown","Philadelphia","Concordville","Mill Village","Belle Vernon","Fayette City","Gibbon Glade","Keisterville","Markleysburg","Merrittstown","Point Marion","East Hickory","West Hickory","Chambersburg","Fannettsburg","Fayetteville","Saint Thomas","Burnt Cabins","Warfordsburg","Garards Fort","Mount Morris","New Freeport","Spruce Creek","Blairs Mills","Shirleysburg","Brush Valley","Lucernemines","West Lebanon","Punxsutawney","Thompsontown","Bird In Hand","Bowmansville","Millersville","Peach Bottom","Ellwood City","Campbelltown","Mount Gretna","Germansville","Sybertsville","Harveys Lake","Sweet Valley","Wilkes Barre","Mountain Top","Williamsport","Jersey Shore","Jersey Mills","Derrick City","Mount Jewett","Clarks Mills","Bartonsville","Mountainhome","Mount Pocono","Pocono Manor","Pocono Pines","Tannersville","Salfordville","Willow Grove","Collegeville","Conshohocken","Harleysville","Spring House","Spring Mount","Zieglerville","Danielsville","Mount Bethel","Mount Carmel","Elliottsburg","Shinglehouse","Friedensburg","Klingerstown","Mahanoy City","New Ringgold","Port Clinton","Shamokin Dam","Central City","Hooversville","Muncy Valley","Friendsville","South Gibson","New Columbia","Clintonville","Grand Valley","Spring Creek","Burgettstown","Bentleyville","Meadow Lands","Scenery Hill","Newfoundland","Preston Park","South Canaan","Jacobs Creek","Laughlintown","New Florence","Factoryville","Franklintown","Spring Grove","Stewartstown","Wrightsville","West Reading","Abbottstown","Biglerville","East Berlin","Littlestown","Bridgeville","Buena Vista","Curtisville","Rural Ridge","Bethel Park","Monroeville","Cowansville","Worthington","New Galilee","Schellsburg","Riddlesburg","Mount Aetna","Rehrersburg","Strausstown","Virginville","Martinsburg","Lumberville","Pipersville","Southampton","Morrisville","East Butler","Forestville","Harrisville","Carrolltown","Aquashicola","Bowmanstown","Summit Hill","Sandy Ridge","Centre Hall","Madisonburg","Philipsburg","Coatesville","Downingtown","Honey Brook","Parker Ford","Spring City","Turkey City","Callensburg","Curllsville","Snydersburg","Luthersburg","Frenchville","Glen Richey","Pottersdale","Beech Creek","Mc Elhattan","Mackeyville","Orangeville","Centerville","Harmonsburg","Hummelstown","Millersburg","Drexel Hill","Marcus Hook","Springfield","Ridley Park","Sharon Hill","Upper Darby","Wallingford","Chadds Ford","Brandy Camp","Dagus Mines","Johnsonburg","Saint Marys","Cranesville","Harborcreek","Brownsville","Indian Head","Normalville","Perryopolis","Waltersburg","Marienville","Fort Loudon","Greencastle","Mercersburg","Rouzerville","Shady Grove","Willow Hill","Carmichaels","Clarksville","Rogersville","James Creek","Robertsdale","Mount Union","Blairsville","Cherry Tree","Strongstown","Falls Creek","Stump Creek","Summerville","Honey Grove","Mifflintown","Gordonville","Intercourse","Landisville","New Holland","Quarryville","West Willow","Enon Valley","New Bedford","Villa Maria","Newmanstown","Coopersburg","Fogelsville","New Tripoli","Trexlertown","Milnesville","Saint Johns","Beach Haven","Shickshinny","Wapwallopen","White Haven","Hughesville","Lairdsville","Custer City","Duke Center","Hazel Hurst","Turtlepoint","Sharpsville","Allensville","Kresgeville","Pocono Lake","Saylorsburg","Stroudsburg","Bala Cynwyd","Elkins Park","North Wales","Cherryville","Northampton","Stockertown","Turbotville","Potts Grove","Millerstown","New Buffalo","Coudersport","Girardville","Minersville","Port Carbon","Saint Clair","Spring Glen","Valley View","Barnesville","Paxtonville","Penns Creek","Selinsgrove","Troxelville","Jennerstown","Shanksville","Wellersburg","Davidsville","Eagles Mere","Forest City","New Milford","Springville","Susquehanna","Sabinsville","Mifflinburg","West Milton","Cooperstown","Sugar Grove","Youngsville","Monongahela","Beallsville","Eighty Four","Finleyville","Gastonville","Richeyville","Taylorstown","Van Voorhis","West Finley","Coal Center","White Mills","Sutersville","West Newton","Bradenville","Forbes Road","Jones Mills","Murrysville","New Stanton","Vandergrift","Lake Winola","Tunkhannock","New Freedom","Thomasville","North Irwin","Gettysburg","New Oxford","Peach Glen","Bakerstown","Dravosburg","Russellton","Warrendale","Coraopolis","South Park","Mckeesport","Springdale","Wilmerding","Pittsburgh","Kittanning","Ford Cliff","Manorville","Georgetown","Darlington","Breezewood","Clearville","Fishertown","Centerport","Geigertown","Mohrsville","Morgantown","Pine Forge","Womelsdorf","Curryville","Burlington","New Albany","Springtown","Doylestown","Bedminster","Buckingham","Penns Park","Quakertown","Silverdale","Warminster","Warrington","Eau Claire","Evans City","Karns City","Zelienople","Marsteller","Beaverdale","South Fork","Summerhill","Twin Rocks","Vintondale","Jim Thorpe","Parryville","Aaronsburg","Bellefonte","Mingoville","Rebersburg","Brandamore","Immaculata","Landenberg","Lewisville","Mendenhall","New London","Nottingham","Parkesburg","Unionville","West Grove","East Brady","Rimersburg","Tylersburg","Troutville","Clearfield","Morrisdale","Wallaceton","Lock Haven","North Bend","Bloomsburg","Stillwater","Adamsville","Cochranton","Guys Mills","Titusville","Linesville","Saegertown","Springboro","Plainfield","Summerdale","Berrysburg","Grantville","Middletown","Harrisburg","Brookhaven","Crum Lynne","Gradyville","Swarthmore","Glen Mills","James City","North East","Union City","Brier Hill","Brownfield","Chalk Hill","Fairchance","Farmington","Grindstone","Leisenring","New Geneva","Smithfield","Vanderbilt","Clarington","Doylesburg","Spring Run","State Line","Waynesboro","Hustontown","Graysville","Greensboro","Waynesburg","Wind Ridge","Alexandria","Huntingdon","Petersburg","Mill Creek","Black Lick","Clarksburg","Dixonville","Homer City","Northpoint","Smicksburg","Coolspring","Worthville","Brookville","Sykesville","Port Royal","Carbondale","Chinchilla","Fleetville","Bainbridge","Brownstown","Christiana","Martindale","Mountville","Terre Hill","New Castle","Hillsville","Catasauqua","East Texas","Slatington","Zionsville","Bear Creek","Shavertown","Antes Fort","Montgomery","Unityville","Waterville","Greenville","Grove City","Sandy Lake","Belleville","Mc Veytown","Reedsville","Yeagertown","Kunkletown","Canadensis","Henryville","Swiftwater","Green Lane","Sumneytown","Earlington","Tylersport","Bryn Athyn","Cheltenham","Jenkintown","Norristown","Bridgeport","Eagleville","Kulpsville","Mont Clare","Royersford","West Point","Hellertown","Treichlers","Walnutport","Watsontown","Locust Gap","Snydertown","Landisburg","Marysville","Lackawaxen","Cross Fork","Pottsville","Branchdale","Frackville","Locustdale","Lost Creek","Middleport","Orwigsburg","Pine Grove","Sacramento","Shenandoah","Tower City","Zion Grove","Beavertown","Middleburg","Confluence","Meyersdale","Sipesville","Cairnbrook","Hollsopple","Forksville","Hillsgrove","Lenoxville","Union Dale","Great Bend","Hop Bottom","Mainesburg","Morris Run","New Berlin","White Deer","Rouseville","Kennerdell","Pittsfield","Washington","Canonsburg","Claysville","Prosperity","California","Beach Lake","Gouldsboro","Lake Ariel","Milanville","Tyler Hill","Greensburg","Grapeville","Hannastown","Hutchinson","Loyalhanna","Ruffs Dale","Slickville","Stahlstown","Youngstown","Laceyville","Dallastown","Emigsville","Fawn Grove","Lewisberry","Loganville","Manchester","Mount Wolf","Shrewsbury","Wellsville","York Haven","Mount Penn","Fairfield","Bairdford","Creighton","Elizabeth","Glassport","Indianola","Leetsdale","Homestead","Sewickley","Leechburg","Ford City","Oak Ridge","Templeton","Yatesboro","Aliquippa","Hookstown","Rochester","Alum Bank","New Paris","Osterburg","Bernville","Birdsboro","Boyertown","Earlville","Fleetwood","Maxatawny","Mertztown","Robesonia","Claysburg","Monroeton","Sugar Run","Wyalusing","Ottsville","Pineville","Langhorne","Levittown","Branchton","Hilliards","Saxonburg","Johnstown","Cassandra","Ebensburg","Nanty Glo","Blandburg","Gallitzin","Driftwood","Palmerton","Lehighton","Weatherly","Blanchard","Boalsburg","Milesburg","Moshannon","Snow Shoe","Glenmoore","Lionville","Thorndale","Wagontown","Kimberton","Pottstown","Limestone","Vowinckel","Lamartine","Glen Hope","Houtzdale","Smithmill","Grassflat","Kylertown","Shawville","Mill Hall","Catawissa","Millville","Wilburton","Hartstown","Meadville","Townville","Riceville","Camp Hill","Highspire","Wiconisco","Bryn Mawr","Essington","Glenolden","Haverford","Lansdowne","Havertown","Villanova","Brockport","Byrnedale","Weedville","Lake City","Waterford","Wattsburg","Uniontown","Lake Lynn","Masontown","New Salem","Wickhaven","Cooksburg","Lemasters","Mont Alto","Zullinger","Waterfall","Jefferson","Nemacolin","Broad Top","Cassville","Orbisonia","Shade Gap","Saltsburg","Commodore","Creekside","Hillsdale","Josephine","Mc Intyre","Plumville","De Lancey","Oliveburg","Knox Dale","Cocolamus","Richfield","Peckville","Old Forge","Blue Ball","Conestoga","East Earl","Goodville","Mount Joy","Reamstown","Reinholds","Smoketown","Strasburg","Lancaster","Adamstown","Jonestown","Myerstown","Bethlehem","Whitehall","Slatedale","Allentown","Conyngham","Rock Glen","Sugarloaf","Glen Lyon","Nanticoke","Nescopeck","Shawanese","Cedar Run","Slate Run","Trout Run","Lewis Run","Smethport","Jamestown","Hermitage","Stoneboro","Wheatland","Granville","Lewistown","Mattawana","Analomink","Long Pond","Tobyhanna","Blakeslee","Pennsburg","Franconia","Souderton","Flourtown","Wynnewood","Blue Bell","Frederick","Worcester","Pen Argyl","Leck Kill","Montandon","Riverside","Trevorton","Duncannon","Ickesburg","Liverpool","Loysville","Matamoras","Greentown","Gilberton","Llewellyn","Tuscarora","Nuremberg","Fort Hill","Markleton","Salisbury","Stoystown","Tire Hill","Hallstead","Lanesboro","Wellsboro","Blossburg","Covington","Knoxville","Mansfield","Millerton","Westfield","Allenwood","Hartleton","Laurelton","Lewisburg","Vicksburg","Cranberry","Clarendon","Sheffield","Bear Lake","Atlasburg","Charleroi","Langeloth","Mc Donald","New Eagle","Ellsworth","Millsboro","Southview","Vestaburg","Allenport","Daisytown","Stockdale","Honesdale","Lake Como","Lakeville","Poyntelle","Starlight","Starrucca","Pricedale","Adamsburg","Hostetter","Hyde Park","Jeannette","New Derry","Scottdale","Southwest","Youngwood","Nicholson","Mehoopany","Meshoppen","Dillsburg","Glen Rock","Glenville","Rossville","West Lawn","West Penn","West York","Cashtown","Gardners","Idaville","Orrtanna","Cheswick","Clairton","Coulters","Gibsonia","Crescent","Greenock","Sturgeon","Tarentum","Wildwood","Braddock","Carnegie","Duquesne","Glenshaw","Imperial","Pitcairn","Schenley","Elderton","Shelocta","Freeport","Mc Grann","Sagamore","Seminole","Ambridge","Industry","Defiance","Hopewell","Loysburg","Woodbury","Hereford","Kutztown","Leesport","Limekiln","Bellwood","Sylvania","Camptown","Chalfont","Ferndale","Hilltown","Holicong","New Hope","Perkasie","Richboro","Rushland","Solebury","Zionhill","Bensalem","Fenelton","Petrolia","Prospect","Valencia","Nicktown","Spangler","Parkhill","Ashville","Hastings","Emporium","Ashfield","Junedale","Lansford","Tresckow","Clarence","Millheim","Orviston","Woodward","Avondale","Pocopson","Westtown","Uwchland","Elverson","Hawthorn","Burnside","Mahaffey","Penfield","Beccaria","Coalport","Smokerun","Westover","Drifting","Grampian","Hawk Run","Karthaus","Winburne","Woodland","Castanea","Loganton","Westport","Woolrich","Atlantic","Hydetown","Carlisle","Grantham","Newville","Broomall","Edgemont","Folcroft","Thornton","Benezett","De Young","Edinboro","Fairview","Fairbank","Isabella","La Belle","Leckrone","Melcroft","Mill Run","Ohiopyle","Republic","Endeavor","Tionesta","Amberson","Orrstown","Scotland","Needmore","Crucible","Dilliner","Holbrook","Sycamore","Entriken","Neelyton","Saltillo","Heilwood","Marchand","Penn Run","Rossiter","Starford","Dilltown","Robinson","Hamilton","Ringgold","Brockway","Archbald","Elmhurst","La Plume","Olyphant","Scranton","Columbia","Holtwood","Hopeland","Kirkwood","Lampeter","Marietta","Paradise","Bessemer","Edinburg","Annville","Cornwall","Richland","Alburtis","Limeport","Macungie","Orefield","Hazleton","Ebervale","Freeland","Harleigh","Pittston","Plymouth","Kingston","Bradford","Fredonia","Transfer","Red Hill","Abington","Gladwyne","Glenside","Narberth","Creamery","Hatfield","Lansdale","Lederach","Mainland","Skippack","Danville","Nazareth","Wind Gap","Portland","Dalmatia","Dornsife","Elysburg","Kulpmont","Shamokin","Bushkill","Millrift","Tamiment","Roulette","Brockton","Cressona","Ringtown","Coaldale","Kelayres","Sheppton","Freeburg","Mc Clure","Somerset","Fairhope","Friedens","Quecreek","Rockwood","Clifford","Thompson","Montrose","Brackney","Brooklyn","Kingsley","Millmont","Winfield","Oil City","Franklin","Emlenton","Tidioute","Columbus","Lawrence","Cokeburg","Marianna","Strabane","Westland","Damascus","Equinunk","Lakewood","Prompton","Sterling","Monessen","Trafford","Smithton","Alverton","Armbrust","Avonmore","Champion","Claridge","Crabtree","Herminie","Ligonier","Torrance","Airville","New Park","Railroad","Red Lion","Steelton","Clinton","Harwick","Oakdale","Wexford","Ingomar","Oakmont","Cadogan","Distant","Nu Mine","Widnoon","Freedom","Midland","Fombell","Bedford","Everett","Hyndman","Artemas","Blandon","Hamburg","Kempton","Mohnton","Reading","Altoona","Gillett","Towanda","Danboro","Erwinna","Furlong","Jamison","Lahaska","Newtown","Wycombe","Bristol","Croydon","Callery","Chicora","Harmony","Lyndora","Renfrew","Belsano","Loretto","Portage","Wilmore","Cresson","Flinton","Glasgow","Fleming","Chatham","Lyndell","Malvern","Pomeroy","Devault","Foxburg","Clarion","Lucinda","Mayport","Fryburg","Kossuth","La Jose","Du Bois","Rockton","Brisbin","Allport","Numidia","Aristes","Berwick","Venango","Lemoyne","Newburg","Dauphin","Halifax","Hershey","Ardmore","Chester","Norwood","Woodlyn","Cheyney","Ridgway","Mc Kean","Allison","Cardale","Hopwood","Everson","Concord","Dry Run","Roxbury","Bobtown","Nineveh","Spraggs","Hesston","Indiana","Alverda","Arcadia","Aultman","Mentcle","Big Run","Timblin","Walston","Corsica","Mifflin","Waverly","Bausman","Drumore","Ephrata","Kinzers","Manheim","Maytown","Stevens","Talmage","Pulaski","Lebanon","Palmyra","Quentin","Rexmont","Drifton","Wyoming","Luzerne","Ralston","Cyclone","Gifford","Rixford","Farrell","Carlton","Burnham","Gilbert","Reeders","Scotrun","Salford","Telford","Dresher","Hatboro","Horsham","Oreland","Wyncote","Audubon","Gwynedd","Sunbury","Herndon","Paxinos","Newport","Milford","Greeley","Paupack","Rowland","Shohola","Galeton","Genesee","Ulysses","Ashland","Cumbola","Lavelle","Mar Lin","Seltzer","Tremont","Andreas","Quakake","Tamaqua","Kreamer","Addison","Boswell","Boynton","Garrett","Jenners","Kantner","Springs","Windber","Dushore","Laporte","Mildred","Harford","Jackson","Elkland","Liberty","Osceola","Swengel","Weikert","Russell","Garland","Hickory","Houston","Venetia","Dunlevy","Waymart","Webster","Calumet","Darragh","Delmont","Donegal","Larimer","Latrobe","Madison","Mammoth","Norvelt","Rillton","Whitney","Bolivar","Codorus","Hanover","Windsor","Oberlin","Aspers","Bunola","Morgan","Presto","Verona","Parker","Adrian","Dayton","Beaver","Conway","Monaca","Koppel","Saxton","Bethel","Bowers","Temple","Topton","Sproul","Tipton","Tyrone","Canton","Grover","Athens","Ulster","Durham","Dublin","Revere","Butler","Boyers","Herman","Sarver","Elmora","Emeigh","Colver","Revloc","Sidman","Coupon","Dysart","Patton","Coburn","Howard","Julian","Lemont","Atglen","Berwyn","Kelton","Modena","Oxford","Suplee","Fisher","Leeper","Marble","Irvona","Madera","Morann","Bigler","Munson","Olanta","Renovo","Benton","Lykens","Pillow","Folsom","Holmes","Morton","Kersey","Wilcox","Albion","Girard","Dawson","Dunbar","Hiller","Martin","Newell","Oliver","Lurgan","Marion","Quincy","Aleppo","Mather","Calvin","Dudley","Clymer","Ernest","Armagh","Valier","Mexico","Dalton","Jermyn","Jessup","Moscow","Moosic","Taylor","Ransom","Denver","Lititz","Narvon","Penryn","Pequea","Refton","Rheems","Witmer","Volant","Wampum","Coplay","Emmaus","Weston","Cambra","Dallas","Lehman","Duryea","Linden","Ludlow","Crosby","Eldred","Hadley","Mercer","Sharon","Milroy","Cresco","Effort","Sciota","Skytop","Colmar","Woxall","Ambler","Cedars","Bangor","Easton","Tatamy","Dewart","Milton","Rebuck","Tafton","Austin","Auburn","Gordon","Hegins","Mary D","Pitman","Ravine","Delano","Mcadoo","Oneida","Ursina","Acosta","Berlin","Listie","Jerome","Seanor","Dimock","Gibson","Lawton","Gaines","Morris","Nelson","Seneca","Irvine","Warren","Bulger","Donora","Elrama","Joffre","Midway","Slovan","Avella","Roscoe","Hamlin","Hawley","Apollo","Ardara","Bovard","Export","Hunker","Lowber","Rector","Salina","United","Wendel","Seward","Brogue","Craley","Etters","Felton","Cuddy","Baden","Imler","Queen","Bally","Barto","Newry","Milan","Sayre","Wysox","Bruin","Cabot","Dunlo","Elton","Lilly","Salix","Paoli","Devon","Exton","Crown","Sligo","Ramey","Lanse","Lamar","Enola","Gratz","Aston","Darby","Lenni","Media","Wayne","Force","Corry","Elgin","Hibbs","Ronco","Smock","Uledi","White","Brave","Clune","Coral","Gipsy","Beyer","Anita","Sigel","Akron","Leola","Ronks","Neffs","Drums","Muncy","Clark","Blain","Mills","Shunk","Lopez","Arnot","Tioga","Utica","Venus","Tiona","Amity","Cecil","Denbo","Orson","Arona","Derry","Irwin","Luxor","Manor","Tarrs","Wyano","Yukon","Falls","Noxen","Delta","Dover","Wood","Oley","Alba","Troy","Rome","Mars","Knox","Hyde","Avis","Erie","Adah","Gans","Todd","Home","Kent","Bart","Lawn","Kane","Palm","Oaks","Bath","Muir","Gray","Polk","Reno","Muse","Elco","Acme","Penn","York","Elm","Gap","Ono","Rew"]'
  ),
  RI = [
    "Wood River Junction",
    "North Smithfield",
    "North Providence",
    "Prudence Island",
    "East Providence",
    "North Kingstown",
    "West Greenwich",
    "East Greenwich",
    "Little Compton",
    "North Scituate",
    "Central Falls",
    "West Kingston",
    "West Warwick",
    "Slatersville",
    "Block Island",
    "Saunderstown",
    "Narragansett",
    "Harrisville",
    "Charlestown",
    "Hope Valley",
    "Barrington",
    "Adamsville",
    "Middletown",
    "Portsmouth",
    "Fiskeville",
    "Forestdale",
    "Greenville",
    "Mapleville",
    "Cumberland",
    "Woonsocket",
    "Providence",
    "Smithfield",
    "Peace Dale",
    "Jamestown",
    "Chepachet",
    "Clayville",
    "Pawtucket",
    "Riverside",
    "Hopkinton",
    "Rockville",
    "Wakefield",
    "Coventry",
    "Tiverton",
    "Glendale",
    "Manville",
    "Cranston",
    "Johnston",
    "Bradford",
    "Carolina",
    "Shannock",
    "Kingston",
    "Westerly",
    "Bristol",
    "Warwick",
    "Newport",
    "Harmony",
    "Oakland",
    "Pascoag",
    "Lincoln",
    "Rumford",
    "Ashaway",
    "Wyoming",
    "Warren",
    "Greene",
    "Albion",
    "Foster",
    "Exeter",
    "Kenyon",
    "Slocum",
    "Hope",
  ],
  NI = [
    "Saint Helena Island",
    "Hilton Head Island",
    "North Myrtle Beach",
    "Daufuskie Island",
    "North Charleston",
    "Sullivans Island",
    "Mc Clellanville",
    "Wadmalaw Island",
    "Galivants Ferry",
    "Little Mountain",
    "Boiling Springs",
    "Saint Matthews",
    "Charleston Afb",
    "Mount Pleasant",
    "Murrells Inlet",
    "Pawleys Island",
    "Travelers Rest",
    "Calhoun Falls",
    "North Augusta",
    "Sandy Springs",
    "Parris Island",
    "Moncks Corner",
    "Saint Stephen",
    "Isle Of Palms",
    "Mount Croghan",
    "Davis Station",
    "Edisto Island",
    "Coosawhatchie",
    "Heath Springs",
    "West Columbia",
    "Bennettsville",
    "Mountain Rest",
    "Pacolet Mills",
    "Bowling Green",
    "Hickory Grove",
    "Saint Andrews",
    "Lowndesville",
    "New Ellenton",
    "Graniteville",
    "Beech Island",
    "Russellville",
    "Johns Island",
    "Chesterfield",
    "Cottageville",
    "Society Hill",
    "Saint George",
    "Jenkinsville",
    "Timmonsville",
    "Johnsonville",
    "Fountain Inn",
    "Simpsonville",
    "Crocketville",
    "Early Branch",
    "Little River",
    "Myrtle Beach",
    "Liberty Hill",
    "Mount Carmel",
    "Silverstreet",
    "Ridge Spring",
    "Cross Anchor",
    "Greeleyville",
    "Gloverville",
    "Montmorenci",
    "Warrenville",
    "Williamston",
    "Cordesville",
    "Goose Creek",
    "Summerville",
    "Folly Beach",
    "Great Falls",
    "Jacksonboro",
    "Little Rock",
    "Harleyville",
    "Reevesville",
    "Ware Shoals",
    "Hardeeville",
    "Bishopville",
    "Clarks Hill",
    "Plum Branch",
    "Westminster",
    "Springfield",
    "Branchville",
    "Spartanburg",
    "Fingerville",
    "White Stone",
    "Mc Connells",
    "Clearwater",
    "Honea Path",
    "Blackville",
    "Port Royal",
    "Charleston",
    "Blacksburg",
    "Blackstock",
    "Turbeville",
    "Green Pond",
    "Walterboro",
    "Darlington",
    "Hartsville",
    "Dorchester",
    "Ridgeville",
    "Georgetown",
    "Greenville",
    "Tigerville",
    "Ninety Six",
    "Cross Hill",
    "Mountville",
    "Gray Court",
    "Mc Cormick",
    "Parksville",
    "Prosperity",
    "Long Creek",
    "West Union",
    "Eutawville",
    "Holly Hill",
    "Orangeburg",
    "Rowesville",
    "Ballentine",
    "Blythewood",
    "State Park",
    "White Rock",
    "Campobello",
    "Fairforest",
    "Mayesville",
    "Wedgefield",
    "Jonesville",
    "Abbeville",
    "Allendale",
    "La France",
    "Pendleton",
    "Townville",
    "Williston",
    "Jamestown",
    "Pineville",
    "Pinopolis",
    "Adams Run",
    "Hollywood",
    "Fort Lawn",
    "Jefferson",
    "Summerton",
    "Islandton",
    "Lake View",
    "Edgefield",
    "Winnsboro",
    "Effingham",
    "Lake City",
    "Cleveland",
    "Greenwood",
    "Varnville",
    "Green Sea",
    "Ridgeland",
    "Westville",
    "Fort Mill",
    "Lancaster",
    "Lynchburg",
    "Batesburg",
    "Leesville",
    "Lexington",
    "Centenary",
    "Chappells",
    "Fair Play",
    "Reidville",
    "Hemingway",
    "Kingstree",
    "Rock Hill",
    "Due West",
    "Vaucluse",
    "Sycamore",
    "Anderson",
    "Ehrhardt",
    "Barnwell",
    "Beaufort",
    "Bluffton",
    "Seabrook",
    "Edgemoor",
    "Richburg",
    "Pageland",
    "New Zion",
    "Sardinia",
    "Williams",
    "Johnston",
    "Ridgeway",
    "Florence",
    "Pamplico",
    "Scranton",
    "Conestee",
    "Marietta",
    "Piedmont",
    "Yemassee",
    "Pineland",
    "Van Wyck",
    "Waterloo",
    "Columbia",
    "Blenheim",
    "Newberry",
    "Whitmire",
    "Richland",
    "Tamassee",
    "Walhalla",
    "Six Mile",
    "Eastover",
    "Converse",
    "Glendale",
    "Gramling",
    "Wellford",
    "Woodruff",
    "Pinewood",
    "Shaw Afb",
    "Carlisle",
    "Lockhart",
    "Donalds",
    "Wagener",
    "Jackson",
    "Langley",
    "Windsor",
    "Fairfax",
    "Bamberg",
    "Denmark",
    "Sheldon",
    "Hanahan",
    "Bonneau",
    "Cameron",
    "Awendaw",
    "Ravenel",
    "Gaffney",
    "Chester",
    "Patrick",
    "Manning",
    "Canadys",
    "Round O",
    "Trenton",
    "Andrews",
    "Mauldin",
    "Taylors",
    "Bradley",
    "Brunson",
    "Garnett",
    "Gifford",
    "Hampton",
    "Nichols",
    "Tillman",
    "Bethune",
    "Cassatt",
    "Kershaw",
    "Clinton",
    "Laurens",
    "Elliott",
    "Gilbert",
    "Swansea",
    "Gresham",
    "Mullins",
    "Sellers",
    "Mc Coll",
    "Wallace",
    "Pomaria",
    "Kinards",
    "Cordova",
    "Elloree",
    "Central",
    "Clemson",
    "Liberty",
    "Pickens",
    "Gadsden",
    "Hopkins",
    "Monetta",
    "Arcadia",
    "Chesnee",
    "Clifton",
    "Cowpens",
    "Drayton",
    "Landrum",
    "Pacolet",
    "Pauline",
    "Roebuck",
    "Startex",
    "Dalzell",
    "Horatio",
    "Rembert",
    "Buffalo",
    "Nesmith",
    "Salters",
    "Catawba",
    "Salley",
    "Martin",
    "Belton",
    "Pelzer",
    "Lobeco",
    "Ladson",
    "Mc Bee",
    "Cheraw",
    "Alcolu",
    "Ruffin",
    "Smoaks",
    "Dillon",
    "Grover",
    "Olanta",
    "Coward",
    "Slater",
    "Hodges",
    "Estill",
    "Furman",
    "Scotia",
    "Conway",
    "Okatie",
    "Camden",
    "Lugoff",
    "Joanna",
    "Chapin",
    "Gaston",
    "Pelion",
    "Marion",
    "Seneca",
    "Bowman",
    "Neeses",
    "Norway",
    "Santee",
    "Easley",
    "Norris",
    "Sunset",
    "Saluda",
    "Duncan",
    "Enoree",
    "Sumter",
    "Clover",
    "Sharon",
    "Smyrna",
    "Aiken",
    "Ulmer",
    "Starr",
    "Hilda",
    "Cross",
    "Huger",
    "Lando",
    "Gable",
    "Lodge",
    "Lamar",
    "Lydia",
    "Hamer",
    "Latta",
    "Blair",
    "Greer",
    "Luray",
    "Miley",
    "Aynor",
    "Longs",
    "Loris",
    "Elgin",
    "Cayce",
    "Modoc",
    "Rains",
    "Tatum",
    "Newry",
    "Salem",
    "North",
    "Vance",
    "Inman",
    "Lyman",
    "Moore",
    "Union",
    "Cades",
    "Bath",
    "Olar",
    "Elko",
    "Dale",
    "Ruby",
    "Fork",
    "Rion",
    "Troy",
    "Clio",
    "Peak",
    "Cope",
    "Irmo",
    "Ward",
    "Mayo",
    "Lane",
    "York",
    "Iva",
    "Una",
  ],
  EI = [
    "Wessington Springs",
    "North Sioux City",
    "Big Stone City",
    "Saint Lawrence",
    "Valley Springs",
    "Fort Thompson",
    "Belle Fourche",
    "Saint Charles",
    "Ellsworth Afb",
    "New Underwood",
    "New Effington",
    "Saint Francis",
    "Little Eagle",
    "Mount Vernon",
    "Lake Preston",
    "Union Center",
    "Prairie City",
    "Wounded Knee",
    "Mission Hill",
    "Cherry Creek",
    "Springfield",
    "Chamberlain",
    "Gann Valley",
    "Garden City",
    "Willow Lake",
    "South Shore",
    "Mc Laughlin",
    "Buffalo Gap",
    "Eagle Butte",
    "Timber Lake",
    "New Holland",
    "Hot Springs",
    "Twin Brooks",
    "Lake Norden",
    "Ree Heights",
    "Long Valley",
    "Lower Brule",
    "Bridgewater",
    "White River",
    "Dell Rapids",
    "Sioux Falls",
    "Claire City",
    "Fort Pierre",
    "Centerville",
    "Lesterville",
    "Plankinton",
    "White Lake",
    "Wessington",
    "Mound City",
    "Lake Andes",
    "Vermillion",
    "Morristown",
    "Trail City",
    "Clear Lake",
    "Whitehorse",
    "Strandburg",
    "Milesville",
    "Castlewood",
    "Alexandria",
    "Camp Crook",
    "Saint Onge",
    "Harrisburg",
    "Black Hawk",
    "Fort Meade",
    "Rapid City",
    "Gettysburg",
    "Woonsocket",
    "Pine Ridge",
    "Northville",
    "Chancellor",
    "Hitchcock",
    "Brookings",
    "Claremont",
    "Frederick",
    "Stratford",
    "Pickstown",
    "Carpenter",
    "Watertown",
    "Kranzburg",
    "Mc Intosh",
    "Grenville",
    "Glencross",
    "Ridgeview",
    "Smithwick",
    "Stockholm",
    "Bonesteel",
    "Estelline",
    "Belvidere",
    "Arlington",
    "Wentworth",
    "Spearfish",
    "Whitewood",
    "Canistota",
    "Long Lake",
    "Lake City",
    "Mud Butte",
    "White Owl",
    "Garretson",
    "Flandreau",
    "Box Elder",
    "Hill City",
    "Lodgepole",
    "Batesland",
    "Manderson",
    "Porcupine",
    "Brentford",
    "Frankfort",
    "Mansfield",
    "Beresford",
    "Elk Point",
    "Jefferson",
    "Stickney",
    "Scotland",
    "Aberdeen",
    "Columbia",
    "Houghton",
    "Westport",
    "Florence",
    "Bullhead",
    "Fairburn",
    "Mitchell",
    "Pierpont",
    "Harrison",
    "Edgemont",
    "Oelrichs",
    "Cresbard",
    "Faulkton",
    "Parkston",
    "Highmore",
    "Holabird",
    "Interior",
    "Iroquois",
    "Deadwood",
    "Fairview",
    "Worthing",
    "Kennebec",
    "Reliance",
    "Montrose",
    "Langford",
    "Piedmont",
    "Carthage",
    "Hartford",
    "Humboldt",
    "Keystone",
    "Sisseton",
    "Artesian",
    "Mellette",
    "Redfield",
    "Parmelee",
    "Alcester",
    "Mobridge",
    "Gayville",
    "Tuthill",
    "Tyndall",
    "Barnard",
    "Kimball",
    "Pukwana",
    "Nisland",
    "Herreid",
    "Pollock",
    "Bradley",
    "Raymond",
    "Burbank",
    "Wakonda",
    "Wallace",
    "Keldron",
    "Wakpala",
    "Watauga",
    "Hermosa",
    "Pringle",
    "Bristol",
    "Webster",
    "Andover",
    "Astoria",
    "Goodwin",
    "Toronto",
    "Corsica",
    "Delmont",
    "Ipswich",
    "Rockham",
    "Milbank",
    "Revillo",
    "Fairfax",
    "Gregory",
    "Herrick",
    "Midland",
    "Buffalo",
    "Harrold",
    "Freeman",
    "Stephan",
    "Wanblee",
    "De Smet",
    "Chester",
    "Madison",
    "Rutland",
    "Winfred",
    "Spencer",
    "Amherst",
    "Britton",
    "Sturgis",
    "Brandon",
    "Lebanon",
    "Tolstoy",
    "Rosholt",
    "Letcher",
    "Mission",
    "Rosebud",
    "Glenham",
    "Yankton",
    "Cavour",
    "Virgil",
    "Wolsey",
    "Martin",
    "Aurora",
    "Elkton",
    "Ferney",
    "Groton",
    "Warner",
    "Newell",
    "Geddes",
    "Platte",
    "Wagner",
    "Vienna",
    "Walker",
    "Custer",
    "Roslyn",
    "Waubay",
    "Brandt",
    "Isabel",
    "Lantry",
    "Armour",
    "Bowdle",
    "Hosmer",
    "Roscoe",
    "Orient",
    "Seneca",
    "Labolt",
    "Marvin",
    "Dallas",
    "Philip",
    "Bryant",
    "Miller",
    "Fulton",
    "Ludlow",
    "Pierre",
    "Olivet",
    "Dimock",
    "Kaylor",
    "Kadoka",
    "Alpena",
    "Draper",
    "Okaton",
    "Oldham",
    "Badger",
    "Ramona",
    "Canton",
    "Hudson",
    "Lennox",
    "Oacoma",
    "Presho",
    "Vivian",
    "Eureka",
    "Veblen",
    "Enning",
    "Norris",
    "Canova",
    "Fedora",
    "Howard",
    "Baltic",
    "Colton",
    "Crooks",
    "Renner",
    "Colman",
    "Caputa",
    "Owanka",
    "Scenic",
    "Lemmon",
    "Meadow",
    "Corona",
    "Ortley",
    "Peever",
    "Summit",
    "Wilmot",
    "Oglala",
    "Ashton",
    "Doland",
    "Tulare",
    "Turton",
    "Okreek",
    "Colome",
    "Hamill",
    "Winner",
    "Witten",
    "Hurley",
    "Marion",
    "Monroe",
    "Parker",
    "Viborg",
    "Akaska",
    "Dupree",
    "Huron",
    "Allen",
    "Tabor",
    "Sinai",
    "Volga",
    "Bruce",
    "White",
    "Hecla",
    "Dante",
    "Marty",
    "Clark",
    "Irene",
    "Henry",
    "Ethan",
    "Onaka",
    "Burke",
    "Hayti",
    "Hazel",
    "Emery",
    "Ralph",
    "Redig",
    "Blunt",
    "Menno",
    "Tripp",
    "Murdo",
    "Erwin",
    "Nunda",
    "Salem",
    "Leola",
    "Faith",
    "Howes",
    "Lyons",
    "Trent",
    "Quinn",
    "Wasta",
    "Bison",
    "Hoven",
    "Conde",
    "Hayes",
    "Onida",
    "Ideal",
    "Davis",
    "Selby",
    "Utica",
    "Volin",
    "Yale",
    "Avon",
    "Bath",
    "Vale",
    "Gary",
    "Oral",
    "Reva",
    "Lane",
    "Lead",
    "Nemo",
    "Eden",
    "Wood",
    "Egan",
    "Wall",
    "Kyle",
    "Agar",
    "Java",
    "Tea",
  ],
  FI = [
    "Red Boiling Springs",
    "Bloomington Springs",
    "Cumberland Furnace",
    "Beersheba Springs",
    "Strawberry Plains",
    "Castalian Springs",
    "Thompsons Station",
    "Milligan College",
    "Kingston Springs",
    "Lookout Mountain",
    "New Johnsonville",
    "Mc Lemoresville",
    "Signal Mountain",
    "Tennessee Ridge",
    "Hurricane Mills",
    "Laurel Bloomery",
    "South Pittsburg",
    "Cumberland City",
    "Cumberland Gap",
    "Crockett Mills",
    "Goodlettsville",
    "Estill Springs",
    "Powder Springs",
    "Gruetli Laager",
    "Grand Junction",
    "Hickory Valley",
    "Jefferson City",
    "Bethel Springs",
    "Mount Pleasant",
    "Tellico Plains",
    "Oliver Springs",
    "Woodland Mills",
    "Buffalo Valley",
    "Pleasant Shade",
    "Chestnut Mound",
    "Hendersonville",
    "West Knoxville",
    "Andersonville",
    "Roan Mountain",
    "Pleasant View",
    "Lone Mountain",
    "Parrottsville",
    "Pleasant Hill",
    "Morris Chapel",
    "Surgoinsville",
    "Cottage Grove",
    "Primm Springs",
    "Mountain City",
    "Milledgeville",
    "Dixon Springs",
    "Mitchellville",
    "Sharps Chapel",
    "Mountain Home",
    "College Grove",
    "Friendsville",
    "Elizabethton",
    "Ashland City",
    "Chapmansboro",
    "New Tazewell",
    "Crab Orchard",
    "Whites Creek",
    "Bath Springs",
    "Decaturville",
    "Bean Station",
    "Russellville",
    "Pickwick Dam",
    "Mount Carmel",
    "Wildersville",
    "Whitleyville",
    "Shady Valley",
    "Lawrenceburg",
    "Saint Joseph",
    "Fayetteville",
    "Philadelphia",
    "Stantonville",
    "Spring Creek",
    "Cornersville",
    "Williamsport",
    "Madisonville",
    "South Fulton",
    "Silver Point",
    "Cross Plains",
    "Murfreesboro",
    "Pigeon Forge",
    "Collierville",
    "Gordonsville",
    "Bumpus Mills",
    "Indian Mound",
    "Westmoreland",
    "Maynardville",
    "Johnson City",
    "Jonesborough",
    "Palmersville",
    "Mount Juliet",
    "Bell Buckle",
    "Shelbyville",
    "La Follette",
    "Buena Vista",
    "Cedar Grove",
    "Hollow Rock",
    "Jacks Creek",
    "Summitville",
    "Old Hickory",
    "Scotts Hill",
    "White Bluff",
    "Greeneville",
    "Collegedale",
    "Lupton City",
    "Soddy Daisy",
    "Chattanooga",
    "Church Hill",
    "Rogersville",
    "Brownsville",
    "Springville",
    "Centerville",
    "Tiptonville",
    "Five Points",
    "Lenoir City",
    "Beech Bluff",
    "Chapel Hill",
    "Spring Hill",
    "Clarksville",
    "Spring City",
    "Springfield",
    "White House",
    "Fosterville",
    "Sevierville",
    "Brush Creek",
    "Blountville",
    "Piney Flats",
    "Mcminnville",
    "Rock Island",
    "Fall Branch",
    "Cypress Inn",
    "Nolensville",
    "Briceville",
    "Unionville",
    "Louisville",
    "Charleston",
    "Auburntown",
    "Bradyville",
    "Readyville",
    "Clarksburg",
    "Huntingdon",
    "Clairfield",
    "Beechgrove",
    "Manchester",
    "Arnold Afb",
    "Friendship",
    "Maury City",
    "Crossville",
    "Sugar Tree",
    "Alexandria",
    "Dowelltown",
    "Smithville",
    "Somerville",
    "Clarkrange",
    "Winchester",
    "Rutherford",
    "Frankewing",
    "Goodspring",
    "Minor Hill",
    "Thorn Hill",
    "Tracy City",
    "Morristown",
    "Whitesburg",
    "Sale Creek",
    "Kyles Ford",
    "Sneedville",
    "Pocahontas",
    "Whiteville",
    "Mooresburg",
    "Duck River",
    "Gainesboro",
    "New Market",
    "White Pine",
    "Summertown",
    "Petersburg",
    "Flintville",
    "Adamsville",
    "Sequatchie",
    "Georgetown",
    "Cokercreek",
    "Sweetwater",
    "Cunningham",
    "Deer Lodge",
    "Union City",
    "Livingston",
    "Lobelville",
    "Copperhill",
    "Turtletown",
    "Cookeville",
    "Evensville",
    "Graysville",
    "Cedar Hill",
    "Greenbrier",
    "Christiana",
    "Eagleville",
    "Huntsville",
    "Gatlinburg",
    "Millington",
    "Germantown",
    "Bluff City",
    "Cottontown",
    "Hartsville",
    "Collinwood",
    "Waynesboro",
    "Greenfield",
    "Gladeville",
    "Lake City",
    "Oak Ridge",
    "Big Sandy",
    "Pikeville",
    "Maryville",
    "Tallassee",
    "Cleveland",
    "Mc Donald",
    "Caryville",
    "Jacksboro",
    "Mc Kenzie",
    "Trezevant",
    "Henderson",
    "Harrogate",
    "Speedwell",
    "Hillsboro",
    "Tullahoma",
    "Fruitvale",
    "Hermitage",
    "Nashville",
    "Charlotte",
    "Dyersburg",
    "La Grange",
    "Rossville",
    "Williston",
    "Jamestown",
    "Pall Mall",
    "Belvidere",
    "Yorkville",
    "Lynnville",
    "Monteagle",
    "Birchwood",
    "Middleton",
    "Saulsbury",
    "Olivehill",
    "Bulls Gap",
    "Lexington",
    "Mansfield",
    "Granville",
    "Dandridge",
    "Knoxville",
    "Iron City",
    "Westpoint",
    "Hohenwald",
    "Greenback",
    "Englewood",
    "Riceville",
    "Lafayette",
    "Whiteside",
    "Lewisburg",
    "Hampshire",
    "Southside",
    "Lynchburg",
    "Coalfield",
    "Sunbright",
    "Byrdstown",
    "Conasauga",
    "Grandview",
    "Lascassas",
    "La Vergne",
    "Helenwood",
    "Arlington",
    "Brunswick",
    "Ellendale",
    "Riddleton",
    "Lancaster",
    "Kingsport",
    "Covington",
    "Drummonds",
    "Flag Pond",
    "Limestone",
    "Arrington",
    "Brentwood",
    "Watertown",
    "Wartrace",
    "Normandy",
    "Holladay",
    "Rockford",
    "Townsend",
    "Woodbury",
    "Bruceton",
    "Westport",
    "Shawanee",
    "Tazewell",
    "Hartford",
    "Gallaway",
    "Grimsley",
    "Huntland",
    "Sherwood",
    "Bradford",
    "Humboldt",
    "Idlewild",
    "Prospect",
    "Rutledge",
    "Washburn",
    "Altamont",
    "Coalmont",
    "Bakewell",
    "Harrison",
    "Ooltewah",
    "Silerton",
    "Saltillo",
    "Savannah",
    "Buchanan",
    "Bon Aqua",
    "Nunnelly",
    "Corryton",
    "Heiskell",
    "Wynnburg",
    "Ethridge",
    "Mulberry",
    "Dellrose",
    "Chewalla",
    "Oakfield",
    "Whitwell",
    "Columbia",
    "Culleoka",
    "Santa Fe",
    "Ten Mile",
    "Woodlawn",
    "Wartburg",
    "Hornbeak",
    "Crawford",
    "Ducktown",
    "Old Fort",
    "Reliance",
    "Monterey",
    "Harriman",
    "Kingston",
    "Rockwood",
    "Ridgetop",
    "Rockvale",
    "Winfield",
    "Carthage",
    "Big Rock",
    "Bethpage",
    "Gallatin",
    "Portland",
    "Brighton",
    "Burlison",
    "Luttrell",
    "Morrison",
    "Campaign",
    "Fairview",
    "Franklin",
    "Clinton",
    "Walland",
    "Jellico",
    "Newcomb",
    "Pioneer",
    "Lavinia",
    "Hampton",
    "Watauga",
    "Enville",
    "Del Rio",
    "Newport",
    "Gadsden",
    "Antioch",
    "Joelton",
    "Madison",
    "Parsons",
    "Liberty",
    "Dickson",
    "Slayden",
    "Vanleer",
    "Newbern",
    "Tigrett",
    "Trimble",
    "Laconia",
    "Oakland",
    "Allardt",
    "Decherd",
    "Sewanee",
    "Trenton",
    "Ardmore",
    "Pulaski",
    "Chuckey",
    "Mosheim",
    "Lowland",
    "Talbott",
    "Bolivar",
    "Hornsby",
    "Stanton",
    "Puryear",
    "Stewart",
    "Mc Ewen",
    "Waverly",
    "Ridgely",
    "Henning",
    "Loretto",
    "Calhoun",
    "Jackson",
    "Denmark",
    "Belfast",
    "Decatur",
    "Palmyra",
    "Lancing",
    "Oakdale",
    "Samburg",
    "Rickman",
    "Orlinda",
    "Robbins",
    "Seymour",
    "Memphis",
    "Cordova",
    "Elmwood",
    "Hickman",
    "Bristol",
    "Munford",
    "Spencer",
    "Telford",
    "Clifton",
    "Dresden",
    "Dukedom",
    "Gleason",
    "Quebeck",
    "Walling",
    "Lebanon",
    "Norris",
    "Camden",
    "Atwood",
    "Pegram",
    "Arthur",
    "Pruden",
    "Celina",
    "Bogota",
    "Finley",
    "Braden",
    "Moscow",
    "Wilder",
    "Kenton",
    "Gibson",
    "Medina",
    "Elkton",
    "Blaine",
    "Midway",
    "Mohawk",
    "Palmer",
    "Pelham",
    "Apison",
    "Hixson",
    "Counce",
    "Shiloh",
    "Eidson",
    "Darden",
    "Reagan",
    "Sardis",
    "Butler",
    "Mascot",
    "Powell",
    "Ripley",
    "Loudon",
    "Athens",
    "Etowah",
    "Finger",
    "Michie",
    "Selmer",
    "Pinson",
    "Mercer",
    "Jasper",
    "Vonore",
    "Petros",
    "Allons",
    "Allred",
    "Alpine",
    "Hilham",
    "Monroe",
    "Linden",
    "Benton",
    "Delano",
    "Farner",
    "Baxter",
    "Dayton",
    "Milton",
    "Smyrna",
    "Oneida",
    "Dunlap",
    "Tipton",
    "Unicoi",
    "Smartt",
    "Martin",
    "Sharon",
    "Sparta",
    "Norene",
    "Alcoa",
    "Luray",
    "Eagan",
    "Bybee",
    "Cosby",
    "Alamo",
    "Bells",
    "Burns",
    "Lenox",
    "Macon",
    "Cowan",
    "Eaton",
    "Milan",
    "Afton",
    "Toone",
    "Crump",
    "Huron",
    "Henry",
    "Paris",
    "Lyles",
    "Trade",
    "Gates",
    "Halls",
    "Leoma",
    "Elora",
    "Kelso",
    "Niota",
    "Ramer",
    "Medon",
    "Guild",
    "Rugby",
    "Obion",
    "Rives",
    "Ocoee",
    "Adams",
    "Elgin",
    "Kodak",
    "Dover",
    "Atoka",
    "Mason",
    "Erwin",
    "Viola",
    "Lutts",
    "Doyle",
    "Duff",
    "Yuma",
    "Moss",
    "Dyer",
    "Como",
    "Only",
    "Erin",
    "Taft",
    "Guys",
    "Troy",
    "Eads",
    "Eva",
  ],
  DI = JSON.parse(
    '["Big Bend National Park","Naval Air Station Jrb","Little River Academy","North Richland Hills","Jbsa Ft Sam Houston","South Padre Island","Sutherland Springs","Tennessee Colony","Dripping Springs","Mount Enterprise","Richland Springs","College Station","New Summerfield","Carrizo Springs","Sulphur Springs","Roaring Springs","Rio Grande City","Harker Heights","Universal City","Round Mountain","Walnut Springs","Hughes Springs","Fredericksburg","Elysian Fields","Fort Mc Kavett","Blooming Grove","Corpus Christi","Falcon Heights","Mount Pleasant","Goodfellow Afb","Port Mansfield","Bleiblerville","Jbsa Randolph","Jbsa Lackland","Cranfills Gap","West Columbia","Point Comfort","Port O Connor","Douglassville","Spring Branch","New Braunfels","Copperas Cove","Grand Prairie","Balch Springs","Missouri City","Plantersville","Roans Prairie","Cotton Center","Village Mills","North Houston","South Houston","Sullivan City","Sulphur Bluff","Sierra Blanca","Mountain Home","Brackettville","Artesia Wells","Hallettsville","Valley Spring","Horseshoe Bay","Ransom Canyon","Colorado City","Chapman Ranch","Mineral Wells","Fort Stockton","Dallardsville","San Augustine","Sterling City","Knickerbocker","Apple Springs","Chappell Hill","Wichita Falls","Heidenheimer","Saint Hedwig","Johnson City","Valley Mills","Lake Jackson","Marble Falls","Cross Plains","Mont Belvieu","Jacksonville","Farmersville","Ben Franklin","Flower Mound","San Elizario","Stephenville","Fayetteville","South Plains","Mount Vernon","Port Bolivar","Collinsville","Fort Hancock","Hebbronville","Orange Grove","Center Point","Prairie Hill","Three Rivers","Buchanan Dam","China Spring","Madisonville","Daingerfield","Martinsville","Port Aransas","Mauriceville","Aransas Pass","Garciasville","Breckenridge","Throckmorton","Water Valley","Pflugerville","Laughlin Afb","Grand Saline","Prairie View","Mirando City","East Bernard","Sheppard Afb","Raymondville","Liberty Hill","Crystal City","Archer City","Campbellton","Cedar Creek","San Antonio","Laguna Park","Brookesmith","Prairie Lea","Port Lavaca","Brownsville","Los Fresnos","Port Isabel","Santa Maria","Summerfield","Wallisville","Westminster","Rock Island","Canyon Lake","Millersview","Gainesville","Valley View","Duncanville","Lake Dallas","Pilot Point","Meyersville","Rising Star","Rocksprings","Lingleville","Morgan Mill","Honey Grove","Schulenburg","Friendswood","League City","High Island","Justiceburg","Willow City","Garden City","Wrightsboro","Whitewright","Van Alstyne","Gordonville","Hale Center","Chillicothe","Channelview","Galena Park","Scottsville","Caddo Mills","Port Arthur","Port Neches","Sabine Pass","Karnes City","Panna Maria","Arthur City","Pattonville","Littlefield","Centerville","George West","Shallowater","North Zulch","Collegeport","Castroville","Goldthwaite","Nacogdoches","Bridge City","Orangefield","Long Branch","Weatherford","Clarksville","Joinerville","Selman City","Shelbyville","Santa Elena","Colleyville","Haltom City","Buffalo Gap","Wills Point","Ben Wheeler","Bloomington","New Waverly","Burkburnett","San Perlita","Floresville","Denver City","San Ygnacio","Huntington","Windthorst","Jourdanton","Pleasanton","San Felipe","Cat Spring","Pipe Creek","Vanderpool","Smithville","Nolanville","New Boston","Falfurrias","Somerville","Martindale","Los Indios","San Benito","Santa Rosa","Skellytown","White Deer","Queen City","Robert Lee","Santa Anna","Blue Ridge","Samnorwood","Wellington","Eagle Lake","Paint Rock","Gatesville","Carrollton","Richardson","Cedar Hill","Seagoville","Lake Creek","Lewisville","The Colony","Little Elm","Lelia Lake","Concepcion","Gardendale","Waxahachie","Midlothian","Fort Bliss","Bluff Dale","West Point","Mc Caulley","Sugar Land","Texas City","Whitesboro","Gladewater","Mc Queeney","Petersburg","Pottsville","Hallsville","Jonesville","San Marcos","Brownsboro","Los Ebanos","Mount Calm","Ropesville","Whitharral","Big Spring","Greenville","Wolfe City","Vanderbilt","Kirbyville","Fort Davis","Falls City","Kingsville","Cunningham","Springlake","Sweet Home","Darrouzett","Bruceville","Cedar Lane","Eagle Pass","Rio Medina","Burlington","Forestburg","Montgomery","Burkeville","Deweyville","Sweetwater","Agua Dulce","Farnsworth","Boys Ranch","Palo Pinto","Springtown","Livingston","Royse City","Laird Hill","New London","Brookeland","Coldspring","Pointblank","Whitehouse","San Isidro","Fort Worth","Brownfield","San Angelo","Christoval","Pennington","Colmesneil","Huntsville","Brookshire","Grandfalls","Washington","Glen Flora","Hungerford","Schwertner","Cedar Park","Georgetown","Round Rock","Bridgeport","South Bend","Batesville","Frankston","Palestine","Charlotte","Christine","Bellville","Fort Hood","Pendleton","Elmendorf","Texarkana","Old Ocean","Liverpool","Terlingua","Silverton","Brownwood","Chriesman","Deanville","Harlingen","Rio Hondo","Pittsburg","Panhandle","Bloomburg","Childress","Bluegrove","Henrietta","Whiteface","Gouldbusk","Goldsboro","Copeville","Josephine","Princeton","Jonesboro","Crosbyton","Lancaster","Sunnyvale","Pecan Gap","Thomaston","Big Wells","Clarendon","Benavides","San Diego","Desdemona","Goldsmith","Telegraph","Barksdale","Forreston","Canutillo","Dodd City","Telephone","La Grange","Ledbetter","Round Top","Sylvester","Dougherty","Kendleton","Needville","Rosenberg","Thompsons","Scroggins","Fairfield","Streetman","Seagraves","Dickinson","Galveston","Hitchcock","La Marque","Gilchrist","Stonewall","Weesatche","Leesville","Pottsboro","Southmayd","White Oak","Kingsbury","Plainview","Abernathy","Estelline","Lumberton","Sour Lake","Deer Park","Highlands","Rochester","Driftwood","Wimberley","Murchison","La Blanca","Covington","Hillsboro","Levelland","Grapeland","Dell City","Salt Flat","Jacksboro","Francitas","Valentine","Nederland","Grandview","Rio Vista","Armstrong","Kerrville","Roosevelt","Knox City","Brookston","Fowlerton","Lexington","Normangee","Cleveland","Groesbeck","Tehuacana","Kingsland","Wolfforth","Mc Gregor","Jefferson","Matagorda","Van Vleck","Wadsworth","Buckholts","Thorndale","Westbrook","New Caney","Pinehurst","Splendora","Masterson","Lone Star","Chatfield","Corsicana","Blackwell","Wildorado","Beckville","Poolville","Lazbuddie","Sheffield","Camp Wood","Balmorhea","Toyahvale","Woodsboro","New Baden","Ballinger","Henderson","Laneville","Ingleside","Hermleigh","Stratford","Glen Rose","Aspermont","Old Glory","Arlington","Grapevine","Kennedale","Mansfield","Southlake","Dyess Afb","Sanderson","Cookville","Del Valle","Spicewood","Centralia","Woodville","Hillister","Big Sandy","Fruitvale","Telferner","Riverside","Hempstead","Lane City","Iowa Park","Oklaunion","Sebastian","La Vernia","Stockdale","Greenwood","Winnsboro","Newcastle","Montalba","Rockport","Holliday","Megargel","Scotland","Industry","Muleshoe","Red Rock","Beeville","Normanna","Skidmore","Bartlett","Atascosa","Somerset","Von Ormy","Converse","Meridian","Redwater","Brazoria","Danciger","Angleton","Freeport","Pearland","Rosharon","Millican","Wellborn","Marathon","Quitaque","Caldwell","Fentress","Lockhart","Seadrift","La Feria","Leesburg","Marietta","Nazareth","Hankamer","Gallatin","Maydelle","Bellevue","Petrolia","Tennyson","Rockwood","Mckinney","Sheridan","Columbus","Alleyton","Bulverde","Comanche","Muenster","Van Horn","Hutchins","Mesquite","Hereford","Klondike","Hochheim","Westhoff","Nordheim","Yorktown","Asherton","Catarina","Realitos","Eastland","Bardwell","Maypearl","Tornillo","Randolph","Ellinger","Flatonia","Floydada","Richmond","Fulshear","Simonton","Stafford","Pearsall","Seminole","Santa Fe","Berclair","Gonzales","Alanreed","Tom Bean","Longview","Anderson","Navasota","Richards","Geronimo","Edmonson","Lakeview","Hamilton","Spearman","Saratoga","Kingwood","Hufsmith","Bellaire","Pasadena","La Porte","Seabrook","Harleton","Marshall","Woodlawn","Channing","Canadian","Malakoff","Trinidad","Chandler","Edinburg","La Villa","Mercedes","Progreso","San Juan","Penelope","Granbury","Brashear","Saltillo","Crockett","Lovelady","Ratcliff","Campbell","Commerce","Lone Oak","Stinnett","Barnhart","La Salle","Hamshire","Beaumont","Ben Bolt","Alvarado","Burleson","Cleburne","Stamford","Crandall","Bergheim","Kendalia","Junction","Benjamin","Powderly","Fieldton","Lampasas","Dime Box","Giddings","Daisetta","Coolidge","Thornton","Lipscomb","Oakville","Whitsett","Bluffton","New Deal","Odonnell","New Home","Rochelle","Crawford","Elm Mott","Calliham","Fredonia","Pontotoc","Bay City","Blessing","Midfield","Palacios","El Indio","La Coste","Rockdale","Montague","Ringgold","Saint Jo","Magnolia","Douglass","Garrison","Richland","Bon Wier","Wiergate","Maryneal","Banquete","Driscoll","Robstown","Perryton","Carthage","De Berry","Coyanosa","Imperial","Corrigan","Goodrich","Onalaska","Bushland","Amarillo","Presidio","Umbarger","Big Lake","Rio Frio","Saragosa","Austwell","Franklin","Wheelock","Rockwall","Hemphill","Pineland","Broaddus","Oakhurst","Shepherd","Portland","Cherokee","San Saba","Eldorado","Fluvanna","Salineno","Winfield","Veribest","Carlsbad","Vancourt","Manchaca","Groveton","Woodlake","Doucette","Ore City","Mc Camey","Comstock","Edgewood","Victoria","Mcfaddin","Pattison","Monahans","Danevang","El Campo","Mobeetie","Shamrock","Florence","Coupland","Paradise","La Pryor","Elkhart","Andrews","Zavalla","Wayside","New Ulm","Bandera","Tarpley","Bastrop","Mc Dade","Rosanky","Seymour","Mineral","Holland","Killeen","Helotes","Macdona","Clifton","Iredell","Kopperl","De Kalb","Danbury","Blanket","Bertram","Maxwell","Atlanta","Kildare","Mc Leod","Avinger","Dimmitt","Anahuac","Baytown","Stowell","Bledsoe","Burkett","Coleman","Prosper","Melissa","Garwood","Glidden","Oakland","Fischer","De Leon","Gustine","Proctor","Lindsay","Rosston","Oglesby","Purmela","Cee Vee","Paducah","Lorenzo","Dalhart","Kerrick","Texline","Addison","Coppell","Rowlett","Garland","Ackerly","Roanoke","Dickens","Notrees","Penwell","Red Oak","Milford","Anthony","El Paso","Rosebud","Chilton","Ivanhoe","Ladonia","Leonard","Ravenna","Trenton","Carmine","Muldoon","Lockney","Crowell","Beasley","Orchard","Wortham","Bigfoot","Bacliff","Belmont","Harwood","Waelder","Denison","Sherman","Kilgore","Schertz","Staples","Memphis","Carlton","Thicket","Kountze","Silsbee","Houston","Huffman","Tomball","Cypress","Hockley","Webster","Karnack","Hartley","Weinert","Haskell","O Brien","Eustace","Mcallen","Edcouch","Hargill","Hidalgo","La Joya","Mission","Penitas","Weslaco","Aquilla","Brandon","Hubbard","Mertens","Whitney","Sundown","Cresson","Pickton","Kennard","Coahoma","Celeste","Quinlan","Sanford","Mertzon","La Ward","Evadale","Premont","Lillian","Lueders","Gillett","Kaufman","Terrell","Comfort","Guthrie","Riviera","Blossom","Chicota","Amherst","Kempner","Cotulla","Encinal","Moulton","Sublime","Lincoln","Buffalo","Oakwood","Concord","Marquez","Romayor","Liberty","Raywood","Follett","Higgins","Castell","Mentone","Lubbock","Woodway","Lenorah","Stanton","Elmaton","Markham","Pledger","Quemado","Natalia","D Hanis","Midland","Cameron","Davilla","Loraine","Matador","Cushing","Chireno","Graford","Clayton","Millsap","Peaster","Farwell","Leggett","Redford","Bagwell","Detroit","Bayside","Refugio","Bremond","Calvert","Mumford","Wingate","Winters","Overton","Bronson","Gregory","Joaquin","Timpson","Texhoma","Bullard","Lindale","Rainbow","Delmita","Bedford","Crowley","Tuscola","Abilene","Wellman","Woodson","Leander","Mc Neil","Trinity","Chester","Spurger","Midkiff","Sabinal","Del Rio","Langtry","Nursery","Placedo","Barstow","Wickett","Brenham","Wharton","Allison","Briscoe","Wheeler","Electra","Harrold","Granger","Jarrell","Walburg","Pandora","Decatur","Slidell","Hawkins","Mineola","Quitman","Neches","Cayuga","Lufkin","Diboll","Pollok","Fulton","Claude","Leming","Poteet","Kenney","Wallis","Enochs","Medina","Pawnee","Pettus","Tuleta","Temple","Belton","Rogers","Salado","Boerne","Adkins","Blanco","Morgan","Sweeny","Manvel","Kurten","Alpine","Encino","Zephyr","Briggs","Burnet","Luling","Putnam","Combes","Lozano","Olmito","Bivins","Linden","Winnie","Reklaw","Morton","Bronte","Silver","Valera","Novice","Celina","Frisco","Weston","Nevada","Dodson","Altair","Weimar","Energy","Sidney","Lowake","Irving","Sachse","Desoto","Wilmer","Dallas","Lamesa","Cooper","Denton","Argyle","Aubrey","Justin","Ponder","Sanger","Mcadoo","Hedley","Carbon","Gorman","Ranger","Odessa","Ferris","Palmer","Avalon","Fabens","Dublin","Marlin","Reagan","Bailey","Bonham","Windom","Fresno","Kirvin","Teague","Dilley","Harper","Fannin","Goliad","Smiley","Ottine","Lefors","Mclean","Gunter","Sadler","Easton","Judson","Bedias","Cibolo","Marion","Seguin","Turkey","Gruver","Quanah","Batson","Humble","Spring","Barker","Crosby","Waskom","Athens","Poynor","Itasca","Abbott","Malone","Paluxy","Latexo","Forsan","Borger","Fritch","Bryson","Jermyn","Perrin","Ganado","Lolita","Jasper","Groves","Guerra","Sandia","Godley","Joshua","Hamlin","Hawley","Ecleto","Hobson","Kenedy","Forney","Mabank","Rosser","Scurry","Waring","Sarita","Girard","Jayton","Ingram","London","Munday","Deport","Roxton","Sumner","Lometa","Shiner","Yoakum","Jewett","Dayton","Devers","Hardin","Booker","Dinero","Idalou","Slaton","Tahoka","Wilson","Melvin","Axtell","Hewitt","Lorena","Riesel","Tilden","Midway","Tarzan","Devine","Yancey","Menard","Milano","Mullin","Priddy","Nocona","Sunset","Conroe","Willis","Dobbin","Porter","Cactus","Sunray","Naples","Flomot","Etoile","Kerens","Powell","Dawson","Purdon","Newton","Roscoe","Bishop","Adrian","Orange","Gordon","Mingus","Strawn","Panola","Dennis","Bovina","Friona","Girvin","Camden","Moscow","Canyon","Leakey","Bogata","Annona","Tivoli","Hearne","Norton","Rowena","Minden","Mathis","Sinton","Snyder","Albany","Center","Tenaha","Winona","Grulla","Sonora","Euless","Haslet","Keller","Merkel","Dryden","Meadow","Mereta","Austin","Warren","Gilmer","Rankin","Uvalde","Concan","Knippa","Utopia","Canton","Waller","Burton","Laredo","Oilton","Boling","Lissie","Louise","Pierce","Vernon","Lasara","Lyford","Taylor","Thrall","Kermit","Newark","Alvord","Golden","Yantis","Plains","Graham","Loving","Zapata","Lopeno","Lytle","Peggy","Sealy","Maple","Elgin","Paige","Tynan","Hooks","Simms","Damon","Alvin","Clute","Bryan","Early","Bangs","Lyons","Snook","Baird","Clyde","Groom","Cuney","Wells","Byers","Talpa","Allen","Plano","Lavon","Quail","Evant","Mound","Crane","Ozona","Ralls","Wylie","Welch","Enloe","Cuero","Afton","Freer","Cisco","Olden","Ennis","Italy","Clint","Satin","Ector","Gober","Savoy","Warda","Rotan","Aiken","Talco","Donie","Moore","Kemah","Nixon","Pampa","Bells","Tioga","Shiro","Morse","Votaw","Alief","Larue","Alamo","Donna","Pharr","Bynum","Irene","Anton","Smyer","Lipan","Tolar","Cumby","Knott","Merit","China","Alice","Keene","Venus","Anson","Avoca","Runge","Goree","Paris","Petty","Earth","Olton","Spade","Sudan","Leona","Flynn","Kosse","Mexia","Llano","Brady","Doole","Moody","Leroy","Mason","Hondo","Gause","Bowie","Dumas","Omaha","Cason","Sacul","Woden","Barry","Frost","Nolan","Vidor","Santo","Aledo","Whitt","Iraan","Marfa","Emory","Point","Avery","Pecos","Toyah","Miami","Miles","Price","Tatum","Milam","Edroy","Moran","Tyler","Flint","Troup","Caddo","Happy","Kress","Tulia","Hurst","Ovalo","Trent","Manor","Diana","Dodge","Pyote","Bruni","Egypt","Kamay","Odell","Hutto","Rhome","Chico","Tokio","Olney","Troy","Gail","Maud","Nash","Dale","Hart","Rusk","Alto","Tell","Voss","Anna","Nada","Eden","Eola","Myra","Flat","Dawn","Krum","Spur","Rice","Lott","Plum","Roby","Loop","Post","Doss","Cost","Howe","Iola","Hico","Katy","Rule","Buda","Kyle","Kemp","Elsa","Linn","Blum","Como","Dike","Edna","Buna","Nome","Elmo","Hunt","Bend","Hull","Lohn","Voca","Eddy","Mart","Ross","West","Waco","Lodi","Mico","Hext","Star","Call","Waka","Vega","Gary","Azle","Alba","Orla","Fate","Odem","Taft","Dunn","Nemo","Roma","Lawn","Wall","Fred","Inez","Weir","Poth","Wink","Boyd","Hye","May","Era","Guy","Pep","Rye","Tow","Art","Ace","Ira","Arp","Tye","Van"]'
  ),
  TI = [
    "Duck Creek Village",
    "West Valley City",
    "Saratoga Springs",
    "Bear River City",
    "North Salt Lake",
    "Montezuma Creek",
    "Monument Valley",
    "Dammeron Valley",
    "Cache Junction",
    "Bingham Canyon",
    "Salt Lake City",
    "Fountain Green",
    "Mount Pleasant",
    "Eagle Mountain",
    "Pleasant Grove",
    "Mountain Home",
    "Fort Duchesne",
    "American Fork",
    "Brigham City",
    "Grouse Creek",
    "Kanarraville",
    "Mount Carmel",
    "South Jordan",
    "Cedar Valley",
    "Spanish Fork",
    "Saint George",
    "Minersville",
    "Park Valley",
    "East Carbon",
    "Centerville",
    "Woods Cross",
    "Castle Dale",
    "Green River",
    "Orangeville",
    "Cannonville",
    "Henrieville",
    "Circleville",
    "Garden City",
    "West Jordan",
    "Mexican Hat",
    "Lake Powell",
    "Centerfield",
    "Spring City",
    "Grantsville",
    "Rush Valley",
    "Springville",
    "New Harmony",
    "Santa Clara",
    "Toquerville",
    "Pine Valley",
    "Greenville",
    "Collinston",
    "Deweyville",
    "Honeyville",
    "Providence",
    "Smithfield",
    "Wellsville",
    "Kenilworth",
    "Wellington",
    "Dutch John",
    "Clearfield",
    "Farmington",
    "Huntington",
    "Brian Head",
    "Cedar City",
    "Orderville",
    "Leamington",
    "Monticello",
    "Whiterocks",
    "Heber City",
    "Enterprise",
    "Springdale",
    "Washington",
    "Hanksville",
    "Huntsville",
    "Riverside",
    "Snowville",
    "Tremonton",
    "Clarkston",
    "Hyde Park",
    "Millville",
    "Sunnyside",
    "Bountiful",
    "Kaysville",
    "Fruitland",
    "Roosevelt",
    "Cleveland",
    "Escalante",
    "Panguitch",
    "Newcastle",
    "Paragonah",
    "Greenwich",
    "Marysvale",
    "Richfield",
    "Annabella",
    "Koosharem",
    "Coalville",
    "Park City",
    "Santaquin",
    "Wallsburg",
    "Hurricane",
    "La Verkin",
    "Rockville",
    "Fielding",
    "Plymouth",
    "Lewiston",
    "Paradise",
    "Richmond",
    "Hill Afb",
    "Syracuse",
    "Altamont",
    "Bluebell",
    "Duchesne",
    "Antimony",
    "Thompson",
    "Glendale",
    "Fillmore",
    "Hinckley",
    "Oak City",
    "Garrison",
    "Junction",
    "Kingston",
    "Laketown",
    "Randolph",
    "Woodruff",
    "Riverton",
    "Herriman",
    "Blanding",
    "Fairview",
    "Gunnison",
    "Mayfield",
    "Sterling",
    "Elsinore",
    "Glenwood",
    "Stockton",
    "Wendover",
    "Randlett",
    "Mapleton",
    "Bicknell",
    "Teasdale",
    "Milford",
    "Corinne",
    "Garland",
    "Portage",
    "Willard",
    "Cornish",
    "Trenton",
    "Altonah",
    "Tabiona",
    "Talmage",
    "Clawson",
    "Boulder",
    "Parowan",
    "Lynndyl",
    "Croydon",
    "Midvale",
    "Chester",
    "Ephraim",
    "Fayette",
    "Redmond",
    "Henefer",
    "Bonanza",
    "Lapoint",
    "Tridell",
    "Elberta",
    "Central",
    "Gunlock",
    "Hildale",
    "Beaver",
    "Howell",
    "Mantua",
    "Mendon",
    "Newton",
    "Helper",
    "Manila",
    "Layton",
    "Ferron",
    "Tropic",
    "Modena",
    "Summit",
    "Eureka",
    "Holden",
    "Kanosh",
    "Meadow",
    "Scipio",
    "Morgan",
    "Draper",
    "La Sal",
    "Axtell",
    "Moroni",
    "Aurora",
    "Salina",
    "Sigurd",
    "Joseph",
    "Monroe",
    "Sevier",
    "Oakley",
    "Dugway",
    "Ibapah",
    "Tooele",
    "Vernon",
    "Jensen",
    "Vernal",
    "Alpine",
    "Lindon",
    "Goshen",
    "Payson",
    "Midway",
    "Virgin",
    "Torrey",
    "Hooper",
    "Hyrum",
    "Logan",
    "Price",
    "Hanna",
    "Myton",
    "Neola",
    "Emery",
    "Hatch",
    "Bryce",
    "Cisco",
    "Beryl",
    "Levan",
    "Nephi",
    "Alton",
    "Kanab",
    "Delta",
    "Magna",
    "Sandy",
    "Aneth",
    "Bluff",
    "Manti",
    "Wales",
    "Kamas",
    "Provo",
    "Salem",
    "Ivins",
    "Leeds",
    "Lyman",
    "Ogden",
    "Elmo",
    "Moab",
    "Mona",
    "Echo",
    "Peoa",
    "Lehi",
    "Orem",
    "Veyo",
    "Eden",
    "Loa",
    "Roy",
  ],
  OI = [
    "Saint Johnsbury Center",
    "Hartland Four Corners",
    "East Saint Johnsbury",
    "White River Junction",
    "Westminster Station",
    "Bridgewater Corners",
    "Middletown Springs",
    "North Ferrisburgh",
    "Manchester Center",
    "Montgomery Center",
    "Craftsbury Common",
    "South Londonderry",
    "North Springfield",
    "North Bennington",
    "South Burlington",
    "Underhill Center",
    "Highgate Springs",
    "Saint Albans Bay",
    "Belvidere Center",
    "East Wallingford",
    "Northfield Falls",
    "North Montpelier",
    "Waterbury Center",
    "West Brattleboro",
    "East Middlebury",
    "Saint Johnsbury",
    "Lower Waterford",
    "Highgate Center",
    "Sheldon Springs",
    "North Hyde Park",
    "Randolph Center",
    "South Strafford",
    "Thetford Center",
    "East Charleston",
    "Greensboro Bend",
    "West Charleston",
    "North Clarendon",
    "East Montpelier",
    "West Dummerston",
    "South Woodstock",
    "East Arlington",
    "Mc Indoe Falls",
    "Essex Junction",
    "East Berkshire",
    "East Fairfield",
    "Enosburg Falls",
    "Jeffersonville",
    "North Thetford",
    "Newport Center",
    "Center Rutland",
    "West Townshend",
    "West Wardsboro",
    "North Hartland",
    "South Royalton",
    "South Ryegate",
    "East Hardwick",
    "Lyndon Center",
    "West Danville",
    "North Concord",
    "Beecher Falls",
    "Isle La Motte",
    "East Randolph",
    "East Thetford",
    "Cuttingsville",
    "East Poultney",
    "Bellows Falls",
    "Cambridgeport",
    "Saxtons River",
    "South Newfane",
    "Williamsville",
    "North Pomfret",
    "South Pomfret",
    "West Hartford",
    "Proctorsville",
    "North Pownal",
    "East Ryegate",
    "Saint Albans",
    "East Corinth",
    "West Fairlee",
    "West Newbury",
    "West Topsham",
    "Williamstown",
    "West Rutland",
    "Graniteville",
    "Websterville",
    "Jacksonville",
    "West Halifax",
    "Perkinsville",
    "Ferrisburgh",
    "East Dorset",
    "West Rupert",
    "Lyndonville",
    "Island Pond",
    "Bakersfield",
    "Lake Elmore",
    "Morrisville",
    "Wells River",
    "Beebe Plain",
    "Forest Dale",
    "Mount Holly",
    "Wallingford",
    "West Pawlet",
    "East Calais",
    "South Barre",
    "Londonderry",
    "Westminster",
    "Brattleboro",
    "Bridgewater",
    "Brownsville",
    "Springfield",
    "Stockbridge",
    "Starksboro",
    "Middlebury",
    "Bennington",
    "Manchester",
    "Shaftsbury",
    "East Burke",
    "Passumpsic",
    "West Burke",
    "Burlington",
    "Colchester",
    "Huntington",
    "Jonesville",
    "East Haven",
    "Montgomery",
    "Grand Isle",
    "North Hero",
    "South Hero",
    "Waterville",
    "Eden Mills",
    "Brookfield",
    "Post Mills",
    "Washington",
    "Craftsbury",
    "Derby Line",
    "Greensboro",
    "North Troy",
    "Chittenden",
    "Fair Haven",
    "Killington",
    "Pittsfield",
    "Montpelier",
    "East Barre",
    "Marshfield",
    "Northfield",
    "Plainfield",
    "Waitsfield",
    "East Dover",
    "West Dover",
    "Whitingham",
    "Wilmington",
    "Taftsville",
    "New Haven",
    "Vergennes",
    "Granville",
    "Salisbury",
    "Arlington",
    "Bondville",
    "Readsboro",
    "Sheffield",
    "Charlotte",
    "Hinesburg",
    "Shelburne",
    "Underhill",
    "Williston",
    "Guildhall",
    "Lunenburg",
    "Fairfield",
    "Cambridge",
    "Hyde Park",
    "Strafford",
    "Tunbridge",
    "Westfield",
    "Castleton",
    "Hydeville",
    "Pittsford",
    "Waterbury",
    "Worcester",
    "Townshend",
    "Wardsboro",
    "Woodstock",
    "Cavendish",
    "Gaysville",
    "Rochester",
    "Bridport",
    "Shoreham",
    "Stamford",
    "Danville",
    "Hardwick",
    "Winooski",
    "Richmond",
    "Westford",
    "Franklin",
    "Richford",
    "Bradford",
    "Randolph",
    "Thetford",
    "Vershire",
    "Coventry",
    "Irasburg",
    "Bomoseen",
    "Florence",
    "Poultney",
    "Moretown",
    "Woodbury",
    "Marlboro",
    "Ascutney",
    "Hartford",
    "Hartland",
    "Plymouth",
    "Bristol",
    "Monkton",
    "Roxbury",
    "Hancock",
    "Whiting",
    "Peacham",
    "Jericho",
    "Concord",
    "Averill",
    "Fairfax",
    "Sheldon",
    "Swanton",
    "Alburgh",
    "Johnson",
    "Wolcott",
    "Chelsea",
    "Corinth",
    "Fairlee",
    "Newbury",
    "Topsham",
    "Newport",
    "Orleans",
    "Rutland",
    "Belmont",
    "Brandon",
    "Proctor",
    "Adamant",
    "Grafton",
    "Jamaica",
    "Newfane",
    "Barnard",
    "Norwich",
    "Quechee",
    "Reading",
    "Windsor",
    "Chester",
    "Orwell",
    "Ripton",
    "Dorset",
    "Pownal",
    "Rupert",
    "Groton",
    "Barnet",
    "Lyndon",
    "Sutton",
    "Milton",
    "Granby",
    "Canaan",
    "Gilman",
    "Norton",
    "Moscow",
    "Albany",
    "Barton",
    "Glover",
    "Lowell",
    "Morgan",
    "Benson",
    "Pawlet",
    "Calais",
    "Warren",
    "Putney",
    "Vernon",
    "Bethel",
    "Sharon",
    "Wilder",
    "Ludlow",
    "Weston",
    "Essex",
    "Stowe",
    "Derby",
    "Danby",
    "Wells",
    "Barre",
    "Cabot",
    "Peru",
    "Eden",
    "Troy",
  ],
  xI = [
    "King And Queen Court House",
    "Virginia State University",
    "Natural Bridge Station",
    "Charlotte Court House",
    "Saint Stephens Church",
    "Rappahannock Academy",
    "Chincoteague Island",
    "Amelia Court House",
    "Montpelier Station",
    "North Chesterfield",
    "South Chesterfield",
    "Woods Cross Roads",
    "Gloucester Point",
    "Paeonian Springs",
    "Woodberry Forest",
    "Buffalo Junction",
    "Providence Forge",
    "Rockbridge Baths",
    "Colonial Heights",
    "Temperanceville",
    "Charlottesville",
    "Madison Heights",
    "Augusta Springs",
    "Fairfax Station",
    "Mouth Of Wilson",
    "Cluster Springs",
    "Little Plymouth",
    "Wicomico Church",
    "Patrick Springs",
    "Pleasant Valley",
    "Wallops Island",
    "Greenbackville",
    "Jenkins Bridge",
    "Steeles Tavern",
    "Brandy Station",
    "Millers Tavern",
    "Cross Junction",
    "Staffordsville",
    "Mechanicsville",
    "Pennington Gap",
    "Christiansburg",
    "Meadows Of Dan",
    "Hampden Sydney",
    "Natural Bridge",
    "Mc Gaheysville",
    "Mount Crawford",
    "Fort Blackmore",
    "Orkney Springs",
    "Fredericksburg",
    "North Tazewell",
    "Colonial Beach",
    "East Stone Gap",
    "Barren Springs",
    "Virginia Beach",
    "Craddockville",
    "Clifton Forge",
    "Fort Defiance",
    "Stuarts Draft",
    "Williamsville",
    "Coleman Falls",
    "Lawrenceville",
    "Meredithville",
    "Keen Mountain",
    "Pilgrims Knob",
    "Lynch Station",
    "Bowling Green",
    "Drakes Branch",
    "Richardsville",
    "Indian Valley",
    "Stephens City",
    "Manakin Sabot",
    "Stanardsville",
    "Isle Of Wight",
    "Saint Charles",
    "Fort Mitchell",
    "Barboursville",
    "Prince George",
    "Bent Mountain",
    "Port Republic",
    "Mount Jackson",
    "Garrisonville",
    "Burkes Garden",
    "Pounding Mill",
    "Big Stone Gap",
    "Cripple Creek",
    "Rural Retreat",
    "Wachapreague",
    "North Garden",
    "Howardsville",
    "Spout Spring",
    "Fishersville",
    "Mount Sidney",
    "West Augusta",
    "Warm Springs",
    "White Plains",
    "Charles City",
    "Chesterfield",
    "Jeffersonton",
    "Cartersville",
    "Center Cross",
    "Tappahannock",
    "Falls Church",
    "Fort Belvoir",
    "Mount Vernon",
    "Star Tannery",
    "Independence",
    "Ruckersville",
    "Crystal Hill",
    "South Boston",
    "Collinsville",
    "Battery Park",
    "Williamsburg",
    "Shacklefords",
    "Stevensville",
    "Rollins Fork",
    "King William",
    "Purcellville",
    "Lovettsville",
    "Port Haywood",
    "Christchurch",
    "Barhamsville",
    "Cape Charles",
    "Willis Wharf",
    "Edwardsville",
    "Locust Grove",
    "Rhoadesville",
    "Gordonsville",
    "Harrisonburg",
    "Lacey Spring",
    "Singers Glen",
    "Swords Creek",
    "Nickelsville",
    "Fishers Hill",
    "Spotsylvania",
    "Spring Grove",
    "Tannersville",
    "Jewell Ridge",
    "Glade Spring",
    "Martinsville",
    "Newport News",
    "Belle Haven",
    "Davis Wharf",
    "Locustville",
    "Modest Town",
    "Pungoteague",
    "Earlysville",
    "Scottsville",
    "Jetersville",
    "Sweet Briar",
    "Mount Solon",
    "Churchville",
    "Craigsville",
    "Middlebrook",
    "Mint Spring",
    "Weyers Cave",
    "Hot Springs",
    "Glen Wilton",
    "Long Island",
    "Ruther Glen",
    "Laurel Fork",
    "Wylliesburg",
    "Stevensburg",
    "Church Road",
    "Centreville",
    "Dunn Loring",
    "Great Falls",
    "West Mclean",
    "Springfield",
    "Copper Hill",
    "Bremo Bluff",
    "Kents Store",
    "Boones Mill",
    "Rocky Mount",
    "Clear Brook",
    "White Marsh",
    "Hadensville",
    "Vernon Hill",
    "Stanleytown",
    "Head Waters",
    "King George",
    "Merry Point",
    "White Stone",
    "Locust Dale",
    "Cobbs Creek",
    "Baskerville",
    "Clarksville",
    "Church View",
    "Locust Hill",
    "Piney River",
    "Marionville",
    "Heathsville",
    "Sandy Level",
    "Gainesville",
    "Chester Gap",
    "Sperryville",
    "Haynesville",
    "Bridgewater",
    "Timberville",
    "Fort Valley",
    "Sugar Grove",
    "Branchville",
    "Drewryville",
    "Stony Creek",
    "Cedar Bluff",
    "Falls Mills",
    "Bentonville",
    "Front Royal",
    "Coles Point",
    "Mount Holly",
    "Sandy Point",
    "Austinville",
    "Max Meadows",
    "Buena Vista",
    "Fort Monroe",
    "Fort Eustis",
    "Mappsville",
    "New Church",
    "Wattsville",
    "Batesville",
    "Covesville",
    "Free Union",
    "White Hall",
    "Appomattox",
    "Greenville",
    "Huddleston",
    "Big Island",
    "Blue Ridge",
    "Cloverdale",
    "Eagle Rock",
    "Troutville",
    "Valentines",
    "Shortt Gap",
    "New Canton",
    "Buckingham",
    "Port Royal",
    "Hillsville",
    "Midlothian",
    "Berryville",
    "White Post",
    "New Castle",
    "Paint Bank",
    "Rixeyville",
    "Cumberland",
    "Sutherland",
    "Dunnsville",
    "Merrifield",
    "Alexandria",
    "Rectortown",
    "Upperville",
    "The Plains",
    "Somerville",
    "Fork Union",
    "Glade Hill",
    "Union Hall",
    "Winchester",
    "Middletown",
    "Stephenson",
    "Pearisburg",
    "Rich Creek",
    "Ripplemead",
    "Gloucester",
    "Gum Spring",
    "Sandy Hook",
    "State Farm",
    "Scottsburg",
    "Glen Allen",
    "Montpelier",
    "Blue Grass",
    "Carrollton",
    "Carrsville",
    "Smithfield",
    "West Point",
    "Kilmarnock",
    "Nuttsville",
    "Blackwater",
    "Jonesville",
    "Middleburg",
    "Round Hill",
    "Trevilians",
    "Brightwood",
    "Hallieford",
    "Chase City",
    "South Hill",
    "Deltaville",
    "Hardyville",
    "Water View",
    "Blacksburg",
    "Shawsville",
    "Lovingston",
    "Nellysford",
    "Montebello",
    "Jamesville",
    "Machipongo",
    "Nassawadox",
    "Blackstone",
    "Burkeville",
    "Unionville",
    "Rileyville",
    "Shenandoah",
    "Claudville",
    "Pittsville",
    "Disputanta",
    "Nokesville",
    "Woodbridge",
    "Amissville",
    "Flint Hill",
    "Washington",
    "Brownsburg",
    "Keezletown",
    "Penn Laird",
    "Castlewood",
    "Weber City",
    "Maurertown",
    "Toms Brook",
    "New Market",
    "Quicksburg",
    "Boissevain",
    "Pocahontas",
    "Meadowview",
    "Appalachia",
    "Saint Paul",
    "Wytheville",
    "Chesapeake",
    "Petersburg",
    "Portsmouth",
    "Waynesboro",
    "Assawoman",
    "Greenbush",
    "Hacksneck",
    "Harborton",
    "Greenwood",
    "Iron Gate",
    "Evergreen",
    "Arlington",
    "Fort Myer",
    "Lyndhurst",
    "Deerfield",
    "Villamont",
    "Rocky Gap",
    "Daleville",
    "Fincastle",
    "Davenport",
    "Mavisdale",
    "Whitewood",
    "Lynchburg",
    "Altavista",
    "Brookneal",
    "Ladysmith",
    "Fancy Gap",
    "Lambsburg",
    "Ruthville",
    "Keysville",
    "Red House",
    "Mitchells",
    "Birchleaf",
    "Clintwood",
    "Dinwiddie",
    "Mc Kenney",
    "Champlain",
    "Chantilly",
    "Annandale",
    "Newington",
    "Broad Run",
    "Calverton",
    "Delaplane",
    "Warrenton",
    "Remington",
    "Sumerduck",
    "Brucetown",
    "Eggleston",
    "Ware Neck",
    "Goochland",
    "Elk Creek",
    "Troutdale",
    "Virgilina",
    "Beaverdam",
    "Rockville",
    "Mc Dowell",
    "Jamestown",
    "Bruington",
    "Mattaponi",
    "Walkerton",
    "Irvington",
    "Lancaster",
    "Morattico",
    "Rose Hill",
    "Philomont",
    "Waterford",
    "Kenbridge",
    "Lunenburg",
    "Grimstead",
    "New Point",
    "La Crosse",
    "Hartfield",
    "Arrington",
    "Gladstone",
    "Birdsnest",
    "Capeville",
    "Eastville",
    "Franktown",
    "Lottsburg",
    "Reedville",
    "Burr Hill",
    "Sutherlin",
    "Farmville",
    "Green Bay",
    "Catharpin",
    "Haymarket",
    "Belspring",
    "New River",
    "Castleton",
    "Woodville",
    "Fairfield",
    "Fulks Run",
    "Cleveland",
    "Dungannon",
    "Gate City",
    "Strasburg",
    "Woodstock",
    "Broadford",
    "Chilhowie",
    "Saltville",
    "Courtland",
    "Thornburg",
    "Claremont",
    "Wakefield",
    "Bluefield",
    "Richlands",
    "Stratford",
    "Speedwell",
    "Lightfoot",
    "Covington",
    "Lexington",
    "Atlantic",
    "Hallwood",
    "Horntown",
    "Oak Hall",
    "Nelsonia",
    "Onancock",
    "Parksley",
    "Low Moor",
    "Mannboro",
    "Clifford",
    "New Hope",
    "Millboro",
    "Goodview",
    "Montvale",
    "Buchanan",
    "Oriskany",
    "Rawlings",
    "Warfield",
    "Big Rock",
    "Evington",
    "Rustburg",
    "Woodford",
    "Woodlawn",
    "Randolph",
    "Richmond",
    "Millwood",
    "Culpeper",
    "Clinchco",
    "Mc Clure",
    "Laneview",
    "Greenway",
    "Marshall",
    "Casanova",
    "Bealeton",
    "Goldvein",
    "Callaway",
    "Glen Lyn",
    "Pembroke",
    "Achilles",
    "Ordinary",
    "Wicomico",
    "Beaumont",
    "Columbia",
    "Oilville",
    "Whitetop",
    "Skippers",
    "Nathalie",
    "Sandston",
    "Fieldale",
    "Ridgeway",
    "Doe Hill",
    "Monterey",
    "Dahlgren",
    "Sealston",
    "Bluemont",
    "Hamilton",
    "Sterling",
    "Leesburg",
    "Victoria",
    "Rochelle",
    "Wolftown",
    "Bohannon",
    "Cardinal",
    "Skipwith",
    "Roseland",
    "Schuyler",
    "New Kent",
    "Cheriton",
    "Townsend",
    "Wardtown",
    "Nottoway",
    "Somerset",
    "Woolwine",
    "Callands",
    "Dry Fork",
    "Ringgold",
    "Powhatan",
    "Meherrin",
    "Prospect",
    "Fort Lee",
    "Dumfries",
    "Occoquan",
    "Quantico",
    "Triangle",
    "Hiwassee",
    "Viewtown",
    "Elliston",
    "Vesuvius",
    "Broadway",
    "Linville",
    "Grottoes",
    "Rosedale",
    "Duffield",
    "Edinburg",
    "Hartwood",
    "Stafford",
    "Horsepen",
    "Tazewell",
    "Abingdon",
    "Damascus",
    "Montross",
    "Crockett",
    "Yorktown",
    "Danville",
    "Franklin",
    "Hopewell",
    "Manassas",
    "Poquoson",
    "Staunton",
    "Accomac",
    "Painter",
    "Sanford",
    "Tangier",
    "Withams",
    "Keswick",
    "Amherst",
    "Pamplin",
    "Crimora",
    "Thaxton",
    "Bastian",
    "Roanoke",
    "Alberta",
    "Dolphin",
    "Freeman",
    "Gasburg",
    "Brodnax",
    "Oakwood",
    "Vansant",
    "Wolford",
    "Arvonia",
    "Dillwyn",
    "Concord",
    "Milford",
    "Dugspur",
    "Red Oak",
    "Moseley",
    "Chester",
    "Elkwood",
    "Rapidan",
    "Wilsons",
    "Loretto",
    "Clifton",
    "Herndon",
    "Fairfax",
    "Mc Lean",
    "Catlett",
    "Markham",
    "Midland",
    "Palmyra",
    "Penhook",
    "Redwood",
    "Narrows",
    "Newport",
    "Crozier",
    "Maidens",
    "Quinque",
    "Jarratt",
    "Halifax",
    "Ashland",
    "Doswell",
    "Hanover",
    "Studley",
    "Henrico",
    "Bassett",
    "Spencer",
    "Windsor",
    "Newtown",
    "Manquin",
    "Mollusk",
    "Ben Hur",
    "Ashburn",
    "Lincoln",
    "Bumpass",
    "Mineral",
    "Haywood",
    "Madison",
    "Oakpark",
    "Radiant",
    "Hudgins",
    "Mathews",
    "Boydton",
    "Jamaica",
    "Topping",
    "Urbanna",
    "Shipman",
    "Norwood",
    "Wingina",
    "Quinton",
    "Seaview",
    "Burgess",
    "Ophelia",
    "Stanley",
    "Cascade",
    "Chatham",
    "Keeling",
    "Bristow",
    "Newbern",
    "Parrott",
    "Pulaski",
    "Farnham",
    "Village",
    "Catawba",
    "Raphine",
    "Glasgow",
    "Bergton",
    "Criders",
    "Honaker",
    "Lebanon",
    "Hiltons",
    "Boykins",
    "Newsoms",
    "Partlow",
    "Dendron",
    "Elberon",
    "Waverly",
    "Amonate",
    "Red Ash",
    "Mendota",
    "Kinsale",
    "Oldhams",
    "Andover",
    "Coeburn",
    "Ivanhoe",
    "Seaford",
    "Bedford",
    "Bristol",
    "Emporia",
    "Hampton",
    "Norfolk",
    "Radford",
    "Suffolk",
    "Bloxom",
    "Keller",
    "Quinby",
    "Tasley",
    "Crozet",
    "Esmont",
    "Monroe",
    "Swoope",
    "Verona",
    "Bacova",
    "Moneta",
    "Forest",
    "Grundy",
    "Hurley",
    "Gladys",
    "Naruna",
    "Corbin",
    "Sparta",
    "Cullen",
    "Phenix",
    "Boston",
    "Lignum",
    "Breaks",
    "Carson",
    "Dewitt",
    "Hustle",
    "Reston",
    "Lorton",
    "Oakton",
    "Vienna",
    "Orlean",
    "Willis",
    "Ferrum",
    "Dutton",
    "Maryus",
    "Schley",
    "Severn",
    "Clover",
    "Mustoe",
    "Rescue",
    "Mascot",
    "Jersey",
    "Aylett",
    "Lively",
    "Dryden",
    "Keokee",
    "Dulles",
    "Louisa",
    "Dundas",
    "Pratts",
    "Foster",
    "Bracey",
    "Nelson",
    "Saluda",
    "Mc Coy",
    "Lanexa",
    "Exmore",
    "Oyster",
    "Callao",
    "Orange",
    "Ararat",
    "Stuart",
    "Blairs",
    "Gretna",
    "Dublin",
    "Draper",
    "Huntly",
    "Sharps",
    "Warsaw",
    "Vinton",
    "Goshen",
    "Dayton",
    "Elkton",
    "Hinton",
    "Atkins",
    "Marion",
    "Capron",
    "Sedley",
    "Brooke",
    "Sussex",
    "Bishop",
    "Linden",
    "Zacata",
    "Lackey",
    "Norton",
    "Mears",
    "Melfa",
    "Onley",
    "Saxis",
    "Keene",
    "Selma",
    "Hardy",
    "Goode",
    "Lowry",
    "Bland",
    "Ceres",
    "Ebony",
    "Maxie",
    "Raven",
    "Boyce",
    "Haysi",
    "Ammon",
    "Caret",
    "Burke",
    "Paris",
    "Check",
    "Floyd",
    "Henry",
    "Wirtz",
    "Hayes",
    "Fries",
    "Alton",
    "Axton",
    "Norge",
    "Toano",
    "Dogue",
    "Ninde",
    "Weems",
    "Ewing",
    "Aldie",
    "Aroda",
    "Banco",
    "Etlan",
    "Syria",
    "Diggs",
    "Gwynn",
    "North",
    "Onemo",
    "Susan",
    "Pilot",
    "Riner",
    "Afton",
    "Faber",
    "Crewe",
    "Luray",
    "Critz",
    "Vesta",
    "Dante",
    "Basye",
    "Surry",
    "Bandy",
    "Doran",
    "Emory",
    "Hague",
    "Pound",
    "Galax",
    "Salem",
    "Rowe",
    "Cana",
    "Saxe",
    "Reva",
    "Nora",
    "Ford",
    "Hume",
    "Troy",
    "Gore",
    "Bena",
    "Dyke",
    "Zuni",
    "Hood",
    "Leon",
    "Moon",
    "Wake",
    "Tyro",
    "Hurt",
    "Java",
    "Rice",
    "Ivor",
    "Ruby",
    "Yale",
    "Wise",
    "Ivy",
    "Bee",
    "Ark",
    "Dhs",
  ],
  VI = [
    "Fairchild Air Force Base",
    "Bainbridge Island",
    "Mountlake Terrace",
    "Copalis Crossing",
    "University Place",
    "North Bonneville",
    "Snoqualmie Pass",
    "Anderson Island",
    "Nine Mile Falls",
    "East Wenatchee",
    "South Cle Elum",
    "Metaline Falls",
    "Blakely Island",
    "North Lakewood",
    "Airway Heights",
    "Spokane Valley",
    "West Richland",
    "Battle Ground",
    "Brush Prairie",
    "Electric City",
    "Copalis Beach",
    "Pacific Beach",
    "Port Townsend",
    "Black Diamond",
    "Mercer Island",
    "South Prairie",
    "Friday Harbor",
    "Sedro Woolley",
    "Granite Falls",
    "Camano Island",
    "Otis Orchards",
    "College Place",
    "Point Roberts",
    "Chelan Falls",
    "Port Angeles",
    "Wilson Creek",
    "Grand Coulee",
    "Ocean Shores",
    "Port Hadlock",
    "Maple Valley",
    "Port Orchard",
    "White Salmon",
    "Silver Creek",
    "Paradise Inn",
    "Lopez Island",
    "Mount Vernon",
    "Lake Stevens",
    "Liberty Lake",
    "Medical Lake",
    "Kettle Falls",
    "East Olympia",
    "Lummi Island",
    "Benton City",
    "Leavenworth",
    "Clallam Bay",
    "Castle Rock",
    "Rock Island",
    "Coulee City",
    "Amanda Park",
    "Port Ludlow",
    "Federal Way",
    "Woodinville",
    "Port Gamble",
    "South Colby",
    "Centerville",
    "Oysterville",
    "Bonney Lake",
    "Camp Murray",
    "Mcchord Afb",
    "Deer Harbor",
    "Shaw Island",
    "Marblemount",
    "Newman Lake",
    "Grays River",
    "Walla Walla",
    "Maple Falls",
    "Ridgefield",
    "Silverlake",
    "Bridgeport",
    "Waterville",
    "Moses Lake",
    "Royal City",
    "Cosmopolis",
    "Humptulips",
    "Coupeville",
    "Oak Harbor",
    "North Bend",
    "Ravensdale",
    "Snoqualmie",
    "Rollingbay",
    "Silverdale",
    "Manchester",
    "Southworth",
    "Ellensburg",
    "Dallesport",
    "Goldendale",
    "Trout Lake",
    "Harrington",
    "Conconully",
    "Coulee Dam",
    "Elmer City",
    "Bay Center",
    "South Bend",
    "Long Beach",
    "Ocean Park",
    "Eatonville",
    "Gig Harbor",
    "Fox Island",
    "Longbranch",
    "Steilacoom",
    "Burlington",
    "Mill Creek",
    "Darrington",
    "Marysville",
    "Four Lakes",
    "Greenacres",
    "Valleyford",
    "Springdale",
    "Littlerock",
    "Bellingham",
    "Farmington",
    "Saint John",
    "Brownstown",
    "White Swan",
    "Ritzville",
    "Washtucna",
    "Clarkston",
    "Kennewick",
    "Wenatchee",
    "Ardenvoir",
    "Peshastin",
    "Carlsborg",
    "La Center",
    "Vancouver",
    "Washougal",
    "Ryderwood",
    "Mansfield",
    "Palisades",
    "Inchelium",
    "Soap Lake",
    "Stratford",
    "Montesano",
    "Greenbank",
    "Carnation",
    "Fall City",
    "Sammamish",
    "Skykomish",
    "Bremerton",
    "Hansville",
    "Indianola",
    "Suquamish",
    "Klickitat",
    "Wahkiacus",
    "Bickleton",
    "Roosevelt",
    "Centralia",
    "Mossyrock",
    "Davenport",
    "Grapeview",
    "Hoodsport",
    "Lilliwaup",
    "Riverside",
    "Carbonado",
    "La Grande",
    "Eastsound",
    "Anacortes",
    "Clearlake",
    "La Conner",
    "Stevenson",
    "Underwood",
    "Arlington",
    "Snohomish",
    "Chattaroy",
    "Deer Park",
    "Fairfield",
    "Wellpinit",
    "Fruitland",
    "Loon Lake",
    "Northport",
    "Rochester",
    "Cathlamet",
    "Skamokawa",
    "Waitsburg",
    "Oakesdale",
    "Uniontown",
    "Grandview",
    "Sunnyside",
    "Toppenish",
    "Paterson",
    "Plymouth",
    "Richland",
    "Cashmere",
    "Stehekin",
    "Neah Bay",
    "Starbuck",
    "Carrolls",
    "Longview",
    "Woodland",
    "Danville",
    "Republic",
    "Kahlotus",
    "Hartline",
    "Aberdeen",
    "Grayland",
    "Mccleary",
    "Oakville",
    "Quinault",
    "Westport",
    "Freeland",
    "Chimacum",
    "Nordland",
    "Quilcene",
    "Bellevue",
    "Enumclaw",
    "Issaquah",
    "Kirkland",
    "Seahurst",
    "Kingston",
    "Tracyton",
    "Cle Elum",
    "Kittitas",
    "Appleton",
    "Glenwood",
    "Packwood",
    "Chehalis",
    "Napavine",
    "Onalaska",
    "Brewster",
    "Okanogan",
    "Oroville",
    "Tonasket",
    "Wauconda",
    "Winthrop",
    "Nespelem",
    "Tokeland",
    "Nahcotta",
    "Metaline",
    "Kapowsin",
    "Puyallup",
    "Spanaway",
    "Wilkeson",
    "Longmire",
    "Lakewood",
    "Concrete",
    "Hamilton",
    "Rockport",
    "Lynnwood",
    "Gold Bar",
    "Mukilteo",
    "Stanwood",
    "Marshall",
    "Rockford",
    "Veradale",
    "Chewelah",
    "Colville",
    "Tumwater",
    "Prescott",
    "Ferndale",
    "Nooksack",
    "Endicott",
    "Garfield",
    "Lacrosse",
    "Thornton",
    "Othello",
    "Anatone",
    "Prosser",
    "Monitor",
    "La Push",
    "Heisson",
    "Laurier",
    "Connell",
    "Eltopia",
    "Pomeroy",
    "Ephrata",
    "Beverly",
    "Mattawa",
    "Hoquiam",
    "Moclips",
    "Neilton",
    "Taholah",
    "Clinton",
    "Langley",
    "Brinnon",
    "Bothell",
    "Kenmore",
    "Pacific",
    "Preston",
    "Redmond",
    "Seattle",
    "Keyport",
    "Poulsbo",
    "Seabeck",
    "Vantage",
    "Wishram",
    "Glenoma",
    "Mineral",
    "Cinebar",
    "Winlock",
    "Sprague",
    "Creston",
    "Lincoln",
    "Belfair",
    "Matlock",
    "Shelton",
    "Carlton",
    "Pateros",
    "Raymond",
    "Chinook",
    "Naselle",
    "Seaview",
    "Newport",
    "Ashford",
    "Buckley",
    "Lakebay",
    "Mckenna",
    "Waldron",
    "Edmonds",
    "Everett",
    "Silvana",
    "Startup",
    "Colbert",
    "Reardan",
    "Spangle",
    "Waverly",
    "Spokane",
    "Clayton",
    "Gifford",
    "Hunters",
    "Olympia",
    "Rainier",
    "Rosburg",
    "Burbank",
    "Touchet",
    "Wallula",
    "Everson",
    "Belmont",
    "Palouse",
    "Pullman",
    "Rosalia",
    "Steptoe",
    "Cowiche",
    "Granger",
    "Outlook",
    "Asotin",
    "Chelan",
    "Dryden",
    "Entiat",
    "Malaga",
    "Manson",
    "Beaver",
    "Sequim",
    "Yacolt",
    "Dayton",
    "Cougar",
    "Kalama",
    "Toutle",
    "Orondo",
    "Curlew",
    "Keller",
    "Orient",
    "George",
    "Marlin",
    "Quincy",
    "Warden",
    "Malone",
    "Satsop",
    "Auburn",
    "Burton",
    "Duvall",
    "Hobart",
    "Medina",
    "Renton",
    "Vashon",
    "Baring",
    "Burley",
    "Olalla",
    "Retsil",
    "Easton",
    "Ronald",
    "Roslyn",
    "Bingen",
    "Morton",
    "Randle",
    "Curtis",
    "Galvin",
    "Pe Ell",
    "Salkum",
    "Toledo",
    "Edwall",
    "Almira",
    "Lamona",
    "Mohler",
    "Odessa",
    "Wilbur",
    "Tahuya",
    "Loomis",
    "Malott",
    "Mazama",
    "Methow",
    "Ilwaco",
    "Cusick",
    "Dupont",
    "Graham",
    "Sumner",
    "Milton",
    "Orting",
    "Vaughn",
    "Tacoma",
    "Conway",
    "Carson",
    "Monroe",
    "Sultan",
    "Cheney",
    "Tumtum",
    "Marcus",
    "Valley",
    "Bucoda",
    "Tenino",
    "Blaine",
    "Custer",
    "Deming",
    "Lynden",
    "Lamont",
    "Albion",
    "Colfax",
    "Colton",
    "Malden",
    "Hooper",
    "Yakima",
    "Harrah",
    "Mabton",
    "Naches",
    "Parker",
    "Tieton",
    "Wapato",
    "Zillah",
    "Benge",
    "Forks",
    "Joyce",
    "Sekiu",
    "Amboy",
    "Camas",
    "Ariel",
    "Kelso",
    "Boyds",
    "Pasco",
    "Thorp",
    "Husum",
    "Ethel",
    "Vader",
    "Allyn",
    "Union",
    "Twisp",
    "Lebam",
    "Menlo",
    "Wauna",
    "Orcas",
    "Lyman",
    "Index",
    "Latah",
    "Evans",
    "Lacey",
    "Dixie",
    "Sumas",
    "Tekoa",
    "Buena",
    "Moxee",
    "Selah",
    "Lind",
    "Malo",
    "Mesa",
    "Elma",
    "Kent",
    "Lyle",
    "Adna",
    "Doty",
    "Omak",
    "Ione",
    "Elbe",
    "Olga",
    "Mead",
    "Mica",
    "Ford",
    "Addy",
    "Rice",
    "Yelm",
    "Acme",
    "Usk",
    "Roy",
    "Bow",
    "Elk",
    "Hay",
  ],
  II = [
    "White Sulphur Springs",
    "Green Sulphur Springs",
    "Shenandoah Junction",
    "Keslers Cross Lanes",
    "Charlton Heights",
    "South Charleston",
    "Gallipolis Ferry",
    "Berkeley Springs",
    "Camden On Gauley",
    "New Martinsville",
    "Windsor Heights",
    "Fraziers Bottom",
    "Webster Springs",
    "Falling Waters",
    "Grassy Meadows",
    "New Cumberland",
    "New Manchester",
    "Griffithsville",
    "Point Pleasant",
    "Bruceton Mills",
    "Jumping Branch",
    "Allen Junction",
    "Barboursville",
    "Gauley Bridge",
    "Kanawha Falls",
    "Meadow Bridge",
    "Capon Springs",
    "Yellow Spring",
    "Reynoldsville",
    "Harpers Ferry",
    "Kearneysville",
    "Shepherdstown",
    "Spurlockville",
    "Montana Mines",
    "West Columbia",
    "North Matewan",
    "Great Cacapon",
    "Mount Lookout",
    "Pence Springs",
    "Tallmansville",
    "Hacker Valley",
    "Porters Falls",
    "Mineral Wells",
    "Coal Mountain",
    "Gerrardstown",
    "Bloomingrose",
    "Turtle Creek",
    "Little Birch",
    "Beech Bottom",
    "Center Point",
    "Mount Carbon",
    "Fayetteville",
    "Lahmansville",
    "Williamsburg",
    "Capon Bridge",
    "Green Spring",
    "Purgitsville",
    "Wardensville",
    "West Milford",
    "Cottageville",
    "Charles Town",
    "Summit Point",
    "Falling Rock",
    "Saint Albans",
    "Walkersville",
    "Chapmanville",
    "Barrackville",
    "Summersville",
    "Valley Grove",
    "West Liberty",
    "Seneca Rocks",
    "Independence",
    "Crab Orchard",
    "Shady Spring",
    "Huttonsville",
    "Meadow Creek",
    "Middlebourne",
    "Sistersville",
    "French Creek",
    "Kanawha Head",
    "Williamstown",
    "New Richmond",
    "North Spring",
    "Martinsburg",
    "Bunker Hill",
    "Hedgesville",
    "Whitesville",
    "Short Creek",
    "Arnoldsburg",
    "Big Springs",
    "Grantsville",
    "Glen Ferris",
    "Mount Olive",
    "Spring Dale",
    "Mount Storm",
    "Slanesville",
    "Springfield",
    "Meadowbrook",
    "Mount Clare",
    "Cabin Creek",
    "Cedar Grove",
    "Alum Bridge",
    "West Hamlin",
    "Amherstdale",
    "Peach Creek",
    "Verdunville",
    "Jenkinjones",
    "Paynesville",
    "Warriormine",
    "Four States",
    "Worthington",
    "Glen Easton",
    "Moundsville",
    "Apple Grove",
    "Kellysville",
    "Spanishburg",
    "Wharncliffe",
    "Blacksville",
    "Secondcreek",
    "Sinks Grove",
    "Craigsville",
    "Birch River",
    "Triadelphia",
    "Circleville",
    "Sugar Grove",
    "Upper Tract",
    "Saint Marys",
    "Scott Depot",
    "Clear Creek",
    "Glen Daniel",
    "Monterville",
    "Valley Bend",
    "Valley Head",
    "Harrisville",
    "Gandeeville",
    "Looneyville",
    "Forest Hill",
    "Jacksonburg",
    "Parkersburg",
    "Glen Rogers",
    "Moatsville",
    "Burnsville",
    "Follansbee",
    "Huntington",
    "Mount Zion",
    "New Milton",
    "West Union",
    "Deep Water",
    "Montgomery",
    "Mount Hope",
    "Normantown",
    "Coxs Mills",
    "Cedarville",
    "Petersburg",
    "Ronceverte",
    "Moorefield",
    "Old Fields",
    "Clarksburg",
    "Bridgeport",
    "Lost Creek",
    "Lumberport",
    "Enterprise",
    "Mount Alto",
    "Sandyville",
    "Ravenswood",
    "Alum Creek",
    "Blue Creek",
    "Charleston",
    "Branchland",
    "Pecks Mill",
    "Roderfield",
    "Switchback",
    "Farmington",
    "Grant Town",
    "Mannington",
    "Rivesville",
    "Camp Creek",
    "Burlington",
    "Elk Garden",
    "Fort Ashby",
    "Wiley Ford",
    "Williamson",
    "Borderland",
    "Red Jacket",
    "Morgantown",
    "Maidsville",
    "Greenville",
    "Peterstown",
    "Waiteville",
    "Mount Nebo",
    "Brandywine",
    "Green Bank",
    "Rowlesburg",
    "Arthurdale",
    "Reedsville",
    "Terra Alta",
    "Rock Creek",
    "Cool Ridge",
    "Glen White",
    "Mac Arthur",
    "Piney View",
    "Princewick",
    "Prosperity",
    "Mill Creek",
    "Smithville",
    "Flemington",
    "Buckhannon",
    "Selbyville",
    "Kiahsville",
    "Wilsondale",
    "Upperglade",
    "Paden City",
    "Pine Grove",
    "Smithfield",
    "Belleville",
    "Davisville",
    "Washington",
    "Clear Fork",
    "Kopperston",
    "Saulsville",
    "Ravencliff",
    "Stephenson",
    "Cheat Lake",
    "Belington",
    "Bob White",
    "Ridgeview",
    "Sylvester",
    "Flatwoods",
    "Frametown",
    "Wellsburg",
    "Salt Rock",
    "Millstone",
    "Lizemores",
    "Smithburg",
    "Cannelton",
    "Powellton",
    "Glen Jean",
    "Lochgelly",
    "Glenville",
    "Sand Fork",
    "Maysville",
    "Lewisburg",
    "Frankford",
    "Maxwelton",
    "High View",
    "Lost City",
    "Shinnston",
    "Millville",
    "Clendenin",
    "Drybranch",
    "East Bank",
    "Gallagher",
    "Hugheston",
    "Institute",
    "Winifrede",
    "Woodville",
    "Big Creek",
    "Accoville",
    "Henlawson",
    "Mount Gay",
    "Sarah Ann",
    "Stollings",
    "Wilkinson",
    "Big Sandy",
    "Northfork",
    "Glen Dale",
    "Henderson",
    "Southside",
    "New Haven",
    "Bluefield",
    "Princeton",
    "New Creek",
    "Chattaroy",
    "Delbarton",
    "Naugatuck",
    "Cassville",
    "Granville",
    "Pursglove",
    "Gap Mills",
    "Wolfcreek",
    "Hillsboro",
    "Marlinton",
    "Slatyfork",
    "Tunnelton",
    "Masontown",
    "Red House",
    "Hurricane",
    "Dry Creek",
    "Coal City",
    "Josephine",
    "Slab Fork",
    "Stanaford",
    "White Oak",
    "Macfarlan",
    "Petroleum",
    "Ellenboro",
    "Pennsboro",
    "Left Hand",
    "Sandstone",
    "Hambleton",
    "Hendricks",
    "Red Creek",
    "Cleveland",
    "Frenchton",
    "Rock Cave",
    "East Lynn",
    "Lavalette",
    "Littleton",
    "Elizabeth",
    "Palestine",
    "Ikes Fork",
    "Pineville",
    "Rock View",
    "Glen Fork",
    "Galloway",
    "Philippi",
    "Glengary",
    "Ridgeway",
    "Danville",
    "Twilight",
    "Exchange",
    "Gassaway",
    "Colliers",
    "Culloden",
    "Big Bend",
    "Bickmore",
    "Procious",
    "Wallback",
    "Kimberly",
    "Smithers",
    "Oak Hill",
    "Thurmond",
    "Rosedale",
    "Gormania",
    "Alderson",
    "Caldwell",
    "Rainelle",
    "Quinwood",
    "Bloomery",
    "Hepzibah",
    "Millwood",
    "Bakerton",
    "Halltown",
    "Hansford",
    "Hernshaw",
    "Pond Gap",
    "Crawford",
    "Jane Lew",
    "Clothier",
    "Sharples",
    "Chauncey",
    "Avondale",
    "Bradshaw",
    "Cucumber",
    "Maybeury",
    "Fairmont",
    "Carolina",
    "Fairview",
    "Kingmont",
    "Mcmechen",
    "Hartford",
    "Glenwood",
    "Bramwell",
    "Hiawatha",
    "Lashmeet",
    "Montcalm",
    "Flat Top",
    "Piedmont",
    "Ridgeley",
    "Edgarton",
    "Dellslow",
    "Pentress",
    "Lindside",
    "Richwood",
    "Wheeling",
    "Franklin",
    "Riverton",
    "Arbovale",
    "Snowshoe",
    "Albright",
    "Kingwood",
    "Bancroft",
    "Hometown",
    "Winfield",
    "Fairdale",
    "Mabscott",
    "Surveyor",
    "Helvetia",
    "Ellamore",
    "Montrose",
    "Pipestem",
    "Rosemont",
    "Thornton",
    "Friendly",
    "Fort Gay",
    "Prichard",
    "Rockport",
    "Marianna",
    "Mc Graws",
    "Ashford",
    "Comfort",
    "Jeffrey",
    "Madison",
    "Peytona",
    "Wharton",
    "Heaters",
    "Bethany",
    "Ivydale",
    "Kincaid",
    "Hilltop",
    "Lansing",
    "Layland",
    "Lookout",
    "Scarbro",
    "Fairlea",
    "Crawley",
    "Charmco",
    "Augusta",
    "Chester",
    "Weirton",
    "Mathias",
    "Anmoore",
    "Haywood",
    "Spelter",
    "Wallace",
    "Elkview",
    "Eskdale",
    "Glasgow",
    "Handley",
    "Mammoth",
    "Tornado",
    "Ireland",
    "Orlando",
    "Midkiff",
    "Sumerco",
    "Kistler",
    "Mallory",
    "Switzer",
    "Whitman",
    "Anawalt",
    "Bartley",
    "Berwind",
    "Elkhorn",
    "Hensley",
    "Kimball",
    "Newhall",
    "Pageton",
    "Panther",
    "Premier",
    "Benwood",
    "Cameron",
    "Proctor",
    "Freeman",
    "Matoaka",
    "Nemours",
    "Justice",
    "Baisden",
    "Gilbert",
    "Breeden",
    "Dingess",
    "Matewan",
    "Newtown",
    "Ragland",
    "Ballard",
    "Wayside",
    "Paw Paw",
    "Fenwick",
    "Drennen",
    "Leivasy",
    "Belmont",
    "Buckeye",
    "Dunmore",
    "Newburg",
    "Buffalo",
    "Eleanor",
    "Liberty",
    "Colcord",
    "Dorothy",
    "Beckley",
    "Bradley",
    "Daniels",
    "Raleigh",
    "Rhodell",
    "Skelton",
    "Pickens",
    "Beverly",
    "Coalton",
    "Dryfork",
    "Whitmer",
    "Pullman",
    "Spencer",
    "Talcott",
    "Grafton",
    "Simpson",
    "Parsons",
    "Shirley",
    "Lorentz",
    "Erbacon",
    "Big Run",
    "Hundred",
    "Brohard",
    "Creston",
    "Waverly",
    "Herndon",
    "Brenton",
    "Cyclone",
    "Fanrock",
    "Hanover",
    "Matheny",
    "Wyoming",
    "Corinne",
    "Mullens",
    "Junior",
    "Inwood",
    "Foster",
    "Gordon",
    "Hewett",
    "Nellis",
    "Ottawa",
    "Racine",
    "Uneeda",
    "Julian",
    "Sutton",
    "Napier",
    "Lesage",
    "Milton",
    "Bomont",
    "Indore",
    "Maysel",
    "Boomer",
    "Robson",
    "Ansted",
    "Danese",
    "Dothan",
    "Edmond",
    "Minden",
    "Prince",
    "Victor",
    "Winona",
    "Nallen",
    "Bayard",
    "Cabins",
    "Asbury",
    "Renick",
    "Leslie",
    "Rupert",
    "Levels",
    "Points",
    "Delray",
    "Romney",
    "Shanks",
    "Newell",
    "Fisher",
    "Advent",
    "Le Roy",
    "Ripley",
    "Ranson",
    "Rippon",
    "Blount",
    "Dunbar",
    "London",
    "Camden",
    "Horner",
    "Weston",
    "Hamlin",
    "Ranger",
    "Yawkey",
    "Holden",
    "Lorado",
    "Lyburn",
    "Eckman",
    "Elbert",
    "Iaeger",
    "Isaban",
    "Mohawk",
    "Raysal",
    "Squire",
    "Thorpe",
    "Wilcoe",
    "Baxter",
    "Colfax",
    "Idamay",
    "Rachel",
    "Dallas",
    "Letart",
    "Ashton",
    "Athens",
    "Beeson",
    "Kegley",
    "Lerona",
    "Keyser",
    "Verner",
    "Kermit",
    "Lenore",
    "Varney",
    "Calvin",
    "Canvas",
    "Gilboa",
    "Nettie",
    "Bartow",
    "Durbin",
    "Aurora",
    "Arnett",
    "Beaver",
    "Eccles",
    "Harper",
    "Lanark",
    "Lester",
    "Midway",
    "Sophia",
    "Elkins",
    "Bowden",
    "Dailey",
    "Harman",
    "Kerens",
    "Norton",
    "Auburn",
    "Newton",
    "Walton",
    "Hinton",
    "Nimitz",
    "Thomas",
    "Adrian",
    "Ceredo",
    "Dunlow",
    "Kenova",
    "Shoals",
    "Bergoo",
    "Reader",
    "Folsom",
    "Burton",
    "Munday",
    "Vienna",
    "Walker",
    "Itmann",
    "Oceana",
    "Sabine",
    "Volga",
    "Costa",
    "Orgas",
    "Copen",
    "Chloe",
    "Widen",
    "Dille",
    "Alloy",
    "Shock",
    "Smoot",
    "Baker",
    "Milam",
    "Gypsy",
    "Salem",
    "Wyatt",
    "Evans",
    "Given",
    "Kenna",
    "Belle",
    "Dawes",
    "Miami",
    "Nitro",
    "Pinch",
    "Pratt",
    "Alkol",
    "Harts",
    "Blair",
    "Ethel",
    "Logan",
    "Bruno",
    "Davin",
    "Yolyn",
    "Welch",
    "Mason",
    "Wolfe",
    "Osage",
    "Union",
    "Dixie",
    "Belva",
    "Swiss",
    "Tioga",
    "Onego",
    "Bretz",
    "Eglon",
    "Teays",
    "Artie",
    "Naoma",
    "Saxon",
    "Ghent",
    "Helen",
    "Glady",
    "Mabie",
    "Berea",
    "Cairo",
    "Reedy",
    "Davis",
    "Genoa",
    "Wayne",
    "Cowen",
    "Diana",
    "Covel",
    "Jesse",
    "Lynco",
    "Simon",
    "Amigo",
    "Maben",
    "Seth",
    "Orma",
    "Clay",
    "Duck",
    "Glen",
    "Nebo",
    "Page",
    "Hico",
    "Linn",
    "Troy",
    "Myra",
    "Lake",
    "Cora",
    "Omar",
    "Davy",
    "Gary",
    "Jolo",
    "Kyle",
    "Metz",
    "Leon",
    "Rock",
    "Rawl",
    "Wana",
    "Pool",
    "Cass",
    "Poca",
    "Bolt",
    "Amma",
    "Alma",
    "Crum",
    "Wyco",
    "Bim",
    "Van",
    "Ona",
    "Pax",
    "Rio",
    "Gay",
    "Tad",
    "Sod",
    "Man",
    "War",
    "Odd",
    "Bud",
  ],
  _I = [
    "Washington Island",
    "Black River Falls",
    "Heafford Junction",
    "Saint Croix Falls",
    "Manitowish Waters",
    "Prairie Du Chien",
    "Pleasant Prairie",
    "Amherst Junction",
    "Boulder Junction",
    "Wisconsin Rapids",
    "Forest Junction",
    "Wisconsin Dells",
    "Armstrong Creek",
    "South Milwaukee",
    "Port Washington",
    "Richland Center",
    "Sheboygan Falls",
    "Lac Du Flambeau",
    "Menomonee Falls",
    "Butte Des Morts",
    "Chippewa Falls",
    "Mount Sterling",
    "Soldiers Grove",
    "Baileys Harbor",
    "Lake Nebagamon",
    "Lyndon Station",
    "Blanchardville",
    "Little Suamico",
    "Combined Locks",
    "East Ellsworth",
    "Prairie Du Sac",
    "Fountain City",
    "Cottage Grove",
    "Morrisonville",
    "Solon Springs",
    "Campbellsport",
    "Mount Calvary",
    "Mineral Point",
    "Johnson Creek",
    "Fort Atkinson",
    "Francis Creek",
    "Kellnersville",
    "Saint Nazianz",
    "Hales Corners",
    "Saint Francis",
    "Lake Tomahawk",
    "Spring Valley",
    "Junction City",
    "Stevens Point",
    "Glenwood City",
    "North Freedom",
    "Saint Germain",
    "Genesee Depot",
    "North Prairie",
    "Prairie Farm",
    "New Holstein",
    "Cross Plains",
    "Sturgeon Bay",
    "Union Center",
    "Camp Douglas",
    "Oconto Falls",
    "Pelican Lake",
    "Little Chute",
    "Star Prairie",
    "Weyerhaeuser",
    "New Richmond",
    "Spring Green",
    "Rock Springs",
    "Green Valley",
    "Elkhart Lake",
    "Stetsonville",
    "Independence",
    "Pigeon Falls",
    "Land O Lakes",
    "Presque Isle",
    "Williams Bay",
    "Clintonville",
    "Port Edwards",
    "Grand Marsh",
    "High Bridge",
    "Turtle Lake",
    "Wrightstown",
    "New Franken",
    "Stockbridge",
    "Neillsville",
    "Pardeeville",
    "Black Earth",
    "Blue Mounds",
    "Mount Horeb",
    "Sun Prairie",
    "Brownsville",
    "Ellison Bay",
    "Forestville",
    "South Range",
    "Saint Cloud",
    "Fond Du Lac",
    "Bloomington",
    "Dickeyville",
    "Hazel Green",
    "Patch Grove",
    "Platteville",
    "Alma Center",
    "New Munster",
    "Powers Lake",
    "Silver Lake",
    "South Wayne",
    "Summit Lake",
    "Tisch Mills",
    "Porterfield",
    "Briggsville",
    "Tunnel City",
    "Rhinelander",
    "Mc Naughton",
    "Three Lakes",
    "Black Creek",
    "Hortonville",
    "Beldenville",
    "River Falls",
    "Maiden Rock",
    "Balsam Lake",
    "Nelsonville",
    "Franksville",
    "Kansasville",
    "Union Grove",
    "Sextonville",
    "Orfordville",
    "Lake Delton",
    "Cedar Grove",
    "Random Lake",
    "Trempealeau",
    "Coon Valley",
    "Eagle River",
    "Honey Creek",
    "Lake Geneva",
    "Springfield",
    "Springbrook",
    "Scandinavia",
    "Friendship",
    "Cumberland",
    "Cornucopia",
    "Grand View",
    "Iron River",
    "Grantsburg",
    "New Auburn",
    "Abbotsford",
    "Dorchester",
    "Doylestown",
    "Fall River",
    "Ferryville",
    "Gays Mills",
    "Belleville",
    "Mc Farland",
    "Hustisford",
    "Iron Ridge",
    "Reeseville",
    "Beaver Dam",
    "Egg Harbor",
    "Fish Creek",
    "Sister Bay",
    "Boyceville",
    "Downsville",
    "Rock Falls",
    "Sand Creek",
    "Eau Claire",
    "Fall Creek",
    "Blue River",
    "Livingston",
    "Glen Haven",
    "Mount Hope",
    "Monticello",
    "New Glarus",
    "Green Lake",
    "Dodgeville",
    "Hollandale",
    "Helenville",
    "Lake Mills",
    "New Lisbon",
    "Benet Lake",
    "Twin Lakes",
    "West Salem",
    "Darlington",
    "Shullsburg",
    "White Lake",
    "Reedsville",
    "Two Rivers",
    "Rothschild",
    "Athelstane",
    "Packwaukee",
    "Hazelhurst",
    "Bear Creek",
    "Greenville",
    "Hager City",
    "Clear Lake",
    "Park Falls",
    "Burlington",
    "Sturtevant",
    "Evansville",
    "Janesville",
    "Glen Flora",
    "Lime Ridge",
    "Loganville",
    "Stone Lake",
    "Birnamwood",
    "Wittenberg",
    "Glenbeulah",
    "Jump River",
    "Galesville",
    "Genoa City",
    "Whitewater",
    "Shell Lake",
    "Germantown",
    "Brookfield",
    "North Lake",
    "Oconomowoc",
    "New Berlin",
    "New London",
    "Ogdensburg",
    "Pine River",
    "Plainfield",
    "Redgranite",
    "Winneconne",
    "Marshfield",
    "Auburndale",
    "Pittsville",
    "Butternut",
    "Clam Lake",
    "La Pointe",
    "Barronett",
    "Rice Lake",
    "Port Wing",
    "Greenleaf",
    "Green Bay",
    "Gilmanton",
    "Jim Falls",
    "Greenwood",
    "Arlington",
    "Friesland",
    "Lynxville",
    "Cambridge",
    "Deerfield",
    "Mazomanie",
    "Middleton",
    "Stoughton",
    "Watertown",
    "Maplewood",
    "Hawthorne",
    "Eau Galle",
    "Elk Mound",
    "Menomonie",
    "Ridgeland",
    "Fairchild",
    "Long Lake",
    "Fairwater",
    "Rosendale",
    "Cassville",
    "Cuba City",
    "Fennimore",
    "Lancaster",
    "Sinsinawa",
    "Browntown",
    "Marquette",
    "Princeton",
    "Barneveld",
    "Iron Belt",
    "Merrillan",
    "Jefferson",
    "Camp Lake",
    "Woodworth",
    "Luxemburg",
    "La Crosse",
    "Deerbrook",
    "Cleveland",
    "Manitowoc",
    "Schofield",
    "Stratford",
    "Marinette",
    "Wausaukee",
    "Westfield",
    "Greendale",
    "Oak Creek",
    "Milwaukee",
    "Cedarburg",
    "Saukville",
    "Stockholm",
    "Ellsworth",
    "Plum City",
    "Brantwood",
    "Caledonia",
    "Rochester",
    "Waterford",
    "Lone Rock",
    "Cazenovia",
    "Footville",
    "Ladysmith",
    "Deer Park",
    "Woodville",
    "Sauk City",
    "Hillpoint",
    "Reedsburg",
    "Edgewater",
    "Greenbush",
    "Sheboygan",
    "Whitehall",
    "Chaseburg",
    "Hillsboro",
    "Readstown",
    "Star Lake",
    "East Troy",
    "Pell Lake",
    "Birchwood",
    "Richfield",
    "West Bend",
    "Delafield",
    "Elm Grove",
    "Mukwonago",
    "Big Falls",
    "Embarrass",
    "Readfield",
    "Weyauwega",
    "Poy Sippi",
    "Saxeville",
    "Wild Rose",
    "Winnebago",
    "Milladore",
    "Dellwood",
    "Comstock",
    "Bayfield",
    "Drummond",
    "Herbster",
    "Washburn",
    "Cochrane",
    "Brillion",
    "Sherwood",
    "Holcombe",
    "Columbus",
    "Poynette",
    "Randolph",
    "Deforest",
    "Marshall",
    "Waunakee",
    "Ashippun",
    "Mayville",
    "Woodland",
    "Fox Lake",
    "Brussels",
    "Superior",
    "Florence",
    "Oakfield",
    "Eldorado",
    "Van Dyne",
    "Montfort",
    "Boscobel",
    "Brodhead",
    "Brooklyn",
    "Kingston",
    "Markesan",
    "Highland",
    "Ridgeway",
    "Montreal",
    "Millston",
    "Sullivan",
    "Waterloo",
    "Kewaunee",
    "Onalaska",
    "Rockland",
    "Woodford",
    "Pickerel",
    "Tomahawk",
    "Mishicot",
    "Whitelaw",
    "Galloway",
    "Marathon",
    "Peshtigo",
    "Endeavor",
    "Montello",
    "Neshkoro",
    "Franklin",
    "Cataract",
    "Lakewood",
    "Mountain",
    "Sobieski",
    "Townsend",
    "Minocqua",
    "Woodruff",
    "Kaukauna",
    "Kimberly",
    "Shiocton",
    "Appleton",
    "Fredonia",
    "Arkansaw",
    "Prescott",
    "Bay City",
    "Centuria",
    "Frederic",
    "Milltown",
    "Bancroft",
    "Phillips",
    "Prentice",
    "Edgerton",
    "Somerset",
    "Merrimac",
    "La Valle",
    "Couderay",
    "Radisson",
    "Tigerton",
    "Caroline",
    "Leopolis",
    "Oostburg",
    "Plymouth",
    "Hannibal",
    "Rib Lake",
    "Westboro",
    "La Farge",
    "Stoddard",
    "Walworth",
    "Allenton",
    "Hartford",
    "Hubertus",
    "Kewaskum",
    "Hartland",
    "Nashotah",
    "Okauchee",
    "Pewaukee",
    "Big Bend",
    "Waukesha",
    "Arkdale",
    "Glidden",
    "Ashland",
    "Marengo",
    "Cameron",
    "De Pere",
    "Pulaski",
    "Suamico",
    "Denmark",
    "Mondovi",
    "Danbury",
    "Webster",
    "Chilton",
    "Hilbert",
    "Bloomer",
    "Cornell",
    "Stanley",
    "Curtiss",
    "Granton",
    "Willard",
    "Humbird",
    "Portage",
    "Cambria",
    "Wyocena",
    "Wauzeka",
    "Eastman",
    "Steuben",
    "Windsor",
    "Madison",
    "Horicon",
    "Lebanon",
    "Rubicon",
    "Theresa",
    "Burnett",
    "Ephraim",
    "Foxboro",
    "Wascott",
    "Downing",
    "Wheeler",
    "Altoona",
    "Augusta",
    "Brandon",
    "Argonne",
    "Crandon",
    "Muscoda",
    "Beetown",
    "Stitzer",
    "Woodman",
    "Melrose",
    "Palmyra",
    "Mauston",
    "Wonewoc",
    "Hustler",
    "Necedah",
    "Bassett",
    "Bristol",
    "Kenosha",
    "Mindoro",
    "Belmont",
    "Gratiot",
    "Pearson",
    "Gleason",
    "Merrill",
    "Collins",
    "Maribel",
    "Valders",
    "Elderon",
    "Mosinee",
    "Spencer",
    "Coleman",
    "Crivitz",
    "Goodman",
    "Niagara",
    "Pembine",
    "Keshena",
    "Cashton",
    "Kendall",
    "Norwalk",
    "Oakdale",
    "Warrens",
    "Gillett",
    "Harshaw",
    "Tripoli",
    "Freedom",
    "Nichols",
    "Seymour",
    "Belgium",
    "Grafton",
    "Elmwood",
    "Clayton",
    "Cushing",
    "Dresser",
    "Osceola",
    "Amherst",
    "Rosholt",
    "Catawba",
    "Fifield",
    "Clinton",
    "Hanover",
    "Hawkins",
    "Conrath",
    "Sheldon",
    "Baldwin",
    "Hammond",
    "Roberts",
    "Houlton",
    "Baraboo",
    "Exeland",
    "Hayward",
    "Bonduel",
    "Gresham",
    "Shawano",
    "Mattoon",
    "Tilleda",
    "Cascade",
    "Hingham",
    "Medford",
    "Arcadia",
    "Ettrick",
    "De Soto",
    "Ontario",
    "Viroqua",
    "Conover",
    "Delavan",
    "Elkhorn",
    "Fontana",
    "Spooner",
    "Colgate",
    "Jackson",
    "Newburg",
    "Slinger",
    "Dousman",
    "Muskego",
    "Fremont",
    "Waupaca",
    "Hancock",
    "Wautoma",
    "Oshkosh",
    "Menasha",
    "Pickett",
    "Babcock",
    "Blenker",
    "Nekoosa",
    "Rudolph",
    "Mellen",
    "Odanah",
    "Chetek",
    "Dallas",
    "Almena",
    "Barron",
    "Haugen",
    "Mikana",
    "Benoit",
    "Nelson",
    "Hertel",
    "Potter",
    "Cadott",
    "Withee",
    "Seneca",
    "Oregon",
    "Verona",
    "Clyman",
    "Juneau",
    "Lomira",
    "Neosho",
    "Lowell",
    "Waupun",
    "Gordon",
    "Poplar",
    "Colfax",
    "Malone",
    "Wabeno",
    "Bagley",
    "Kieler",
    "Potosi",
    "Albany",
    "Monroe",
    "Dalton",
    "Berlin",
    "Edmund",
    "Linden",
    "Hurley",
    "Mercer",
    "Hixton",
    "Taylor",
    "Ixonia",
    "Mather",
    "Somers",
    "Trevor",
    "Wilmot",
    "Algoma",
    "Bangor",
    "Holmen",
    "Argyle",
    "Benton",
    "Antigo",
    "Bryant",
    "Newton",
    "Wausau",
    "Athens",
    "Brokaw",
    "Hatley",
    "Ringle",
    "Amberg",
    "Dunbar",
    "Oxford",
    "Neopit",
    "Cudahy",
    "Sparta",
    "Wilton",
    "Abrams",
    "Oconto",
    "Suring",
    "Oneida",
    "Mequon",
    "Durand",
    "Custer",
    "Plover",
    "Almond",
    "Kennan",
    "Racine",
    "Gotham",
    "Avalon",
    "Beloit",
    "Milton",
    "Hudson",
    "Wilson",
    "Ojibwa",
    "Winter",
    "Krakow",
    "Zachow",
    "Bowler",
    "Kohler",
    "Gilman",
    "Lublin",
    "Westby",
    "Phelps",
    "Sayner",
    "Darien",
    "Sharon",
    "Minong",
    "Sarona",
    "Butler",
    "Lannon",
    "Merton",
    "Sussex",
    "Manawa",
    "Marion",
    "Coloma",
    "Eureka",
    "Larsen",
    "Neenah",
    "Waukau",
    "Hewitt",
    "Vesper",
    "Adams",
    "Brill",
    "Cable",
    "Mason",
    "Siren",
    "Chili",
    "Colby",
    "Loyal",
    "Thorp",
    "Brule",
    "Maple",
    "Knapp",
    "Fence",
    "Ripon",
    "Laona",
    "Arena",
    "Avoca",
    "Rewey",
    "Saxon",
    "Upson",
    "Elroy",
    "Salem",
    "Casco",
    "Elcho",
    "Elton",
    "Phlox",
    "Aniwa",
    "Edgar",
    "Eland",
    "Unity",
    "Pound",
    "Tomah",
    "Pepin",
    "Amery",
    "Ogema",
    "Afton",
    "Bruce",
    "Plain",
    "Cecil",
    "Adell",
    "Waldo",
    "Blair",
    "Dodge",
    "Eleva",
    "Osseo",
    "Strum",
    "Genoa",
    "Viola",
    "Lyons",
    "Zenda",
    "Trego",
    "Eagle",
    "Wales",
    "Arpin",
    "Alma",
    "Boyd",
    "Owen",
    "Lodi",
    "Dane",
    "Eden",
    "Juda",
    "Cobb",
    "Gile",
    "Irma",
    "Kiel",
    "Lena",
    "Dale",
    "Luck",
    "Tony",
    "Iola",
    "King",
    "Omro",
    "Rio",
  ],
  KI = [
    "Yellowstone National Park",
    "Saint Stephens",
    "Little America",
    "Point Of Rocks",
    "Shirley Basin",
    "Fort Washakie",
    "Fe Warren Afb",
    "Granite Canon",
    "Teton Village",
    "Mountain View",
    "Elk Mountain",
    "Medicine Bow",
    "Lost Springs",
    "Devils Tower",
    "Jeffrey City",
    "Fort Laramie",
    "Hawk Springs",
    "Saddlestring",
    "Diamondville",
    "Powder River",
    "Rock Springs",
    "Fort Bridger",
    "Four Corners",
    "Thermopolis",
    "Horse Creek",
    "Pine Bluffs",
    "Lance Creek",
    "Van Tassell",
    "Green River",
    "Centennial",
    "Rock River",
    "Tie Siding",
    "Burlington",
    "Hyattville",
    "Encampment",
    "Torrington",
    "Evansville",
    "Ranchester",
    "Manderson",
    "Moorcroft",
    "Crowheart",
    "Pavillion",
    "Carpenter",
    "Hillsdale",
    "Cokeville",
    "Meeteetse",
    "Wheatland",
    "Chugwater",
    "Hartville",
    "Clearmont",
    "Bondurant",
    "Big Piney",
    "Wamsutter",
    "Mc Kinnon",
    "Robertson",
    "Ten Sleep",
    "Newcastle",
    "Greybull",
    "Gillette",
    "Saratoga",
    "Sinclair",
    "Glenrock",
    "Sundance",
    "Riverton",
    "Arapahoe",
    "Shoshoni",
    "Lagrange",
    "Cheyenne",
    "Kemmerer",
    "Fairview",
    "Frontier",
    "La Barge",
    "Edgerton",
    "Manville",
    "Guernsey",
    "Sheridan",
    "Big Horn",
    "Pinedale",
    "Reliance",
    "Superior",
    "Evanston",
    "Lonetree",
    "Garrett",
    "Laramie",
    "Recluse",
    "Rawlins",
    "Walcott",
    "Shawnee",
    "Douglas",
    "Aladdin",
    "Kinnear",
    "Huntley",
    "Veteran",
    "Buffalo",
    "Meriden",
    "Bedford",
    "Freedom",
    "Arminto",
    "Midwest",
    "Natrona",
    "Frannie",
    "Ralston",
    "Parkman",
    "Boulder",
    "Bairoil",
    "Granger",
    "Jackson",
    "Worland",
    "Bosler",
    "Buford",
    "Cowley",
    "Deaver",
    "Emblem",
    "Lovell",
    "Weston",
    "Wright",
    "Savery",
    "Beulah",
    "Hulett",
    "Dubois",
    "Hudson",
    "Lander",
    "Lysite",
    "Jay Em",
    "Lingle",
    "Kaycee",
    "Auburn",
    "Grover",
    "Thayne",
    "Alpine",
    "Casper",
    "Alcova",
    "Hiland",
    "Powell",
    "Wapiti",
    "Glendo",
    "Arvada",
    "Banner",
    "Dayton",
    "Leiter",
    "Wyarno",
    "Daniel",
    "Farson",
    "Wilson",
    "Basin",
    "Byron",
    "Shell",
    "Rozet",
    "Baggs",
    "Dixon",
    "Hanna",
    "Yoder",
    "Kirby",
    "Linch",
    "Albin",
    "Burns",
    "Afton",
    "Smoot",
    "Mills",
    "Story",
    "Kelly",
    "Moose",
    "Moran",
    "Lyman",
    "Osage",
    "Upton",
    "Jelm",
    "Otto",
    "Alva",
    "Etna",
    "Opal",
    "Lusk",
    "Cody",
    "Wolf",
    "Cora",
    "Alta",
  ],
  JI = {
    AL: $V,
    AK: UV,
    AZ: qV,
    AR: YV,
    CA: QV,
    CO: ZV,
    CT: XV,
    DE: eI,
    DC: nI,
    FL: aI,
    GA: oI,
    HI: rI,
    ID: tI,
    IL: lI,
    IN: iI,
    IA: sI,
    KS: uI,
    KY: dI,
    LA: cI,
    ME: hI,
    MD: gI,
    MA: mI,
    MI: pI,
    MN: yI,
    MS: fI,
    MO: vI,
    MT: CI,
    NE: kI,
    NV: wI,
    NH: SI,
    NJ: bI,
    NM: MI,
    NY: BI,
    NC: PI,
    ND: HI,
    OH: LI,
    OK: WI,
    OR: AI,
    PA: GI,
    RI,
    SC: NI,
    SD: EI,
    TN: FI,
    TX: DI,
    UT: TI,
    VT: OI,
    VA: xI,
    WA: VI,
    WV: II,
    WI: _I,
    WY: KI,
  };
var Fu, Ip;
function zI() {
  if (Ip) return Fu;
  Ip = 1;
  var e = wR,
    n = F3,
    o = jV,
    t = JI;
  function l(y, f) {
    return Object.keys(y).find((v) => y[v] === f);
  }
  function s(y) {
    return y.replace(/\w\S*/g, function (f) {
      return f.charAt(0).toUpperCase() + f.substr(1).toLowerCase();
    });
  }
  function d(y) {
    var f = Object.keys(y);
    return f[(f.length * Math.random()) << 0];
  }
  var g = {
      north: "N",
      northeast: "NE",
      east: "E",
      southeast: "SE",
      south: "S",
      southwest: "SW",
      west: "W",
      northwest: "NW",
    },
    m = {
      APARTMENT: "APT",
      APT: "APT",
      BASEMENT: "BSMT",
      BSMT: "BSMT",
      BLDG: "BLDG",
      BUILDING: "BLDG",
      DEPARTMENT: "DEPT",
      DEPT: "DEPT",
      FL: "FL",
      FLOOR: "FL",
      FRNT: "FRNT",
      FRONT: "FRNT",
      HANGAR: "HNGR",
      HNGR: "HNGR",
      LBBY: "LBBY",
      LOBBY: "LBBY",
      LOT: "LOT",
      LOWER: "LOWR",
      LOWR: "LOWER",
      OFC: "OFC",
      OFFICE: "OFC",
      PENTHOUSE: "PH",
      PH: "PH",
      PIER: "PIER",
      REAR: "REAR",
      RM: "RM",
      ROOM: "RM",
      SIDE: "SIDE",
      SLIP: "SLIP",
      SPACE: "SPC",
      SPC: "SPC",
      STE: "STE",
      STOP: "STOP",
      SUITE: "STE",
      TRAILER: "TRLR",
      TRLR: "TRLR",
      UNIT: "UNIT",
      UPPER: "UPPR",
      UPPR: "UPPR",
      "#": "#",
    };
  return (
    (Fu = {
      parseAddress: function (y) {
        if (!y) throw "Argument must be a non-empty string.";
        y = y.replace(/  +/g, " ");
        var f = y.split(/,|\t|\n/),
          v = {},
          M = f[f.length - 1].trim();
        (M === "US" ||
          M === "USA" ||
          M === "United States" ||
          M === "Canada") &&
          f.splice(-1, 1);
        var G = f[f.length - 1].trim();
        if (G.match(/\d{5}$/))
          (v.zipCode = G.match(/\d{5}$/)[0]),
            (G = G.substring(0, G.length - 5).trim());
        else if (G.match(/\d{5}-\d{4}$/)) {
          var ae = G.match(/\d{5}-\d{4}$/)[0];
          (v.zipCode = ae.substring(0, 5)),
            (v.zipCodePlusFour = ae),
            (G = G.substring(0, G.length - 10).trim());
        } else
          G.match(/[A-Z]\d[A-Z] ?\d[A-Z]\d/) &&
            ((v.zipCode = G.match(/[A-Z]\d[A-Z] ?\d[A-Z]\d/)[0]),
            (G = G.substring(0, G.length - v.zipCode.length).trim()));
        if (
          (G.length > 0
            ? (f[f.length - 1] = G)
            : (f.splice(-1, 1), (G = f[f.length - 1].trim())),
          G.length == 2 && l(e, G.toUpperCase()))
        )
          (v.stateAbbreviation = G.toUpperCase()),
            (v.stateName = s(l(e, G.toUpperCase()))),
            (G = G.substring(0, G.length - 2));
        else
          for (var Y in e) {
            var U = new RegExp(" " + e[Y] + "$|" + Y + "$", "i");
            if (G.match(U)) {
              (G = G.replace(U, "")),
                (v.stateAbbreviation = e[Y]),
                (v.stateName = s(Y));
              break;
            }
          }
        if (!v.stateAbbreviation || v.stateAbbreviation.length != 2)
          throw "Can not parse address. State not found.";
        var We = "";
        G.length > 0
          ? ((f[f.length - 1] = G), (We = f[f.length - 1]))
          : (f.splice(-1, 1), (We = f[f.length - 1].trim())),
          (v.placeName = ""),
          o[v.stateAbbreviation].some(function (sn) {
            var nn = new RegExp(sn + "$", "i");
            if (We.match(nn))
              return (We = We.replace(nn, "")), (v.placeName = sn), sn;
          }),
          v.placeName || ((v.placeName = s(We)), (We = ""));
        var X = "",
          Sn = Object.keys(g)
            .map((sn) => g[sn])
            .join("|"),
          Oe = Object.keys(m).join("|");
        if (
          (We.length > 0 ? (f[f.length - 1] = We) : f.splice(-1, 1),
          f.length > 2)
        )
          throw "Can not parse address. More than two address lines.";
        if (f.length === 2) {
          var U = new RegExp("^(" + Oe + ")\\b", "i");
          if (f[0].match(U)) {
            var Gn = f[1];
            (f[1] = f[0]), (f[0] = Gn);
          }
          (v.addressLine2 = f[1].trim()), f.splice(-1, 1);
        }
        if (f.length === 1) {
          if (((X = f[0].trim()), typeof v.addressLine2 == "undefined")) {
            var U = new RegExp("^(" + Oe + ")\\s\\S+", "i");
            X.match(U) &&
              ((v.addressLine2 = X.match(U)[0]), (X = X.replace(U, "").trim()));
          }
          var Ke = new RegExp(
              ".*\\b(?:" +
                Object.keys(n).join("|") +
                ")\\b\\.?( +(?:" +
                Sn +
                ")\\b)?",
              "i"
            ),
            je = new RegExp(
              "(P\\.?O\\.?|POST\\s+OFFICE)\\s+(BOX|DRAWER)\\s\\w+",
              "i"
            ),
            ln = new RegExp(".*\\b(ave.?|avenue).*\\b[a-zA-Z]\\b", "i"),
            zn = new RegExp("\\b\\d+[a-z]?\\s[a-zA-Z0-9_ ]+\\b", "i");
          if (X.match(ln)) {
            if (
              ((v.addressLine1 = X.match(ln)[0]),
              (X = X.replace(ln, "").trim()),
              X && X.length > 0)
            ) {
              if (v.hasOwnProperty("addressLine2") && v.addressLine2.length > 0)
                throw (
                  "Can not parse address. Too many address lines. Input string: " +
                  y
                );
              v.addressLine2 = X;
            }
            var te = v.addressLine1.split(" ");
            (v.streetNumber = te[0]),
              (te[te.length - 2] = te[te.length - 2].replace(
                /^(ave.?|avenue)$/i,
                "Ave"
              )),
              (v.streetName = te[1]);
            for (var fn = 2; fn <= te.length - 1; fn++)
              v.streetName = v.streetName + " " + te[fn];
            (v.streetName = s(v.streetName)),
              (v.addressLine1 = [v.streetNumber, v.streetName].join(" "));
          } else if (X.match(Ke)) {
            if (
              ((v.addressLine1 = X.match(Ke)[0]),
              (X = X.replace(Ke, "").trim()),
              X && X.length > 0)
            ) {
              if (v.hasOwnProperty("addressLine2") && v.addressLine2.length > 0)
                throw (
                  "Can not parse address. Too many address lines. Input string: " +
                  y
                );
              v.addressLine2 = X;
            }
            var te = v.addressLine1.split(" "),
              U = new RegExp(".*\\b(?:" + Sn + ")$", "i");
            v.addressLine1.match(U) &&
              (v.streetDirection = te.pop().toUpperCase()),
              (v.streetNumber = te[0]),
              te.length > 2 &&
                ((te[te.length - 1] = te[te.length - 1].replace(/\.$/, "")),
                (v.streetSuffix = s(n[te[te.length - 1].toLowerCase()]))),
              (v.streetName = te[1]);
            for (var fn = 2; fn < te.length - 1; fn++)
              v.streetName = v.streetName + " " + te[fn];
            (v.streetName = s(v.streetName)),
              (v.addressLine1 = [v.streetNumber, v.streetName].join(" ")),
              v.hasOwnProperty("streetSuffix") &&
                (v.addressLine1 = v.addressLine1 + " " + v.streetSuffix),
              v.streetDirection &&
                (v.addressLine1 = v.addressLine1 + " " + v.streetDirection);
          } else if (X.match(je))
            (v.addressLine1 = X.match(je)[0]), (X = X.replace(je, "").trim());
          else if (X.match(zn)) {
            var bn = new RegExp("\\s(" + Oe + ")\\.?\\s[a-zA-Z0-9_-]+$", "i");
            X.match(bn) &&
              ((v.addressLine2 = X.match(bn)[0].trim()),
              (X = X.replace(bn, "").trim())),
              (v.addressLine1 = X.match(zn)[0]),
              (X = X.replace(zn, "").trim());
            var te = v.addressLine1.split(" ");
            (v.streetNumber = te[0]), te.shift(), (v.streetName = te.join(" "));
          } else
            throw (
              "Can not parse address. Invalid street address data. Input string: " +
              y
            );
        } else
          throw (
            "Can not parse address. Invalid street address data. Input string: " +
            y
          );
        var en = v.addressLine1;
        if (
          (v.hasOwnProperty("addressLine2") && (en += ", " + v.addressLine2),
          en &&
            v.hasOwnProperty("placeName") &&
            v.hasOwnProperty("stateAbbreviation") &&
            v.hasOwnProperty("zipCode"))
        ) {
          var Mn =
            en +
            ", " +
            v.placeName +
            ", " +
            v.stateAbbreviation +
            " " +
            v.zipCode;
          (v.formattedAddress = Mn),
            (v.id = encodeURI(
              Mn.replace(/ /g, "-")
                .replace(/\#/g, "-")
                .replace(/\//g, "-")
                .replace(/\./g, "-")
            ));
        }
        return v;
      },
      randomCity: function () {
        var y = d(t),
          f = t[y],
          v = Math.floor(Math.random() * f.length),
          M = f[v];
        return { city: M, state: y };
      },
      cities: function () {
        return t;
      },
    }),
    Fu
  );
}
var jI = zI();
const $I = Bt(jI),
  Bd = [];
function UI(e) {
  Bd.push(...e);
}
function qI() {
  return gn(this, null, function* () {
    const e = Bd.map((n) => n.toggleIdentifier);
    return yield chrome.storage.sync.get(e);
  });
}
function YI(e) {
  return gn(this, null, function* () {
    let n = 0;
    const o = yield qI();
    for (const { detect: t, toggleIdentifier: l } of Bd)
      o[l] && t(e).pii && n++;
    return n;
  });
}
function QI(e) {
  var l;
  let n;
  const o = new RegExp(Zv, "g");
  let t = e;
  for (; (n = o.exec(e)) !== null; ) {
    const s = (l = n[1]) == null ? void 0 : l.replace(/\D/g, "");
    if (s && iC.validate(s)) {
      const d = s.slice(0, -Hg) + "*".repeat(Hg);
      t = t.replace(n[1], d);
    }
  }
  return t !== e
    ? {
        pii: !0,
        message: `
        <div class="mb-4">
          <label for="originalQuery" class="block text-sm font-medium text-gray-600">Original Query:</label>
          <textarea id="originalQuery" readonly
            class="w-full mt-2 p-4 border border-gray-300 rounded-lg shadow-sm resize-none h-24 text-gray-800">${e}</textarea>
        </div>

        <div class="mb-6">
          <label for="maskedQuery" class="block text-sm font-medium text-gray-600">Masked Query:</label>
          <textarea id="maskedQuery" readonly
            class="w-full mt-2 p-4 border border-gray-300 rounded-lg shadow-sm resize-none h-24 text-gray-800">${t}</textarea>
        </div>
      `,
      }
    : { pii: !1, message: "" };
}
function ZI(e) {
  const o = Q(e).people().out("array");
  return o.length > 0
    ? {
        pii: !0,
        message: `<br><div align="left">• <strong>name</strong>: "${o[0]}"</div>`,
      }
    : { pii: !1, message: "" };
}
function XI(e) {
  const o = Q(e).emails().out("array");
  return o.length > 0
    ? {
        pii: !0,
        message: `<br><div align="left">• <strong>email</strong>: "${o[0]}"</div>`,
      }
    : { pii: !1, message: "" };
}
function e_(e) {
  const n = e.split(/[^\d\s-()]{1,}/);
  for (const o of n) {
    const t = o.replace(/\D/g, ""),
      l = "+".concat(t);
    if (HG(l).isValid)
      return {
        pii: !0,
        message: `<br><div align="left">• <strong>phone number</strong>: "${l}"</div>`,
      };
  }
  return { pii: !1, message: "" };
}
function n_(e) {
  const n = e.split(/\s/);
  let o = "",
    t = "";
  for (const l of n) {
    const s = l.replace(/[^a-zA-Z\d]/g, "");
    (o += s + " "), (t += l + " ");
    try {
      return (
        $I.parseAddress(o.trim()),
        (t = t.trim()),
        {
          pii: !0,
          message: `<br><div align="left">• <strong>address</strong> in the following phrase: "${t.slice(
            -rC
          )}"</div>`,
        }
      );
    } catch (d) {}
  }
  return { pii: !1, message: "" };
}
function a_(e) {
  const n = e.match(eC);
  return (n == null ? void 0 : n.index) !== void 0
    ? {
        pii: !0,
        message: `
      <br><div align="left">• <strong>social security number</strong> ending with *${n[0].slice(
        -Xv
      )}</div>`,
      }
    : { pii: !1, message: "" };
}
function o_(e) {
  const n = e.split(/\s/);
  for (const o of n)
    if (o.match(oC) !== null)
      return {
        pii: !0,
        message: `<br><div align="left">• <strong>Secret key</strong>: "${o}"</div>`,
      };
  return { pii: !1, message: "" };
}
function r_() {
  UI([
    { detect: QI, toggleIdentifier: "credit-card-number" },
    { detect: ZI, toggleIdentifier: "name" },
    { detect: XI, toggleIdentifier: "email-address" },
    { detect: e_, toggleIdentifier: "phone-number" },
    { detect: n_, toggleIdentifier: "address" },
    { detect: a_, toggleIdentifier: "social-security-number" },
    { detect: o_, toggleIdentifier: "secret-key" },
  ]);
}
r_();
function t_(e) {
  const n = e == null ? void 0 : e.innerText;
  return n != null ? n : "";
}
function Pd(e) {
  return gn(this, null, function* () {
    const n = t_(e);
    return yield YI(n);
  });
}
var Du = { exports: {} },
  An = {},
  Tu = { exports: {} },
  Ou = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var _p;
function l_() {
  return (
    _p ||
      ((_p = 1),
      (function (e) {
        function n(D, $) {
          var V = D.length;
          D.push($);
          e: for (; 0 < V; ) {
            var S = (V - 1) >>> 1,
              W = D[S];
            if (0 < l(W, $)) (D[S] = $), (D[V] = W), (V = S);
            else break e;
          }
        }
        function o(D) {
          return D.length === 0 ? null : D[0];
        }
        function t(D) {
          if (D.length === 0) return null;
          var $ = D[0],
            V = D.pop();
          if (V !== $) {
            D[0] = V;
            e: for (var S = 0, W = D.length, ne = W >>> 1; S < ne; ) {
              var re = 2 * (S + 1) - 1,
                se = D[re],
                ue = re + 1,
                ve = D[ue];
              if (0 > l(se, V))
                ue < W && 0 > l(ve, se)
                  ? ((D[S] = ve), (D[ue] = V), (S = ue))
                  : ((D[S] = se), (D[re] = V), (S = re));
              else if (ue < W && 0 > l(ve, V))
                (D[S] = ve), (D[ue] = V), (S = ue);
              else break e;
            }
          }
          return $;
        }
        function l(D, $) {
          var V = D.sortIndex - $.sortIndex;
          return V !== 0 ? V : D.id - $.id;
        }
        if (
          typeof performance == "object" &&
          typeof performance.now == "function"
        ) {
          var s = performance;
          e.unstable_now = function () {
            return s.now();
          };
        } else {
          var d = Date,
            g = d.now();
          e.unstable_now = function () {
            return d.now() - g;
          };
        }
        var m = [],
          y = [],
          f = 1,
          v = null,
          M = 3,
          G = !1,
          ae = !1,
          Y = !1,
          U = typeof setTimeout == "function" ? setTimeout : null,
          We = typeof clearTimeout == "function" ? clearTimeout : null,
          X = typeof setImmediate != "undefined" ? setImmediate : null;
        typeof navigator != "undefined" &&
          navigator.scheduling !== void 0 &&
          navigator.scheduling.isInputPending !== void 0 &&
          navigator.scheduling.isInputPending.bind(navigator.scheduling);
        function Sn(D) {
          for (var $ = o(y); $ !== null; ) {
            if ($.callback === null) t(y);
            else if ($.startTime <= D)
              t(y), ($.sortIndex = $.expirationTime), n(m, $);
            else break;
            $ = o(y);
          }
        }
        function Oe(D) {
          if (((Y = !1), Sn(D), !ae))
            if (o(m) !== null) (ae = !0), nn(Gn);
            else {
              var $ = o(y);
              $ !== null && Ne(Oe, $.startTime - D);
            }
        }
        function Gn(D, $) {
          (ae = !1), Y && ((Y = !1), We(ln), (ln = -1)), (G = !0);
          var V = M;
          try {
            for (
              Sn($), v = o(m);
              v !== null && (!(v.expirationTime > $) || (D && !fn()));

            ) {
              var S = v.callback;
              if (typeof S == "function") {
                (v.callback = null), (M = v.priorityLevel);
                var W = S(v.expirationTime <= $);
                ($ = e.unstable_now()),
                  typeof W == "function"
                    ? (v.callback = W)
                    : v === o(m) && t(m),
                  Sn($);
              } else t(m);
              v = o(m);
            }
            if (v !== null) var ne = !0;
            else {
              var re = o(y);
              re !== null && Ne(Oe, re.startTime - $), (ne = !1);
            }
            return ne;
          } finally {
            (v = null), (M = V), (G = !1);
          }
        }
        var Ke = !1,
          je = null,
          ln = -1,
          zn = 5,
          te = -1;
        function fn() {
          return !(e.unstable_now() - te < zn);
        }
        function bn() {
          if (je !== null) {
            var D = e.unstable_now();
            te = D;
            var $ = !0;
            try {
              $ = je(!0, D);
            } finally {
              $ ? en() : ((Ke = !1), (je = null));
            }
          } else Ke = !1;
        }
        var en;
        if (typeof X == "function")
          en = function () {
            X(bn);
          };
        else if (typeof MessageChannel != "undefined") {
          var Mn = new MessageChannel(),
            sn = Mn.port2;
          (Mn.port1.onmessage = bn),
            (en = function () {
              sn.postMessage(null);
            });
        } else
          en = function () {
            U(bn, 0);
          };
        function nn(D) {
          (je = D), Ke || ((Ke = !0), en());
        }
        function Ne(D, $) {
          ln = U(function () {
            D(e.unstable_now());
          }, $);
        }
        (e.unstable_IdlePriority = 5),
          (e.unstable_ImmediatePriority = 1),
          (e.unstable_LowPriority = 4),
          (e.unstable_NormalPriority = 3),
          (e.unstable_Profiling = null),
          (e.unstable_UserBlockingPriority = 2),
          (e.unstable_cancelCallback = function (D) {
            D.callback = null;
          }),
          (e.unstable_continueExecution = function () {
            ae || G || ((ae = !0), nn(Gn));
          }),
          (e.unstable_forceFrameRate = function (D) {
            0 > D || 125 < D
              ? console.error(
                  "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
                )
              : (zn = 0 < D ? Math.floor(1e3 / D) : 5);
          }),
          (e.unstable_getCurrentPriorityLevel = function () {
            return M;
          }),
          (e.unstable_getFirstCallbackNode = function () {
            return o(m);
          }),
          (e.unstable_next = function (D) {
            switch (M) {
              case 1:
              case 2:
              case 3:
                var $ = 3;
                break;
              default:
                $ = M;
            }
            var V = M;
            M = $;
            try {
              return D();
            } finally {
              M = V;
            }
          }),
          (e.unstable_pauseExecution = function () {}),
          (e.unstable_requestPaint = function () {}),
          (e.unstable_runWithPriority = function (D, $) {
            switch (D) {
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
                break;
              default:
                D = 3;
            }
            var V = M;
            M = D;
            try {
              return $();
            } finally {
              M = V;
            }
          }),
          (e.unstable_scheduleCallback = function (D, $, V) {
            var S = e.unstable_now();
            switch (
              (typeof V == "object" && V !== null
                ? ((V = V.delay),
                  (V = typeof V == "number" && 0 < V ? S + V : S))
                : (V = S),
              D)
            ) {
              case 1:
                var W = -1;
                break;
              case 2:
                W = 250;
                break;
              case 5:
                W = 1073741823;
                break;
              case 4:
                W = 1e4;
                break;
              default:
                W = 5e3;
            }
            return (
              (W = V + W),
              (D = {
                id: f++,
                callback: $,
                priorityLevel: D,
                startTime: V,
                expirationTime: W,
                sortIndex: -1,
              }),
              V > S
                ? ((D.sortIndex = V),
                  n(y, D),
                  o(m) === null &&
                    D === o(y) &&
                    (Y ? (We(ln), (ln = -1)) : (Y = !0), Ne(Oe, V - S)))
                : ((D.sortIndex = W), n(m, D), ae || G || ((ae = !0), nn(Gn))),
              D
            );
          }),
          (e.unstable_shouldYield = fn),
          (e.unstable_wrapCallback = function (D) {
            var $ = M;
            return function () {
              var V = M;
              M = $;
              try {
                return D.apply(this, arguments);
              } finally {
                M = V;
              }
            };
          });
      })(Ou)),
    Ou
  );
}
var Kp;
function i_() {
  return Kp || ((Kp = 1), (Tu.exports = l_())), Tu.exports;
}
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var Jp;
function s_() {
  if (Jp) return An;
  Jp = 1;
  var e = jp(),
    n = i_();
  function o(a) {
    for (
      var r = "https://reactjs.org/docs/error-decoder.html?invariant=" + a,
        i = 1;
      i < arguments.length;
      i++
    )
      r += "&args[]=" + encodeURIComponent(arguments[i]);
    return (
      "Minified React error #" +
      a +
      "; visit " +
      r +
      " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
    );
  }
  var t = new Set(),
    l = {};
  function s(a, r) {
    d(a, r), d(a + "Capture", r);
  }
  function d(a, r) {
    for (l[a] = r, a = 0; a < r.length; a++) t.add(r[a]);
  }
  var g = !(
      typeof window == "undefined" ||
      typeof window.document == "undefined" ||
      typeof window.document.createElement == "undefined"
    ),
    m = Object.prototype.hasOwnProperty,
    y =
      /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
    f = {},
    v = {};
  function M(a) {
    return m.call(v, a)
      ? !0
      : m.call(f, a)
      ? !1
      : y.test(a)
      ? (v[a] = !0)
      : ((f[a] = !0), !1);
  }
  function G(a, r, i, u) {
    if (i !== null && i.type === 0) return !1;
    switch (typeof r) {
      case "function":
      case "symbol":
        return !0;
      case "boolean":
        return u
          ? !1
          : i !== null
          ? !i.acceptsBooleans
          : ((a = a.toLowerCase().slice(0, 5)), a !== "data-" && a !== "aria-");
      default:
        return !1;
    }
  }
  function ae(a, r, i, u) {
    if (r === null || typeof r == "undefined" || G(a, r, i, u)) return !0;
    if (u) return !1;
    if (i !== null)
      switch (i.type) {
        case 3:
          return !r;
        case 4:
          return r === !1;
        case 5:
          return isNaN(r);
        case 6:
          return isNaN(r) || 1 > r;
      }
    return !1;
  }
  function Y(a, r, i, u, c, h, p) {
    (this.acceptsBooleans = r === 2 || r === 3 || r === 4),
      (this.attributeName = u),
      (this.attributeNamespace = c),
      (this.mustUseProperty = i),
      (this.propertyName = a),
      (this.type = r),
      (this.sanitizeURL = h),
      (this.removeEmptyString = p);
  }
  var U = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style"
    .split(" ")
    .forEach(function (a) {
      U[a] = new Y(a, 0, !1, a, null, !1, !1);
    }),
    [
      ["acceptCharset", "accept-charset"],
      ["className", "class"],
      ["htmlFor", "for"],
      ["httpEquiv", "http-equiv"],
    ].forEach(function (a) {
      var r = a[0];
      U[r] = new Y(r, 1, !1, a[1], null, !1, !1);
    }),
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (
      a
    ) {
      U[a] = new Y(a, 2, !1, a.toLowerCase(), null, !1, !1);
    }),
    [
      "autoReverse",
      "externalResourcesRequired",
      "focusable",
      "preserveAlpha",
    ].forEach(function (a) {
      U[a] = new Y(a, 2, !1, a, null, !1, !1);
    }),
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope"
      .split(" ")
      .forEach(function (a) {
        U[a] = new Y(a, 3, !1, a.toLowerCase(), null, !1, !1);
      }),
    ["checked", "multiple", "muted", "selected"].forEach(function (a) {
      U[a] = new Y(a, 3, !0, a, null, !1, !1);
    }),
    ["capture", "download"].forEach(function (a) {
      U[a] = new Y(a, 4, !1, a, null, !1, !1);
    }),
    ["cols", "rows", "size", "span"].forEach(function (a) {
      U[a] = new Y(a, 6, !1, a, null, !1, !1);
    }),
    ["rowSpan", "start"].forEach(function (a) {
      U[a] = new Y(a, 5, !1, a.toLowerCase(), null, !1, !1);
    });
  var We = /[\-:]([a-z])/g;
  function X(a) {
    return a[1].toUpperCase();
  }
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height"
    .split(" ")
    .forEach(function (a) {
      var r = a.replace(We, X);
      U[r] = new Y(r, 1, !1, a, null, !1, !1);
    }),
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type"
      .split(" ")
      .forEach(function (a) {
        var r = a.replace(We, X);
        U[r] = new Y(r, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
      }),
    ["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
      var r = a.replace(We, X);
      U[r] = new Y(r, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
    }),
    ["tabIndex", "crossOrigin"].forEach(function (a) {
      U[a] = new Y(a, 1, !1, a.toLowerCase(), null, !1, !1);
    }),
    (U.xlinkHref = new Y(
      "xlinkHref",
      1,
      !1,
      "xlink:href",
      "http://www.w3.org/1999/xlink",
      !0,
      !1
    )),
    ["src", "href", "action", "formAction"].forEach(function (a) {
      U[a] = new Y(a, 1, !1, a.toLowerCase(), null, !0, !0);
    });
  function Sn(a, r, i, u) {
    var c = U.hasOwnProperty(r) ? U[r] : null;
    (c !== null
      ? c.type !== 0
      : u ||
        !(2 < r.length) ||
        (r[0] !== "o" && r[0] !== "O") ||
        (r[1] !== "n" && r[1] !== "N")) &&
      (ae(r, i, c, u) && (i = null),
      u || c === null
        ? M(r) &&
          (i === null ? a.removeAttribute(r) : a.setAttribute(r, "" + i))
        : c.mustUseProperty
        ? (a[c.propertyName] = i === null ? (c.type === 3 ? !1 : "") : i)
        : ((r = c.attributeName),
          (u = c.attributeNamespace),
          i === null
            ? a.removeAttribute(r)
            : ((c = c.type),
              (i = c === 3 || (c === 4 && i === !0) ? "" : "" + i),
              u ? a.setAttributeNS(u, r, i) : a.setAttribute(r, i))));
  }
  var Oe = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    Gn = Symbol.for("react.element"),
    Ke = Symbol.for("react.portal"),
    je = Symbol.for("react.fragment"),
    ln = Symbol.for("react.strict_mode"),
    zn = Symbol.for("react.profiler"),
    te = Symbol.for("react.provider"),
    fn = Symbol.for("react.context"),
    bn = Symbol.for("react.forward_ref"),
    en = Symbol.for("react.suspense"),
    Mn = Symbol.for("react.suspense_list"),
    sn = Symbol.for("react.memo"),
    nn = Symbol.for("react.lazy"),
    Ne = Symbol.for("react.offscreen"),
    D = Symbol.iterator;
  function $(a) {
    return a === null || typeof a != "object"
      ? null
      : ((a = (D && a[D]) || a["@@iterator"]),
        typeof a == "function" ? a : null);
  }
  var V = Object.assign,
    S;
  function W(a) {
    if (S === void 0)
      try {
        throw Error();
      } catch (i) {
        var r = i.stack.trim().match(/\n( *(at )?)/);
        S = (r && r[1]) || "";
      }
    return (
      `
` +
      S +
      a
    );
  }
  var ne = !1;
  function re(a, r) {
    if (!a || ne) return "";
    ne = !0;
    var i = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (r)
        if (
          ((r = function () {
            throw Error();
          }),
          Object.defineProperty(r.prototype, "props", {
            set: function () {
              throw Error();
            },
          }),
          typeof Reflect == "object" && Reflect.construct)
        ) {
          try {
            Reflect.construct(r, []);
          } catch (P) {
            var u = P;
          }
          Reflect.construct(a, [], r);
        } else {
          try {
            r.call();
          } catch (P) {
            u = P;
          }
          a.call(r.prototype);
        }
      else {
        try {
          throw Error();
        } catch (P) {
          u = P;
        }
        a();
      }
    } catch (P) {
      if (P && u && typeof P.stack == "string") {
        for (
          var c = P.stack.split(`
`),
            h = u.stack.split(`
`),
            p = c.length - 1,
            C = h.length - 1;
          1 <= p && 0 <= C && c[p] !== h[C];

        )
          C--;
        for (; 1 <= p && 0 <= C; p--, C--)
          if (c[p] !== h[C]) {
            if (p !== 1 || C !== 1)
              do
                if ((p--, C--, 0 > C || c[p] !== h[C])) {
                  var k =
                    `
` + c[p].replace(" at new ", " at ");
                  return (
                    a.displayName &&
                      k.includes("<anonymous>") &&
                      (k = k.replace("<anonymous>", a.displayName)),
                    k
                  );
                }
              while (1 <= p && 0 <= C);
            break;
          }
      }
    } finally {
      (ne = !1), (Error.prepareStackTrace = i);
    }
    return (a = a ? a.displayName || a.name : "") ? W(a) : "";
  }
  function se(a) {
    switch (a.tag) {
      case 5:
        return W(a.type);
      case 16:
        return W("Lazy");
      case 13:
        return W("Suspense");
      case 19:
        return W("SuspenseList");
      case 0:
      case 2:
      case 15:
        return (a = re(a.type, !1)), a;
      case 11:
        return (a = re(a.type.render, !1)), a;
      case 1:
        return (a = re(a.type, !0)), a;
      default:
        return "";
    }
  }
  function ue(a) {
    if (a == null) return null;
    if (typeof a == "function") return a.displayName || a.name || null;
    if (typeof a == "string") return a;
    switch (a) {
      case je:
        return "Fragment";
      case Ke:
        return "Portal";
      case zn:
        return "Profiler";
      case ln:
        return "StrictMode";
      case en:
        return "Suspense";
      case Mn:
        return "SuspenseList";
    }
    if (typeof a == "object")
      switch (a.$$typeof) {
        case fn:
          return (a.displayName || "Context") + ".Consumer";
        case te:
          return (a._context.displayName || "Context") + ".Provider";
        case bn:
          var r = a.render;
          return (
            (a = a.displayName),
            a ||
              ((a = r.displayName || r.name || ""),
              (a = a !== "" ? "ForwardRef(" + a + ")" : "ForwardRef")),
            a
          );
        case sn:
          return (
            (r = a.displayName || null), r !== null ? r : ue(a.type) || "Memo"
          );
        case nn:
          (r = a._payload), (a = a._init);
          try {
            return ue(a(r));
          } catch (i) {}
      }
    return null;
  }
  function ve(a) {
    var r = a.type;
    switch (a.tag) {
      case 24:
        return "Cache";
      case 9:
        return (r.displayName || "Context") + ".Consumer";
      case 10:
        return (r._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return (
          (a = r.render),
          (a = a.displayName || a.name || ""),
          r.displayName || (a !== "" ? "ForwardRef(" + a + ")" : "ForwardRef")
        );
      case 7:
        return "Fragment";
      case 5:
        return r;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return ue(r);
      case 8:
        return r === ln ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if (typeof r == "function") return r.displayName || r.name || null;
        if (typeof r == "string") return r;
    }
    return null;
  }
  function me(a) {
    switch (typeof a) {
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return a;
      case "object":
        return a;
      default:
        return "";
    }
  }
  function Be(a) {
    var r = a.type;
    return (
      (a = a.nodeName) &&
      a.toLowerCase() === "input" &&
      (r === "checkbox" || r === "radio")
    );
  }
  function Rn(a) {
    var r = Be(a) ? "checked" : "value",
      i = Object.getOwnPropertyDescriptor(a.constructor.prototype, r),
      u = "" + a[r];
    if (
      !a.hasOwnProperty(r) &&
      typeof i != "undefined" &&
      typeof i.get == "function" &&
      typeof i.set == "function"
    ) {
      var c = i.get,
        h = i.set;
      return (
        Object.defineProperty(a, r, {
          configurable: !0,
          get: function () {
            return c.call(this);
          },
          set: function (p) {
            (u = "" + p), h.call(this, p);
          },
        }),
        Object.defineProperty(a, r, { enumerable: i.enumerable }),
        {
          getValue: function () {
            return u;
          },
          setValue: function (p) {
            u = "" + p;
          },
          stopTracking: function () {
            (a._valueTracker = null), delete a[r];
          },
        }
      );
    }
  }
  function Gt(a) {
    a._valueTracker || (a._valueTracker = Rn(a));
  }
  function Hd(a) {
    if (!a) return !1;
    var r = a._valueTracker;
    if (!r) return !0;
    var i = r.getValue(),
      u = "";
    return (
      a && (u = Be(a) ? (a.checked ? "true" : "false") : a.value),
      (a = u),
      a !== i ? (r.setValue(a), !0) : !1
    );
  }
  function Rt(a) {
    if (
      ((a = a || (typeof document != "undefined" ? document : void 0)),
      typeof a == "undefined")
    )
      return null;
    try {
      return a.activeElement || a.body;
    } catch (r) {
      return a.body;
    }
  }
  function Ci(a, r) {
    var i = r.checked;
    return V({}, r, {
      defaultChecked: void 0,
      defaultValue: void 0,
      value: void 0,
      checked: i != null ? i : a._wrapperState.initialChecked,
    });
  }
  function Ld(a, r) {
    var i = r.defaultValue == null ? "" : r.defaultValue,
      u = r.checked != null ? r.checked : r.defaultChecked;
    (i = me(r.value != null ? r.value : i)),
      (a._wrapperState = {
        initialChecked: u,
        initialValue: i,
        controlled:
          r.type === "checkbox" || r.type === "radio"
            ? r.checked != null
            : r.value != null,
      });
  }
  function Wd(a, r) {
    (r = r.checked), r != null && Sn(a, "checked", r, !1);
  }
  function ki(a, r) {
    Wd(a, r);
    var i = me(r.value),
      u = r.type;
    if (i != null)
      u === "number"
        ? ((i === 0 && a.value === "") || a.value != i) && (a.value = "" + i)
        : a.value !== "" + i && (a.value = "" + i);
    else if (u === "submit" || u === "reset") {
      a.removeAttribute("value");
      return;
    }
    r.hasOwnProperty("value")
      ? wi(a, r.type, i)
      : r.hasOwnProperty("defaultValue") && wi(a, r.type, me(r.defaultValue)),
      r.checked == null &&
        r.defaultChecked != null &&
        (a.defaultChecked = !!r.defaultChecked);
  }
  function Ad(a, r, i) {
    if (r.hasOwnProperty("value") || r.hasOwnProperty("defaultValue")) {
      var u = r.type;
      if (
        !(
          (u !== "submit" && u !== "reset") ||
          (r.value !== void 0 && r.value !== null)
        )
      )
        return;
      (r = "" + a._wrapperState.initialValue),
        i || r === a.value || (a.value = r),
        (a.defaultValue = r);
    }
    (i = a.name),
      i !== "" && (a.name = ""),
      (a.defaultChecked = !!a._wrapperState.initialChecked),
      i !== "" && (a.name = i);
  }
  function wi(a, r, i) {
    (r !== "number" || Rt(a.ownerDocument) !== a) &&
      (i == null
        ? (a.defaultValue = "" + a._wrapperState.initialValue)
        : a.defaultValue !== "" + i && (a.defaultValue = "" + i));
  }
  var Wr = Array.isArray;
  function Jo(a, r, i, u) {
    if (((a = a.options), r)) {
      r = {};
      for (var c = 0; c < i.length; c++) r["$" + i[c]] = !0;
      for (i = 0; i < a.length; i++)
        (c = r.hasOwnProperty("$" + a[i].value)),
          a[i].selected !== c && (a[i].selected = c),
          c && u && (a[i].defaultSelected = !0);
    } else {
      for (i = "" + me(i), r = null, c = 0; c < a.length; c++) {
        if (a[c].value === i) {
          (a[c].selected = !0), u && (a[c].defaultSelected = !0);
          return;
        }
        r !== null || a[c].disabled || (r = a[c]);
      }
      r !== null && (r.selected = !0);
    }
  }
  function Si(a, r) {
    if (r.dangerouslySetInnerHTML != null) throw Error(o(91));
    return V({}, r, {
      value: void 0,
      defaultValue: void 0,
      children: "" + a._wrapperState.initialValue,
    });
  }
  function Gd(a, r) {
    var i = r.value;
    if (i == null) {
      if (((i = r.children), (r = r.defaultValue), i != null)) {
        if (r != null) throw Error(o(92));
        if (Wr(i)) {
          if (1 < i.length) throw Error(o(93));
          i = i[0];
        }
        r = i;
      }
      r == null && (r = ""), (i = r);
    }
    a._wrapperState = { initialValue: me(i) };
  }
  function Rd(a, r) {
    var i = me(r.value),
      u = me(r.defaultValue);
    i != null &&
      ((i = "" + i),
      i !== a.value && (a.value = i),
      r.defaultValue == null && a.defaultValue !== i && (a.defaultValue = i)),
      u != null && (a.defaultValue = "" + u);
  }
  function Nd(a) {
    var r = a.textContent;
    r === a._wrapperState.initialValue &&
      r !== "" &&
      r !== null &&
      (a.value = r);
  }
  function Ed(a) {
    switch (a) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  function bi(a, r) {
    return a == null || a === "http://www.w3.org/1999/xhtml"
      ? Ed(r)
      : a === "http://www.w3.org/2000/svg" && r === "foreignObject"
      ? "http://www.w3.org/1999/xhtml"
      : a;
  }
  var Nt,
    Fd = (function (a) {
      return typeof MSApp != "undefined" && MSApp.execUnsafeLocalFunction
        ? function (r, i, u, c) {
            MSApp.execUnsafeLocalFunction(function () {
              return a(r, i, u, c);
            });
          }
        : a;
    })(function (a, r) {
      if (a.namespaceURI !== "http://www.w3.org/2000/svg" || "innerHTML" in a)
        a.innerHTML = r;
      else {
        for (
          Nt = Nt || document.createElement("div"),
            Nt.innerHTML = "<svg>" + r.valueOf().toString() + "</svg>",
            r = Nt.firstChild;
          a.firstChild;

        )
          a.removeChild(a.firstChild);
        for (; r.firstChild; ) a.appendChild(r.firstChild);
      }
    });
  function Ar(a, r) {
    if (r) {
      var i = a.firstChild;
      if (i && i === a.lastChild && i.nodeType === 3) {
        i.nodeValue = r;
        return;
      }
    }
    a.textContent = r;
  }
  var Gr = {
      animationIterationCount: !0,
      aspectRatio: !0,
      borderImageOutset: !0,
      borderImageSlice: !0,
      borderImageWidth: !0,
      boxFlex: !0,
      boxFlexGroup: !0,
      boxOrdinalGroup: !0,
      columnCount: !0,
      columns: !0,
      flex: !0,
      flexGrow: !0,
      flexPositive: !0,
      flexShrink: !0,
      flexNegative: !0,
      flexOrder: !0,
      gridArea: !0,
      gridRow: !0,
      gridRowEnd: !0,
      gridRowSpan: !0,
      gridRowStart: !0,
      gridColumn: !0,
      gridColumnEnd: !0,
      gridColumnSpan: !0,
      gridColumnStart: !0,
      fontWeight: !0,
      lineClamp: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      tabSize: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
      fillOpacity: !0,
      floodOpacity: !0,
      stopOpacity: !0,
      strokeDasharray: !0,
      strokeDashoffset: !0,
      strokeMiterlimit: !0,
      strokeOpacity: !0,
      strokeWidth: !0,
    },
    qy = ["Webkit", "ms", "Moz", "O"];
  Object.keys(Gr).forEach(function (a) {
    qy.forEach(function (r) {
      (r = r + a.charAt(0).toUpperCase() + a.substring(1)), (Gr[r] = Gr[a]);
    });
  });
  function Dd(a, r, i) {
    return r == null || typeof r == "boolean" || r === ""
      ? ""
      : i || typeof r != "number" || r === 0 || (Gr.hasOwnProperty(a) && Gr[a])
      ? ("" + r).trim()
      : r + "px";
  }
  function Td(a, r) {
    a = a.style;
    for (var i in r)
      if (r.hasOwnProperty(i)) {
        var u = i.indexOf("--") === 0,
          c = Dd(i, r[i], u);
        i === "float" && (i = "cssFloat"), u ? a.setProperty(i, c) : (a[i] = c);
      }
  }
  var Yy = V(
    { menuitem: !0 },
    {
      area: !0,
      base: !0,
      br: !0,
      col: !0,
      embed: !0,
      hr: !0,
      img: !0,
      input: !0,
      keygen: !0,
      link: !0,
      meta: !0,
      param: !0,
      source: !0,
      track: !0,
      wbr: !0,
    }
  );
  function Mi(a, r) {
    if (r) {
      if (Yy[a] && (r.children != null || r.dangerouslySetInnerHTML != null))
        throw Error(o(137, a));
      if (r.dangerouslySetInnerHTML != null) {
        if (r.children != null) throw Error(o(60));
        if (
          typeof r.dangerouslySetInnerHTML != "object" ||
          !("__html" in r.dangerouslySetInnerHTML)
        )
          throw Error(o(61));
      }
      if (r.style != null && typeof r.style != "object") throw Error(o(62));
    }
  }
  function Bi(a, r) {
    if (a.indexOf("-") === -1) return typeof r.is == "string";
    switch (a) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return !1;
      default:
        return !0;
    }
  }
  var Pi = null;
  function Hi(a) {
    return (
      (a = a.target || a.srcElement || window),
      a.correspondingUseElement && (a = a.correspondingUseElement),
      a.nodeType === 3 ? a.parentNode : a
    );
  }
  var Li = null,
    zo = null,
    jo = null;
  function Od(a) {
    if ((a = Xr(a))) {
      if (typeof Li != "function") throw Error(o(280));
      var r = a.stateNode;
      r && ((r = al(r)), Li(a.stateNode, a.type, r));
    }
  }
  function xd(a) {
    zo ? (jo ? jo.push(a) : (jo = [a])) : (zo = a);
  }
  function Vd() {
    if (zo) {
      var a = zo,
        r = jo;
      if (((jo = zo = null), Od(a), r)) for (a = 0; a < r.length; a++) Od(r[a]);
    }
  }
  function Id(a, r) {
    return a(r);
  }
  function _d() {}
  var Wi = !1;
  function Kd(a, r, i) {
    if (Wi) return a(r, i);
    Wi = !0;
    try {
      return Id(a, r, i);
    } finally {
      (Wi = !1), (zo !== null || jo !== null) && (_d(), Vd());
    }
  }
  function Rr(a, r) {
    var i = a.stateNode;
    if (i === null) return null;
    var u = al(i);
    if (u === null) return null;
    i = u[r];
    e: switch (r) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (u = !u.disabled) ||
          ((a = a.type),
          (u = !(
            a === "button" ||
            a === "input" ||
            a === "select" ||
            a === "textarea"
          ))),
          (a = !u);
        break e;
      default:
        a = !1;
    }
    if (a) return null;
    if (i && typeof i != "function") throw Error(o(231, r, typeof i));
    return i;
  }
  var Ai = !1;
  if (g)
    try {
      var Nr = {};
      Object.defineProperty(Nr, "passive", {
        get: function () {
          Ai = !0;
        },
      }),
        window.addEventListener("test", Nr, Nr),
        window.removeEventListener("test", Nr, Nr);
    } catch (a) {
      Ai = !1;
    }
  function Qy(a, r, i, u, c, h, p, C, k) {
    var P = Array.prototype.slice.call(arguments, 3);
    try {
      r.apply(i, P);
    } catch (A) {
      this.onError(A);
    }
  }
  var Er = !1,
    Et = null,
    Ft = !1,
    Gi = null,
    Zy = {
      onError: function (a) {
        (Er = !0), (Et = a);
      },
    };
  function Xy(a, r, i, u, c, h, p, C, k) {
    (Er = !1), (Et = null), Qy.apply(Zy, arguments);
  }
  function ef(a, r, i, u, c, h, p, C, k) {
    if ((Xy.apply(this, arguments), Er)) {
      if (Er) {
        var P = Et;
        (Er = !1), (Et = null);
      } else throw Error(o(198));
      Ft || ((Ft = !0), (Gi = P));
    }
  }
  function Co(a) {
    var r = a,
      i = a;
    if (a.alternate) for (; r.return; ) r = r.return;
    else {
      a = r;
      do (r = a), r.flags & 4098 && (i = r.return), (a = r.return);
      while (a);
    }
    return r.tag === 3 ? i : null;
  }
  function Jd(a) {
    if (a.tag === 13) {
      var r = a.memoizedState;
      if (
        (r === null && ((a = a.alternate), a !== null && (r = a.memoizedState)),
        r !== null)
      )
        return r.dehydrated;
    }
    return null;
  }
  function zd(a) {
    if (Co(a) !== a) throw Error(o(188));
  }
  function nf(a) {
    var r = a.alternate;
    if (!r) {
      if (((r = Co(a)), r === null)) throw Error(o(188));
      return r !== a ? null : a;
    }
    for (var i = a, u = r; ; ) {
      var c = i.return;
      if (c === null) break;
      var h = c.alternate;
      if (h === null) {
        if (((u = c.return), u !== null)) {
          i = u;
          continue;
        }
        break;
      }
      if (c.child === h.child) {
        for (h = c.child; h; ) {
          if (h === i) return zd(c), a;
          if (h === u) return zd(c), r;
          h = h.sibling;
        }
        throw Error(o(188));
      }
      if (i.return !== u.return) (i = c), (u = h);
      else {
        for (var p = !1, C = c.child; C; ) {
          if (C === i) {
            (p = !0), (i = c), (u = h);
            break;
          }
          if (C === u) {
            (p = !0), (u = c), (i = h);
            break;
          }
          C = C.sibling;
        }
        if (!p) {
          for (C = h.child; C; ) {
            if (C === i) {
              (p = !0), (i = h), (u = c);
              break;
            }
            if (C === u) {
              (p = !0), (u = h), (i = c);
              break;
            }
            C = C.sibling;
          }
          if (!p) throw Error(o(189));
        }
      }
      if (i.alternate !== u) throw Error(o(190));
    }
    if (i.tag !== 3) throw Error(o(188));
    return i.stateNode.current === i ? a : r;
  }
  function jd(a) {
    return (a = nf(a)), a !== null ? $d(a) : null;
  }
  function $d(a) {
    if (a.tag === 5 || a.tag === 6) return a;
    for (a = a.child; a !== null; ) {
      var r = $d(a);
      if (r !== null) return r;
      a = a.sibling;
    }
    return null;
  }
  var Ud = n.unstable_scheduleCallback,
    qd = n.unstable_cancelCallback,
    af = n.unstable_shouldYield,
    of = n.unstable_requestPaint,
    Fe = n.unstable_now,
    rf = n.unstable_getCurrentPriorityLevel,
    Ri = n.unstable_ImmediatePriority,
    Yd = n.unstable_UserBlockingPriority,
    Dt = n.unstable_NormalPriority,
    tf = n.unstable_LowPriority,
    Qd = n.unstable_IdlePriority,
    Tt = null,
    ya = null;
  function lf(a) {
    if (ya && typeof ya.onCommitFiberRoot == "function")
      try {
        ya.onCommitFiberRoot(Tt, a, void 0, (a.current.flags & 128) === 128);
      } catch (r) {}
  }
  var aa = Math.clz32 ? Math.clz32 : df,
    sf = Math.log,
    uf = Math.LN2;
  function df(a) {
    return (a >>>= 0), a === 0 ? 32 : (31 - ((sf(a) / uf) | 0)) | 0;
  }
  var Ot = 64,
    xt = 4194304;
  function Fr(a) {
    switch (a & -a) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return a & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return a & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return a;
    }
  }
  function Vt(a, r) {
    var i = a.pendingLanes;
    if (i === 0) return 0;
    var u = 0,
      c = a.suspendedLanes,
      h = a.pingedLanes,
      p = i & 268435455;
    if (p !== 0) {
      var C = p & ~c;
      C !== 0 ? (u = Fr(C)) : ((h &= p), h !== 0 && (u = Fr(h)));
    } else (p = i & ~c), p !== 0 ? (u = Fr(p)) : h !== 0 && (u = Fr(h));
    if (u === 0) return 0;
    if (
      r !== 0 &&
      r !== u &&
      !(r & c) &&
      ((c = u & -u), (h = r & -r), c >= h || (c === 16 && (h & 4194240) !== 0))
    )
      return r;
    if ((u & 4 && (u |= i & 16), (r = a.entangledLanes), r !== 0))
      for (a = a.entanglements, r &= u; 0 < r; )
        (i = 31 - aa(r)), (c = 1 << i), (u |= a[i]), (r &= ~c);
    return u;
  }
  function cf(a, r) {
    switch (a) {
      case 1:
      case 2:
      case 4:
        return r + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return r + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function hf(a, r) {
    for (
      var i = a.suspendedLanes,
        u = a.pingedLanes,
        c = a.expirationTimes,
        h = a.pendingLanes;
      0 < h;

    ) {
      var p = 31 - aa(h),
        C = 1 << p,
        k = c[p];
      k === -1
        ? (!(C & i) || C & u) && (c[p] = cf(C, r))
        : k <= r && (a.expiredLanes |= C),
        (h &= ~C);
    }
  }
  function Ni(a) {
    return (
      (a = a.pendingLanes & -1073741825),
      a !== 0 ? a : a & 1073741824 ? 1073741824 : 0
    );
  }
  function Zd() {
    var a = Ot;
    return (Ot <<= 1), !(Ot & 4194240) && (Ot = 64), a;
  }
  function Ei(a) {
    for (var r = [], i = 0; 31 > i; i++) r.push(a);
    return r;
  }
  function Dr(a, r, i) {
    (a.pendingLanes |= r),
      r !== 536870912 && ((a.suspendedLanes = 0), (a.pingedLanes = 0)),
      (a = a.eventTimes),
      (r = 31 - aa(r)),
      (a[r] = i);
  }
  function gf(a, r) {
    var i = a.pendingLanes & ~r;
    (a.pendingLanes = r),
      (a.suspendedLanes = 0),
      (a.pingedLanes = 0),
      (a.expiredLanes &= r),
      (a.mutableReadLanes &= r),
      (a.entangledLanes &= r),
      (r = a.entanglements);
    var u = a.eventTimes;
    for (a = a.expirationTimes; 0 < i; ) {
      var c = 31 - aa(i),
        h = 1 << c;
      (r[c] = 0), (u[c] = -1), (a[c] = -1), (i &= ~h);
    }
  }
  function Fi(a, r) {
    var i = (a.entangledLanes |= r);
    for (a = a.entanglements; i; ) {
      var u = 31 - aa(i),
        c = 1 << u;
      (c & r) | (a[u] & r) && (a[u] |= r), (i &= ~c);
    }
  }
  var pe = 0;
  function Xd(a) {
    return (
      (a &= -a), 1 < a ? (4 < a ? (a & 268435455 ? 16 : 536870912) : 4) : 1
    );
  }
  var ec,
    Di,
    nc,
    ac,
    oc,
    Ti = !1,
    It = [],
    Ja = null,
    za = null,
    ja = null,
    Tr = new Map(),
    Or = new Map(),
    $a = [],
    mf =
      "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(
        " "
      );
  function rc(a, r) {
    switch (a) {
      case "focusin":
      case "focusout":
        Ja = null;
        break;
      case "dragenter":
      case "dragleave":
        za = null;
        break;
      case "mouseover":
      case "mouseout":
        ja = null;
        break;
      case "pointerover":
      case "pointerout":
        Tr.delete(r.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        Or.delete(r.pointerId);
    }
  }
  function xr(a, r, i, u, c, h) {
    return a === null || a.nativeEvent !== h
      ? ((a = {
          blockedOn: r,
          domEventName: i,
          eventSystemFlags: u,
          nativeEvent: h,
          targetContainers: [c],
        }),
        r !== null && ((r = Xr(r)), r !== null && Di(r)),
        a)
      : ((a.eventSystemFlags |= u),
        (r = a.targetContainers),
        c !== null && r.indexOf(c) === -1 && r.push(c),
        a);
  }
  function pf(a, r, i, u, c) {
    switch (r) {
      case "focusin":
        return (Ja = xr(Ja, a, r, i, u, c)), !0;
      case "dragenter":
        return (za = xr(za, a, r, i, u, c)), !0;
      case "mouseover":
        return (ja = xr(ja, a, r, i, u, c)), !0;
      case "pointerover":
        var h = c.pointerId;
        return Tr.set(h, xr(Tr.get(h) || null, a, r, i, u, c)), !0;
      case "gotpointercapture":
        return (
          (h = c.pointerId), Or.set(h, xr(Or.get(h) || null, a, r, i, u, c)), !0
        );
    }
    return !1;
  }
  function tc(a) {
    var r = ko(a.target);
    if (r !== null) {
      var i = Co(r);
      if (i !== null) {
        if (((r = i.tag), r === 13)) {
          if (((r = Jd(i)), r !== null)) {
            (a.blockedOn = r),
              oc(a.priority, function () {
                nc(i);
              });
            return;
          }
        } else if (r === 3 && i.stateNode.current.memoizedState.isDehydrated) {
          a.blockedOn = i.tag === 3 ? i.stateNode.containerInfo : null;
          return;
        }
      }
    }
    a.blockedOn = null;
  }
  function _t(a) {
    if (a.blockedOn !== null) return !1;
    for (var r = a.targetContainers; 0 < r.length; ) {
      var i = xi(a.domEventName, a.eventSystemFlags, r[0], a.nativeEvent);
      if (i === null) {
        i = a.nativeEvent;
        var u = new i.constructor(i.type, i);
        (Pi = u), i.target.dispatchEvent(u), (Pi = null);
      } else return (r = Xr(i)), r !== null && Di(r), (a.blockedOn = i), !1;
      r.shift();
    }
    return !0;
  }
  function lc(a, r, i) {
    _t(a) && i.delete(r);
  }
  function yf() {
    (Ti = !1),
      Ja !== null && _t(Ja) && (Ja = null),
      za !== null && _t(za) && (za = null),
      ja !== null && _t(ja) && (ja = null),
      Tr.forEach(lc),
      Or.forEach(lc);
  }
  function Vr(a, r) {
    a.blockedOn === r &&
      ((a.blockedOn = null),
      Ti ||
        ((Ti = !0),
        n.unstable_scheduleCallback(n.unstable_NormalPriority, yf)));
  }
  function Ir(a) {
    function r(c) {
      return Vr(c, a);
    }
    if (0 < It.length) {
      Vr(It[0], a);
      for (var i = 1; i < It.length; i++) {
        var u = It[i];
        u.blockedOn === a && (u.blockedOn = null);
      }
    }
    for (
      Ja !== null && Vr(Ja, a),
        za !== null && Vr(za, a),
        ja !== null && Vr(ja, a),
        Tr.forEach(r),
        Or.forEach(r),
        i = 0;
      i < $a.length;
      i++
    )
      (u = $a[i]), u.blockedOn === a && (u.blockedOn = null);
    for (; 0 < $a.length && ((i = $a[0]), i.blockedOn === null); )
      tc(i), i.blockedOn === null && $a.shift();
  }
  var $o = Oe.ReactCurrentBatchConfig,
    Kt = !0;
  function ff(a, r, i, u) {
    var c = pe,
      h = $o.transition;
    $o.transition = null;
    try {
      (pe = 1), Oi(a, r, i, u);
    } finally {
      (pe = c), ($o.transition = h);
    }
  }
  function vf(a, r, i, u) {
    var c = pe,
      h = $o.transition;
    $o.transition = null;
    try {
      (pe = 4), Oi(a, r, i, u);
    } finally {
      (pe = c), ($o.transition = h);
    }
  }
  function Oi(a, r, i, u) {
    if (Kt) {
      var c = xi(a, r, i, u);
      if (c === null) as(a, r, u, Jt, i), rc(a, u);
      else if (pf(c, a, r, i, u)) u.stopPropagation();
      else if ((rc(a, u), r & 4 && -1 < mf.indexOf(a))) {
        for (; c !== null; ) {
          var h = Xr(c);
          if (
            (h !== null && ec(h),
            (h = xi(a, r, i, u)),
            h === null && as(a, r, u, Jt, i),
            h === c)
          )
            break;
          c = h;
        }
        c !== null && u.stopPropagation();
      } else as(a, r, u, null, i);
    }
  }
  var Jt = null;
  function xi(a, r, i, u) {
    if (((Jt = null), (a = Hi(u)), (a = ko(a)), a !== null))
      if (((r = Co(a)), r === null)) a = null;
      else if (((i = r.tag), i === 13)) {
        if (((a = Jd(r)), a !== null)) return a;
        a = null;
      } else if (i === 3) {
        if (r.stateNode.current.memoizedState.isDehydrated)
          return r.tag === 3 ? r.stateNode.containerInfo : null;
        a = null;
      } else r !== a && (a = null);
    return (Jt = a), null;
  }
  function ic(a) {
    switch (a) {
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 1;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "toggle":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 4;
      case "message":
        switch (rf()) {
          case Ri:
            return 1;
          case Yd:
            return 4;
          case Dt:
          case tf:
            return 16;
          case Qd:
            return 536870912;
          default:
            return 16;
        }
      default:
        return 16;
    }
  }
  var Ua = null,
    Vi = null,
    zt = null;
  function sc() {
    if (zt) return zt;
    var a,
      r = Vi,
      i = r.length,
      u,
      c = "value" in Ua ? Ua.value : Ua.textContent,
      h = c.length;
    for (a = 0; a < i && r[a] === c[a]; a++);
    var p = i - a;
    for (u = 1; u <= p && r[i - u] === c[h - u]; u++);
    return (zt = c.slice(a, 1 < u ? 1 - u : void 0));
  }
  function jt(a) {
    var r = a.keyCode;
    return (
      "charCode" in a
        ? ((a = a.charCode), a === 0 && r === 13 && (a = 13))
        : (a = r),
      a === 10 && (a = 13),
      32 <= a || a === 13 ? a : 0
    );
  }
  function $t() {
    return !0;
  }
  function uc() {
    return !1;
  }
  function Nn(a) {
    function r(i, u, c, h, p) {
      (this._reactName = i),
        (this._targetInst = c),
        (this.type = u),
        (this.nativeEvent = h),
        (this.target = p),
        (this.currentTarget = null);
      for (var C in a)
        a.hasOwnProperty(C) && ((i = a[C]), (this[C] = i ? i(h) : h[C]));
      return (
        (this.isDefaultPrevented = (
          h.defaultPrevented != null ? h.defaultPrevented : h.returnValue === !1
        )
          ? $t
          : uc),
        (this.isPropagationStopped = uc),
        this
      );
    }
    return (
      V(r.prototype, {
        preventDefault: function () {
          this.defaultPrevented = !0;
          var i = this.nativeEvent;
          i &&
            (i.preventDefault
              ? i.preventDefault()
              : typeof i.returnValue != "unknown" && (i.returnValue = !1),
            (this.isDefaultPrevented = $t));
        },
        stopPropagation: function () {
          var i = this.nativeEvent;
          i &&
            (i.stopPropagation
              ? i.stopPropagation()
              : typeof i.cancelBubble != "unknown" && (i.cancelBubble = !0),
            (this.isPropagationStopped = $t));
        },
        persist: function () {},
        isPersistent: $t,
      }),
      r
    );
  }
  var Uo = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function (a) {
        return a.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0,
    },
    Ii = Nn(Uo),
    _r = V({}, Uo, { view: 0, detail: 0 }),
    Cf = Nn(_r),
    _i,
    Ki,
    Kr,
    Ut = V({}, _r, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: zi,
      button: 0,
      buttons: 0,
      relatedTarget: function (a) {
        return a.relatedTarget === void 0
          ? a.fromElement === a.srcElement
            ? a.toElement
            : a.fromElement
          : a.relatedTarget;
      },
      movementX: function (a) {
        return "movementX" in a
          ? a.movementX
          : (a !== Kr &&
              (Kr && a.type === "mousemove"
                ? ((_i = a.screenX - Kr.screenX), (Ki = a.screenY - Kr.screenY))
                : (Ki = _i = 0),
              (Kr = a)),
            _i);
      },
      movementY: function (a) {
        return "movementY" in a ? a.movementY : Ki;
      },
    }),
    dc = Nn(Ut),
    kf = V({}, Ut, { dataTransfer: 0 }),
    wf = Nn(kf),
    Sf = V({}, _r, { relatedTarget: 0 }),
    Ji = Nn(Sf),
    bf = V({}, Uo, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }),
    Mf = Nn(bf),
    Bf = V({}, Uo, {
      clipboardData: function (a) {
        return "clipboardData" in a ? a.clipboardData : window.clipboardData;
      },
    }),
    Pf = Nn(Bf),
    Hf = V({}, Uo, { data: 0 }),
    cc = Nn(Hf),
    Lf = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified",
    },
    Wf = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta",
    },
    Af = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey",
    };
  function Gf(a) {
    var r = this.nativeEvent;
    return r.getModifierState
      ? r.getModifierState(a)
      : (a = Af[a])
      ? !!r[a]
      : !1;
  }
  function zi() {
    return Gf;
  }
  var Rf = V({}, _r, {
      key: function (a) {
        if (a.key) {
          var r = Lf[a.key] || a.key;
          if (r !== "Unidentified") return r;
        }
        return a.type === "keypress"
          ? ((a = jt(a)), a === 13 ? "Enter" : String.fromCharCode(a))
          : a.type === "keydown" || a.type === "keyup"
          ? Wf[a.keyCode] || "Unidentified"
          : "";
      },
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: zi,
      charCode: function (a) {
        return a.type === "keypress" ? jt(a) : 0;
      },
      keyCode: function (a) {
        return a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
      },
      which: function (a) {
        return a.type === "keypress"
          ? jt(a)
          : a.type === "keydown" || a.type === "keyup"
          ? a.keyCode
          : 0;
      },
    }),
    Nf = Nn(Rf),
    Ef = V({}, Ut, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0,
    }),
    hc = Nn(Ef),
    Ff = V({}, _r, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: zi,
    }),
    Df = Nn(Ff),
    Tf = V({}, Uo, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }),
    Of = Nn(Tf),
    xf = V({}, Ut, {
      deltaX: function (a) {
        return "deltaX" in a
          ? a.deltaX
          : "wheelDeltaX" in a
          ? -a.wheelDeltaX
          : 0;
      },
      deltaY: function (a) {
        return "deltaY" in a
          ? a.deltaY
          : "wheelDeltaY" in a
          ? -a.wheelDeltaY
          : "wheelDelta" in a
          ? -a.wheelDelta
          : 0;
      },
      deltaZ: 0,
      deltaMode: 0,
    }),
    Vf = Nn(xf),
    If = [9, 13, 27, 32],
    ji = g && "CompositionEvent" in window,
    Jr = null;
  g && "documentMode" in document && (Jr = document.documentMode);
  var _f = g && "TextEvent" in window && !Jr,
    gc = g && (!ji || (Jr && 8 < Jr && 11 >= Jr)),
    mc = " ",
    pc = !1;
  function yc(a, r) {
    switch (a) {
      case "keyup":
        return If.indexOf(r.keyCode) !== -1;
      case "keydown":
        return r.keyCode !== 229;
      case "keypress":
      case "mousedown":
      case "focusout":
        return !0;
      default:
        return !1;
    }
  }
  function fc(a) {
    return (a = a.detail), typeof a == "object" && "data" in a ? a.data : null;
  }
  var qo = !1;
  function Kf(a, r) {
    switch (a) {
      case "compositionend":
        return fc(r);
      case "keypress":
        return r.which !== 32 ? null : ((pc = !0), mc);
      case "textInput":
        return (a = r.data), a === mc && pc ? null : a;
      default:
        return null;
    }
  }
  function Jf(a, r) {
    if (qo)
      return a === "compositionend" || (!ji && yc(a, r))
        ? ((a = sc()), (zt = Vi = Ua = null), (qo = !1), a)
        : null;
    switch (a) {
      case "paste":
        return null;
      case "keypress":
        if (!(r.ctrlKey || r.altKey || r.metaKey) || (r.ctrlKey && r.altKey)) {
          if (r.char && 1 < r.char.length) return r.char;
          if (r.which) return String.fromCharCode(r.which);
        }
        return null;
      case "compositionend":
        return gc && r.locale !== "ko" ? null : r.data;
      default:
        return null;
    }
  }
  var zf = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0,
  };
  function vc(a) {
    var r = a && a.nodeName && a.nodeName.toLowerCase();
    return r === "input" ? !!zf[a.type] : r === "textarea";
  }
  function Cc(a, r, i, u) {
    xd(u),
      (r = Xt(r, "onChange")),
      0 < r.length &&
        ((i = new Ii("onChange", "change", null, i, u)),
        a.push({ event: i, listeners: r }));
  }
  var zr = null,
    jr = null;
  function jf(a) {
    Tc(a, 0);
  }
  function qt(a) {
    var r = er(a);
    if (Hd(r)) return a;
  }
  function $f(a, r) {
    if (a === "change") return r;
  }
  var kc = !1;
  if (g) {
    var $i;
    if (g) {
      var Ui = "oninput" in document;
      if (!Ui) {
        var wc = document.createElement("div");
        wc.setAttribute("oninput", "return;"),
          (Ui = typeof wc.oninput == "function");
      }
      $i = Ui;
    } else $i = !1;
    kc = $i && (!document.documentMode || 9 < document.documentMode);
  }
  function Sc() {
    zr && (zr.detachEvent("onpropertychange", bc), (jr = zr = null));
  }
  function bc(a) {
    if (a.propertyName === "value" && qt(jr)) {
      var r = [];
      Cc(r, jr, a, Hi(a)), Kd(jf, r);
    }
  }
  function Uf(a, r, i) {
    a === "focusin"
      ? (Sc(), (zr = r), (jr = i), zr.attachEvent("onpropertychange", bc))
      : a === "focusout" && Sc();
  }
  function qf(a) {
    if (a === "selectionchange" || a === "keyup" || a === "keydown")
      return qt(jr);
  }
  function Yf(a, r) {
    if (a === "click") return qt(r);
  }
  function Qf(a, r) {
    if (a === "input" || a === "change") return qt(r);
  }
  function Zf(a, r) {
    return (a === r && (a !== 0 || 1 / a === 1 / r)) || (a !== a && r !== r);
  }
  var oa = typeof Object.is == "function" ? Object.is : Zf;
  function $r(a, r) {
    if (oa(a, r)) return !0;
    if (
      typeof a != "object" ||
      a === null ||
      typeof r != "object" ||
      r === null
    )
      return !1;
    var i = Object.keys(a),
      u = Object.keys(r);
    if (i.length !== u.length) return !1;
    for (u = 0; u < i.length; u++) {
      var c = i[u];
      if (!m.call(r, c) || !oa(a[c], r[c])) return !1;
    }
    return !0;
  }
  function Mc(a) {
    for (; a && a.firstChild; ) a = a.firstChild;
    return a;
  }
  function Bc(a, r) {
    var i = Mc(a);
    a = 0;
    for (var u; i; ) {
      if (i.nodeType === 3) {
        if (((u = a + i.textContent.length), a <= r && u >= r))
          return { node: i, offset: r - a };
        a = u;
      }
      e: {
        for (; i; ) {
          if (i.nextSibling) {
            i = i.nextSibling;
            break e;
          }
          i = i.parentNode;
        }
        i = void 0;
      }
      i = Mc(i);
    }
  }
  function Pc(a, r) {
    return a && r
      ? a === r
        ? !0
        : a && a.nodeType === 3
        ? !1
        : r && r.nodeType === 3
        ? Pc(a, r.parentNode)
        : "contains" in a
        ? a.contains(r)
        : a.compareDocumentPosition
        ? !!(a.compareDocumentPosition(r) & 16)
        : !1
      : !1;
  }
  function Hc() {
    for (var a = window, r = Rt(); r instanceof a.HTMLIFrameElement; ) {
      try {
        var i = typeof r.contentWindow.location.href == "string";
      } catch (u) {
        i = !1;
      }
      if (i) a = r.contentWindow;
      else break;
      r = Rt(a.document);
    }
    return r;
  }
  function qi(a) {
    var r = a && a.nodeName && a.nodeName.toLowerCase();
    return (
      r &&
      ((r === "input" &&
        (a.type === "text" ||
          a.type === "search" ||
          a.type === "tel" ||
          a.type === "url" ||
          a.type === "password")) ||
        r === "textarea" ||
        a.contentEditable === "true")
    );
  }
  function Xf(a) {
    var r = Hc(),
      i = a.focusedElem,
      u = a.selectionRange;
    if (
      r !== i &&
      i &&
      i.ownerDocument &&
      Pc(i.ownerDocument.documentElement, i)
    ) {
      if (u !== null && qi(i)) {
        if (
          ((r = u.start),
          (a = u.end),
          a === void 0 && (a = r),
          "selectionStart" in i)
        )
          (i.selectionStart = r),
            (i.selectionEnd = Math.min(a, i.value.length));
        else if (
          ((a = ((r = i.ownerDocument || document) && r.defaultView) || window),
          a.getSelection)
        ) {
          a = a.getSelection();
          var c = i.textContent.length,
            h = Math.min(u.start, c);
          (u = u.end === void 0 ? h : Math.min(u.end, c)),
            !a.extend && h > u && ((c = u), (u = h), (h = c)),
            (c = Bc(i, h));
          var p = Bc(i, u);
          c &&
            p &&
            (a.rangeCount !== 1 ||
              a.anchorNode !== c.node ||
              a.anchorOffset !== c.offset ||
              a.focusNode !== p.node ||
              a.focusOffset !== p.offset) &&
            ((r = r.createRange()),
            r.setStart(c.node, c.offset),
            a.removeAllRanges(),
            h > u
              ? (a.addRange(r), a.extend(p.node, p.offset))
              : (r.setEnd(p.node, p.offset), a.addRange(r)));
        }
      }
      for (r = [], a = i; (a = a.parentNode); )
        a.nodeType === 1 &&
          r.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
      for (typeof i.focus == "function" && i.focus(), i = 0; i < r.length; i++)
        (a = r[i]),
          (a.element.scrollLeft = a.left),
          (a.element.scrollTop = a.top);
    }
  }
  var ev = g && "documentMode" in document && 11 >= document.documentMode,
    Yo = null,
    Yi = null,
    Ur = null,
    Qi = !1;
  function Lc(a, r, i) {
    var u =
      i.window === i ? i.document : i.nodeType === 9 ? i : i.ownerDocument;
    Qi ||
      Yo == null ||
      Yo !== Rt(u) ||
      ((u = Yo),
      "selectionStart" in u && qi(u)
        ? (u = { start: u.selectionStart, end: u.selectionEnd })
        : ((u = (
            (u.ownerDocument && u.ownerDocument.defaultView) ||
            window
          ).getSelection()),
          (u = {
            anchorNode: u.anchorNode,
            anchorOffset: u.anchorOffset,
            focusNode: u.focusNode,
            focusOffset: u.focusOffset,
          })),
      (Ur && $r(Ur, u)) ||
        ((Ur = u),
        (u = Xt(Yi, "onSelect")),
        0 < u.length &&
          ((r = new Ii("onSelect", "select", null, r, i)),
          a.push({ event: r, listeners: u }),
          (r.target = Yo))));
  }
  function Yt(a, r) {
    var i = {};
    return (
      (i[a.toLowerCase()] = r.toLowerCase()),
      (i["Webkit" + a] = "webkit" + r),
      (i["Moz" + a] = "moz" + r),
      i
    );
  }
  var Qo = {
      animationend: Yt("Animation", "AnimationEnd"),
      animationiteration: Yt("Animation", "AnimationIteration"),
      animationstart: Yt("Animation", "AnimationStart"),
      transitionend: Yt("Transition", "TransitionEnd"),
    },
    Zi = {},
    Wc = {};
  g &&
    ((Wc = document.createElement("div").style),
    "AnimationEvent" in window ||
      (delete Qo.animationend.animation,
      delete Qo.animationiteration.animation,
      delete Qo.animationstart.animation),
    "TransitionEvent" in window || delete Qo.transitionend.transition);
  function Qt(a) {
    if (Zi[a]) return Zi[a];
    if (!Qo[a]) return a;
    var r = Qo[a],
      i;
    for (i in r) if (r.hasOwnProperty(i) && i in Wc) return (Zi[a] = r[i]);
    return a;
  }
  var Ac = Qt("animationend"),
    Gc = Qt("animationiteration"),
    Rc = Qt("animationstart"),
    Nc = Qt("transitionend"),
    Ec = new Map(),
    Fc =
      "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
        " "
      );
  function qa(a, r) {
    Ec.set(a, r), s(r, [a]);
  }
  for (var Xi = 0; Xi < Fc.length; Xi++) {
    var es = Fc[Xi],
      nv = es.toLowerCase(),
      av = es[0].toUpperCase() + es.slice(1);
    qa(nv, "on" + av);
  }
  qa(Ac, "onAnimationEnd"),
    qa(Gc, "onAnimationIteration"),
    qa(Rc, "onAnimationStart"),
    qa("dblclick", "onDoubleClick"),
    qa("focusin", "onFocus"),
    qa("focusout", "onBlur"),
    qa(Nc, "onTransitionEnd"),
    d("onMouseEnter", ["mouseout", "mouseover"]),
    d("onMouseLeave", ["mouseout", "mouseover"]),
    d("onPointerEnter", ["pointerout", "pointerover"]),
    d("onPointerLeave", ["pointerout", "pointerover"]),
    s(
      "onChange",
      "change click focusin focusout input keydown keyup selectionchange".split(
        " "
      )
    ),
    s(
      "onSelect",
      "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
        " "
      )
    ),
    s("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]),
    s(
      "onCompositionEnd",
      "compositionend focusout keydown keypress keyup mousedown".split(" ")
    ),
    s(
      "onCompositionStart",
      "compositionstart focusout keydown keypress keyup mousedown".split(" ")
    ),
    s(
      "onCompositionUpdate",
      "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
    );
  var qr =
      "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
        " "
      ),
    ov = new Set(
      "cancel close invalid load scroll toggle".split(" ").concat(qr)
    );
  function Dc(a, r, i) {
    var u = a.type || "unknown-event";
    (a.currentTarget = i), ef(u, r, void 0, a), (a.currentTarget = null);
  }
  function Tc(a, r) {
    r = (r & 4) !== 0;
    for (var i = 0; i < a.length; i++) {
      var u = a[i],
        c = u.event;
      u = u.listeners;
      e: {
        var h = void 0;
        if (r)
          for (var p = u.length - 1; 0 <= p; p--) {
            var C = u[p],
              k = C.instance,
              P = C.currentTarget;
            if (((C = C.listener), k !== h && c.isPropagationStopped()))
              break e;
            Dc(c, C, P), (h = k);
          }
        else
          for (p = 0; p < u.length; p++) {
            if (
              ((C = u[p]),
              (k = C.instance),
              (P = C.currentTarget),
              (C = C.listener),
              k !== h && c.isPropagationStopped())
            )
              break e;
            Dc(c, C, P), (h = k);
          }
      }
    }
    if (Ft) throw ((a = Gi), (Ft = !1), (Gi = null), a);
  }
  function Se(a, r) {
    var i = r[ss];
    i === void 0 && (i = r[ss] = new Set());
    var u = a + "__bubble";
    i.has(u) || (Oc(r, a, 2, !1), i.add(u));
  }
  function ns(a, r, i) {
    var u = 0;
    r && (u |= 4), Oc(i, a, u, r);
  }
  var Zt = "_reactListening" + Math.random().toString(36).slice(2);
  function Yr(a) {
    if (!a[Zt]) {
      (a[Zt] = !0),
        t.forEach(function (i) {
          i !== "selectionchange" && (ov.has(i) || ns(i, !1, a), ns(i, !0, a));
        });
      var r = a.nodeType === 9 ? a : a.ownerDocument;
      r === null || r[Zt] || ((r[Zt] = !0), ns("selectionchange", !1, r));
    }
  }
  function Oc(a, r, i, u) {
    switch (ic(r)) {
      case 1:
        var c = ff;
        break;
      case 4:
        c = vf;
        break;
      default:
        c = Oi;
    }
    (i = c.bind(null, r, i, a)),
      (c = void 0),
      !Ai ||
        (r !== "touchstart" && r !== "touchmove" && r !== "wheel") ||
        (c = !0),
      u
        ? c !== void 0
          ? a.addEventListener(r, i, { capture: !0, passive: c })
          : a.addEventListener(r, i, !0)
        : c !== void 0
        ? a.addEventListener(r, i, { passive: c })
        : a.addEventListener(r, i, !1);
  }
  function as(a, r, i, u, c) {
    var h = u;
    if (!(r & 1) && !(r & 2) && u !== null)
      e: for (;;) {
        if (u === null) return;
        var p = u.tag;
        if (p === 3 || p === 4) {
          var C = u.stateNode.containerInfo;
          if (C === c || (C.nodeType === 8 && C.parentNode === c)) break;
          if (p === 4)
            for (p = u.return; p !== null; ) {
              var k = p.tag;
              if (
                (k === 3 || k === 4) &&
                ((k = p.stateNode.containerInfo),
                k === c || (k.nodeType === 8 && k.parentNode === c))
              )
                return;
              p = p.return;
            }
          for (; C !== null; ) {
            if (((p = ko(C)), p === null)) return;
            if (((k = p.tag), k === 5 || k === 6)) {
              u = h = p;
              continue e;
            }
            C = C.parentNode;
          }
        }
        u = u.return;
      }
    Kd(function () {
      var P = h,
        A = Hi(i),
        R = [];
      e: {
        var L = Ec.get(a);
        if (L !== void 0) {
          var T = Ii,
            I = a;
          switch (a) {
            case "keypress":
              if (jt(i) === 0) break e;
            case "keydown":
            case "keyup":
              T = Nf;
              break;
            case "focusin":
              (I = "focus"), (T = Ji);
              break;
            case "focusout":
              (I = "blur"), (T = Ji);
              break;
            case "beforeblur":
            case "afterblur":
              T = Ji;
              break;
            case "click":
              if (i.button === 2) break e;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              T = dc;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              T = wf;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              T = Df;
              break;
            case Ac:
            case Gc:
            case Rc:
              T = Mf;
              break;
            case Nc:
              T = Of;
              break;
            case "scroll":
              T = Cf;
              break;
            case "wheel":
              T = Vf;
              break;
            case "copy":
            case "cut":
            case "paste":
              T = Pf;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              T = hc;
          }
          var _ = (r & 4) !== 0,
            De = !_ && a === "scroll",
            b = _ ? (L !== null ? L + "Capture" : null) : L;
          _ = [];
          for (var w = P, B; w !== null; ) {
            B = w;
            var E = B.stateNode;
            if (
              (B.tag === 5 &&
                E !== null &&
                ((B = E),
                b !== null &&
                  ((E = Rr(w, b)), E != null && _.push(Qr(w, E, B)))),
              De)
            )
              break;
            w = w.return;
          }
          0 < _.length &&
            ((L = new T(L, I, null, i, A)), R.push({ event: L, listeners: _ }));
        }
      }
      if (!(r & 7)) {
        e: {
          if (
            ((L = a === "mouseover" || a === "pointerover"),
            (T = a === "mouseout" || a === "pointerout"),
            L &&
              i !== Pi &&
              (I = i.relatedTarget || i.fromElement) &&
              (ko(I) || I[Ma]))
          )
            break e;
          if (
            (T || L) &&
            ((L =
              A.window === A
                ? A
                : (L = A.ownerDocument)
                ? L.defaultView || L.parentWindow
                : window),
            T
              ? ((I = i.relatedTarget || i.toElement),
                (T = P),
                (I = I ? ko(I) : null),
                I !== null &&
                  ((De = Co(I)), I !== De || (I.tag !== 5 && I.tag !== 6)) &&
                  (I = null))
              : ((T = null), (I = P)),
            T !== I)
          ) {
            if (
              ((_ = dc),
              (E = "onMouseLeave"),
              (b = "onMouseEnter"),
              (w = "mouse"),
              (a === "pointerout" || a === "pointerover") &&
                ((_ = hc),
                (E = "onPointerLeave"),
                (b = "onPointerEnter"),
                (w = "pointer")),
              (De = T == null ? L : er(T)),
              (B = I == null ? L : er(I)),
              (L = new _(E, w + "leave", T, i, A)),
              (L.target = De),
              (L.relatedTarget = B),
              (E = null),
              ko(A) === P &&
                ((_ = new _(b, w + "enter", I, i, A)),
                (_.target = B),
                (_.relatedTarget = De),
                (E = _)),
              (De = E),
              T && I)
            )
              n: {
                for (_ = T, b = I, w = 0, B = _; B; B = Zo(B)) w++;
                for (B = 0, E = b; E; E = Zo(E)) B++;
                for (; 0 < w - B; ) (_ = Zo(_)), w--;
                for (; 0 < B - w; ) (b = Zo(b)), B--;
                for (; w--; ) {
                  if (_ === b || (b !== null && _ === b.alternate)) break n;
                  (_ = Zo(_)), (b = Zo(b));
                }
                _ = null;
              }
            else _ = null;
            T !== null && xc(R, L, T, _, !1),
              I !== null && De !== null && xc(R, De, I, _, !0);
          }
        }
        e: {
          if (
            ((L = P ? er(P) : window),
            (T = L.nodeName && L.nodeName.toLowerCase()),
            T === "select" || (T === "input" && L.type === "file"))
          )
            var K = $f;
          else if (vc(L))
            if (kc) K = Qf;
            else {
              K = qf;
              var J = Uf;
            }
          else
            (T = L.nodeName) &&
              T.toLowerCase() === "input" &&
              (L.type === "checkbox" || L.type === "radio") &&
              (K = Yf);
          if (K && (K = K(a, P))) {
            Cc(R, K, i, A);
            break e;
          }
          J && J(a, L, P),
            a === "focusout" &&
              (J = L._wrapperState) &&
              J.controlled &&
              L.type === "number" &&
              wi(L, "number", L.value);
        }
        switch (((J = P ? er(P) : window), a)) {
          case "focusin":
            (vc(J) || J.contentEditable === "true") &&
              ((Yo = J), (Yi = P), (Ur = null));
            break;
          case "focusout":
            Ur = Yi = Yo = null;
            break;
          case "mousedown":
            Qi = !0;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            (Qi = !1), Lc(R, i, A);
            break;
          case "selectionchange":
            if (ev) break;
          case "keydown":
          case "keyup":
            Lc(R, i, A);
        }
        var z;
        if (ji)
          e: {
            switch (a) {
              case "compositionstart":
                var q = "onCompositionStart";
                break e;
              case "compositionend":
                q = "onCompositionEnd";
                break e;
              case "compositionupdate":
                q = "onCompositionUpdate";
                break e;
            }
            q = void 0;
          }
        else
          qo
            ? yc(a, i) && (q = "onCompositionEnd")
            : a === "keydown" &&
              i.keyCode === 229 &&
              (q = "onCompositionStart");
        q &&
          (gc &&
            i.locale !== "ko" &&
            (qo || q !== "onCompositionStart"
              ? q === "onCompositionEnd" && qo && (z = sc())
              : ((Ua = A),
                (Vi = "value" in Ua ? Ua.value : Ua.textContent),
                (qo = !0))),
          (J = Xt(P, q)),
          0 < J.length &&
            ((q = new cc(q, a, null, i, A)),
            R.push({ event: q, listeners: J }),
            z ? (q.data = z) : ((z = fc(i)), z !== null && (q.data = z)))),
          (z = _f ? Kf(a, i) : Jf(a, i)) &&
            ((P = Xt(P, "onBeforeInput")),
            0 < P.length &&
              ((A = new cc("onBeforeInput", "beforeinput", null, i, A)),
              R.push({ event: A, listeners: P }),
              (A.data = z)));
      }
      Tc(R, r);
    });
  }
  function Qr(a, r, i) {
    return { instance: a, listener: r, currentTarget: i };
  }
  function Xt(a, r) {
    for (var i = r + "Capture", u = []; a !== null; ) {
      var c = a,
        h = c.stateNode;
      c.tag === 5 &&
        h !== null &&
        ((c = h),
        (h = Rr(a, i)),
        h != null && u.unshift(Qr(a, h, c)),
        (h = Rr(a, r)),
        h != null && u.push(Qr(a, h, c))),
        (a = a.return);
    }
    return u;
  }
  function Zo(a) {
    if (a === null) return null;
    do a = a.return;
    while (a && a.tag !== 5);
    return a || null;
  }
  function xc(a, r, i, u, c) {
    for (var h = r._reactName, p = []; i !== null && i !== u; ) {
      var C = i,
        k = C.alternate,
        P = C.stateNode;
      if (k !== null && k === u) break;
      C.tag === 5 &&
        P !== null &&
        ((C = P),
        c
          ? ((k = Rr(i, h)), k != null && p.unshift(Qr(i, k, C)))
          : c || ((k = Rr(i, h)), k != null && p.push(Qr(i, k, C)))),
        (i = i.return);
    }
    p.length !== 0 && a.push({ event: r, listeners: p });
  }
  var rv = /\r\n?/g,
    tv = /\u0000|\uFFFD/g;
  function Vc(a) {
    return (typeof a == "string" ? a : "" + a)
      .replace(
        rv,
        `
`
      )
      .replace(tv, "");
  }
  function el(a, r, i) {
    if (((r = Vc(r)), Vc(a) !== r && i)) throw Error(o(425));
  }
  function nl() {}
  var os = null,
    rs = null;
  function ts(a, r) {
    return (
      a === "textarea" ||
      a === "noscript" ||
      typeof r.children == "string" ||
      typeof r.children == "number" ||
      (typeof r.dangerouslySetInnerHTML == "object" &&
        r.dangerouslySetInnerHTML !== null &&
        r.dangerouslySetInnerHTML.__html != null)
    );
  }
  var ls = typeof setTimeout == "function" ? setTimeout : void 0,
    lv = typeof clearTimeout == "function" ? clearTimeout : void 0,
    Ic = typeof Promise == "function" ? Promise : void 0,
    iv =
      typeof queueMicrotask == "function"
        ? queueMicrotask
        : typeof Ic != "undefined"
        ? function (a) {
            return Ic.resolve(null).then(a).catch(sv);
          }
        : ls;
  function sv(a) {
    setTimeout(function () {
      throw a;
    });
  }
  function is(a, r) {
    var i = r,
      u = 0;
    do {
      var c = i.nextSibling;
      if ((a.removeChild(i), c && c.nodeType === 8))
        if (((i = c.data), i === "/$")) {
          if (u === 0) {
            a.removeChild(c), Ir(r);
            return;
          }
          u--;
        } else (i !== "$" && i !== "$?" && i !== "$!") || u++;
      i = c;
    } while (i);
    Ir(r);
  }
  function Ya(a) {
    for (; a != null; a = a.nextSibling) {
      var r = a.nodeType;
      if (r === 1 || r === 3) break;
      if (r === 8) {
        if (((r = a.data), r === "$" || r === "$!" || r === "$?")) break;
        if (r === "/$") return null;
      }
    }
    return a;
  }
  function _c(a) {
    a = a.previousSibling;
    for (var r = 0; a; ) {
      if (a.nodeType === 8) {
        var i = a.data;
        if (i === "$" || i === "$!" || i === "$?") {
          if (r === 0) return a;
          r--;
        } else i === "/$" && r++;
      }
      a = a.previousSibling;
    }
    return null;
  }
  var Xo = Math.random().toString(36).slice(2),
    fa = "__reactFiber$" + Xo,
    Zr = "__reactProps$" + Xo,
    Ma = "__reactContainer$" + Xo,
    ss = "__reactEvents$" + Xo,
    uv = "__reactListeners$" + Xo,
    dv = "__reactHandles$" + Xo;
  function ko(a) {
    var r = a[fa];
    if (r) return r;
    for (var i = a.parentNode; i; ) {
      if ((r = i[Ma] || i[fa])) {
        if (
          ((i = r.alternate),
          r.child !== null || (i !== null && i.child !== null))
        )
          for (a = _c(a); a !== null; ) {
            if ((i = a[fa])) return i;
            a = _c(a);
          }
        return r;
      }
      (a = i), (i = a.parentNode);
    }
    return null;
  }
  function Xr(a) {
    return (
      (a = a[fa] || a[Ma]),
      !a || (a.tag !== 5 && a.tag !== 6 && a.tag !== 13 && a.tag !== 3)
        ? null
        : a
    );
  }
  function er(a) {
    if (a.tag === 5 || a.tag === 6) return a.stateNode;
    throw Error(o(33));
  }
  function al(a) {
    return a[Zr] || null;
  }
  var us = [],
    nr = -1;
  function Qa(a) {
    return { current: a };
  }
  function be(a) {
    0 > nr || ((a.current = us[nr]), (us[nr] = null), nr--);
  }
  function Ce(a, r) {
    nr++, (us[nr] = a.current), (a.current = r);
  }
  var Za = {},
    un = Qa(Za),
    Bn = Qa(!1),
    wo = Za;
  function ar(a, r) {
    var i = a.type.contextTypes;
    if (!i) return Za;
    var u = a.stateNode;
    if (u && u.__reactInternalMemoizedUnmaskedChildContext === r)
      return u.__reactInternalMemoizedMaskedChildContext;
    var c = {},
      h;
    for (h in i) c[h] = r[h];
    return (
      u &&
        ((a = a.stateNode),
        (a.__reactInternalMemoizedUnmaskedChildContext = r),
        (a.__reactInternalMemoizedMaskedChildContext = c)),
      c
    );
  }
  function Pn(a) {
    return (a = a.childContextTypes), a != null;
  }
  function ol() {
    be(Bn), be(un);
  }
  function Kc(a, r, i) {
    if (un.current !== Za) throw Error(o(168));
    Ce(un, r), Ce(Bn, i);
  }
  function Jc(a, r, i) {
    var u = a.stateNode;
    if (((r = r.childContextTypes), typeof u.getChildContext != "function"))
      return i;
    u = u.getChildContext();
    for (var c in u) if (!(c in r)) throw Error(o(108, ve(a) || "Unknown", c));
    return V({}, i, u);
  }
  function rl(a) {
    return (
      (a =
        ((a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext) ||
        Za),
      (wo = un.current),
      Ce(un, a),
      Ce(Bn, Bn.current),
      !0
    );
  }
  function zc(a, r, i) {
    var u = a.stateNode;
    if (!u) throw Error(o(169));
    i
      ? ((a = Jc(a, r, wo)),
        (u.__reactInternalMemoizedMergedChildContext = a),
        be(Bn),
        be(un),
        Ce(un, a))
      : be(Bn),
      Ce(Bn, i);
  }
  var Ba = null,
    tl = !1,
    ds = !1;
  function jc(a) {
    Ba === null ? (Ba = [a]) : Ba.push(a);
  }
  function cv(a) {
    (tl = !0), jc(a);
  }
  function Xa() {
    if (!ds && Ba !== null) {
      ds = !0;
      var a = 0,
        r = pe;
      try {
        var i = Ba;
        for (pe = 1; a < i.length; a++) {
          var u = i[a];
          do u = u(!0);
          while (u !== null);
        }
        (Ba = null), (tl = !1);
      } catch (c) {
        throw (Ba !== null && (Ba = Ba.slice(a + 1)), Ud(Ri, Xa), c);
      } finally {
        (pe = r), (ds = !1);
      }
    }
    return null;
  }
  var or = [],
    rr = 0,
    ll = null,
    il = 0,
    jn = [],
    $n = 0,
    So = null,
    Pa = 1,
    Ha = "";
  function bo(a, r) {
    (or[rr++] = il), (or[rr++] = ll), (ll = a), (il = r);
  }
  function $c(a, r, i) {
    (jn[$n++] = Pa), (jn[$n++] = Ha), (jn[$n++] = So), (So = a);
    var u = Pa;
    a = Ha;
    var c = 32 - aa(u) - 1;
    (u &= ~(1 << c)), (i += 1);
    var h = 32 - aa(r) + c;
    if (30 < h) {
      var p = c - (c % 5);
      (h = (u & ((1 << p) - 1)).toString(32)),
        (u >>= p),
        (c -= p),
        (Pa = (1 << (32 - aa(r) + c)) | (i << c) | u),
        (Ha = h + a);
    } else (Pa = (1 << h) | (i << c) | u), (Ha = a);
  }
  function cs(a) {
    a.return !== null && (bo(a, 1), $c(a, 1, 0));
  }
  function hs(a) {
    for (; a === ll; )
      (ll = or[--rr]), (or[rr] = null), (il = or[--rr]), (or[rr] = null);
    for (; a === So; )
      (So = jn[--$n]),
        (jn[$n] = null),
        (Ha = jn[--$n]),
        (jn[$n] = null),
        (Pa = jn[--$n]),
        (jn[$n] = null);
  }
  var En = null,
    Fn = null,
    Pe = !1,
    ra = null;
  function Uc(a, r) {
    var i = Qn(5, null, null, 0);
    (i.elementType = "DELETED"),
      (i.stateNode = r),
      (i.return = a),
      (r = a.deletions),
      r === null ? ((a.deletions = [i]), (a.flags |= 16)) : r.push(i);
  }
  function qc(a, r) {
    switch (a.tag) {
      case 5:
        var i = a.type;
        return (
          (r =
            r.nodeType !== 1 || i.toLowerCase() !== r.nodeName.toLowerCase()
              ? null
              : r),
          r !== null
            ? ((a.stateNode = r), (En = a), (Fn = Ya(r.firstChild)), !0)
            : !1
        );
      case 6:
        return (
          (r = a.pendingProps === "" || r.nodeType !== 3 ? null : r),
          r !== null ? ((a.stateNode = r), (En = a), (Fn = null), !0) : !1
        );
      case 13:
        return (
          (r = r.nodeType !== 8 ? null : r),
          r !== null
            ? ((i = So !== null ? { id: Pa, overflow: Ha } : null),
              (a.memoizedState = {
                dehydrated: r,
                treeContext: i,
                retryLane: 1073741824,
              }),
              (i = Qn(18, null, null, 0)),
              (i.stateNode = r),
              (i.return = a),
              (a.child = i),
              (En = a),
              (Fn = null),
              !0)
            : !1
        );
      default:
        return !1;
    }
  }
  function gs(a) {
    return (a.mode & 1) !== 0 && (a.flags & 128) === 0;
  }
  function ms(a) {
    if (Pe) {
      var r = Fn;
      if (r) {
        var i = r;
        if (!qc(a, r)) {
          if (gs(a)) throw Error(o(418));
          r = Ya(i.nextSibling);
          var u = En;
          r && qc(a, r)
            ? Uc(u, i)
            : ((a.flags = (a.flags & -4097) | 2), (Pe = !1), (En = a));
        }
      } else {
        if (gs(a)) throw Error(o(418));
        (a.flags = (a.flags & -4097) | 2), (Pe = !1), (En = a);
      }
    }
  }
  function Yc(a) {
    for (
      a = a.return;
      a !== null && a.tag !== 5 && a.tag !== 3 && a.tag !== 13;

    )
      a = a.return;
    En = a;
  }
  function sl(a) {
    if (a !== En) return !1;
    if (!Pe) return Yc(a), (Pe = !0), !1;
    var r;
    if (
      ((r = a.tag !== 3) &&
        !(r = a.tag !== 5) &&
        ((r = a.type),
        (r = r !== "head" && r !== "body" && !ts(a.type, a.memoizedProps))),
      r && (r = Fn))
    ) {
      if (gs(a)) throw (Qc(), Error(o(418)));
      for (; r; ) Uc(a, r), (r = Ya(r.nextSibling));
    }
    if ((Yc(a), a.tag === 13)) {
      if (((a = a.memoizedState), (a = a !== null ? a.dehydrated : null), !a))
        throw Error(o(317));
      e: {
        for (a = a.nextSibling, r = 0; a; ) {
          if (a.nodeType === 8) {
            var i = a.data;
            if (i === "/$") {
              if (r === 0) {
                Fn = Ya(a.nextSibling);
                break e;
              }
              r--;
            } else (i !== "$" && i !== "$!" && i !== "$?") || r++;
          }
          a = a.nextSibling;
        }
        Fn = null;
      }
    } else Fn = En ? Ya(a.stateNode.nextSibling) : null;
    return !0;
  }
  function Qc() {
    for (var a = Fn; a; ) a = Ya(a.nextSibling);
  }
  function tr() {
    (Fn = En = null), (Pe = !1);
  }
  function ps(a) {
    ra === null ? (ra = [a]) : ra.push(a);
  }
  var hv = Oe.ReactCurrentBatchConfig;
  function et(a, r, i) {
    if (
      ((a = i.ref),
      a !== null && typeof a != "function" && typeof a != "object")
    ) {
      if (i._owner) {
        if (((i = i._owner), i)) {
          if (i.tag !== 1) throw Error(o(309));
          var u = i.stateNode;
        }
        if (!u) throw Error(o(147, a));
        var c = u,
          h = "" + a;
        return r !== null &&
          r.ref !== null &&
          typeof r.ref == "function" &&
          r.ref._stringRef === h
          ? r.ref
          : ((r = function (p) {
              var C = c.refs;
              p === null ? delete C[h] : (C[h] = p);
            }),
            (r._stringRef = h),
            r);
      }
      if (typeof a != "string") throw Error(o(284));
      if (!i._owner) throw Error(o(290, a));
    }
    return a;
  }
  function ul(a, r) {
    throw (
      ((a = Object.prototype.toString.call(r)),
      Error(
        o(
          31,
          a === "[object Object]"
            ? "object with keys {" + Object.keys(r).join(", ") + "}"
            : a
        )
      ))
    );
  }
  function Zc(a) {
    var r = a._init;
    return r(a._payload);
  }
  function Xc(a) {
    function r(b, w) {
      if (a) {
        var B = b.deletions;
        B === null ? ((b.deletions = [w]), (b.flags |= 16)) : B.push(w);
      }
    }
    function i(b, w) {
      if (!a) return null;
      for (; w !== null; ) r(b, w), (w = w.sibling);
      return null;
    }
    function u(b, w) {
      for (b = new Map(); w !== null; )
        w.key !== null ? b.set(w.key, w) : b.set(w.index, w), (w = w.sibling);
      return b;
    }
    function c(b, w) {
      return (b = io(b, w)), (b.index = 0), (b.sibling = null), b;
    }
    function h(b, w, B) {
      return (
        (b.index = B),
        a
          ? ((B = b.alternate),
            B !== null
              ? ((B = B.index), B < w ? ((b.flags |= 2), w) : B)
              : ((b.flags |= 2), w))
          : ((b.flags |= 1048576), w)
      );
    }
    function p(b) {
      return a && b.alternate === null && (b.flags |= 2), b;
    }
    function C(b, w, B, E) {
      return w === null || w.tag !== 6
        ? ((w = lu(B, b.mode, E)), (w.return = b), w)
        : ((w = c(w, B)), (w.return = b), w);
    }
    function k(b, w, B, E) {
      var K = B.type;
      return K === je
        ? A(b, w, B.props.children, E, B.key)
        : w !== null &&
          (w.elementType === K ||
            (typeof K == "object" &&
              K !== null &&
              K.$$typeof === nn &&
              Zc(K) === w.type))
        ? ((E = c(w, B.props)), (E.ref = et(b, w, B)), (E.return = b), E)
        : ((E = Nl(B.type, B.key, B.props, null, b.mode, E)),
          (E.ref = et(b, w, B)),
          (E.return = b),
          E);
    }
    function P(b, w, B, E) {
      return w === null ||
        w.tag !== 4 ||
        w.stateNode.containerInfo !== B.containerInfo ||
        w.stateNode.implementation !== B.implementation
        ? ((w = iu(B, b.mode, E)), (w.return = b), w)
        : ((w = c(w, B.children || [])), (w.return = b), w);
    }
    function A(b, w, B, E, K) {
      return w === null || w.tag !== 7
        ? ((w = Go(B, b.mode, E, K)), (w.return = b), w)
        : ((w = c(w, B)), (w.return = b), w);
    }
    function R(b, w, B) {
      if ((typeof w == "string" && w !== "") || typeof w == "number")
        return (w = lu("" + w, b.mode, B)), (w.return = b), w;
      if (typeof w == "object" && w !== null) {
        switch (w.$$typeof) {
          case Gn:
            return (
              (B = Nl(w.type, w.key, w.props, null, b.mode, B)),
              (B.ref = et(b, null, w)),
              (B.return = b),
              B
            );
          case Ke:
            return (w = iu(w, b.mode, B)), (w.return = b), w;
          case nn:
            var E = w._init;
            return R(b, E(w._payload), B);
        }
        if (Wr(w) || $(w))
          return (w = Go(w, b.mode, B, null)), (w.return = b), w;
        ul(b, w);
      }
      return null;
    }
    function L(b, w, B, E) {
      var K = w !== null ? w.key : null;
      if ((typeof B == "string" && B !== "") || typeof B == "number")
        return K !== null ? null : C(b, w, "" + B, E);
      if (typeof B == "object" && B !== null) {
        switch (B.$$typeof) {
          case Gn:
            return B.key === K ? k(b, w, B, E) : null;
          case Ke:
            return B.key === K ? P(b, w, B, E) : null;
          case nn:
            return (K = B._init), L(b, w, K(B._payload), E);
        }
        if (Wr(B) || $(B)) return K !== null ? null : A(b, w, B, E, null);
        ul(b, B);
      }
      return null;
    }
    function T(b, w, B, E, K) {
      if ((typeof E == "string" && E !== "") || typeof E == "number")
        return (b = b.get(B) || null), C(w, b, "" + E, K);
      if (typeof E == "object" && E !== null) {
        switch (E.$$typeof) {
          case Gn:
            return (
              (b = b.get(E.key === null ? B : E.key) || null), k(w, b, E, K)
            );
          case Ke:
            return (
              (b = b.get(E.key === null ? B : E.key) || null), P(w, b, E, K)
            );
          case nn:
            var J = E._init;
            return T(b, w, B, J(E._payload), K);
        }
        if (Wr(E) || $(E)) return (b = b.get(B) || null), A(w, b, E, K, null);
        ul(w, E);
      }
      return null;
    }
    function I(b, w, B, E) {
      for (
        var K = null, J = null, z = w, q = (w = 0), qe = null;
        z !== null && q < B.length;
        q++
      ) {
        z.index > q ? ((qe = z), (z = null)) : (qe = z.sibling);
        var de = L(b, z, B[q], E);
        if (de === null) {
          z === null && (z = qe);
          break;
        }
        a && z && de.alternate === null && r(b, z),
          (w = h(de, w, q)),
          J === null ? (K = de) : (J.sibling = de),
          (J = de),
          (z = qe);
      }
      if (q === B.length) return i(b, z), Pe && bo(b, q), K;
      if (z === null) {
        for (; q < B.length; q++)
          (z = R(b, B[q], E)),
            z !== null &&
              ((w = h(z, w, q)),
              J === null ? (K = z) : (J.sibling = z),
              (J = z));
        return Pe && bo(b, q), K;
      }
      for (z = u(b, z); q < B.length; q++)
        (qe = T(z, b, q, B[q], E)),
          qe !== null &&
            (a &&
              qe.alternate !== null &&
              z.delete(qe.key === null ? q : qe.key),
            (w = h(qe, w, q)),
            J === null ? (K = qe) : (J.sibling = qe),
            (J = qe));
      return (
        a &&
          z.forEach(function (so) {
            return r(b, so);
          }),
        Pe && bo(b, q),
        K
      );
    }
    function _(b, w, B, E) {
      var K = $(B);
      if (typeof K != "function") throw Error(o(150));
      if (((B = K.call(B)), B == null)) throw Error(o(151));
      for (
        var J = (K = null), z = w, q = (w = 0), qe = null, de = B.next();
        z !== null && !de.done;
        q++, de = B.next()
      ) {
        z.index > q ? ((qe = z), (z = null)) : (qe = z.sibling);
        var so = L(b, z, de.value, E);
        if (so === null) {
          z === null && (z = qe);
          break;
        }
        a && z && so.alternate === null && r(b, z),
          (w = h(so, w, q)),
          J === null ? (K = so) : (J.sibling = so),
          (J = so),
          (z = qe);
      }
      if (de.done) return i(b, z), Pe && bo(b, q), K;
      if (z === null) {
        for (; !de.done; q++, de = B.next())
          (de = R(b, de.value, E)),
            de !== null &&
              ((w = h(de, w, q)),
              J === null ? (K = de) : (J.sibling = de),
              (J = de));
        return Pe && bo(b, q), K;
      }
      for (z = u(b, z); !de.done; q++, de = B.next())
        (de = T(z, b, q, de.value, E)),
          de !== null &&
            (a &&
              de.alternate !== null &&
              z.delete(de.key === null ? q : de.key),
            (w = h(de, w, q)),
            J === null ? (K = de) : (J.sibling = de),
            (J = de));
      return (
        a &&
          z.forEach(function (Jv) {
            return r(b, Jv);
          }),
        Pe && bo(b, q),
        K
      );
    }
    function De(b, w, B, E) {
      if (
        (typeof B == "object" &&
          B !== null &&
          B.type === je &&
          B.key === null &&
          (B = B.props.children),
        typeof B == "object" && B !== null)
      ) {
        switch (B.$$typeof) {
          case Gn:
            e: {
              for (var K = B.key, J = w; J !== null; ) {
                if (J.key === K) {
                  if (((K = B.type), K === je)) {
                    if (J.tag === 7) {
                      i(b, J.sibling),
                        (w = c(J, B.props.children)),
                        (w.return = b),
                        (b = w);
                      break e;
                    }
                  } else if (
                    J.elementType === K ||
                    (typeof K == "object" &&
                      K !== null &&
                      K.$$typeof === nn &&
                      Zc(K) === J.type)
                  ) {
                    i(b, J.sibling),
                      (w = c(J, B.props)),
                      (w.ref = et(b, J, B)),
                      (w.return = b),
                      (b = w);
                    break e;
                  }
                  i(b, J);
                  break;
                } else r(b, J);
                J = J.sibling;
              }
              B.type === je
                ? ((w = Go(B.props.children, b.mode, E, B.key)),
                  (w.return = b),
                  (b = w))
                : ((E = Nl(B.type, B.key, B.props, null, b.mode, E)),
                  (E.ref = et(b, w, B)),
                  (E.return = b),
                  (b = E));
            }
            return p(b);
          case Ke:
            e: {
              for (J = B.key; w !== null; ) {
                if (w.key === J)
                  if (
                    w.tag === 4 &&
                    w.stateNode.containerInfo === B.containerInfo &&
                    w.stateNode.implementation === B.implementation
                  ) {
                    i(b, w.sibling),
                      (w = c(w, B.children || [])),
                      (w.return = b),
                      (b = w);
                    break e;
                  } else {
                    i(b, w);
                    break;
                  }
                else r(b, w);
                w = w.sibling;
              }
              (w = iu(B, b.mode, E)), (w.return = b), (b = w);
            }
            return p(b);
          case nn:
            return (J = B._init), De(b, w, J(B._payload), E);
        }
        if (Wr(B)) return I(b, w, B, E);
        if ($(B)) return _(b, w, B, E);
        ul(b, B);
      }
      return (typeof B == "string" && B !== "") || typeof B == "number"
        ? ((B = "" + B),
          w !== null && w.tag === 6
            ? (i(b, w.sibling), (w = c(w, B)), (w.return = b), (b = w))
            : (i(b, w), (w = lu(B, b.mode, E)), (w.return = b), (b = w)),
          p(b))
        : i(b, w);
    }
    return De;
  }
  var lr = Xc(!0),
    eh = Xc(!1),
    dl = Qa(null),
    cl = null,
    ir = null,
    ys = null;
  function fs() {
    ys = ir = cl = null;
  }
  function vs(a) {
    var r = dl.current;
    be(dl), (a._currentValue = r);
  }
  function Cs(a, r, i) {
    for (; a !== null; ) {
      var u = a.alternate;
      if (
        ((a.childLanes & r) !== r
          ? ((a.childLanes |= r), u !== null && (u.childLanes |= r))
          : u !== null && (u.childLanes & r) !== r && (u.childLanes |= r),
        a === i)
      )
        break;
      a = a.return;
    }
  }
  function sr(a, r) {
    (cl = a),
      (ys = ir = null),
      (a = a.dependencies),
      a !== null &&
        a.firstContext !== null &&
        (a.lanes & r && (Hn = !0), (a.firstContext = null));
  }
  function Un(a) {
    var r = a._currentValue;
    if (ys !== a)
      if (((a = { context: a, memoizedValue: r, next: null }), ir === null)) {
        if (cl === null) throw Error(o(308));
        (ir = a), (cl.dependencies = { lanes: 0, firstContext: a });
      } else ir = ir.next = a;
    return r;
  }
  var Mo = null;
  function ks(a) {
    Mo === null ? (Mo = [a]) : Mo.push(a);
  }
  function nh(a, r, i, u) {
    var c = r.interleaved;
    return (
      c === null ? ((i.next = i), ks(r)) : ((i.next = c.next), (c.next = i)),
      (r.interleaved = i),
      La(a, u)
    );
  }
  function La(a, r) {
    a.lanes |= r;
    var i = a.alternate;
    for (i !== null && (i.lanes |= r), i = a, a = a.return; a !== null; )
      (a.childLanes |= r),
        (i = a.alternate),
        i !== null && (i.childLanes |= r),
        (i = a),
        (a = a.return);
    return i.tag === 3 ? i.stateNode : null;
  }
  var eo = !1;
  function ws(a) {
    a.updateQueue = {
      baseState: a.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: { pending: null, interleaved: null, lanes: 0 },
      effects: null,
    };
  }
  function ah(a, r) {
    (a = a.updateQueue),
      r.updateQueue === a &&
        (r.updateQueue = {
          baseState: a.baseState,
          firstBaseUpdate: a.firstBaseUpdate,
          lastBaseUpdate: a.lastBaseUpdate,
          shared: a.shared,
          effects: a.effects,
        });
  }
  function Wa(a, r) {
    return {
      eventTime: a,
      lane: r,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
    };
  }
  function no(a, r, i) {
    var u = a.updateQueue;
    if (u === null) return null;
    if (((u = u.shared), le & 2)) {
      var c = u.pending;
      return (
        c === null ? (r.next = r) : ((r.next = c.next), (c.next = r)),
        (u.pending = r),
        La(a, i)
      );
    }
    return (
      (c = u.interleaved),
      c === null ? ((r.next = r), ks(u)) : ((r.next = c.next), (c.next = r)),
      (u.interleaved = r),
      La(a, i)
    );
  }
  function hl(a, r, i) {
    if (
      ((r = r.updateQueue), r !== null && ((r = r.shared), (i & 4194240) !== 0))
    ) {
      var u = r.lanes;
      (u &= a.pendingLanes), (i |= u), (r.lanes = i), Fi(a, i);
    }
  }
  function oh(a, r) {
    var i = a.updateQueue,
      u = a.alternate;
    if (u !== null && ((u = u.updateQueue), i === u)) {
      var c = null,
        h = null;
      if (((i = i.firstBaseUpdate), i !== null)) {
        do {
          var p = {
            eventTime: i.eventTime,
            lane: i.lane,
            tag: i.tag,
            payload: i.payload,
            callback: i.callback,
            next: null,
          };
          h === null ? (c = h = p) : (h = h.next = p), (i = i.next);
        } while (i !== null);
        h === null ? (c = h = r) : (h = h.next = r);
      } else c = h = r;
      (i = {
        baseState: u.baseState,
        firstBaseUpdate: c,
        lastBaseUpdate: h,
        shared: u.shared,
        effects: u.effects,
      }),
        (a.updateQueue = i);
      return;
    }
    (a = i.lastBaseUpdate),
      a === null ? (i.firstBaseUpdate = r) : (a.next = r),
      (i.lastBaseUpdate = r);
  }
  function gl(a, r, i, u) {
    var c = a.updateQueue;
    eo = !1;
    var h = c.firstBaseUpdate,
      p = c.lastBaseUpdate,
      C = c.shared.pending;
    if (C !== null) {
      c.shared.pending = null;
      var k = C,
        P = k.next;
      (k.next = null), p === null ? (h = P) : (p.next = P), (p = k);
      var A = a.alternate;
      A !== null &&
        ((A = A.updateQueue),
        (C = A.lastBaseUpdate),
        C !== p &&
          (C === null ? (A.firstBaseUpdate = P) : (C.next = P),
          (A.lastBaseUpdate = k)));
    }
    if (h !== null) {
      var R = c.baseState;
      (p = 0), (A = P = k = null), (C = h);
      do {
        var L = C.lane,
          T = C.eventTime;
        if ((u & L) === L) {
          A !== null &&
            (A = A.next =
              {
                eventTime: T,
                lane: 0,
                tag: C.tag,
                payload: C.payload,
                callback: C.callback,
                next: null,
              });
          e: {
            var I = a,
              _ = C;
            switch (((L = r), (T = i), _.tag)) {
              case 1:
                if (((I = _.payload), typeof I == "function")) {
                  R = I.call(T, R, L);
                  break e;
                }
                R = I;
                break e;
              case 3:
                I.flags = (I.flags & -65537) | 128;
              case 0:
                if (
                  ((I = _.payload),
                  (L = typeof I == "function" ? I.call(T, R, L) : I),
                  L == null)
                )
                  break e;
                R = V({}, R, L);
                break e;
              case 2:
                eo = !0;
            }
          }
          C.callback !== null &&
            C.lane !== 0 &&
            ((a.flags |= 64),
            (L = c.effects),
            L === null ? (c.effects = [C]) : L.push(C));
        } else
          (T = {
            eventTime: T,
            lane: L,
            tag: C.tag,
            payload: C.payload,
            callback: C.callback,
            next: null,
          }),
            A === null ? ((P = A = T), (k = R)) : (A = A.next = T),
            (p |= L);
        if (((C = C.next), C === null)) {
          if (((C = c.shared.pending), C === null)) break;
          (L = C),
            (C = L.next),
            (L.next = null),
            (c.lastBaseUpdate = L),
            (c.shared.pending = null);
        }
      } while (!0);
      if (
        (A === null && (k = R),
        (c.baseState = k),
        (c.firstBaseUpdate = P),
        (c.lastBaseUpdate = A),
        (r = c.shared.interleaved),
        r !== null)
      ) {
        c = r;
        do (p |= c.lane), (c = c.next);
        while (c !== r);
      } else h === null && (c.shared.lanes = 0);
      (Ho |= p), (a.lanes = p), (a.memoizedState = R);
    }
  }
  function rh(a, r, i) {
    if (((a = r.effects), (r.effects = null), a !== null))
      for (r = 0; r < a.length; r++) {
        var u = a[r],
          c = u.callback;
        if (c !== null) {
          if (((u.callback = null), (u = i), typeof c != "function"))
            throw Error(o(191, c));
          c.call(u);
        }
      }
  }
  var nt = {},
    va = Qa(nt),
    at = Qa(nt),
    ot = Qa(nt);
  function Bo(a) {
    if (a === nt) throw Error(o(174));
    return a;
  }
  function Ss(a, r) {
    switch ((Ce(ot, r), Ce(at, a), Ce(va, nt), (a = r.nodeType), a)) {
      case 9:
      case 11:
        r = (r = r.documentElement) ? r.namespaceURI : bi(null, "");
        break;
      default:
        (a = a === 8 ? r.parentNode : r),
          (r = a.namespaceURI || null),
          (a = a.tagName),
          (r = bi(r, a));
    }
    be(va), Ce(va, r);
  }
  function ur() {
    be(va), be(at), be(ot);
  }
  function th(a) {
    Bo(ot.current);
    var r = Bo(va.current),
      i = bi(r, a.type);
    r !== i && (Ce(at, a), Ce(va, i));
  }
  function bs(a) {
    at.current === a && (be(va), be(at));
  }
  var Ae = Qa(0);
  function ml(a) {
    for (var r = a; r !== null; ) {
      if (r.tag === 13) {
        var i = r.memoizedState;
        if (
          i !== null &&
          ((i = i.dehydrated), i === null || i.data === "$?" || i.data === "$!")
        )
          return r;
      } else if (r.tag === 19 && r.memoizedProps.revealOrder !== void 0) {
        if (r.flags & 128) return r;
      } else if (r.child !== null) {
        (r.child.return = r), (r = r.child);
        continue;
      }
      if (r === a) break;
      for (; r.sibling === null; ) {
        if (r.return === null || r.return === a) return null;
        r = r.return;
      }
      (r.sibling.return = r.return), (r = r.sibling);
    }
    return null;
  }
  var Ms = [];
  function Bs() {
    for (var a = 0; a < Ms.length; a++)
      Ms[a]._workInProgressVersionPrimary = null;
    Ms.length = 0;
  }
  var pl = Oe.ReactCurrentDispatcher,
    Ps = Oe.ReactCurrentBatchConfig,
    Po = 0,
    Ge = null,
    Je = null,
    $e = null,
    yl = !1,
    rt = !1,
    tt = 0,
    gv = 0;
  function dn() {
    throw Error(o(321));
  }
  function Hs(a, r) {
    if (r === null) return !1;
    for (var i = 0; i < r.length && i < a.length; i++)
      if (!oa(a[i], r[i])) return !1;
    return !0;
  }
  function Ls(a, r, i, u, c, h) {
    if (
      ((Po = h),
      (Ge = r),
      (r.memoizedState = null),
      (r.updateQueue = null),
      (r.lanes = 0),
      (pl.current = a === null || a.memoizedState === null ? fv : vv),
      (a = i(u, c)),
      rt)
    ) {
      h = 0;
      do {
        if (((rt = !1), (tt = 0), 25 <= h)) throw Error(o(301));
        (h += 1),
          ($e = Je = null),
          (r.updateQueue = null),
          (pl.current = Cv),
          (a = i(u, c));
      } while (rt);
    }
    if (
      ((pl.current = Cl),
      (r = Je !== null && Je.next !== null),
      (Po = 0),
      ($e = Je = Ge = null),
      (yl = !1),
      r)
    )
      throw Error(o(300));
    return a;
  }
  function Ws() {
    var a = tt !== 0;
    return (tt = 0), a;
  }
  function Ca() {
    var a = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null,
    };
    return $e === null ? (Ge.memoizedState = $e = a) : ($e = $e.next = a), $e;
  }
  function qn() {
    if (Je === null) {
      var a = Ge.alternate;
      a = a !== null ? a.memoizedState : null;
    } else a = Je.next;
    var r = $e === null ? Ge.memoizedState : $e.next;
    if (r !== null) ($e = r), (Je = a);
    else {
      if (a === null) throw Error(o(310));
      (Je = a),
        (a = {
          memoizedState: Je.memoizedState,
          baseState: Je.baseState,
          baseQueue: Je.baseQueue,
          queue: Je.queue,
          next: null,
        }),
        $e === null ? (Ge.memoizedState = $e = a) : ($e = $e.next = a);
    }
    return $e;
  }
  function lt(a, r) {
    return typeof r == "function" ? r(a) : r;
  }
  function As(a) {
    var r = qn(),
      i = r.queue;
    if (i === null) throw Error(o(311));
    i.lastRenderedReducer = a;
    var u = Je,
      c = u.baseQueue,
      h = i.pending;
    if (h !== null) {
      if (c !== null) {
        var p = c.next;
        (c.next = h.next), (h.next = p);
      }
      (u.baseQueue = c = h), (i.pending = null);
    }
    if (c !== null) {
      (h = c.next), (u = u.baseState);
      var C = (p = null),
        k = null,
        P = h;
      do {
        var A = P.lane;
        if ((Po & A) === A)
          k !== null &&
            (k = k.next =
              {
                lane: 0,
                action: P.action,
                hasEagerState: P.hasEagerState,
                eagerState: P.eagerState,
                next: null,
              }),
            (u = P.hasEagerState ? P.eagerState : a(u, P.action));
        else {
          var R = {
            lane: A,
            action: P.action,
            hasEagerState: P.hasEagerState,
            eagerState: P.eagerState,
            next: null,
          };
          k === null ? ((C = k = R), (p = u)) : (k = k.next = R),
            (Ge.lanes |= A),
            (Ho |= A);
        }
        P = P.next;
      } while (P !== null && P !== h);
      k === null ? (p = u) : (k.next = C),
        oa(u, r.memoizedState) || (Hn = !0),
        (r.memoizedState = u),
        (r.baseState = p),
        (r.baseQueue = k),
        (i.lastRenderedState = u);
    }
    if (((a = i.interleaved), a !== null)) {
      c = a;
      do (h = c.lane), (Ge.lanes |= h), (Ho |= h), (c = c.next);
      while (c !== a);
    } else c === null && (i.lanes = 0);
    return [r.memoizedState, i.dispatch];
  }
  function Gs(a) {
    var r = qn(),
      i = r.queue;
    if (i === null) throw Error(o(311));
    i.lastRenderedReducer = a;
    var u = i.dispatch,
      c = i.pending,
      h = r.memoizedState;
    if (c !== null) {
      i.pending = null;
      var p = (c = c.next);
      do (h = a(h, p.action)), (p = p.next);
      while (p !== c);
      oa(h, r.memoizedState) || (Hn = !0),
        (r.memoizedState = h),
        r.baseQueue === null && (r.baseState = h),
        (i.lastRenderedState = h);
    }
    return [h, u];
  }
  function lh() {}
  function ih(a, r) {
    var i = Ge,
      u = qn(),
      c = r(),
      h = !oa(u.memoizedState, c);
    if (
      (h && ((u.memoizedState = c), (Hn = !0)),
      (u = u.queue),
      Rs(dh.bind(null, i, u, a), [a]),
      u.getSnapshot !== r || h || ($e !== null && $e.memoizedState.tag & 1))
    ) {
      if (
        ((i.flags |= 2048),
        it(9, uh.bind(null, i, u, c, r), void 0, null),
        Ue === null)
      )
        throw Error(o(349));
      Po & 30 || sh(i, r, c);
    }
    return c;
  }
  function sh(a, r, i) {
    (a.flags |= 16384),
      (a = { getSnapshot: r, value: i }),
      (r = Ge.updateQueue),
      r === null
        ? ((r = { lastEffect: null, stores: null }),
          (Ge.updateQueue = r),
          (r.stores = [a]))
        : ((i = r.stores), i === null ? (r.stores = [a]) : i.push(a));
  }
  function uh(a, r, i, u) {
    (r.value = i), (r.getSnapshot = u), ch(r) && hh(a);
  }
  function dh(a, r, i) {
    return i(function () {
      ch(r) && hh(a);
    });
  }
  function ch(a) {
    var r = a.getSnapshot;
    a = a.value;
    try {
      var i = r();
      return !oa(a, i);
    } catch (u) {
      return !0;
    }
  }
  function hh(a) {
    var r = La(a, 1);
    r !== null && sa(r, a, 1, -1);
  }
  function gh(a) {
    var r = Ca();
    return (
      typeof a == "function" && (a = a()),
      (r.memoizedState = r.baseState = a),
      (a = {
        pending: null,
        interleaved: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: lt,
        lastRenderedState: a,
      }),
      (r.queue = a),
      (a = a.dispatch = yv.bind(null, Ge, a)),
      [r.memoizedState, a]
    );
  }
  function it(a, r, i, u) {
    return (
      (a = { tag: a, create: r, destroy: i, deps: u, next: null }),
      (r = Ge.updateQueue),
      r === null
        ? ((r = { lastEffect: null, stores: null }),
          (Ge.updateQueue = r),
          (r.lastEffect = a.next = a))
        : ((i = r.lastEffect),
          i === null
            ? (r.lastEffect = a.next = a)
            : ((u = i.next), (i.next = a), (a.next = u), (r.lastEffect = a))),
      a
    );
  }
  function mh() {
    return qn().memoizedState;
  }
  function fl(a, r, i, u) {
    var c = Ca();
    (Ge.flags |= a),
      (c.memoizedState = it(1 | r, i, void 0, u === void 0 ? null : u));
  }
  function vl(a, r, i, u) {
    var c = qn();
    u = u === void 0 ? null : u;
    var h = void 0;
    if (Je !== null) {
      var p = Je.memoizedState;
      if (((h = p.destroy), u !== null && Hs(u, p.deps))) {
        c.memoizedState = it(r, i, h, u);
        return;
      }
    }
    (Ge.flags |= a), (c.memoizedState = it(1 | r, i, h, u));
  }
  function ph(a, r) {
    return fl(8390656, 8, a, r);
  }
  function Rs(a, r) {
    return vl(2048, 8, a, r);
  }
  function yh(a, r) {
    return vl(4, 2, a, r);
  }
  function fh(a, r) {
    return vl(4, 4, a, r);
  }
  function vh(a, r) {
    if (typeof r == "function")
      return (
        (a = a()),
        r(a),
        function () {
          r(null);
        }
      );
    if (r != null)
      return (
        (a = a()),
        (r.current = a),
        function () {
          r.current = null;
        }
      );
  }
  function Ch(a, r, i) {
    return (
      (i = i != null ? i.concat([a]) : null), vl(4, 4, vh.bind(null, r, a), i)
    );
  }
  function Ns() {}
  function kh(a, r) {
    var i = qn();
    r = r === void 0 ? null : r;
    var u = i.memoizedState;
    return u !== null && r !== null && Hs(r, u[1])
      ? u[0]
      : ((i.memoizedState = [a, r]), a);
  }
  function wh(a, r) {
    var i = qn();
    r = r === void 0 ? null : r;
    var u = i.memoizedState;
    return u !== null && r !== null && Hs(r, u[1])
      ? u[0]
      : ((a = a()), (i.memoizedState = [a, r]), a);
  }
  function Sh(a, r, i) {
    return Po & 21
      ? (oa(i, r) ||
          ((i = Zd()), (Ge.lanes |= i), (Ho |= i), (a.baseState = !0)),
        r)
      : (a.baseState && ((a.baseState = !1), (Hn = !0)), (a.memoizedState = i));
  }
  function mv(a, r) {
    var i = pe;
    (pe = i !== 0 && 4 > i ? i : 4), a(!0);
    var u = Ps.transition;
    Ps.transition = {};
    try {
      a(!1), r();
    } finally {
      (pe = i), (Ps.transition = u);
    }
  }
  function bh() {
    return qn().memoizedState;
  }
  function pv(a, r, i) {
    var u = to(a);
    if (
      ((i = {
        lane: u,
        action: i,
        hasEagerState: !1,
        eagerState: null,
        next: null,
      }),
      Mh(a))
    )
      Bh(r, i);
    else if (((i = nh(a, r, i, u)), i !== null)) {
      var c = Cn();
      sa(i, a, u, c), Ph(i, r, u);
    }
  }
  function yv(a, r, i) {
    var u = to(a),
      c = {
        lane: u,
        action: i,
        hasEagerState: !1,
        eagerState: null,
        next: null,
      };
    if (Mh(a)) Bh(r, c);
    else {
      var h = a.alternate;
      if (
        a.lanes === 0 &&
        (h === null || h.lanes === 0) &&
        ((h = r.lastRenderedReducer), h !== null)
      )
        try {
          var p = r.lastRenderedState,
            C = h(p, i);
          if (((c.hasEagerState = !0), (c.eagerState = C), oa(C, p))) {
            var k = r.interleaved;
            k === null
              ? ((c.next = c), ks(r))
              : ((c.next = k.next), (k.next = c)),
              (r.interleaved = c);
            return;
          }
        } catch (P) {
        } finally {
        }
      (i = nh(a, r, c, u)),
        i !== null && ((c = Cn()), sa(i, a, u, c), Ph(i, r, u));
    }
  }
  function Mh(a) {
    var r = a.alternate;
    return a === Ge || (r !== null && r === Ge);
  }
  function Bh(a, r) {
    rt = yl = !0;
    var i = a.pending;
    i === null ? (r.next = r) : ((r.next = i.next), (i.next = r)),
      (a.pending = r);
  }
  function Ph(a, r, i) {
    if (i & 4194240) {
      var u = r.lanes;
      (u &= a.pendingLanes), (i |= u), (r.lanes = i), Fi(a, i);
    }
  }
  var Cl = {
      readContext: Un,
      useCallback: dn,
      useContext: dn,
      useEffect: dn,
      useImperativeHandle: dn,
      useInsertionEffect: dn,
      useLayoutEffect: dn,
      useMemo: dn,
      useReducer: dn,
      useRef: dn,
      useState: dn,
      useDebugValue: dn,
      useDeferredValue: dn,
      useTransition: dn,
      useMutableSource: dn,
      useSyncExternalStore: dn,
      useId: dn,
      unstable_isNewReconciler: !1,
    },
    fv = {
      readContext: Un,
      useCallback: function (a, r) {
        return (Ca().memoizedState = [a, r === void 0 ? null : r]), a;
      },
      useContext: Un,
      useEffect: ph,
      useImperativeHandle: function (a, r, i) {
        return (
          (i = i != null ? i.concat([a]) : null),
          fl(4194308, 4, vh.bind(null, r, a), i)
        );
      },
      useLayoutEffect: function (a, r) {
        return fl(4194308, 4, a, r);
      },
      useInsertionEffect: function (a, r) {
        return fl(4, 2, a, r);
      },
      useMemo: function (a, r) {
        var i = Ca();
        return (
          (r = r === void 0 ? null : r),
          (a = a()),
          (i.memoizedState = [a, r]),
          a
        );
      },
      useReducer: function (a, r, i) {
        var u = Ca();
        return (
          (r = i !== void 0 ? i(r) : r),
          (u.memoizedState = u.baseState = r),
          (a = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: a,
            lastRenderedState: r,
          }),
          (u.queue = a),
          (a = a.dispatch = pv.bind(null, Ge, a)),
          [u.memoizedState, a]
        );
      },
      useRef: function (a) {
        var r = Ca();
        return (a = { current: a }), (r.memoizedState = a);
      },
      useState: gh,
      useDebugValue: Ns,
      useDeferredValue: function (a) {
        return (Ca().memoizedState = a);
      },
      useTransition: function () {
        var a = gh(!1),
          r = a[0];
        return (a = mv.bind(null, a[1])), (Ca().memoizedState = a), [r, a];
      },
      useMutableSource: function () {},
      useSyncExternalStore: function (a, r, i) {
        var u = Ge,
          c = Ca();
        if (Pe) {
          if (i === void 0) throw Error(o(407));
          i = i();
        } else {
          if (((i = r()), Ue === null)) throw Error(o(349));
          Po & 30 || sh(u, r, i);
        }
        c.memoizedState = i;
        var h = { value: i, getSnapshot: r };
        return (
          (c.queue = h),
          ph(dh.bind(null, u, h, a), [a]),
          (u.flags |= 2048),
          it(9, uh.bind(null, u, h, i, r), void 0, null),
          i
        );
      },
      useId: function () {
        var a = Ca(),
          r = Ue.identifierPrefix;
        if (Pe) {
          var i = Ha,
            u = Pa;
          (i = (u & ~(1 << (32 - aa(u) - 1))).toString(32) + i),
            (r = ":" + r + "R" + i),
            (i = tt++),
            0 < i && (r += "H" + i.toString(32)),
            (r += ":");
        } else (i = gv++), (r = ":" + r + "r" + i.toString(32) + ":");
        return (a.memoizedState = r);
      },
      unstable_isNewReconciler: !1,
    },
    vv = {
      readContext: Un,
      useCallback: kh,
      useContext: Un,
      useEffect: Rs,
      useImperativeHandle: Ch,
      useInsertionEffect: yh,
      useLayoutEffect: fh,
      useMemo: wh,
      useReducer: As,
      useRef: mh,
      useState: function () {
        return As(lt);
      },
      useDebugValue: Ns,
      useDeferredValue: function (a) {
        var r = qn();
        return Sh(r, Je.memoizedState, a);
      },
      useTransition: function () {
        var a = As(lt)[0],
          r = qn().memoizedState;
        return [a, r];
      },
      useMutableSource: lh,
      useSyncExternalStore: ih,
      useId: bh,
      unstable_isNewReconciler: !1,
    },
    Cv = {
      readContext: Un,
      useCallback: kh,
      useContext: Un,
      useEffect: Rs,
      useImperativeHandle: Ch,
      useInsertionEffect: yh,
      useLayoutEffect: fh,
      useMemo: wh,
      useReducer: Gs,
      useRef: mh,
      useState: function () {
        return Gs(lt);
      },
      useDebugValue: Ns,
      useDeferredValue: function (a) {
        var r = qn();
        return Je === null ? (r.memoizedState = a) : Sh(r, Je.memoizedState, a);
      },
      useTransition: function () {
        var a = Gs(lt)[0],
          r = qn().memoizedState;
        return [a, r];
      },
      useMutableSource: lh,
      useSyncExternalStore: ih,
      useId: bh,
      unstable_isNewReconciler: !1,
    };
  function ta(a, r) {
    if (a && a.defaultProps) {
      (r = V({}, r)), (a = a.defaultProps);
      for (var i in a) r[i] === void 0 && (r[i] = a[i]);
      return r;
    }
    return r;
  }
  function Es(a, r, i, u) {
    (r = a.memoizedState),
      (i = i(u, r)),
      (i = i == null ? r : V({}, r, i)),
      (a.memoizedState = i),
      a.lanes === 0 && (a.updateQueue.baseState = i);
  }
  var kl = {
    isMounted: function (a) {
      return (a = a._reactInternals) ? Co(a) === a : !1;
    },
    enqueueSetState: function (a, r, i) {
      a = a._reactInternals;
      var u = Cn(),
        c = to(a),
        h = Wa(u, c);
      (h.payload = r),
        i != null && (h.callback = i),
        (r = no(a, h, c)),
        r !== null && (sa(r, a, c, u), hl(r, a, c));
    },
    enqueueReplaceState: function (a, r, i) {
      a = a._reactInternals;
      var u = Cn(),
        c = to(a),
        h = Wa(u, c);
      (h.tag = 1),
        (h.payload = r),
        i != null && (h.callback = i),
        (r = no(a, h, c)),
        r !== null && (sa(r, a, c, u), hl(r, a, c));
    },
    enqueueForceUpdate: function (a, r) {
      a = a._reactInternals;
      var i = Cn(),
        u = to(a),
        c = Wa(i, u);
      (c.tag = 2),
        r != null && (c.callback = r),
        (r = no(a, c, u)),
        r !== null && (sa(r, a, u, i), hl(r, a, u));
    },
  };
  function Hh(a, r, i, u, c, h, p) {
    return (
      (a = a.stateNode),
      typeof a.shouldComponentUpdate == "function"
        ? a.shouldComponentUpdate(u, h, p)
        : r.prototype && r.prototype.isPureReactComponent
        ? !$r(i, u) || !$r(c, h)
        : !0
    );
  }
  function Lh(a, r, i) {
    var u = !1,
      c = Za,
      h = r.contextType;
    return (
      typeof h == "object" && h !== null
        ? (h = Un(h))
        : ((c = Pn(r) ? wo : un.current),
          (u = r.contextTypes),
          (h = (u = u != null) ? ar(a, c) : Za)),
      (r = new r(i, h)),
      (a.memoizedState =
        r.state !== null && r.state !== void 0 ? r.state : null),
      (r.updater = kl),
      (a.stateNode = r),
      (r._reactInternals = a),
      u &&
        ((a = a.stateNode),
        (a.__reactInternalMemoizedUnmaskedChildContext = c),
        (a.__reactInternalMemoizedMaskedChildContext = h)),
      r
    );
  }
  function Wh(a, r, i, u) {
    (a = r.state),
      typeof r.componentWillReceiveProps == "function" &&
        r.componentWillReceiveProps(i, u),
      typeof r.UNSAFE_componentWillReceiveProps == "function" &&
        r.UNSAFE_componentWillReceiveProps(i, u),
      r.state !== a && kl.enqueueReplaceState(r, r.state, null);
  }
  function Fs(a, r, i, u) {
    var c = a.stateNode;
    (c.props = i), (c.state = a.memoizedState), (c.refs = {}), ws(a);
    var h = r.contextType;
    typeof h == "object" && h !== null
      ? (c.context = Un(h))
      : ((h = Pn(r) ? wo : un.current), (c.context = ar(a, h))),
      (c.state = a.memoizedState),
      (h = r.getDerivedStateFromProps),
      typeof h == "function" && (Es(a, r, h, i), (c.state = a.memoizedState)),
      typeof r.getDerivedStateFromProps == "function" ||
        typeof c.getSnapshotBeforeUpdate == "function" ||
        (typeof c.UNSAFE_componentWillMount != "function" &&
          typeof c.componentWillMount != "function") ||
        ((r = c.state),
        typeof c.componentWillMount == "function" && c.componentWillMount(),
        typeof c.UNSAFE_componentWillMount == "function" &&
          c.UNSAFE_componentWillMount(),
        r !== c.state && kl.enqueueReplaceState(c, c.state, null),
        gl(a, i, c, u),
        (c.state = a.memoizedState)),
      typeof c.componentDidMount == "function" && (a.flags |= 4194308);
  }
  function dr(a, r) {
    try {
      var i = "",
        u = r;
      do (i += se(u)), (u = u.return);
      while (u);
      var c = i;
    } catch (h) {
      c =
        `
Error generating stack: ` +
        h.message +
        `
` +
        h.stack;
    }
    return { value: a, source: r, stack: c, digest: null };
  }
  function Ds(a, r, i) {
    return {
      value: a,
      source: null,
      stack: i != null ? i : null,
      digest: r != null ? r : null,
    };
  }
  function Ts(a, r) {
    try {
      console.error(r.value);
    } catch (i) {
      setTimeout(function () {
        throw i;
      });
    }
  }
  var kv = typeof WeakMap == "function" ? WeakMap : Map;
  function Ah(a, r, i) {
    (i = Wa(-1, i)), (i.tag = 3), (i.payload = { element: null });
    var u = r.value;
    return (
      (i.callback = function () {
        Hl || ((Hl = !0), (Zs = u)), Ts(a, r);
      }),
      i
    );
  }
  function Gh(a, r, i) {
    (i = Wa(-1, i)), (i.tag = 3);
    var u = a.type.getDerivedStateFromError;
    if (typeof u == "function") {
      var c = r.value;
      (i.payload = function () {
        return u(c);
      }),
        (i.callback = function () {
          Ts(a, r);
        });
    }
    var h = a.stateNode;
    return (
      h !== null &&
        typeof h.componentDidCatch == "function" &&
        (i.callback = function () {
          Ts(a, r),
            typeof u != "function" &&
              (oo === null ? (oo = new Set([this])) : oo.add(this));
          var p = r.stack;
          this.componentDidCatch(r.value, {
            componentStack: p !== null ? p : "",
          });
        }),
      i
    );
  }
  function Rh(a, r, i) {
    var u = a.pingCache;
    if (u === null) {
      u = a.pingCache = new kv();
      var c = new Set();
      u.set(r, c);
    } else (c = u.get(r)), c === void 0 && ((c = new Set()), u.set(r, c));
    c.has(i) || (c.add(i), (a = Ev.bind(null, a, r, i)), r.then(a, a));
  }
  function Nh(a) {
    do {
      var r;
      if (
        ((r = a.tag === 13) &&
          ((r = a.memoizedState),
          (r = r !== null ? r.dehydrated !== null : !0)),
        r)
      )
        return a;
      a = a.return;
    } while (a !== null);
    return null;
  }
  function Eh(a, r, i, u, c) {
    return a.mode & 1
      ? ((a.flags |= 65536), (a.lanes = c), a)
      : (a === r
          ? (a.flags |= 65536)
          : ((a.flags |= 128),
            (i.flags |= 131072),
            (i.flags &= -52805),
            i.tag === 1 &&
              (i.alternate === null
                ? (i.tag = 17)
                : ((r = Wa(-1, 1)), (r.tag = 2), no(i, r, 1))),
            (i.lanes |= 1)),
        a);
  }
  var wv = Oe.ReactCurrentOwner,
    Hn = !1;
  function vn(a, r, i, u) {
    r.child = a === null ? eh(r, null, i, u) : lr(r, a.child, i, u);
  }
  function Fh(a, r, i, u, c) {
    i = i.render;
    var h = r.ref;
    return (
      sr(r, c),
      (u = Ls(a, r, i, u, h, c)),
      (i = Ws()),
      a !== null && !Hn
        ? ((r.updateQueue = a.updateQueue),
          (r.flags &= -2053),
          (a.lanes &= ~c),
          Aa(a, r, c))
        : (Pe && i && cs(r), (r.flags |= 1), vn(a, r, u, c), r.child)
    );
  }
  function Dh(a, r, i, u, c) {
    if (a === null) {
      var h = i.type;
      return typeof h == "function" &&
        !tu(h) &&
        h.defaultProps === void 0 &&
        i.compare === null &&
        i.defaultProps === void 0
        ? ((r.tag = 15), (r.type = h), Th(a, r, h, u, c))
        : ((a = Nl(i.type, null, u, r, r.mode, c)),
          (a.ref = r.ref),
          (a.return = r),
          (r.child = a));
    }
    if (((h = a.child), !(a.lanes & c))) {
      var p = h.memoizedProps;
      if (
        ((i = i.compare), (i = i !== null ? i : $r), i(p, u) && a.ref === r.ref)
      )
        return Aa(a, r, c);
    }
    return (
      (r.flags |= 1),
      (a = io(h, u)),
      (a.ref = r.ref),
      (a.return = r),
      (r.child = a)
    );
  }
  function Th(a, r, i, u, c) {
    if (a !== null) {
      var h = a.memoizedProps;
      if ($r(h, u) && a.ref === r.ref)
        if (((Hn = !1), (r.pendingProps = u = h), (a.lanes & c) !== 0))
          a.flags & 131072 && (Hn = !0);
        else return (r.lanes = a.lanes), Aa(a, r, c);
    }
    return Os(a, r, i, u, c);
  }
  function Oh(a, r, i) {
    var u = r.pendingProps,
      c = u.children,
      h = a !== null ? a.memoizedState : null;
    if (u.mode === "hidden")
      if (!(r.mode & 1))
        (r.memoizedState = {
          baseLanes: 0,
          cachePool: null,
          transitions: null,
        }),
          Ce(hr, Dn),
          (Dn |= i);
      else {
        if (!(i & 1073741824))
          return (
            (a = h !== null ? h.baseLanes | i : i),
            (r.lanes = r.childLanes = 1073741824),
            (r.memoizedState = {
              baseLanes: a,
              cachePool: null,
              transitions: null,
            }),
            (r.updateQueue = null),
            Ce(hr, Dn),
            (Dn |= a),
            null
          );
        (r.memoizedState = {
          baseLanes: 0,
          cachePool: null,
          transitions: null,
        }),
          (u = h !== null ? h.baseLanes : i),
          Ce(hr, Dn),
          (Dn |= u);
      }
    else
      h !== null ? ((u = h.baseLanes | i), (r.memoizedState = null)) : (u = i),
        Ce(hr, Dn),
        (Dn |= u);
    return vn(a, r, c, i), r.child;
  }
  function xh(a, r) {
    var i = r.ref;
    ((a === null && i !== null) || (a !== null && a.ref !== i)) &&
      ((r.flags |= 512), (r.flags |= 2097152));
  }
  function Os(a, r, i, u, c) {
    var h = Pn(i) ? wo : un.current;
    return (
      (h = ar(r, h)),
      sr(r, c),
      (i = Ls(a, r, i, u, h, c)),
      (u = Ws()),
      a !== null && !Hn
        ? ((r.updateQueue = a.updateQueue),
          (r.flags &= -2053),
          (a.lanes &= ~c),
          Aa(a, r, c))
        : (Pe && u && cs(r), (r.flags |= 1), vn(a, r, i, c), r.child)
    );
  }
  function Vh(a, r, i, u, c) {
    if (Pn(i)) {
      var h = !0;
      rl(r);
    } else h = !1;
    if ((sr(r, c), r.stateNode === null))
      Sl(a, r), Lh(r, i, u), Fs(r, i, u, c), (u = !0);
    else if (a === null) {
      var p = r.stateNode,
        C = r.memoizedProps;
      p.props = C;
      var k = p.context,
        P = i.contextType;
      typeof P == "object" && P !== null
        ? (P = Un(P))
        : ((P = Pn(i) ? wo : un.current), (P = ar(r, P)));
      var A = i.getDerivedStateFromProps,
        R =
          typeof A == "function" ||
          typeof p.getSnapshotBeforeUpdate == "function";
      R ||
        (typeof p.UNSAFE_componentWillReceiveProps != "function" &&
          typeof p.componentWillReceiveProps != "function") ||
        ((C !== u || k !== P) && Wh(r, p, u, P)),
        (eo = !1);
      var L = r.memoizedState;
      (p.state = L),
        gl(r, u, p, c),
        (k = r.memoizedState),
        C !== u || L !== k || Bn.current || eo
          ? (typeof A == "function" && (Es(r, i, A, u), (k = r.memoizedState)),
            (C = eo || Hh(r, i, C, u, L, k, P))
              ? (R ||
                  (typeof p.UNSAFE_componentWillMount != "function" &&
                    typeof p.componentWillMount != "function") ||
                  (typeof p.componentWillMount == "function" &&
                    p.componentWillMount(),
                  typeof p.UNSAFE_componentWillMount == "function" &&
                    p.UNSAFE_componentWillMount()),
                typeof p.componentDidMount == "function" &&
                  (r.flags |= 4194308))
              : (typeof p.componentDidMount == "function" &&
                  (r.flags |= 4194308),
                (r.memoizedProps = u),
                (r.memoizedState = k)),
            (p.props = u),
            (p.state = k),
            (p.context = P),
            (u = C))
          : (typeof p.componentDidMount == "function" && (r.flags |= 4194308),
            (u = !1));
    } else {
      (p = r.stateNode),
        ah(a, r),
        (C = r.memoizedProps),
        (P = r.type === r.elementType ? C : ta(r.type, C)),
        (p.props = P),
        (R = r.pendingProps),
        (L = p.context),
        (k = i.contextType),
        typeof k == "object" && k !== null
          ? (k = Un(k))
          : ((k = Pn(i) ? wo : un.current), (k = ar(r, k)));
      var T = i.getDerivedStateFromProps;
      (A =
        typeof T == "function" ||
        typeof p.getSnapshotBeforeUpdate == "function") ||
        (typeof p.UNSAFE_componentWillReceiveProps != "function" &&
          typeof p.componentWillReceiveProps != "function") ||
        ((C !== R || L !== k) && Wh(r, p, u, k)),
        (eo = !1),
        (L = r.memoizedState),
        (p.state = L),
        gl(r, u, p, c);
      var I = r.memoizedState;
      C !== R || L !== I || Bn.current || eo
        ? (typeof T == "function" && (Es(r, i, T, u), (I = r.memoizedState)),
          (P = eo || Hh(r, i, P, u, L, I, k) || !1)
            ? (A ||
                (typeof p.UNSAFE_componentWillUpdate != "function" &&
                  typeof p.componentWillUpdate != "function") ||
                (typeof p.componentWillUpdate == "function" &&
                  p.componentWillUpdate(u, I, k),
                typeof p.UNSAFE_componentWillUpdate == "function" &&
                  p.UNSAFE_componentWillUpdate(u, I, k)),
              typeof p.componentDidUpdate == "function" && (r.flags |= 4),
              typeof p.getSnapshotBeforeUpdate == "function" &&
                (r.flags |= 1024))
            : (typeof p.componentDidUpdate != "function" ||
                (C === a.memoizedProps && L === a.memoizedState) ||
                (r.flags |= 4),
              typeof p.getSnapshotBeforeUpdate != "function" ||
                (C === a.memoizedProps && L === a.memoizedState) ||
                (r.flags |= 1024),
              (r.memoizedProps = u),
              (r.memoizedState = I)),
          (p.props = u),
          (p.state = I),
          (p.context = k),
          (u = P))
        : (typeof p.componentDidUpdate != "function" ||
            (C === a.memoizedProps && L === a.memoizedState) ||
            (r.flags |= 4),
          typeof p.getSnapshotBeforeUpdate != "function" ||
            (C === a.memoizedProps && L === a.memoizedState) ||
            (r.flags |= 1024),
          (u = !1));
    }
    return xs(a, r, i, u, h, c);
  }
  function xs(a, r, i, u, c, h) {
    xh(a, r);
    var p = (r.flags & 128) !== 0;
    if (!u && !p) return c && zc(r, i, !1), Aa(a, r, h);
    (u = r.stateNode), (wv.current = r);
    var C =
      p && typeof i.getDerivedStateFromError != "function" ? null : u.render();
    return (
      (r.flags |= 1),
      a !== null && p
        ? ((r.child = lr(r, a.child, null, h)), (r.child = lr(r, null, C, h)))
        : vn(a, r, C, h),
      (r.memoizedState = u.state),
      c && zc(r, i, !0),
      r.child
    );
  }
  function Ih(a) {
    var r = a.stateNode;
    r.pendingContext
      ? Kc(a, r.pendingContext, r.pendingContext !== r.context)
      : r.context && Kc(a, r.context, !1),
      Ss(a, r.containerInfo);
  }
  function _h(a, r, i, u, c) {
    return tr(), ps(c), (r.flags |= 256), vn(a, r, i, u), r.child;
  }
  var Vs = { dehydrated: null, treeContext: null, retryLane: 0 };
  function Is(a) {
    return { baseLanes: a, cachePool: null, transitions: null };
  }
  function Kh(a, r, i) {
    var u = r.pendingProps,
      c = Ae.current,
      h = !1,
      p = (r.flags & 128) !== 0,
      C;
    if (
      ((C = p) ||
        (C = a !== null && a.memoizedState === null ? !1 : (c & 2) !== 0),
      C
        ? ((h = !0), (r.flags &= -129))
        : (a === null || a.memoizedState !== null) && (c |= 1),
      Ce(Ae, c & 1),
      a === null)
    )
      return (
        ms(r),
        (a = r.memoizedState),
        a !== null && ((a = a.dehydrated), a !== null)
          ? (r.mode & 1
              ? a.data === "$!"
                ? (r.lanes = 8)
                : (r.lanes = 1073741824)
              : (r.lanes = 1),
            null)
          : ((p = u.children),
            (a = u.fallback),
            h
              ? ((u = r.mode),
                (h = r.child),
                (p = { mode: "hidden", children: p }),
                !(u & 1) && h !== null
                  ? ((h.childLanes = 0), (h.pendingProps = p))
                  : (h = El(p, u, 0, null)),
                (a = Go(a, u, i, null)),
                (h.return = r),
                (a.return = r),
                (h.sibling = a),
                (r.child = h),
                (r.child.memoizedState = Is(i)),
                (r.memoizedState = Vs),
                a)
              : _s(r, p))
      );
    if (((c = a.memoizedState), c !== null && ((C = c.dehydrated), C !== null)))
      return Sv(a, r, p, u, C, c, i);
    if (h) {
      (h = u.fallback), (p = r.mode), (c = a.child), (C = c.sibling);
      var k = { mode: "hidden", children: u.children };
      return (
        !(p & 1) && r.child !== c
          ? ((u = r.child),
            (u.childLanes = 0),
            (u.pendingProps = k),
            (r.deletions = null))
          : ((u = io(c, k)), (u.subtreeFlags = c.subtreeFlags & 14680064)),
        C !== null ? (h = io(C, h)) : ((h = Go(h, p, i, null)), (h.flags |= 2)),
        (h.return = r),
        (u.return = r),
        (u.sibling = h),
        (r.child = u),
        (u = h),
        (h = r.child),
        (p = a.child.memoizedState),
        (p =
          p === null
            ? Is(i)
            : {
                baseLanes: p.baseLanes | i,
                cachePool: null,
                transitions: p.transitions,
              }),
        (h.memoizedState = p),
        (h.childLanes = a.childLanes & ~i),
        (r.memoizedState = Vs),
        u
      );
    }
    return (
      (h = a.child),
      (a = h.sibling),
      (u = io(h, { mode: "visible", children: u.children })),
      !(r.mode & 1) && (u.lanes = i),
      (u.return = r),
      (u.sibling = null),
      a !== null &&
        ((i = r.deletions),
        i === null ? ((r.deletions = [a]), (r.flags |= 16)) : i.push(a)),
      (r.child = u),
      (r.memoizedState = null),
      u
    );
  }
  function _s(a, r) {
    return (
      (r = El({ mode: "visible", children: r }, a.mode, 0, null)),
      (r.return = a),
      (a.child = r)
    );
  }
  function wl(a, r, i, u) {
    return (
      u !== null && ps(u),
      lr(r, a.child, null, i),
      (a = _s(r, r.pendingProps.children)),
      (a.flags |= 2),
      (r.memoizedState = null),
      a
    );
  }
  function Sv(a, r, i, u, c, h, p) {
    if (i)
      return r.flags & 256
        ? ((r.flags &= -257), (u = Ds(Error(o(422)))), wl(a, r, p, u))
        : r.memoizedState !== null
        ? ((r.child = a.child), (r.flags |= 128), null)
        : ((h = u.fallback),
          (c = r.mode),
          (u = El({ mode: "visible", children: u.children }, c, 0, null)),
          (h = Go(h, c, p, null)),
          (h.flags |= 2),
          (u.return = r),
          (h.return = r),
          (u.sibling = h),
          (r.child = u),
          r.mode & 1 && lr(r, a.child, null, p),
          (r.child.memoizedState = Is(p)),
          (r.memoizedState = Vs),
          h);
    if (!(r.mode & 1)) return wl(a, r, p, null);
    if (c.data === "$!") {
      if (((u = c.nextSibling && c.nextSibling.dataset), u)) var C = u.dgst;
      return (
        (u = C), (h = Error(o(419))), (u = Ds(h, u, void 0)), wl(a, r, p, u)
      );
    }
    if (((C = (p & a.childLanes) !== 0), Hn || C)) {
      if (((u = Ue), u !== null)) {
        switch (p & -p) {
          case 4:
            c = 2;
            break;
          case 16:
            c = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            c = 32;
            break;
          case 536870912:
            c = 268435456;
            break;
          default:
            c = 0;
        }
        (c = c & (u.suspendedLanes | p) ? 0 : c),
          c !== 0 &&
            c !== h.retryLane &&
            ((h.retryLane = c), La(a, c), sa(u, a, c, -1));
      }
      return ru(), (u = Ds(Error(o(421)))), wl(a, r, p, u);
    }
    return c.data === "$?"
      ? ((r.flags |= 128),
        (r.child = a.child),
        (r = Fv.bind(null, a)),
        (c._reactRetry = r),
        null)
      : ((a = h.treeContext),
        (Fn = Ya(c.nextSibling)),
        (En = r),
        (Pe = !0),
        (ra = null),
        a !== null &&
          ((jn[$n++] = Pa),
          (jn[$n++] = Ha),
          (jn[$n++] = So),
          (Pa = a.id),
          (Ha = a.overflow),
          (So = r)),
        (r = _s(r, u.children)),
        (r.flags |= 4096),
        r);
  }
  function Jh(a, r, i) {
    a.lanes |= r;
    var u = a.alternate;
    u !== null && (u.lanes |= r), Cs(a.return, r, i);
  }
  function Ks(a, r, i, u, c) {
    var h = a.memoizedState;
    h === null
      ? (a.memoizedState = {
          isBackwards: r,
          rendering: null,
          renderingStartTime: 0,
          last: u,
          tail: i,
          tailMode: c,
        })
      : ((h.isBackwards = r),
        (h.rendering = null),
        (h.renderingStartTime = 0),
        (h.last = u),
        (h.tail = i),
        (h.tailMode = c));
  }
  function zh(a, r, i) {
    var u = r.pendingProps,
      c = u.revealOrder,
      h = u.tail;
    if ((vn(a, r, u.children, i), (u = Ae.current), u & 2))
      (u = (u & 1) | 2), (r.flags |= 128);
    else {
      if (a !== null && a.flags & 128)
        e: for (a = r.child; a !== null; ) {
          if (a.tag === 13) a.memoizedState !== null && Jh(a, i, r);
          else if (a.tag === 19) Jh(a, i, r);
          else if (a.child !== null) {
            (a.child.return = a), (a = a.child);
            continue;
          }
          if (a === r) break e;
          for (; a.sibling === null; ) {
            if (a.return === null || a.return === r) break e;
            a = a.return;
          }
          (a.sibling.return = a.return), (a = a.sibling);
        }
      u &= 1;
    }
    if ((Ce(Ae, u), !(r.mode & 1))) r.memoizedState = null;
    else
      switch (c) {
        case "forwards":
          for (i = r.child, c = null; i !== null; )
            (a = i.alternate),
              a !== null && ml(a) === null && (c = i),
              (i = i.sibling);
          (i = c),
            i === null
              ? ((c = r.child), (r.child = null))
              : ((c = i.sibling), (i.sibling = null)),
            Ks(r, !1, c, i, h);
          break;
        case "backwards":
          for (i = null, c = r.child, r.child = null; c !== null; ) {
            if (((a = c.alternate), a !== null && ml(a) === null)) {
              r.child = c;
              break;
            }
            (a = c.sibling), (c.sibling = i), (i = c), (c = a);
          }
          Ks(r, !0, i, null, h);
          break;
        case "together":
          Ks(r, !1, null, null, void 0);
          break;
        default:
          r.memoizedState = null;
      }
    return r.child;
  }
  function Sl(a, r) {
    !(r.mode & 1) &&
      a !== null &&
      ((a.alternate = null), (r.alternate = null), (r.flags |= 2));
  }
  function Aa(a, r, i) {
    if (
      (a !== null && (r.dependencies = a.dependencies),
      (Ho |= r.lanes),
      !(i & r.childLanes))
    )
      return null;
    if (a !== null && r.child !== a.child) throw Error(o(153));
    if (r.child !== null) {
      for (
        a = r.child, i = io(a, a.pendingProps), r.child = i, i.return = r;
        a.sibling !== null;

      )
        (a = a.sibling),
          (i = i.sibling = io(a, a.pendingProps)),
          (i.return = r);
      i.sibling = null;
    }
    return r.child;
  }
  function bv(a, r, i) {
    switch (r.tag) {
      case 3:
        Ih(r), tr();
        break;
      case 5:
        th(r);
        break;
      case 1:
        Pn(r.type) && rl(r);
        break;
      case 4:
        Ss(r, r.stateNode.containerInfo);
        break;
      case 10:
        var u = r.type._context,
          c = r.memoizedProps.value;
        Ce(dl, u._currentValue), (u._currentValue = c);
        break;
      case 13:
        if (((u = r.memoizedState), u !== null))
          return u.dehydrated !== null
            ? (Ce(Ae, Ae.current & 1), (r.flags |= 128), null)
            : i & r.child.childLanes
            ? Kh(a, r, i)
            : (Ce(Ae, Ae.current & 1),
              (a = Aa(a, r, i)),
              a !== null ? a.sibling : null);
        Ce(Ae, Ae.current & 1);
        break;
      case 19:
        if (((u = (i & r.childLanes) !== 0), a.flags & 128)) {
          if (u) return zh(a, r, i);
          r.flags |= 128;
        }
        if (
          ((c = r.memoizedState),
          c !== null &&
            ((c.rendering = null), (c.tail = null), (c.lastEffect = null)),
          Ce(Ae, Ae.current),
          u)
        )
          break;
        return null;
      case 22:
      case 23:
        return (r.lanes = 0), Oh(a, r, i);
    }
    return Aa(a, r, i);
  }
  var jh, Js, $h, Uh;
  (jh = function (a, r) {
    for (var i = r.child; i !== null; ) {
      if (i.tag === 5 || i.tag === 6) a.appendChild(i.stateNode);
      else if (i.tag !== 4 && i.child !== null) {
        (i.child.return = i), (i = i.child);
        continue;
      }
      if (i === r) break;
      for (; i.sibling === null; ) {
        if (i.return === null || i.return === r) return;
        i = i.return;
      }
      (i.sibling.return = i.return), (i = i.sibling);
    }
  }),
    (Js = function () {}),
    ($h = function (a, r, i, u) {
      var c = a.memoizedProps;
      if (c !== u) {
        (a = r.stateNode), Bo(va.current);
        var h = null;
        switch (i) {
          case "input":
            (c = Ci(a, c)), (u = Ci(a, u)), (h = []);
            break;
          case "select":
            (c = V({}, c, { value: void 0 })),
              (u = V({}, u, { value: void 0 })),
              (h = []);
            break;
          case "textarea":
            (c = Si(a, c)), (u = Si(a, u)), (h = []);
            break;
          default:
            typeof c.onClick != "function" &&
              typeof u.onClick == "function" &&
              (a.onclick = nl);
        }
        Mi(i, u);
        var p;
        i = null;
        for (P in c)
          if (!u.hasOwnProperty(P) && c.hasOwnProperty(P) && c[P] != null)
            if (P === "style") {
              var C = c[P];
              for (p in C) C.hasOwnProperty(p) && (i || (i = {}), (i[p] = ""));
            } else
              P !== "dangerouslySetInnerHTML" &&
                P !== "children" &&
                P !== "suppressContentEditableWarning" &&
                P !== "suppressHydrationWarning" &&
                P !== "autoFocus" &&
                (l.hasOwnProperty(P)
                  ? h || (h = [])
                  : (h = h || []).push(P, null));
        for (P in u) {
          var k = u[P];
          if (
            ((C = c != null ? c[P] : void 0),
            u.hasOwnProperty(P) && k !== C && (k != null || C != null))
          )
            if (P === "style")
              if (C) {
                for (p in C)
                  !C.hasOwnProperty(p) ||
                    (k && k.hasOwnProperty(p)) ||
                    (i || (i = {}), (i[p] = ""));
                for (p in k)
                  k.hasOwnProperty(p) &&
                    C[p] !== k[p] &&
                    (i || (i = {}), (i[p] = k[p]));
              } else i || (h || (h = []), h.push(P, i)), (i = k);
            else
              P === "dangerouslySetInnerHTML"
                ? ((k = k ? k.__html : void 0),
                  (C = C ? C.__html : void 0),
                  k != null && C !== k && (h = h || []).push(P, k))
                : P === "children"
                ? (typeof k != "string" && typeof k != "number") ||
                  (h = h || []).push(P, "" + k)
                : P !== "suppressContentEditableWarning" &&
                  P !== "suppressHydrationWarning" &&
                  (l.hasOwnProperty(P)
                    ? (k != null && P === "onScroll" && Se("scroll", a),
                      h || C === k || (h = []))
                    : (h = h || []).push(P, k));
        }
        i && (h = h || []).push("style", i);
        var P = h;
        (r.updateQueue = P) && (r.flags |= 4);
      }
    }),
    (Uh = function (a, r, i, u) {
      i !== u && (r.flags |= 4);
    });
  function st(a, r) {
    if (!Pe)
      switch (a.tailMode) {
        case "hidden":
          r = a.tail;
          for (var i = null; r !== null; )
            r.alternate !== null && (i = r), (r = r.sibling);
          i === null ? (a.tail = null) : (i.sibling = null);
          break;
        case "collapsed":
          i = a.tail;
          for (var u = null; i !== null; )
            i.alternate !== null && (u = i), (i = i.sibling);
          u === null
            ? r || a.tail === null
              ? (a.tail = null)
              : (a.tail.sibling = null)
            : (u.sibling = null);
      }
  }
  function cn(a) {
    var r = a.alternate !== null && a.alternate.child === a.child,
      i = 0,
      u = 0;
    if (r)
      for (var c = a.child; c !== null; )
        (i |= c.lanes | c.childLanes),
          (u |= c.subtreeFlags & 14680064),
          (u |= c.flags & 14680064),
          (c.return = a),
          (c = c.sibling);
    else
      for (c = a.child; c !== null; )
        (i |= c.lanes | c.childLanes),
          (u |= c.subtreeFlags),
          (u |= c.flags),
          (c.return = a),
          (c = c.sibling);
    return (a.subtreeFlags |= u), (a.childLanes = i), r;
  }
  function Mv(a, r, i) {
    var u = r.pendingProps;
    switch ((hs(r), r.tag)) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return cn(r), null;
      case 1:
        return Pn(r.type) && ol(), cn(r), null;
      case 3:
        return (
          (u = r.stateNode),
          ur(),
          be(Bn),
          be(un),
          Bs(),
          u.pendingContext &&
            ((u.context = u.pendingContext), (u.pendingContext = null)),
          (a === null || a.child === null) &&
            (sl(r)
              ? (r.flags |= 4)
              : a === null ||
                (a.memoizedState.isDehydrated && !(r.flags & 256)) ||
                ((r.flags |= 1024), ra !== null && (nu(ra), (ra = null)))),
          Js(a, r),
          cn(r),
          null
        );
      case 5:
        bs(r);
        var c = Bo(ot.current);
        if (((i = r.type), a !== null && r.stateNode != null))
          $h(a, r, i, u, c),
            a.ref !== r.ref && ((r.flags |= 512), (r.flags |= 2097152));
        else {
          if (!u) {
            if (r.stateNode === null) throw Error(o(166));
            return cn(r), null;
          }
          if (((a = Bo(va.current)), sl(r))) {
            (u = r.stateNode), (i = r.type);
            var h = r.memoizedProps;
            switch (((u[fa] = r), (u[Zr] = h), (a = (r.mode & 1) !== 0), i)) {
              case "dialog":
                Se("cancel", u), Se("close", u);
                break;
              case "iframe":
              case "object":
              case "embed":
                Se("load", u);
                break;
              case "video":
              case "audio":
                for (c = 0; c < qr.length; c++) Se(qr[c], u);
                break;
              case "source":
                Se("error", u);
                break;
              case "img":
              case "image":
              case "link":
                Se("error", u), Se("load", u);
                break;
              case "details":
                Se("toggle", u);
                break;
              case "input":
                Ld(u, h), Se("invalid", u);
                break;
              case "select":
                (u._wrapperState = { wasMultiple: !!h.multiple }),
                  Se("invalid", u);
                break;
              case "textarea":
                Gd(u, h), Se("invalid", u);
            }
            Mi(i, h), (c = null);
            for (var p in h)
              if (h.hasOwnProperty(p)) {
                var C = h[p];
                p === "children"
                  ? typeof C == "string"
                    ? u.textContent !== C &&
                      (h.suppressHydrationWarning !== !0 &&
                        el(u.textContent, C, a),
                      (c = ["children", C]))
                    : typeof C == "number" &&
                      u.textContent !== "" + C &&
                      (h.suppressHydrationWarning !== !0 &&
                        el(u.textContent, C, a),
                      (c = ["children", "" + C]))
                  : l.hasOwnProperty(p) &&
                    C != null &&
                    p === "onScroll" &&
                    Se("scroll", u);
              }
            switch (i) {
              case "input":
                Gt(u), Ad(u, h, !0);
                break;
              case "textarea":
                Gt(u), Nd(u);
                break;
              case "select":
              case "option":
                break;
              default:
                typeof h.onClick == "function" && (u.onclick = nl);
            }
            (u = c), (r.updateQueue = u), u !== null && (r.flags |= 4);
          } else {
            (p = c.nodeType === 9 ? c : c.ownerDocument),
              a === "http://www.w3.org/1999/xhtml" && (a = Ed(i)),
              a === "http://www.w3.org/1999/xhtml"
                ? i === "script"
                  ? ((a = p.createElement("div")),
                    (a.innerHTML = "<script></script>"),
                    (a = a.removeChild(a.firstChild)))
                  : typeof u.is == "string"
                  ? (a = p.createElement(i, { is: u.is }))
                  : ((a = p.createElement(i)),
                    i === "select" &&
                      ((p = a),
                      u.multiple
                        ? (p.multiple = !0)
                        : u.size && (p.size = u.size)))
                : (a = p.createElementNS(a, i)),
              (a[fa] = r),
              (a[Zr] = u),
              jh(a, r, !1, !1),
              (r.stateNode = a);
            e: {
              switch (((p = Bi(i, u)), i)) {
                case "dialog":
                  Se("cancel", a), Se("close", a), (c = u);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  Se("load", a), (c = u);
                  break;
                case "video":
                case "audio":
                  for (c = 0; c < qr.length; c++) Se(qr[c], a);
                  c = u;
                  break;
                case "source":
                  Se("error", a), (c = u);
                  break;
                case "img":
                case "image":
                case "link":
                  Se("error", a), Se("load", a), (c = u);
                  break;
                case "details":
                  Se("toggle", a), (c = u);
                  break;
                case "input":
                  Ld(a, u), (c = Ci(a, u)), Se("invalid", a);
                  break;
                case "option":
                  c = u;
                  break;
                case "select":
                  (a._wrapperState = { wasMultiple: !!u.multiple }),
                    (c = V({}, u, { value: void 0 })),
                    Se("invalid", a);
                  break;
                case "textarea":
                  Gd(a, u), (c = Si(a, u)), Se("invalid", a);
                  break;
                default:
                  c = u;
              }
              Mi(i, c), (C = c);
              for (h in C)
                if (C.hasOwnProperty(h)) {
                  var k = C[h];
                  h === "style"
                    ? Td(a, k)
                    : h === "dangerouslySetInnerHTML"
                    ? ((k = k ? k.__html : void 0), k != null && Fd(a, k))
                    : h === "children"
                    ? typeof k == "string"
                      ? (i !== "textarea" || k !== "") && Ar(a, k)
                      : typeof k == "number" && Ar(a, "" + k)
                    : h !== "suppressContentEditableWarning" &&
                      h !== "suppressHydrationWarning" &&
                      h !== "autoFocus" &&
                      (l.hasOwnProperty(h)
                        ? k != null && h === "onScroll" && Se("scroll", a)
                        : k != null && Sn(a, h, k, p));
                }
              switch (i) {
                case "input":
                  Gt(a), Ad(a, u, !1);
                  break;
                case "textarea":
                  Gt(a), Nd(a);
                  break;
                case "option":
                  u.value != null && a.setAttribute("value", "" + me(u.value));
                  break;
                case "select":
                  (a.multiple = !!u.multiple),
                    (h = u.value),
                    h != null
                      ? Jo(a, !!u.multiple, h, !1)
                      : u.defaultValue != null &&
                        Jo(a, !!u.multiple, u.defaultValue, !0);
                  break;
                default:
                  typeof c.onClick == "function" && (a.onclick = nl);
              }
              switch (i) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  u = !!u.autoFocus;
                  break e;
                case "img":
                  u = !0;
                  break e;
                default:
                  u = !1;
              }
            }
            u && (r.flags |= 4);
          }
          r.ref !== null && ((r.flags |= 512), (r.flags |= 2097152));
        }
        return cn(r), null;
      case 6:
        if (a && r.stateNode != null) Uh(a, r, a.memoizedProps, u);
        else {
          if (typeof u != "string" && r.stateNode === null) throw Error(o(166));
          if (((i = Bo(ot.current)), Bo(va.current), sl(r))) {
            if (
              ((u = r.stateNode),
              (i = r.memoizedProps),
              (u[fa] = r),
              (h = u.nodeValue !== i) && ((a = En), a !== null))
            )
              switch (a.tag) {
                case 3:
                  el(u.nodeValue, i, (a.mode & 1) !== 0);
                  break;
                case 5:
                  a.memoizedProps.suppressHydrationWarning !== !0 &&
                    el(u.nodeValue, i, (a.mode & 1) !== 0);
              }
            h && (r.flags |= 4);
          } else
            (u = (i.nodeType === 9 ? i : i.ownerDocument).createTextNode(u)),
              (u[fa] = r),
              (r.stateNode = u);
        }
        return cn(r), null;
      case 13:
        if (
          (be(Ae),
          (u = r.memoizedState),
          a === null ||
            (a.memoizedState !== null && a.memoizedState.dehydrated !== null))
        ) {
          if (Pe && Fn !== null && r.mode & 1 && !(r.flags & 128))
            Qc(), tr(), (r.flags |= 98560), (h = !1);
          else if (((h = sl(r)), u !== null && u.dehydrated !== null)) {
            if (a === null) {
              if (!h) throw Error(o(318));
              if (
                ((h = r.memoizedState),
                (h = h !== null ? h.dehydrated : null),
                !h)
              )
                throw Error(o(317));
              h[fa] = r;
            } else
              tr(),
                !(r.flags & 128) && (r.memoizedState = null),
                (r.flags |= 4);
            cn(r), (h = !1);
          } else ra !== null && (nu(ra), (ra = null)), (h = !0);
          if (!h) return r.flags & 65536 ? r : null;
        }
        return r.flags & 128
          ? ((r.lanes = i), r)
          : ((u = u !== null),
            u !== (a !== null && a.memoizedState !== null) &&
              u &&
              ((r.child.flags |= 8192),
              r.mode & 1 &&
                (a === null || Ae.current & 1 ? ze === 0 && (ze = 3) : ru())),
            r.updateQueue !== null && (r.flags |= 4),
            cn(r),
            null);
      case 4:
        return (
          ur(),
          Js(a, r),
          a === null && Yr(r.stateNode.containerInfo),
          cn(r),
          null
        );
      case 10:
        return vs(r.type._context), cn(r), null;
      case 17:
        return Pn(r.type) && ol(), cn(r), null;
      case 19:
        if ((be(Ae), (h = r.memoizedState), h === null)) return cn(r), null;
        if (((u = (r.flags & 128) !== 0), (p = h.rendering), p === null))
          if (u) st(h, !1);
          else {
            if (ze !== 0 || (a !== null && a.flags & 128))
              for (a = r.child; a !== null; ) {
                if (((p = ml(a)), p !== null)) {
                  for (
                    r.flags |= 128,
                      st(h, !1),
                      u = p.updateQueue,
                      u !== null && ((r.updateQueue = u), (r.flags |= 4)),
                      r.subtreeFlags = 0,
                      u = i,
                      i = r.child;
                    i !== null;

                  )
                    (h = i),
                      (a = u),
                      (h.flags &= 14680066),
                      (p = h.alternate),
                      p === null
                        ? ((h.childLanes = 0),
                          (h.lanes = a),
                          (h.child = null),
                          (h.subtreeFlags = 0),
                          (h.memoizedProps = null),
                          (h.memoizedState = null),
                          (h.updateQueue = null),
                          (h.dependencies = null),
                          (h.stateNode = null))
                        : ((h.childLanes = p.childLanes),
                          (h.lanes = p.lanes),
                          (h.child = p.child),
                          (h.subtreeFlags = 0),
                          (h.deletions = null),
                          (h.memoizedProps = p.memoizedProps),
                          (h.memoizedState = p.memoizedState),
                          (h.updateQueue = p.updateQueue),
                          (h.type = p.type),
                          (a = p.dependencies),
                          (h.dependencies =
                            a === null
                              ? null
                              : {
                                  lanes: a.lanes,
                                  firstContext: a.firstContext,
                                })),
                      (i = i.sibling);
                  return Ce(Ae, (Ae.current & 1) | 2), r.child;
                }
                a = a.sibling;
              }
            h.tail !== null &&
              Fe() > gr &&
              ((r.flags |= 128), (u = !0), st(h, !1), (r.lanes = 4194304));
          }
        else {
          if (!u)
            if (((a = ml(p)), a !== null)) {
              if (
                ((r.flags |= 128),
                (u = !0),
                (i = a.updateQueue),
                i !== null && ((r.updateQueue = i), (r.flags |= 4)),
                st(h, !0),
                h.tail === null &&
                  h.tailMode === "hidden" &&
                  !p.alternate &&
                  !Pe)
              )
                return cn(r), null;
            } else
              2 * Fe() - h.renderingStartTime > gr &&
                i !== 1073741824 &&
                ((r.flags |= 128), (u = !0), st(h, !1), (r.lanes = 4194304));
          h.isBackwards
            ? ((p.sibling = r.child), (r.child = p))
            : ((i = h.last),
              i !== null ? (i.sibling = p) : (r.child = p),
              (h.last = p));
        }
        return h.tail !== null
          ? ((r = h.tail),
            (h.rendering = r),
            (h.tail = r.sibling),
            (h.renderingStartTime = Fe()),
            (r.sibling = null),
            (i = Ae.current),
            Ce(Ae, u ? (i & 1) | 2 : i & 1),
            r)
          : (cn(r), null);
      case 22:
      case 23:
        return (
          ou(),
          (u = r.memoizedState !== null),
          a !== null && (a.memoizedState !== null) !== u && (r.flags |= 8192),
          u && r.mode & 1
            ? Dn & 1073741824 &&
              (cn(r), r.subtreeFlags & 6 && (r.flags |= 8192))
            : cn(r),
          null
        );
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(o(156, r.tag));
  }
  function Bv(a, r) {
    switch ((hs(r), r.tag)) {
      case 1:
        return (
          Pn(r.type) && ol(),
          (a = r.flags),
          a & 65536 ? ((r.flags = (a & -65537) | 128), r) : null
        );
      case 3:
        return (
          ur(),
          be(Bn),
          be(un),
          Bs(),
          (a = r.flags),
          a & 65536 && !(a & 128) ? ((r.flags = (a & -65537) | 128), r) : null
        );
      case 5:
        return bs(r), null;
      case 13:
        if (
          (be(Ae), (a = r.memoizedState), a !== null && a.dehydrated !== null)
        ) {
          if (r.alternate === null) throw Error(o(340));
          tr();
        }
        return (
          (a = r.flags), a & 65536 ? ((r.flags = (a & -65537) | 128), r) : null
        );
      case 19:
        return be(Ae), null;
      case 4:
        return ur(), null;
      case 10:
        return vs(r.type._context), null;
      case 22:
      case 23:
        return ou(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var bl = !1,
    hn = !1,
    Pv = typeof WeakSet == "function" ? WeakSet : Set,
    O = null;
  function cr(a, r) {
    var i = a.ref;
    if (i !== null)
      if (typeof i == "function")
        try {
          i(null);
        } catch (u) {
          Ee(a, r, u);
        }
      else i.current = null;
  }
  function zs(a, r, i) {
    try {
      i();
    } catch (u) {
      Ee(a, r, u);
    }
  }
  var qh = !1;
  function Hv(a, r) {
    if (((os = Kt), (a = Hc()), qi(a))) {
      if ("selectionStart" in a)
        var i = { start: a.selectionStart, end: a.selectionEnd };
      else
        e: {
          i = ((i = a.ownerDocument) && i.defaultView) || window;
          var u = i.getSelection && i.getSelection();
          if (u && u.rangeCount !== 0) {
            i = u.anchorNode;
            var c = u.anchorOffset,
              h = u.focusNode;
            u = u.focusOffset;
            try {
              i.nodeType, h.nodeType;
            } catch (E) {
              i = null;
              break e;
            }
            var p = 0,
              C = -1,
              k = -1,
              P = 0,
              A = 0,
              R = a,
              L = null;
            n: for (;;) {
              for (
                var T;
                R !== i || (c !== 0 && R.nodeType !== 3) || (C = p + c),
                  R !== h || (u !== 0 && R.nodeType !== 3) || (k = p + u),
                  R.nodeType === 3 && (p += R.nodeValue.length),
                  (T = R.firstChild) !== null;

              )
                (L = R), (R = T);
              for (;;) {
                if (R === a) break n;
                if (
                  (L === i && ++P === c && (C = p),
                  L === h && ++A === u && (k = p),
                  (T = R.nextSibling) !== null)
                )
                  break;
                (R = L), (L = R.parentNode);
              }
              R = T;
            }
            i = C === -1 || k === -1 ? null : { start: C, end: k };
          } else i = null;
        }
      i = i || { start: 0, end: 0 };
    } else i = null;
    for (
      rs = { focusedElem: a, selectionRange: i }, Kt = !1, O = r;
      O !== null;

    )
      if (((r = O), (a = r.child), (r.subtreeFlags & 1028) !== 0 && a !== null))
        (a.return = r), (O = a);
      else
        for (; O !== null; ) {
          r = O;
          try {
            var I = r.alternate;
            if (r.flags & 1024)
              switch (r.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (I !== null) {
                    var _ = I.memoizedProps,
                      De = I.memoizedState,
                      b = r.stateNode,
                      w = b.getSnapshotBeforeUpdate(
                        r.elementType === r.type ? _ : ta(r.type, _),
                        De
                      );
                    b.__reactInternalSnapshotBeforeUpdate = w;
                  }
                  break;
                case 3:
                  var B = r.stateNode.containerInfo;
                  B.nodeType === 1
                    ? (B.textContent = "")
                    : B.nodeType === 9 &&
                      B.documentElement &&
                      B.removeChild(B.documentElement);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(o(163));
              }
          } catch (E) {
            Ee(r, r.return, E);
          }
          if (((a = r.sibling), a !== null)) {
            (a.return = r.return), (O = a);
            break;
          }
          O = r.return;
        }
    return (I = qh), (qh = !1), I;
  }
  function ut(a, r, i) {
    var u = r.updateQueue;
    if (((u = u !== null ? u.lastEffect : null), u !== null)) {
      var c = (u = u.next);
      do {
        if ((c.tag & a) === a) {
          var h = c.destroy;
          (c.destroy = void 0), h !== void 0 && zs(r, i, h);
        }
        c = c.next;
      } while (c !== u);
    }
  }
  function Ml(a, r) {
    if (
      ((r = r.updateQueue), (r = r !== null ? r.lastEffect : null), r !== null)
    ) {
      var i = (r = r.next);
      do {
        if ((i.tag & a) === a) {
          var u = i.create;
          i.destroy = u();
        }
        i = i.next;
      } while (i !== r);
    }
  }
  function js(a) {
    var r = a.ref;
    if (r !== null) {
      var i = a.stateNode;
      switch (a.tag) {
        case 5:
          a = i;
          break;
        default:
          a = i;
      }
      typeof r == "function" ? r(a) : (r.current = a);
    }
  }
  function Yh(a) {
    var r = a.alternate;
    r !== null && ((a.alternate = null), Yh(r)),
      (a.child = null),
      (a.deletions = null),
      (a.sibling = null),
      a.tag === 5 &&
        ((r = a.stateNode),
        r !== null &&
          (delete r[fa],
          delete r[Zr],
          delete r[ss],
          delete r[uv],
          delete r[dv])),
      (a.stateNode = null),
      (a.return = null),
      (a.dependencies = null),
      (a.memoizedProps = null),
      (a.memoizedState = null),
      (a.pendingProps = null),
      (a.stateNode = null),
      (a.updateQueue = null);
  }
  function Qh(a) {
    return a.tag === 5 || a.tag === 3 || a.tag === 4;
  }
  function Zh(a) {
    e: for (;;) {
      for (; a.sibling === null; ) {
        if (a.return === null || Qh(a.return)) return null;
        a = a.return;
      }
      for (
        a.sibling.return = a.return, a = a.sibling;
        a.tag !== 5 && a.tag !== 6 && a.tag !== 18;

      ) {
        if (a.flags & 2 || a.child === null || a.tag === 4) continue e;
        (a.child.return = a), (a = a.child);
      }
      if (!(a.flags & 2)) return a.stateNode;
    }
  }
  function $s(a, r, i) {
    var u = a.tag;
    if (u === 5 || u === 6)
      (a = a.stateNode),
        r
          ? i.nodeType === 8
            ? i.parentNode.insertBefore(a, r)
            : i.insertBefore(a, r)
          : (i.nodeType === 8
              ? ((r = i.parentNode), r.insertBefore(a, i))
              : ((r = i), r.appendChild(a)),
            (i = i._reactRootContainer),
            i != null || r.onclick !== null || (r.onclick = nl));
    else if (u !== 4 && ((a = a.child), a !== null))
      for ($s(a, r, i), a = a.sibling; a !== null; )
        $s(a, r, i), (a = a.sibling);
  }
  function Us(a, r, i) {
    var u = a.tag;
    if (u === 5 || u === 6)
      (a = a.stateNode), r ? i.insertBefore(a, r) : i.appendChild(a);
    else if (u !== 4 && ((a = a.child), a !== null))
      for (Us(a, r, i), a = a.sibling; a !== null; )
        Us(a, r, i), (a = a.sibling);
  }
  var an = null,
    la = !1;
  function ao(a, r, i) {
    for (i = i.child; i !== null; ) Xh(a, r, i), (i = i.sibling);
  }
  function Xh(a, r, i) {
    if (ya && typeof ya.onCommitFiberUnmount == "function")
      try {
        ya.onCommitFiberUnmount(Tt, i);
      } catch (C) {}
    switch (i.tag) {
      case 5:
        hn || cr(i, r);
      case 6:
        var u = an,
          c = la;
        (an = null),
          ao(a, r, i),
          (an = u),
          (la = c),
          an !== null &&
            (la
              ? ((a = an),
                (i = i.stateNode),
                a.nodeType === 8
                  ? a.parentNode.removeChild(i)
                  : a.removeChild(i))
              : an.removeChild(i.stateNode));
        break;
      case 18:
        an !== null &&
          (la
            ? ((a = an),
              (i = i.stateNode),
              a.nodeType === 8
                ? is(a.parentNode, i)
                : a.nodeType === 1 && is(a, i),
              Ir(a))
            : is(an, i.stateNode));
        break;
      case 4:
        (u = an),
          (c = la),
          (an = i.stateNode.containerInfo),
          (la = !0),
          ao(a, r, i),
          (an = u),
          (la = c);
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        if (
          !hn &&
          ((u = i.updateQueue), u !== null && ((u = u.lastEffect), u !== null))
        ) {
          c = u = u.next;
          do {
            var h = c,
              p = h.destroy;
            (h = h.tag),
              p !== void 0 && (h & 2 || h & 4) && zs(i, r, p),
              (c = c.next);
          } while (c !== u);
        }
        ao(a, r, i);
        break;
      case 1:
        if (
          !hn &&
          (cr(i, r),
          (u = i.stateNode),
          typeof u.componentWillUnmount == "function")
        )
          try {
            (u.props = i.memoizedProps),
              (u.state = i.memoizedState),
              u.componentWillUnmount();
          } catch (C) {
            Ee(i, r, C);
          }
        ao(a, r, i);
        break;
      case 21:
        ao(a, r, i);
        break;
      case 22:
        i.mode & 1
          ? ((hn = (u = hn) || i.memoizedState !== null), ao(a, r, i), (hn = u))
          : ao(a, r, i);
        break;
      default:
        ao(a, r, i);
    }
  }
  function eg(a) {
    var r = a.updateQueue;
    if (r !== null) {
      a.updateQueue = null;
      var i = a.stateNode;
      i === null && (i = a.stateNode = new Pv()),
        r.forEach(function (u) {
          var c = Dv.bind(null, a, u);
          i.has(u) || (i.add(u), u.then(c, c));
        });
    }
  }
  function ia(a, r) {
    var i = r.deletions;
    if (i !== null)
      for (var u = 0; u < i.length; u++) {
        var c = i[u];
        try {
          var h = a,
            p = r,
            C = p;
          e: for (; C !== null; ) {
            switch (C.tag) {
              case 5:
                (an = C.stateNode), (la = !1);
                break e;
              case 3:
                (an = C.stateNode.containerInfo), (la = !0);
                break e;
              case 4:
                (an = C.stateNode.containerInfo), (la = !0);
                break e;
            }
            C = C.return;
          }
          if (an === null) throw Error(o(160));
          Xh(h, p, c), (an = null), (la = !1);
          var k = c.alternate;
          k !== null && (k.return = null), (c.return = null);
        } catch (P) {
          Ee(c, r, P);
        }
      }
    if (r.subtreeFlags & 12854)
      for (r = r.child; r !== null; ) ng(r, a), (r = r.sibling);
  }
  function ng(a, r) {
    var i = a.alternate,
      u = a.flags;
    switch (a.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        if ((ia(r, a), ka(a), u & 4)) {
          try {
            ut(3, a, a.return), Ml(3, a);
          } catch (_) {
            Ee(a, a.return, _);
          }
          try {
            ut(5, a, a.return);
          } catch (_) {
            Ee(a, a.return, _);
          }
        }
        break;
      case 1:
        ia(r, a), ka(a), u & 512 && i !== null && cr(i, i.return);
        break;
      case 5:
        if (
          (ia(r, a),
          ka(a),
          u & 512 && i !== null && cr(i, i.return),
          a.flags & 32)
        ) {
          var c = a.stateNode;
          try {
            Ar(c, "");
          } catch (_) {
            Ee(a, a.return, _);
          }
        }
        if (u & 4 && ((c = a.stateNode), c != null)) {
          var h = a.memoizedProps,
            p = i !== null ? i.memoizedProps : h,
            C = a.type,
            k = a.updateQueue;
          if (((a.updateQueue = null), k !== null))
            try {
              C === "input" && h.type === "radio" && h.name != null && Wd(c, h),
                Bi(C, p);
              var P = Bi(C, h);
              for (p = 0; p < k.length; p += 2) {
                var A = k[p],
                  R = k[p + 1];
                A === "style"
                  ? Td(c, R)
                  : A === "dangerouslySetInnerHTML"
                  ? Fd(c, R)
                  : A === "children"
                  ? Ar(c, R)
                  : Sn(c, A, R, P);
              }
              switch (C) {
                case "input":
                  ki(c, h);
                  break;
                case "textarea":
                  Rd(c, h);
                  break;
                case "select":
                  var L = c._wrapperState.wasMultiple;
                  c._wrapperState.wasMultiple = !!h.multiple;
                  var T = h.value;
                  T != null
                    ? Jo(c, !!h.multiple, T, !1)
                    : L !== !!h.multiple &&
                      (h.defaultValue != null
                        ? Jo(c, !!h.multiple, h.defaultValue, !0)
                        : Jo(c, !!h.multiple, h.multiple ? [] : "", !1));
              }
              c[Zr] = h;
            } catch (_) {
              Ee(a, a.return, _);
            }
        }
        break;
      case 6:
        if ((ia(r, a), ka(a), u & 4)) {
          if (a.stateNode === null) throw Error(o(162));
          (c = a.stateNode), (h = a.memoizedProps);
          try {
            c.nodeValue = h;
          } catch (_) {
            Ee(a, a.return, _);
          }
        }
        break;
      case 3:
        if (
          (ia(r, a), ka(a), u & 4 && i !== null && i.memoizedState.isDehydrated)
        )
          try {
            Ir(r.containerInfo);
          } catch (_) {
            Ee(a, a.return, _);
          }
        break;
      case 4:
        ia(r, a), ka(a);
        break;
      case 13:
        ia(r, a),
          ka(a),
          (c = a.child),
          c.flags & 8192 &&
            ((h = c.memoizedState !== null),
            (c.stateNode.isHidden = h),
            !h ||
              (c.alternate !== null && c.alternate.memoizedState !== null) ||
              (Qs = Fe())),
          u & 4 && eg(a);
        break;
      case 22:
        if (
          ((A = i !== null && i.memoizedState !== null),
          a.mode & 1 ? ((hn = (P = hn) || A), ia(r, a), (hn = P)) : ia(r, a),
          ka(a),
          u & 8192)
        ) {
          if (
            ((P = a.memoizedState !== null),
            (a.stateNode.isHidden = P) && !A && a.mode & 1)
          )
            for (O = a, A = a.child; A !== null; ) {
              for (R = O = A; O !== null; ) {
                switch (((L = O), (T = L.child), L.tag)) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    ut(4, L, L.return);
                    break;
                  case 1:
                    cr(L, L.return);
                    var I = L.stateNode;
                    if (typeof I.componentWillUnmount == "function") {
                      (u = L), (i = L.return);
                      try {
                        (r = u),
                          (I.props = r.memoizedProps),
                          (I.state = r.memoizedState),
                          I.componentWillUnmount();
                      } catch (_) {
                        Ee(u, i, _);
                      }
                    }
                    break;
                  case 5:
                    cr(L, L.return);
                    break;
                  case 22:
                    if (L.memoizedState !== null) {
                      rg(R);
                      continue;
                    }
                }
                T !== null ? ((T.return = L), (O = T)) : rg(R);
              }
              A = A.sibling;
            }
          e: for (A = null, R = a; ; ) {
            if (R.tag === 5) {
              if (A === null) {
                A = R;
                try {
                  (c = R.stateNode),
                    P
                      ? ((h = c.style),
                        typeof h.setProperty == "function"
                          ? h.setProperty("display", "none", "important")
                          : (h.display = "none"))
                      : ((C = R.stateNode),
                        (k = R.memoizedProps.style),
                        (p =
                          k != null && k.hasOwnProperty("display")
                            ? k.display
                            : null),
                        (C.style.display = Dd("display", p)));
                } catch (_) {
                  Ee(a, a.return, _);
                }
              }
            } else if (R.tag === 6) {
              if (A === null)
                try {
                  R.stateNode.nodeValue = P ? "" : R.memoizedProps;
                } catch (_) {
                  Ee(a, a.return, _);
                }
            } else if (
              ((R.tag !== 22 && R.tag !== 23) ||
                R.memoizedState === null ||
                R === a) &&
              R.child !== null
            ) {
              (R.child.return = R), (R = R.child);
              continue;
            }
            if (R === a) break e;
            for (; R.sibling === null; ) {
              if (R.return === null || R.return === a) break e;
              A === R && (A = null), (R = R.return);
            }
            A === R && (A = null),
              (R.sibling.return = R.return),
              (R = R.sibling);
          }
        }
        break;
      case 19:
        ia(r, a), ka(a), u & 4 && eg(a);
        break;
      case 21:
        break;
      default:
        ia(r, a), ka(a);
    }
  }
  function ka(a) {
    var r = a.flags;
    if (r & 2) {
      try {
        e: {
          for (var i = a.return; i !== null; ) {
            if (Qh(i)) {
              var u = i;
              break e;
            }
            i = i.return;
          }
          throw Error(o(160));
        }
        switch (u.tag) {
          case 5:
            var c = u.stateNode;
            u.flags & 32 && (Ar(c, ""), (u.flags &= -33));
            var h = Zh(a);
            Us(a, h, c);
            break;
          case 3:
          case 4:
            var p = u.stateNode.containerInfo,
              C = Zh(a);
            $s(a, C, p);
            break;
          default:
            throw Error(o(161));
        }
      } catch (k) {
        Ee(a, a.return, k);
      }
      a.flags &= -3;
    }
    r & 4096 && (a.flags &= -4097);
  }
  function Lv(a, r, i) {
    (O = a), ag(a);
  }
  function ag(a, r, i) {
    for (var u = (a.mode & 1) !== 0; O !== null; ) {
      var c = O,
        h = c.child;
      if (c.tag === 22 && u) {
        var p = c.memoizedState !== null || bl;
        if (!p) {
          var C = c.alternate,
            k = (C !== null && C.memoizedState !== null) || hn;
          C = bl;
          var P = hn;
          if (((bl = p), (hn = k) && !P))
            for (O = c; O !== null; )
              (p = O),
                (k = p.child),
                p.tag === 22 && p.memoizedState !== null
                  ? tg(c)
                  : k !== null
                  ? ((k.return = p), (O = k))
                  : tg(c);
          for (; h !== null; ) (O = h), ag(h), (h = h.sibling);
          (O = c), (bl = C), (hn = P);
        }
        og(a);
      } else
        c.subtreeFlags & 8772 && h !== null ? ((h.return = c), (O = h)) : og(a);
    }
  }
  function og(a) {
    for (; O !== null; ) {
      var r = O;
      if (r.flags & 8772) {
        var i = r.alternate;
        try {
          if (r.flags & 8772)
            switch (r.tag) {
              case 0:
              case 11:
              case 15:
                hn || Ml(5, r);
                break;
              case 1:
                var u = r.stateNode;
                if (r.flags & 4 && !hn)
                  if (i === null) u.componentDidMount();
                  else {
                    var c =
                      r.elementType === r.type
                        ? i.memoizedProps
                        : ta(r.type, i.memoizedProps);
                    u.componentDidUpdate(
                      c,
                      i.memoizedState,
                      u.__reactInternalSnapshotBeforeUpdate
                    );
                  }
                var h = r.updateQueue;
                h !== null && rh(r, h, u);
                break;
              case 3:
                var p = r.updateQueue;
                if (p !== null) {
                  if (((i = null), r.child !== null))
                    switch (r.child.tag) {
                      case 5:
                        i = r.child.stateNode;
                        break;
                      case 1:
                        i = r.child.stateNode;
                    }
                  rh(r, p, i);
                }
                break;
              case 5:
                var C = r.stateNode;
                if (i === null && r.flags & 4) {
                  i = C;
                  var k = r.memoizedProps;
                  switch (r.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      k.autoFocus && i.focus();
                      break;
                    case "img":
                      k.src && (i.src = k.src);
                  }
                }
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (r.memoizedState === null) {
                  var P = r.alternate;
                  if (P !== null) {
                    var A = P.memoizedState;
                    if (A !== null) {
                      var R = A.dehydrated;
                      R !== null && Ir(R);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error(o(163));
            }
          hn || (r.flags & 512 && js(r));
        } catch (L) {
          Ee(r, r.return, L);
        }
      }
      if (r === a) {
        O = null;
        break;
      }
      if (((i = r.sibling), i !== null)) {
        (i.return = r.return), (O = i);
        break;
      }
      O = r.return;
    }
  }
  function rg(a) {
    for (; O !== null; ) {
      var r = O;
      if (r === a) {
        O = null;
        break;
      }
      var i = r.sibling;
      if (i !== null) {
        (i.return = r.return), (O = i);
        break;
      }
      O = r.return;
    }
  }
  function tg(a) {
    for (; O !== null; ) {
      var r = O;
      try {
        switch (r.tag) {
          case 0:
          case 11:
          case 15:
            var i = r.return;
            try {
              Ml(4, r);
            } catch (k) {
              Ee(r, i, k);
            }
            break;
          case 1:
            var u = r.stateNode;
            if (typeof u.componentDidMount == "function") {
              var c = r.return;
              try {
                u.componentDidMount();
              } catch (k) {
                Ee(r, c, k);
              }
            }
            var h = r.return;
            try {
              js(r);
            } catch (k) {
              Ee(r, h, k);
            }
            break;
          case 5:
            var p = r.return;
            try {
              js(r);
            } catch (k) {
              Ee(r, p, k);
            }
        }
      } catch (k) {
        Ee(r, r.return, k);
      }
      if (r === a) {
        O = null;
        break;
      }
      var C = r.sibling;
      if (C !== null) {
        (C.return = r.return), (O = C);
        break;
      }
      O = r.return;
    }
  }
  var Wv = Math.ceil,
    Bl = Oe.ReactCurrentDispatcher,
    qs = Oe.ReactCurrentOwner,
    Yn = Oe.ReactCurrentBatchConfig,
    le = 0,
    Ue = null,
    xe = null,
    on = 0,
    Dn = 0,
    hr = Qa(0),
    ze = 0,
    dt = null,
    Ho = 0,
    Pl = 0,
    Ys = 0,
    ct = null,
    Ln = null,
    Qs = 0,
    gr = 1 / 0,
    Ga = null,
    Hl = !1,
    Zs = null,
    oo = null,
    Ll = !1,
    ro = null,
    Wl = 0,
    ht = 0,
    Xs = null,
    Al = -1,
    Gl = 0;
  function Cn() {
    return le & 6 ? Fe() : Al !== -1 ? Al : (Al = Fe());
  }
  function to(a) {
    return a.mode & 1
      ? le & 2 && on !== 0
        ? on & -on
        : hv.transition !== null
        ? (Gl === 0 && (Gl = Zd()), Gl)
        : ((a = pe),
          a !== 0 || ((a = window.event), (a = a === void 0 ? 16 : ic(a.type))),
          a)
      : 1;
  }
  function sa(a, r, i, u) {
    if (50 < ht) throw ((ht = 0), (Xs = null), Error(o(185)));
    Dr(a, i, u),
      (!(le & 2) || a !== Ue) &&
        (a === Ue && (!(le & 2) && (Pl |= i), ze === 4 && lo(a, on)),
        Wn(a, u),
        i === 1 &&
          le === 0 &&
          !(r.mode & 1) &&
          ((gr = Fe() + 500), tl && Xa()));
  }
  function Wn(a, r) {
    var i = a.callbackNode;
    hf(a, r);
    var u = Vt(a, a === Ue ? on : 0);
    if (u === 0)
      i !== null && qd(i), (a.callbackNode = null), (a.callbackPriority = 0);
    else if (((r = u & -u), a.callbackPriority !== r)) {
      if ((i != null && qd(i), r === 1))
        a.tag === 0 ? cv(ig.bind(null, a)) : jc(ig.bind(null, a)),
          iv(function () {
            !(le & 6) && Xa();
          }),
          (i = null);
      else {
        switch (Xd(u)) {
          case 1:
            i = Ri;
            break;
          case 4:
            i = Yd;
            break;
          case 16:
            i = Dt;
            break;
          case 536870912:
            i = Qd;
            break;
          default:
            i = Dt;
        }
        i = pg(i, lg.bind(null, a));
      }
      (a.callbackPriority = r), (a.callbackNode = i);
    }
  }
  function lg(a, r) {
    if (((Al = -1), (Gl = 0), le & 6)) throw Error(o(327));
    var i = a.callbackNode;
    if (mr() && a.callbackNode !== i) return null;
    var u = Vt(a, a === Ue ? on : 0);
    if (u === 0) return null;
    if (u & 30 || u & a.expiredLanes || r) r = Rl(a, u);
    else {
      r = u;
      var c = le;
      le |= 2;
      var h = ug();
      (Ue !== a || on !== r) && ((Ga = null), (gr = Fe() + 500), Wo(a, r));
      do
        try {
          Rv();
          break;
        } catch (C) {
          sg(a, C);
        }
      while (!0);
      fs(),
        (Bl.current = h),
        (le = c),
        xe !== null ? (r = 0) : ((Ue = null), (on = 0), (r = ze));
    }
    if (r !== 0) {
      if (
        (r === 2 && ((c = Ni(a)), c !== 0 && ((u = c), (r = eu(a, c)))),
        r === 1)
      )
        throw ((i = dt), Wo(a, 0), lo(a, u), Wn(a, Fe()), i);
      if (r === 6) lo(a, u);
      else {
        if (
          ((c = a.current.alternate),
          !(u & 30) &&
            !Av(c) &&
            ((r = Rl(a, u)),
            r === 2 && ((h = Ni(a)), h !== 0 && ((u = h), (r = eu(a, h)))),
            r === 1))
        )
          throw ((i = dt), Wo(a, 0), lo(a, u), Wn(a, Fe()), i);
        switch (((a.finishedWork = c), (a.finishedLanes = u), r)) {
          case 0:
          case 1:
            throw Error(o(345));
          case 2:
            Ao(a, Ln, Ga);
            break;
          case 3:
            if (
              (lo(a, u),
              (u & 130023424) === u && ((r = Qs + 500 - Fe()), 10 < r))
            ) {
              if (Vt(a, 0) !== 0) break;
              if (((c = a.suspendedLanes), (c & u) !== u)) {
                Cn(), (a.pingedLanes |= a.suspendedLanes & c);
                break;
              }
              a.timeoutHandle = ls(Ao.bind(null, a, Ln, Ga), r);
              break;
            }
            Ao(a, Ln, Ga);
            break;
          case 4:
            if ((lo(a, u), (u & 4194240) === u)) break;
            for (r = a.eventTimes, c = -1; 0 < u; ) {
              var p = 31 - aa(u);
              (h = 1 << p), (p = r[p]), p > c && (c = p), (u &= ~h);
            }
            if (
              ((u = c),
              (u = Fe() - u),
              (u =
                (120 > u
                  ? 120
                  : 480 > u
                  ? 480
                  : 1080 > u
                  ? 1080
                  : 1920 > u
                  ? 1920
                  : 3e3 > u
                  ? 3e3
                  : 4320 > u
                  ? 4320
                  : 1960 * Wv(u / 1960)) - u),
              10 < u)
            ) {
              a.timeoutHandle = ls(Ao.bind(null, a, Ln, Ga), u);
              break;
            }
            Ao(a, Ln, Ga);
            break;
          case 5:
            Ao(a, Ln, Ga);
            break;
          default:
            throw Error(o(329));
        }
      }
    }
    return Wn(a, Fe()), a.callbackNode === i ? lg.bind(null, a) : null;
  }
  function eu(a, r) {
    var i = ct;
    return (
      a.current.memoizedState.isDehydrated && (Wo(a, r).flags |= 256),
      (a = Rl(a, r)),
      a !== 2 && ((r = Ln), (Ln = i), r !== null && nu(r)),
      a
    );
  }
  function nu(a) {
    Ln === null ? (Ln = a) : Ln.push.apply(Ln, a);
  }
  function Av(a) {
    for (var r = a; ; ) {
      if (r.flags & 16384) {
        var i = r.updateQueue;
        if (i !== null && ((i = i.stores), i !== null))
          for (var u = 0; u < i.length; u++) {
            var c = i[u],
              h = c.getSnapshot;
            c = c.value;
            try {
              if (!oa(h(), c)) return !1;
            } catch (p) {
              return !1;
            }
          }
      }
      if (((i = r.child), r.subtreeFlags & 16384 && i !== null))
        (i.return = r), (r = i);
      else {
        if (r === a) break;
        for (; r.sibling === null; ) {
          if (r.return === null || r.return === a) return !0;
          r = r.return;
        }
        (r.sibling.return = r.return), (r = r.sibling);
      }
    }
    return !0;
  }
  function lo(a, r) {
    for (
      r &= ~Ys,
        r &= ~Pl,
        a.suspendedLanes |= r,
        a.pingedLanes &= ~r,
        a = a.expirationTimes;
      0 < r;

    ) {
      var i = 31 - aa(r),
        u = 1 << i;
      (a[i] = -1), (r &= ~u);
    }
  }
  function ig(a) {
    if (le & 6) throw Error(o(327));
    mr();
    var r = Vt(a, 0);
    if (!(r & 1)) return Wn(a, Fe()), null;
    var i = Rl(a, r);
    if (a.tag !== 0 && i === 2) {
      var u = Ni(a);
      u !== 0 && ((r = u), (i = eu(a, u)));
    }
    if (i === 1) throw ((i = dt), Wo(a, 0), lo(a, r), Wn(a, Fe()), i);
    if (i === 6) throw Error(o(345));
    return (
      (a.finishedWork = a.current.alternate),
      (a.finishedLanes = r),
      Ao(a, Ln, Ga),
      Wn(a, Fe()),
      null
    );
  }
  function au(a, r) {
    var i = le;
    le |= 1;
    try {
      return a(r);
    } finally {
      (le = i), le === 0 && ((gr = Fe() + 500), tl && Xa());
    }
  }
  function Lo(a) {
    ro !== null && ro.tag === 0 && !(le & 6) && mr();
    var r = le;
    le |= 1;
    var i = Yn.transition,
      u = pe;
    try {
      if (((Yn.transition = null), (pe = 1), a)) return a();
    } finally {
      (pe = u), (Yn.transition = i), (le = r), !(le & 6) && Xa();
    }
  }
  function ou() {
    (Dn = hr.current), be(hr);
  }
  function Wo(a, r) {
    (a.finishedWork = null), (a.finishedLanes = 0);
    var i = a.timeoutHandle;
    if ((i !== -1 && ((a.timeoutHandle = -1), lv(i)), xe !== null))
      for (i = xe.return; i !== null; ) {
        var u = i;
        switch ((hs(u), u.tag)) {
          case 1:
            (u = u.type.childContextTypes), u != null && ol();
            break;
          case 3:
            ur(), be(Bn), be(un), Bs();
            break;
          case 5:
            bs(u);
            break;
          case 4:
            ur();
            break;
          case 13:
            be(Ae);
            break;
          case 19:
            be(Ae);
            break;
          case 10:
            vs(u.type._context);
            break;
          case 22:
          case 23:
            ou();
        }
        i = i.return;
      }
    if (
      ((Ue = a),
      (xe = a = io(a.current, null)),
      (on = Dn = r),
      (ze = 0),
      (dt = null),
      (Ys = Pl = Ho = 0),
      (Ln = ct = null),
      Mo !== null)
    ) {
      for (r = 0; r < Mo.length; r++)
        if (((i = Mo[r]), (u = i.interleaved), u !== null)) {
          i.interleaved = null;
          var c = u.next,
            h = i.pending;
          if (h !== null) {
            var p = h.next;
            (h.next = c), (u.next = p);
          }
          i.pending = u;
        }
      Mo = null;
    }
    return a;
  }
  function sg(a, r) {
    do {
      var i = xe;
      try {
        if ((fs(), (pl.current = Cl), yl)) {
          for (var u = Ge.memoizedState; u !== null; ) {
            var c = u.queue;
            c !== null && (c.pending = null), (u = u.next);
          }
          yl = !1;
        }
        if (
          ((Po = 0),
          ($e = Je = Ge = null),
          (rt = !1),
          (tt = 0),
          (qs.current = null),
          i === null || i.return === null)
        ) {
          (ze = 1), (dt = r), (xe = null);
          break;
        }
        e: {
          var h = a,
            p = i.return,
            C = i,
            k = r;
          if (
            ((r = on),
            (C.flags |= 32768),
            k !== null && typeof k == "object" && typeof k.then == "function")
          ) {
            var P = k,
              A = C,
              R = A.tag;
            if (!(A.mode & 1) && (R === 0 || R === 11 || R === 15)) {
              var L = A.alternate;
              L
                ? ((A.updateQueue = L.updateQueue),
                  (A.memoizedState = L.memoizedState),
                  (A.lanes = L.lanes))
                : ((A.updateQueue = null), (A.memoizedState = null));
            }
            var T = Nh(p);
            if (T !== null) {
              (T.flags &= -257),
                Eh(T, p, C, h, r),
                T.mode & 1 && Rh(h, P, r),
                (r = T),
                (k = P);
              var I = r.updateQueue;
              if (I === null) {
                var _ = new Set();
                _.add(k), (r.updateQueue = _);
              } else I.add(k);
              break e;
            } else {
              if (!(r & 1)) {
                Rh(h, P, r), ru();
                break e;
              }
              k = Error(o(426));
            }
          } else if (Pe && C.mode & 1) {
            var De = Nh(p);
            if (De !== null) {
              !(De.flags & 65536) && (De.flags |= 256),
                Eh(De, p, C, h, r),
                ps(dr(k, C));
              break e;
            }
          }
          (h = k = dr(k, C)),
            ze !== 4 && (ze = 2),
            ct === null ? (ct = [h]) : ct.push(h),
            (h = p);
          do {
            switch (h.tag) {
              case 3:
                (h.flags |= 65536), (r &= -r), (h.lanes |= r);
                var b = Ah(h, k, r);
                oh(h, b);
                break e;
              case 1:
                C = k;
                var w = h.type,
                  B = h.stateNode;
                if (
                  !(h.flags & 128) &&
                  (typeof w.getDerivedStateFromError == "function" ||
                    (B !== null &&
                      typeof B.componentDidCatch == "function" &&
                      (oo === null || !oo.has(B))))
                ) {
                  (h.flags |= 65536), (r &= -r), (h.lanes |= r);
                  var E = Gh(h, C, r);
                  oh(h, E);
                  break e;
                }
            }
            h = h.return;
          } while (h !== null);
        }
        cg(i);
      } catch (K) {
        (r = K), xe === i && i !== null && (xe = i = i.return);
        continue;
      }
      break;
    } while (!0);
  }
  function ug() {
    var a = Bl.current;
    return (Bl.current = Cl), a === null ? Cl : a;
  }
  function ru() {
    (ze === 0 || ze === 3 || ze === 2) && (ze = 4),
      Ue === null || (!(Ho & 268435455) && !(Pl & 268435455)) || lo(Ue, on);
  }
  function Rl(a, r) {
    var i = le;
    le |= 2;
    var u = ug();
    (Ue !== a || on !== r) && ((Ga = null), Wo(a, r));
    do
      try {
        Gv();
        break;
      } catch (c) {
        sg(a, c);
      }
    while (!0);
    if ((fs(), (le = i), (Bl.current = u), xe !== null)) throw Error(o(261));
    return (Ue = null), (on = 0), ze;
  }
  function Gv() {
    for (; xe !== null; ) dg(xe);
  }
  function Rv() {
    for (; xe !== null && !af(); ) dg(xe);
  }
  function dg(a) {
    var r = mg(a.alternate, a, Dn);
    (a.memoizedProps = a.pendingProps),
      r === null ? cg(a) : (xe = r),
      (qs.current = null);
  }
  function cg(a) {
    var r = a;
    do {
      var i = r.alternate;
      if (((a = r.return), r.flags & 32768)) {
        if (((i = Bv(i, r)), i !== null)) {
          (i.flags &= 32767), (xe = i);
          return;
        }
        if (a !== null)
          (a.flags |= 32768), (a.subtreeFlags = 0), (a.deletions = null);
        else {
          (ze = 6), (xe = null);
          return;
        }
      } else if (((i = Mv(i, r, Dn)), i !== null)) {
        xe = i;
        return;
      }
      if (((r = r.sibling), r !== null)) {
        xe = r;
        return;
      }
      xe = r = a;
    } while (r !== null);
    ze === 0 && (ze = 5);
  }
  function Ao(a, r, i) {
    var u = pe,
      c = Yn.transition;
    try {
      (Yn.transition = null), (pe = 1), Nv(a, r, i, u);
    } finally {
      (Yn.transition = c), (pe = u);
    }
    return null;
  }
  function Nv(a, r, i, u) {
    do mr();
    while (ro !== null);
    if (le & 6) throw Error(o(327));
    i = a.finishedWork;
    var c = a.finishedLanes;
    if (i === null) return null;
    if (((a.finishedWork = null), (a.finishedLanes = 0), i === a.current))
      throw Error(o(177));
    (a.callbackNode = null), (a.callbackPriority = 0);
    var h = i.lanes | i.childLanes;
    if (
      (gf(a, h),
      a === Ue && ((xe = Ue = null), (on = 0)),
      (!(i.subtreeFlags & 2064) && !(i.flags & 2064)) ||
        Ll ||
        ((Ll = !0),
        pg(Dt, function () {
          return mr(), null;
        })),
      (h = (i.flags & 15990) !== 0),
      i.subtreeFlags & 15990 || h)
    ) {
      (h = Yn.transition), (Yn.transition = null);
      var p = pe;
      pe = 1;
      var C = le;
      (le |= 4),
        (qs.current = null),
        Hv(a, i),
        ng(i, a),
        Xf(rs),
        (Kt = !!os),
        (rs = os = null),
        (a.current = i),
        Lv(i),
        of(),
        (le = C),
        (pe = p),
        (Yn.transition = h);
    } else a.current = i;
    if (
      (Ll && ((Ll = !1), (ro = a), (Wl = c)),
      (h = a.pendingLanes),
      h === 0 && (oo = null),
      lf(i.stateNode),
      Wn(a, Fe()),
      r !== null)
    )
      for (u = a.onRecoverableError, i = 0; i < r.length; i++)
        (c = r[i]), u(c.value, { componentStack: c.stack, digest: c.digest });
    if (Hl) throw ((Hl = !1), (a = Zs), (Zs = null), a);
    return (
      Wl & 1 && a.tag !== 0 && mr(),
      (h = a.pendingLanes),
      h & 1 ? (a === Xs ? ht++ : ((ht = 0), (Xs = a))) : (ht = 0),
      Xa(),
      null
    );
  }
  function mr() {
    if (ro !== null) {
      var a = Xd(Wl),
        r = Yn.transition,
        i = pe;
      try {
        if (((Yn.transition = null), (pe = 16 > a ? 16 : a), ro === null))
          var u = !1;
        else {
          if (((a = ro), (ro = null), (Wl = 0), le & 6)) throw Error(o(331));
          var c = le;
          for (le |= 4, O = a.current; O !== null; ) {
            var h = O,
              p = h.child;
            if (O.flags & 16) {
              var C = h.deletions;
              if (C !== null) {
                for (var k = 0; k < C.length; k++) {
                  var P = C[k];
                  for (O = P; O !== null; ) {
                    var A = O;
                    switch (A.tag) {
                      case 0:
                      case 11:
                      case 15:
                        ut(8, A, h);
                    }
                    var R = A.child;
                    if (R !== null) (R.return = A), (O = R);
                    else
                      for (; O !== null; ) {
                        A = O;
                        var L = A.sibling,
                          T = A.return;
                        if ((Yh(A), A === P)) {
                          O = null;
                          break;
                        }
                        if (L !== null) {
                          (L.return = T), (O = L);
                          break;
                        }
                        O = T;
                      }
                  }
                }
                var I = h.alternate;
                if (I !== null) {
                  var _ = I.child;
                  if (_ !== null) {
                    I.child = null;
                    do {
                      var De = _.sibling;
                      (_.sibling = null), (_ = De);
                    } while (_ !== null);
                  }
                }
                O = h;
              }
            }
            if (h.subtreeFlags & 2064 && p !== null) (p.return = h), (O = p);
            else
              e: for (; O !== null; ) {
                if (((h = O), h.flags & 2048))
                  switch (h.tag) {
                    case 0:
                    case 11:
                    case 15:
                      ut(9, h, h.return);
                  }
                var b = h.sibling;
                if (b !== null) {
                  (b.return = h.return), (O = b);
                  break e;
                }
                O = h.return;
              }
          }
          var w = a.current;
          for (O = w; O !== null; ) {
            p = O;
            var B = p.child;
            if (p.subtreeFlags & 2064 && B !== null) (B.return = p), (O = B);
            else
              e: for (p = w; O !== null; ) {
                if (((C = O), C.flags & 2048))
                  try {
                    switch (C.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Ml(9, C);
                    }
                  } catch (K) {
                    Ee(C, C.return, K);
                  }
                if (C === p) {
                  O = null;
                  break e;
                }
                var E = C.sibling;
                if (E !== null) {
                  (E.return = C.return), (O = E);
                  break e;
                }
                O = C.return;
              }
          }
          if (
            ((le = c),
            Xa(),
            ya && typeof ya.onPostCommitFiberRoot == "function")
          )
            try {
              ya.onPostCommitFiberRoot(Tt, a);
            } catch (K) {}
          u = !0;
        }
        return u;
      } finally {
        (pe = i), (Yn.transition = r);
      }
    }
    return !1;
  }
  function hg(a, r, i) {
    (r = dr(i, r)),
      (r = Ah(a, r, 1)),
      (a = no(a, r, 1)),
      (r = Cn()),
      a !== null && (Dr(a, 1, r), Wn(a, r));
  }
  function Ee(a, r, i) {
    if (a.tag === 3) hg(a, a, i);
    else
      for (; r !== null; ) {
        if (r.tag === 3) {
          hg(r, a, i);
          break;
        } else if (r.tag === 1) {
          var u = r.stateNode;
          if (
            typeof r.type.getDerivedStateFromError == "function" ||
            (typeof u.componentDidCatch == "function" &&
              (oo === null || !oo.has(u)))
          ) {
            (a = dr(i, a)),
              (a = Gh(r, a, 1)),
              (r = no(r, a, 1)),
              (a = Cn()),
              r !== null && (Dr(r, 1, a), Wn(r, a));
            break;
          }
        }
        r = r.return;
      }
  }
  function Ev(a, r, i) {
    var u = a.pingCache;
    u !== null && u.delete(r),
      (r = Cn()),
      (a.pingedLanes |= a.suspendedLanes & i),
      Ue === a &&
        (on & i) === i &&
        (ze === 4 || (ze === 3 && (on & 130023424) === on && 500 > Fe() - Qs)
          ? Wo(a, 0)
          : (Ys |= i)),
      Wn(a, r);
  }
  function gg(a, r) {
    r === 0 &&
      (a.mode & 1
        ? ((r = xt), (xt <<= 1), !(xt & 130023424) && (xt = 4194304))
        : (r = 1));
    var i = Cn();
    (a = La(a, r)), a !== null && (Dr(a, r, i), Wn(a, i));
  }
  function Fv(a) {
    var r = a.memoizedState,
      i = 0;
    r !== null && (i = r.retryLane), gg(a, i);
  }
  function Dv(a, r) {
    var i = 0;
    switch (a.tag) {
      case 13:
        var u = a.stateNode,
          c = a.memoizedState;
        c !== null && (i = c.retryLane);
        break;
      case 19:
        u = a.stateNode;
        break;
      default:
        throw Error(o(314));
    }
    u !== null && u.delete(r), gg(a, i);
  }
  var mg;
  mg = function (a, r, i) {
    if (a !== null)
      if (a.memoizedProps !== r.pendingProps || Bn.current) Hn = !0;
      else {
        if (!(a.lanes & i) && !(r.flags & 128)) return (Hn = !1), bv(a, r, i);
        Hn = !!(a.flags & 131072);
      }
    else (Hn = !1), Pe && r.flags & 1048576 && $c(r, il, r.index);
    switch (((r.lanes = 0), r.tag)) {
      case 2:
        var u = r.type;
        Sl(a, r), (a = r.pendingProps);
        var c = ar(r, un.current);
        sr(r, i), (c = Ls(null, r, u, a, c, i));
        var h = Ws();
        return (
          (r.flags |= 1),
          typeof c == "object" &&
          c !== null &&
          typeof c.render == "function" &&
          c.$$typeof === void 0
            ? ((r.tag = 1),
              (r.memoizedState = null),
              (r.updateQueue = null),
              Pn(u) ? ((h = !0), rl(r)) : (h = !1),
              (r.memoizedState =
                c.state !== null && c.state !== void 0 ? c.state : null),
              ws(r),
              (c.updater = kl),
              (r.stateNode = c),
              (c._reactInternals = r),
              Fs(r, u, a, i),
              (r = xs(null, r, u, !0, h, i)))
            : ((r.tag = 0), Pe && h && cs(r), vn(null, r, c, i), (r = r.child)),
          r
        );
      case 16:
        u = r.elementType;
        e: {
          switch (
            (Sl(a, r),
            (a = r.pendingProps),
            (c = u._init),
            (u = c(u._payload)),
            (r.type = u),
            (c = r.tag = Ov(u)),
            (a = ta(u, a)),
            c)
          ) {
            case 0:
              r = Os(null, r, u, a, i);
              break e;
            case 1:
              r = Vh(null, r, u, a, i);
              break e;
            case 11:
              r = Fh(null, r, u, a, i);
              break e;
            case 14:
              r = Dh(null, r, u, ta(u.type, a), i);
              break e;
          }
          throw Error(o(306, u, ""));
        }
        return r;
      case 0:
        return (
          (u = r.type),
          (c = r.pendingProps),
          (c = r.elementType === u ? c : ta(u, c)),
          Os(a, r, u, c, i)
        );
      case 1:
        return (
          (u = r.type),
          (c = r.pendingProps),
          (c = r.elementType === u ? c : ta(u, c)),
          Vh(a, r, u, c, i)
        );
      case 3:
        e: {
          if ((Ih(r), a === null)) throw Error(o(387));
          (u = r.pendingProps),
            (h = r.memoizedState),
            (c = h.element),
            ah(a, r),
            gl(r, u, null, i);
          var p = r.memoizedState;
          if (((u = p.element), h.isDehydrated))
            if (
              ((h = {
                element: u,
                isDehydrated: !1,
                cache: p.cache,
                pendingSuspenseBoundaries: p.pendingSuspenseBoundaries,
                transitions: p.transitions,
              }),
              (r.updateQueue.baseState = h),
              (r.memoizedState = h),
              r.flags & 256)
            ) {
              (c = dr(Error(o(423)), r)), (r = _h(a, r, u, i, c));
              break e;
            } else if (u !== c) {
              (c = dr(Error(o(424)), r)), (r = _h(a, r, u, i, c));
              break e;
            } else
              for (
                Fn = Ya(r.stateNode.containerInfo.firstChild),
                  En = r,
                  Pe = !0,
                  ra = null,
                  i = eh(r, null, u, i),
                  r.child = i;
                i;

              )
                (i.flags = (i.flags & -3) | 4096), (i = i.sibling);
          else {
            if ((tr(), u === c)) {
              r = Aa(a, r, i);
              break e;
            }
            vn(a, r, u, i);
          }
          r = r.child;
        }
        return r;
      case 5:
        return (
          th(r),
          a === null && ms(r),
          (u = r.type),
          (c = r.pendingProps),
          (h = a !== null ? a.memoizedProps : null),
          (p = c.children),
          ts(u, c) ? (p = null) : h !== null && ts(u, h) && (r.flags |= 32),
          xh(a, r),
          vn(a, r, p, i),
          r.child
        );
      case 6:
        return a === null && ms(r), null;
      case 13:
        return Kh(a, r, i);
      case 4:
        return (
          Ss(r, r.stateNode.containerInfo),
          (u = r.pendingProps),
          a === null ? (r.child = lr(r, null, u, i)) : vn(a, r, u, i),
          r.child
        );
      case 11:
        return (
          (u = r.type),
          (c = r.pendingProps),
          (c = r.elementType === u ? c : ta(u, c)),
          Fh(a, r, u, c, i)
        );
      case 7:
        return vn(a, r, r.pendingProps, i), r.child;
      case 8:
        return vn(a, r, r.pendingProps.children, i), r.child;
      case 12:
        return vn(a, r, r.pendingProps.children, i), r.child;
      case 10:
        e: {
          if (
            ((u = r.type._context),
            (c = r.pendingProps),
            (h = r.memoizedProps),
            (p = c.value),
            Ce(dl, u._currentValue),
            (u._currentValue = p),
            h !== null)
          )
            if (oa(h.value, p)) {
              if (h.children === c.children && !Bn.current) {
                r = Aa(a, r, i);
                break e;
              }
            } else
              for (h = r.child, h !== null && (h.return = r); h !== null; ) {
                var C = h.dependencies;
                if (C !== null) {
                  p = h.child;
                  for (var k = C.firstContext; k !== null; ) {
                    if (k.context === u) {
                      if (h.tag === 1) {
                        (k = Wa(-1, i & -i)), (k.tag = 2);
                        var P = h.updateQueue;
                        if (P !== null) {
                          P = P.shared;
                          var A = P.pending;
                          A === null
                            ? (k.next = k)
                            : ((k.next = A.next), (A.next = k)),
                            (P.pending = k);
                        }
                      }
                      (h.lanes |= i),
                        (k = h.alternate),
                        k !== null && (k.lanes |= i),
                        Cs(h.return, i, r),
                        (C.lanes |= i);
                      break;
                    }
                    k = k.next;
                  }
                } else if (h.tag === 10) p = h.type === r.type ? null : h.child;
                else if (h.tag === 18) {
                  if (((p = h.return), p === null)) throw Error(o(341));
                  (p.lanes |= i),
                    (C = p.alternate),
                    C !== null && (C.lanes |= i),
                    Cs(p, i, r),
                    (p = h.sibling);
                } else p = h.child;
                if (p !== null) p.return = h;
                else
                  for (p = h; p !== null; ) {
                    if (p === r) {
                      p = null;
                      break;
                    }
                    if (((h = p.sibling), h !== null)) {
                      (h.return = p.return), (p = h);
                      break;
                    }
                    p = p.return;
                  }
                h = p;
              }
          vn(a, r, c.children, i), (r = r.child);
        }
        return r;
      case 9:
        return (
          (c = r.type),
          (u = r.pendingProps.children),
          sr(r, i),
          (c = Un(c)),
          (u = u(c)),
          (r.flags |= 1),
          vn(a, r, u, i),
          r.child
        );
      case 14:
        return (
          (u = r.type),
          (c = ta(u, r.pendingProps)),
          (c = ta(u.type, c)),
          Dh(a, r, u, c, i)
        );
      case 15:
        return Th(a, r, r.type, r.pendingProps, i);
      case 17:
        return (
          (u = r.type),
          (c = r.pendingProps),
          (c = r.elementType === u ? c : ta(u, c)),
          Sl(a, r),
          (r.tag = 1),
          Pn(u) ? ((a = !0), rl(r)) : (a = !1),
          sr(r, i),
          Lh(r, u, c),
          Fs(r, u, c, i),
          xs(null, r, u, !0, a, i)
        );
      case 19:
        return zh(a, r, i);
      case 22:
        return Oh(a, r, i);
    }
    throw Error(o(156, r.tag));
  };
  function pg(a, r) {
    return Ud(a, r);
  }
  function Tv(a, r, i, u) {
    (this.tag = a),
      (this.key = i),
      (this.sibling =
        this.child =
        this.return =
        this.stateNode =
        this.type =
        this.elementType =
          null),
      (this.index = 0),
      (this.ref = null),
      (this.pendingProps = r),
      (this.dependencies =
        this.memoizedState =
        this.updateQueue =
        this.memoizedProps =
          null),
      (this.mode = u),
      (this.subtreeFlags = this.flags = 0),
      (this.deletions = null),
      (this.childLanes = this.lanes = 0),
      (this.alternate = null);
  }
  function Qn(a, r, i, u) {
    return new Tv(a, r, i, u);
  }
  function tu(a) {
    return (a = a.prototype), !(!a || !a.isReactComponent);
  }
  function Ov(a) {
    if (typeof a == "function") return tu(a) ? 1 : 0;
    if (a != null) {
      if (((a = a.$$typeof), a === bn)) return 11;
      if (a === sn) return 14;
    }
    return 2;
  }
  function io(a, r) {
    var i = a.alternate;
    return (
      i === null
        ? ((i = Qn(a.tag, r, a.key, a.mode)),
          (i.elementType = a.elementType),
          (i.type = a.type),
          (i.stateNode = a.stateNode),
          (i.alternate = a),
          (a.alternate = i))
        : ((i.pendingProps = r),
          (i.type = a.type),
          (i.flags = 0),
          (i.subtreeFlags = 0),
          (i.deletions = null)),
      (i.flags = a.flags & 14680064),
      (i.childLanes = a.childLanes),
      (i.lanes = a.lanes),
      (i.child = a.child),
      (i.memoizedProps = a.memoizedProps),
      (i.memoizedState = a.memoizedState),
      (i.updateQueue = a.updateQueue),
      (r = a.dependencies),
      (i.dependencies =
        r === null ? null : { lanes: r.lanes, firstContext: r.firstContext }),
      (i.sibling = a.sibling),
      (i.index = a.index),
      (i.ref = a.ref),
      i
    );
  }
  function Nl(a, r, i, u, c, h) {
    var p = 2;
    if (((u = a), typeof a == "function")) tu(a) && (p = 1);
    else if (typeof a == "string") p = 5;
    else
      e: switch (a) {
        case je:
          return Go(i.children, c, h, r);
        case ln:
          (p = 8), (c |= 8);
          break;
        case zn:
          return (
            (a = Qn(12, i, r, c | 2)), (a.elementType = zn), (a.lanes = h), a
          );
        case en:
          return (a = Qn(13, i, r, c)), (a.elementType = en), (a.lanes = h), a;
        case Mn:
          return (a = Qn(19, i, r, c)), (a.elementType = Mn), (a.lanes = h), a;
        case Ne:
          return El(i, c, h, r);
        default:
          if (typeof a == "object" && a !== null)
            switch (a.$$typeof) {
              case te:
                p = 10;
                break e;
              case fn:
                p = 9;
                break e;
              case bn:
                p = 11;
                break e;
              case sn:
                p = 14;
                break e;
              case nn:
                (p = 16), (u = null);
                break e;
            }
          throw Error(o(130, a == null ? a : typeof a, ""));
      }
    return (
      (r = Qn(p, i, r, c)), (r.elementType = a), (r.type = u), (r.lanes = h), r
    );
  }
  function Go(a, r, i, u) {
    return (a = Qn(7, a, u, r)), (a.lanes = i), a;
  }
  function El(a, r, i, u) {
    return (
      (a = Qn(22, a, u, r)),
      (a.elementType = Ne),
      (a.lanes = i),
      (a.stateNode = { isHidden: !1 }),
      a
    );
  }
  function lu(a, r, i) {
    return (a = Qn(6, a, null, r)), (a.lanes = i), a;
  }
  function iu(a, r, i) {
    return (
      (r = Qn(4, a.children !== null ? a.children : [], a.key, r)),
      (r.lanes = i),
      (r.stateNode = {
        containerInfo: a.containerInfo,
        pendingChildren: null,
        implementation: a.implementation,
      }),
      r
    );
  }
  function xv(a, r, i, u, c) {
    (this.tag = r),
      (this.containerInfo = a),
      (this.finishedWork =
        this.pingCache =
        this.current =
        this.pendingChildren =
          null),
      (this.timeoutHandle = -1),
      (this.callbackNode = this.pendingContext = this.context = null),
      (this.callbackPriority = 0),
      (this.eventTimes = Ei(0)),
      (this.expirationTimes = Ei(-1)),
      (this.entangledLanes =
        this.finishedLanes =
        this.mutableReadLanes =
        this.expiredLanes =
        this.pingedLanes =
        this.suspendedLanes =
        this.pendingLanes =
          0),
      (this.entanglements = Ei(0)),
      (this.identifierPrefix = u),
      (this.onRecoverableError = c),
      (this.mutableSourceEagerHydrationData = null);
  }
  function su(a, r, i, u, c, h, p, C, k) {
    return (
      (a = new xv(a, r, i, C, k)),
      r === 1 ? ((r = 1), h === !0 && (r |= 8)) : (r = 0),
      (h = Qn(3, null, null, r)),
      (a.current = h),
      (h.stateNode = a),
      (h.memoizedState = {
        element: u,
        isDehydrated: i,
        cache: null,
        transitions: null,
        pendingSuspenseBoundaries: null,
      }),
      ws(h),
      a
    );
  }
  function Vv(a, r, i) {
    var u =
      3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
    return {
      $$typeof: Ke,
      key: u == null ? null : "" + u,
      children: a,
      containerInfo: r,
      implementation: i,
    };
  }
  function yg(a) {
    if (!a) return Za;
    a = a._reactInternals;
    e: {
      if (Co(a) !== a || a.tag !== 1) throw Error(o(170));
      var r = a;
      do {
        switch (r.tag) {
          case 3:
            r = r.stateNode.context;
            break e;
          case 1:
            if (Pn(r.type)) {
              r = r.stateNode.__reactInternalMemoizedMergedChildContext;
              break e;
            }
        }
        r = r.return;
      } while (r !== null);
      throw Error(o(171));
    }
    if (a.tag === 1) {
      var i = a.type;
      if (Pn(i)) return Jc(a, i, r);
    }
    return r;
  }
  function fg(a, r, i, u, c, h, p, C, k) {
    return (
      (a = su(i, u, !0, a, c, h, p, C, k)),
      (a.context = yg(null)),
      (i = a.current),
      (u = Cn()),
      (c = to(i)),
      (h = Wa(u, c)),
      (h.callback = r != null ? r : null),
      no(i, h, c),
      (a.current.lanes = c),
      Dr(a, c, u),
      Wn(a, u),
      a
    );
  }
  function Fl(a, r, i, u) {
    var c = r.current,
      h = Cn(),
      p = to(c);
    return (
      (i = yg(i)),
      r.context === null ? (r.context = i) : (r.pendingContext = i),
      (r = Wa(h, p)),
      (r.payload = { element: a }),
      (u = u === void 0 ? null : u),
      u !== null && (r.callback = u),
      (a = no(c, r, p)),
      a !== null && (sa(a, c, p, h), hl(a, c, p)),
      p
    );
  }
  function Dl(a) {
    if (((a = a.current), !a.child)) return null;
    switch (a.child.tag) {
      case 5:
        return a.child.stateNode;
      default:
        return a.child.stateNode;
    }
  }
  function vg(a, r) {
    if (((a = a.memoizedState), a !== null && a.dehydrated !== null)) {
      var i = a.retryLane;
      a.retryLane = i !== 0 && i < r ? i : r;
    }
  }
  function uu(a, r) {
    vg(a, r), (a = a.alternate) && vg(a, r);
  }
  var Cg =
    typeof reportError == "function"
      ? reportError
      : function (a) {
          console.error(a);
        };
  function du(a) {
    this._internalRoot = a;
  }
  (Tl.prototype.render = du.prototype.render =
    function (a) {
      var r = this._internalRoot;
      if (r === null) throw Error(o(409));
      Fl(a, r, null, null);
    }),
    (Tl.prototype.unmount = du.prototype.unmount =
      function () {
        var a = this._internalRoot;
        if (a !== null) {
          this._internalRoot = null;
          var r = a.containerInfo;
          Lo(function () {
            Fl(null, a, null, null);
          }),
            (r[Ma] = null);
        }
      });
  function Tl(a) {
    this._internalRoot = a;
  }
  Tl.prototype.unstable_scheduleHydration = function (a) {
    if (a) {
      var r = ac();
      a = { blockedOn: null, target: a, priority: r };
      for (var i = 0; i < $a.length && r !== 0 && r < $a[i].priority; i++);
      $a.splice(i, 0, a), i === 0 && tc(a);
    }
  };
  function cu(a) {
    return !(!a || (a.nodeType !== 1 && a.nodeType !== 9 && a.nodeType !== 11));
  }
  function Ol(a) {
    return !(
      !a ||
      (a.nodeType !== 1 &&
        a.nodeType !== 9 &&
        a.nodeType !== 11 &&
        (a.nodeType !== 8 || a.nodeValue !== " react-mount-point-unstable "))
    );
  }
  function kg() {}
  function Iv(a, r, i, u, c) {
    if (c) {
      if (typeof u == "function") {
        var h = u;
        u = function () {
          var P = Dl(p);
          h.call(P);
        };
      }
      var p = fg(r, u, a, 0, null, !1, !1, "", kg);
      return (
        (a._reactRootContainer = p),
        (a[Ma] = p.current),
        Yr(a.nodeType === 8 ? a.parentNode : a),
        Lo(),
        p
      );
    }
    for (; (c = a.lastChild); ) a.removeChild(c);
    if (typeof u == "function") {
      var C = u;
      u = function () {
        var P = Dl(k);
        C.call(P);
      };
    }
    var k = su(a, 0, !1, null, null, !1, !1, "", kg);
    return (
      (a._reactRootContainer = k),
      (a[Ma] = k.current),
      Yr(a.nodeType === 8 ? a.parentNode : a),
      Lo(function () {
        Fl(r, k, i, u);
      }),
      k
    );
  }
  function xl(a, r, i, u, c) {
    var h = i._reactRootContainer;
    if (h) {
      var p = h;
      if (typeof c == "function") {
        var C = c;
        c = function () {
          var k = Dl(p);
          C.call(k);
        };
      }
      Fl(r, p, a, c);
    } else p = Iv(i, r, a, c, u);
    return Dl(p);
  }
  (ec = function (a) {
    switch (a.tag) {
      case 3:
        var r = a.stateNode;
        if (r.current.memoizedState.isDehydrated) {
          var i = Fr(r.pendingLanes);
          i !== 0 &&
            (Fi(r, i | 1), Wn(r, Fe()), !(le & 6) && ((gr = Fe() + 500), Xa()));
        }
        break;
      case 13:
        Lo(function () {
          var u = La(a, 1);
          if (u !== null) {
            var c = Cn();
            sa(u, a, 1, c);
          }
        }),
          uu(a, 1);
    }
  }),
    (Di = function (a) {
      if (a.tag === 13) {
        var r = La(a, 134217728);
        if (r !== null) {
          var i = Cn();
          sa(r, a, 134217728, i);
        }
        uu(a, 134217728);
      }
    }),
    (nc = function (a) {
      if (a.tag === 13) {
        var r = to(a),
          i = La(a, r);
        if (i !== null) {
          var u = Cn();
          sa(i, a, r, u);
        }
        uu(a, r);
      }
    }),
    (ac = function () {
      return pe;
    }),
    (oc = function (a, r) {
      var i = pe;
      try {
        return (pe = a), r();
      } finally {
        pe = i;
      }
    }),
    (Li = function (a, r, i) {
      switch (r) {
        case "input":
          if ((ki(a, i), (r = i.name), i.type === "radio" && r != null)) {
            for (i = a; i.parentNode; ) i = i.parentNode;
            for (
              i = i.querySelectorAll(
                "input[name=" + JSON.stringify("" + r) + '][type="radio"]'
              ),
                r = 0;
              r < i.length;
              r++
            ) {
              var u = i[r];
              if (u !== a && u.form === a.form) {
                var c = al(u);
                if (!c) throw Error(o(90));
                Hd(u), ki(u, c);
              }
            }
          }
          break;
        case "textarea":
          Rd(a, i);
          break;
        case "select":
          (r = i.value), r != null && Jo(a, !!i.multiple, r, !1);
      }
    }),
    (Id = au),
    (_d = Lo);
  var _v = { usingClientEntryPoint: !1, Events: [Xr, er, al, xd, Vd, au] },
    gt = {
      findFiberByHostInstance: ko,
      bundleType: 0,
      version: "18.3.1",
      rendererPackageName: "react-dom",
    },
    Kv = {
      bundleType: gt.bundleType,
      version: gt.version,
      rendererPackageName: gt.rendererPackageName,
      rendererConfig: gt.rendererConfig,
      overrideHookState: null,
      overrideHookStateDeletePath: null,
      overrideHookStateRenamePath: null,
      overrideProps: null,
      overridePropsDeletePath: null,
      overridePropsRenamePath: null,
      setErrorHandler: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: Oe.ReactCurrentDispatcher,
      findHostInstanceByFiber: function (a) {
        return (a = jd(a)), a === null ? null : a.stateNode;
      },
      findFiberByHostInstance: gt.findFiberByHostInstance,
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null,
      reconcilerVersion: "18.3.1-next-f1338f8080-20240426",
    };
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ != "undefined") {
    var Vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!Vl.isDisabled && Vl.supportsFiber)
      try {
        (Tt = Vl.inject(Kv)), (ya = Vl);
      } catch (a) {}
  }
  return (
    (An.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _v),
    (An.createPortal = function (a, r) {
      var i =
        2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
      if (!cu(r)) throw Error(o(200));
      return Vv(a, r, null, i);
    }),
    (An.createRoot = function (a, r) {
      if (!cu(a)) throw Error(o(299));
      var i = !1,
        u = "",
        c = Cg;
      return (
        r != null &&
          (r.unstable_strictMode === !0 && (i = !0),
          r.identifierPrefix !== void 0 && (u = r.identifierPrefix),
          r.onRecoverableError !== void 0 && (c = r.onRecoverableError)),
        (r = su(a, 1, !1, null, null, i, !1, u, c)),
        (a[Ma] = r.current),
        Yr(a.nodeType === 8 ? a.parentNode : a),
        new du(r)
      );
    }),
    (An.findDOMNode = function (a) {
      if (a == null) return null;
      if (a.nodeType === 1) return a;
      var r = a._reactInternals;
      if (r === void 0)
        throw typeof a.render == "function"
          ? Error(o(188))
          : ((a = Object.keys(a).join(",")), Error(o(268, a)));
      return (a = jd(r)), (a = a === null ? null : a.stateNode), a;
    }),
    (An.flushSync = function (a) {
      return Lo(a);
    }),
    (An.hydrate = function (a, r, i) {
      if (!Ol(r)) throw Error(o(200));
      return xl(null, a, r, !0, i);
    }),
    (An.hydrateRoot = function (a, r, i) {
      if (!cu(a)) throw Error(o(405));
      var u = (i != null && i.hydratedSources) || null,
        c = !1,
        h = "",
        p = Cg;
      if (
        (i != null &&
          (i.unstable_strictMode === !0 && (c = !0),
          i.identifierPrefix !== void 0 && (h = i.identifierPrefix),
          i.onRecoverableError !== void 0 && (p = i.onRecoverableError)),
        (r = fg(r, null, a, 1, i != null ? i : null, c, !1, h, p)),
        (a[Ma] = r.current),
        Yr(a),
        u)
      )
        for (a = 0; a < u.length; a++)
          (i = u[a]),
            (c = i._getVersion),
            (c = c(i._source)),
            r.mutableSourceEagerHydrationData == null
              ? (r.mutableSourceEagerHydrationData = [i, c])
              : r.mutableSourceEagerHydrationData.push(i, c);
      return new Tl(r);
    }),
    (An.render = function (a, r, i) {
      if (!Ol(r)) throw Error(o(200));
      return xl(null, a, r, !1, i);
    }),
    (An.unmountComponentAtNode = function (a) {
      if (!Ol(a)) throw Error(o(40));
      return a._reactRootContainer
        ? (Lo(function () {
            xl(null, null, a, !1, function () {
              (a._reactRootContainer = null), (a[Ma] = null);
            });
          }),
          !0)
        : !1;
    }),
    (An.unstable_batchedUpdates = au),
    (An.unstable_renderSubtreeIntoContainer = function (a, r, i, u) {
      if (!Ol(i)) throw Error(o(200));
      if (a == null || a._reactInternals === void 0) throw Error(o(38));
      return xl(a, r, i, !1, u);
    }),
    (An.version = "18.3.1-next-f1338f8080-20240426"),
    An
  );
}
var zp;
function u_() {
  if (zp) return Du.exports;
  zp = 1;
  function e() {
    if (
      !(
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ == "undefined" ||
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"
      )
    )
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e);
      } catch (n) {
        console.error(n);
      }
  }
  return e(), (Du.exports = s_()), Du.exports;
}

function injectDarkModeStyles() {
  const style = document.createElement("style");
  style.innerHTML = `
    @keyframes zoomIn {
      0% {
        transform: scale(0.8);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }
    
    @keyframes fadeInUp {
      0% {
        transform: translateY(20px);
        opacity: 0;
      }
      100% {
        transform: translateY(0);
        opacity: 1;
      }
    }
    
    @keyframes fadeIn {
      0% {
        opacity: 0;
      }
      100% {
        opacity: 1;
      }
    }
    
    @keyframes slideIn {
      0% {
        transform: translateX(-20px);
        opacity: 0;
      }
      100% {
        transform: translateX(0);
        opacity: 1;
      }
    }
  `;
  document.head.appendChild(style);
}

// ✅ Inject styles only once
if (!document.getElementById("dark-mode-style")) {
  injectDarkModeStyles();
}



var d_ = u_();
const vt = Bt(d_),
c_ = ({
  isVisible: e,
  originalQuery: n,
  message: o,
  masked_entities = {}, // ✅ Added masked_entities
  onProceed: t,
  onBackToEditing: l,
  onClose: s,
}) => {
  const [d, g] = To.useState(!0),
    [m, y] = To.useState("tab1"),
    [f, v] = To.useState(""),
    [M, G] = To.useState(1);
  if (!e) return null;

  const ae = chrome.runtime.getURL("../image.png"),
    Y = (We) => {
      y(We), G(1);
    },
    U = () => {
      M === 1 ? G(2) : t(!d);
    };

    return x.createElement(
      "div",
      {
        className:
          "fixed inset-0 flex items-center justify-center bg-white bg-opacity-50 z-50 backdrop-blur-md",
        style: { animation: "zoomIn 1s ease-in-out" }, // ✅ Smooth zoom-in animation
      },
      x.createElement(
        "div",
        {
          className:
            "bg-white w-full max-w-3xl rounded-lg shadow-xl p-6 relative border border-black",
          style: {
            animation: "fadeInUp 0.7s ease-in-out", // ✅ Smooth fade-in from below
          },
        },
    
        /* Header Section */
        x.createElement(
          "div",
          { className: "flex justify-between items-center mb-4" },
          x.createElement(
            "div",
            { className: "flex items-center" },
            x.createElement("img", {
              src: ae,
              alt: "icon",
              className: "w-8 h-8 mr-3 rounded-full",
            }),
            x.createElement(
              "h2",
              { className: "text-2xl font-bold text-black tracking-wide" },
              "Secure Sense - Sensitive Data Found"
            )
          ),
          x.createElement(
            "button",
            {
              onClick: s,
              className:
                "text-black hover:text-red-500 transition transform hover:scale-110",
            },
            x.createElement(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                className: "h-6 w-6",
                fill: "none",
                viewBox: "0 0 24 24",
                stroke: "currentColor",
              },
              x.createElement("path", {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "2",
                d: "M6 18L18 6M6 6l12 12",
              })
            )
          )
        ),
    
        /* Masked Entities Section - ✅ Glassmorphism effect */
        x.createElement(
          "div",
          {
            className:
              "bg-white p-4 rounded-lg shadow-inner mb-4 border border-black",
            style: { animation: "fadeIn 1.25s ease-in-out", backdropFilter: "blur(5px)" }, // ✅ Blur effect
          },
          x.createElement(
            "p",
            { className: "text-black text-sm font-bold mb-2 uppercase tracking-wide" },
            "SENSITIVE INFORMATION DETECTED:"
          ),
          x.createElement(
            "div",
            { className: "flex flex-wrap gap-2" ,
              style:{
                maxHeight : "5.5rem",
                overflow:"auto",
              },

            },
            Object.entries(masked_entities).map(([key, value], index) =>
              x.createElement(
                "div",
                {
                  className:
                    "bg-white text-black text-sm font-semibold px-4 py-2 rounded-full shadow-md border border-black",
                  title: value,
                  style: {
                    animation: `slideIn 1.75s ease-in-out ${index * 0.3}s forwards`, // ✅ Show text one by one
                    opacity: 0,
                  },
                },
                `${value}`
              )
            )
          )
        ),
    
        /* Message Section - ✅ Fades in */
        x.createElement(
          "p",
          {
            className: "text-black mb-4 text-center leading-relaxed",
            style: { animation: "fadeIn 2s ease-in-out" },
          },
          "Secure Sense detected sensitive data in your input. Your organization requires you to review this data before submitting it."
        ),
    
        /* Buttons - ✅ Perfect hover and border styles */
        x.createElement(
          "div",
          null,
          x.createElement(
            "div",
            {
              className: "flex justify-end gap-3",
              style: { animation: "fadeInUp 3s ease-in-out" },
            },
            x.createElement(
              "button",
              {
                className:
                  "px-4 py-2 text-gray-800 rounded-lg border border-gray-500 transition transform hover:scale-105 hover:bg-gray-100",
                onClick: l,
              },
              "Back to Editing"
            ),
            x.createElement(
              "button",
              {
                className:
                  "px-4 py-2 bg-blue-600 text-white rounded-lg shadow-md hover:bg-blue-500 focus:outline-none transition transform hover:scale-105",
                onClick: () => t(d),
              },
              "Submit Redacted Text"
            )
          )
        )
      )
    );
    
    
    
    
},
h_ = ({ open: e, handleClose: n }) =>
  x.createElement(
    x.Fragment,
    null,
    e &&
      x.createElement(
        "div",
        {
          className:
            "fixed inset-0 bg-white bg-opacity-50 flex items-center justify-center z-50 backdrop-blur-md",
          style: { animation: "zoomIn 1s ease-in-out", backdropFilter: "blur(5px)" },
        },
        x.createElement(
          "div",
          {
            className:
              "bg-white w-11/12 max-w-md rounded-lg shadow-lg p-6 border border-black relative",
            style: { animation: "fadeInUp 0.7s ease-in-out" },
          },
          // Close button at top right
          x.createElement(
            "button",
            {
              onClick: n,
              className:
                "absolute top-4 right-4 text-black hover:text-red-500 transition transform hover:scale-110 focus:outline-none",
            },
            "×"
          ),
          x.createElement(
            "div",
            {
              className: "flex items-center gap-2 text-red-600 mb-4",
              style: { animation: "fadeIn 1.25s ease-in-out" },
            },
            x.createElement(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                className: "h-6 w-6",
                fill: "none",
                viewBox: "0 0 24 24",
                stroke: "currentColor",
                strokeWidth: 2,
              },
              x.createElement("path", {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                d: "M18.364 5.636a9 9 0 11-12.728 0 9 9 0 0112.728 0zM12 9v4m0 4h.01",
              })
            ),
            x.createElement(
              "h2",
              { className: "text-lg font-bold text-black" },
              "Blocked"
            )
          ),
          x.createElement(
            "p",
            {
              className: "text-black mb-6",
              style: { animation: "fadeIn 2s ease-in-out" },
            },
            "Your access to this feature has been restricted due to policy violations or other reasons. If you believe this is a mistake, please contact support."
          ),
          x.createElement(
            "div",
            {
              className: "flex flex-col gap-2",
              style: { animation: "fadeInUp 3s ease-in-out" },
            },
            x.createElement(
              "button",
              {
                onClick: () => alert("Contact Support"),
                className:
                  "bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-500 transition transform hover:scale-105 focus:outline-none shadow-md",
              },
              "Contact Support"
            ),
            x.createElement(
              "button",
              {
                onClick: () => alert("Learn More"),
                className:
                  "border border-black text-black px-4 py-2 rounded hover:bg-gray-100 transition transform hover:scale-105 shadow-md",
              },
              "Learn More"
            )
          )
        )
      )
  );

  g_ = ({ open: e, onClose: n, handleSubmit: o }) => {
    const t = chrome.runtime.getURL("../image.png"),
      [l, s] = To.useState({ username: "", password: "", remember: !1 }),
      d = (m) => {
        const { name: y, value: f, type: v, checked: M } = m.target;
        s((G) => Mg(bg({}, G), { [y]: v === "checkbox" ? M : f }));
      },
      g = To.useCallback(() => {
        o(l), n();
      }, [l, o, n]);
    return x.createElement(
      "div",
      {
        style: {
          position: "fixed",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: "rgba(0, 0, 0, 0.5)",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          zIndex: 9999,
        },
      },
      x.createElement(
        "div",
        {
          style: {
            background: "white",
            padding: "20px",
            borderRadius: "8px",
            width: "100%",
            maxWidth: "400px",
            boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
            display: "flex",
            flexDirection: "column",
          },
        },
        x.createElement(
          "div",
          {
            className: "container px-1 pb-1 flex items-center justify-between",
          },
          x.createElement(
            "a",
            {
              className: "flex items-center",
              href: "https://www.thesecurealley.com/",
              target: "_blank",
              rel: "noopener noreferrer",
            },
            x.createElement("img", {
              src: t,
              alt: "Secure Logo",
              className: "w-8 h-8 mr-3",
            }),
            x.createElement(
              "span",
              { className: "text-md font-bold text-gray-800" },
              "Secure Sense"
            )
          )
        ),
        x.createElement(
          "div",
          { className: "container flex flex-col text-sm px-6 mb-4" },
          x.createElement(
            "form",
            { className: "container flex flex-col space-y-4" },
            x.createElement(
              "div",
              {
                className:
                  "container text-center font-bold text-lg text-gray-600 pt-6 pb-2",
              },
              "Welcome to Secure Sense"
            ),
            x.createElement("input", {
              type: "text",
              name: "username",
              value: l.username,
              placeholder: "Username",
              className:
                "border rounded text-black placeholder:text-gray-600 w-full",
              required: !0,
              onChange: d,
            }),
            x.createElement("input", {
              type: "password",
              name: "password",
              value: l.password,
              placeholder: "Password",
              className:
                "border rounded text-black placeholder:text-gray-600 w-full",
              required: !0,
              onChange: d,
            }),
            x.createElement(
              "div",
              { className: "container flex items-center gap-2" },
              x.createElement("input", {
                type: "checkbox",
                name: "remember",
                checked: l.remember,
                className: "border rounded px-2 py-1",
                onChange: d,
              }),
              x.createElement(
                "label",
                { htmlFor: "remember", className: "text-gray-600" },
                "Remember me"
              )
            ),
            x.createElement(
              "button",
              {
                type: "submit",
                className: "bg-blue-500 text-white rounded px-4 py-2 w-full ",
                onClick: g,
              },
              "Sign In"
            )
          )
        ),
        x.createElement(
          "div",
          {
            className:
              "container text-blue-500 grid px-2 py-2 items-center text-center text-xs",
          },
          "By signing in, you agree to our Terms & Conditions and Privacy Policy"
        )
      )
    );
  };
let _n = { textarea: null, button: null };
function zy(e) {
  return gn(this, null, function* () {
    yield new Promise((n) => {
      setTimeout(n, e);
    });
  });
}
function jy() {
  return gn(this, null, function* () {
    const e = document.getElementById("prompt-textarea"),
      n = document.querySelector('button[aria-label="Send prompt"]');
    return e !== null && n !== null
      ? { textarea: e, button: n }
      : (yield zy($p), yield jy());
  });
}
function $y(e) {
  chrome.runtime.sendMessage({ detections: e });
}
const m_ = ({
  isVisible: e,
  maskedInput: n,
  message: o,
  masked_entities: h, // ✅ Added masked_entities
  onProceed: t,
  onBackToEditing: l,
}) =>
  x.createElement(c_, {
    isVisible: e,
    originalQuery: o,
    message: n,
    masked_entities: h, // ✅ Pass masked_entities
    onProceed: t,
    onBackToEditing: l,
    onClose: l,
  });
  function ud(e) {
    return gn(this, null, function* () {
      const {
          response: n = {
            masked_input: "",
            is_sensitive: !1,
            original_input: "",
            blocked_labels_found: [],
            to_block: !1,
            masked_entities: {}, // ✅ Added masked_entities
          },
          success: o = !1,
        } = e,
        {
          masked_input: t = "",
          is_sensitive: l = !1,
          original_input: s = "",
          blocked_labels_found: d = [],
          to_block: g = !1,
          masked_entities: h = {}, // ✅ Extract masked_entities
        } = n;
      return l && !g
        ? new Promise((m) => {
            const y = (G) => {
                M(), m(G ? t : s);
              },
              f = () => {
                M(), m(!1);
              },
              v = document.createElement("div");
            document.body.appendChild(v);
            const M = () => {
              vt.unmountComponentAtNode(v), document.body.removeChild(v);
            };
            vt.render(
              x.createElement(m_, {
                isVisible: !0,
                maskedInput: t,
                message: s,
                masked_entities: h, // ✅ Pass masked_entities
                onProceed: y,
                onBackToEditing: f,
              }),
              v
            );
          })
        : g
        ? new Promise((m) => {
            const y = () => {
                v(), m(!1);
              },
              f = document.createElement("div");
            document.body.appendChild(f);
            const v = () => {
              vt.unmountComponentAtNode(f), document.body.removeChild(f);
            };
            vt.render(x.createElement(h_, { open: !0, handleClose: y }), f);
          })
        : o
        ? s
        : s
    });
  }
  
chrome.storage.onChanged.addListener(function () {
  gn(this, null, function* () {
    if (_n.textarea !== null) {
      const e = yield Pd(_n.textarea);
      $y(e);
    }
  });
});
chrome.runtime.onMessage.addListener((e, n, o) => {
  function t() {
    return gn(this, null, function* () {
      const l = yield Pd(_n.textarea);
      console.log(l, "from message listener"), o({ triggeredDetectors: l });
    });
  }
  if (_n.textarea !== null && e.triggeredDetectors !== void 0) return t(), !0;
});
function vi(e) {
  return gn(this, null, function* () {
    const n = document.querySelector('button[aria-label="Send prompt"]');
    return n !== null ? n : (yield zy($p), yield vi());
  });
}
function p_(e, n) {
  n == null ||
    n.addEventListener("click", (o) => {
      gn(this, null, function* () {
        if (o.isTrusted) {
          o.stopPropagation(), o.preventDefault();
          const t = e == null ? void 0 : e.innerText.trim();
          try {
            const l = yield new Promise((s, d) => {
              chrome.runtime.sendMessage(
                { type: "PROCESS_MESSAGE", message: t },
                (g) => {
                  chrome.runtime.lastError
                    ? d(new Error(chrome.runtime.lastError))
                    : s(g);
                }
              );
            });
            if (l) {
              const s = yield ud(l);
              if (s) {
                n = yield vi(e);
                const d = s;
                (e.textContent = d),
                  chrome.runtime.sendMessage({
                    type: "SEND_TO_CHATGPT",
                    input: d,
                  }),
                  !!(e != null && e.dataset.uploadedDocument) ||
                    (e != null &&
                      e.textContent.trim() &&
                      setTimeout(() => {
                        n == null || n.click();
                      }, 100)),
                  chrome.runtime.sendMessage({ detections: 0 });
              }
            }
          } catch (l) {
            console.error("Error during message processing:", l);
          }
        }
      })
    })
}
function y_(e, n) {
  const o = (t) =>
    gn(this, null, function* () {
      if (
        t.isTrusted &&
        t.code === "Enter" &&
        !t.shiftKey &&
        t.target.id === "prompt-textarea"
      ) {
        t.preventDefault(), t.stopImmediatePropagation();
        const s = e.innerText.trim();
        try {
          if (s) {
            const d = yield new Promise((g, m) => {
              chrome.runtime.sendMessage(
                { type: "PROCESS_MESSAGE", message: s },
                (y) => {
                  chrome.runtime.lastError
                    ? m(new Error(chrome.runtime.lastError.message))
                    : g(y);
                }
              );
            });
            if (d) {
              const g = yield ud(d);
              if (g) {
                n = yield vi(e);
                const m = g;
                (e.textContent = m),
                  chrome.runtime.sendMessage({
                    type: "SEND_TO_CHATGPT",
                    input: m,
                  }),
                  !!(e != null && e.dataset.uploadedDocument) ||
                    (e != null &&
                      e.textContent.trim() &&
                      setTimeout(() => {
                        n == null || n.click();
                      }, 100)),
                  chrome.runtime.sendMessage({ detections: 0 });
              }
            }
          }
        } catch (d) {
          console.error("Error in keydown handler:", d);
        }
      }
    });
  document.addEventListener("keydown", o, !0),
    e == null ||
      e.addEventListener("input", () => {
        gn(this, null, function* () {
          const t = yield Pd(e);
          $y(t);
        });
      }),
    n == null ||
      n.addEventListener("click", (t) => {
        gn(this, null, function* () {
          t.isTrusted &&
            (t.stopPropagation(),
            t.preventDefault(),
            (yield ud(e)) &&
              (n == null || n.click(),
              chrome.runtime.sendMessage({ detections: 0 })));
        });
      }),
    e.dataset.eventListeners ||
      (e.addEventListener("keydown", o),
      e.setAttribute("data-eventListeners", "true"),
      n.setAttribute("data-eventListeners", "true"));
}
function f_(e) {
  const n = { attributes: !1, childList: !0, subtree: !0 },
    o = (l, s) => {
      document.body.contains(e)
        ? document.body.contains(_n.button) ||
          gn(this, null, function* () {
            const d = yield vi();
            _n.button !== d && ((_n.button = d), p_(e, d));
          })
        : (s.disconnect(), chrome.runtime.sendMessage({ detections: 0 }), Uy());
    };
  new MutationObserver(o).observe(document.body, n);
}
let xu = !1;
function Uy() {
  return gn(this, null, function* () {
    var e, n;
    xu ||
      ((xu = !0),
      (_n = yield jy()),
      ((e = _n.textarea) == null ? void 0 : e.dataset.eventListeners) !==
        "true" &&
        ((n = _n.button) == null ? void 0 : n.dataset.eventListeners) !==
          "true" &&
        (y_(_n.textarea, _n.button), f_(_n.textarea)),
      (xu = !1));
  });
}
Uy();
